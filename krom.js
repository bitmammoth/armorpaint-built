// Generated by Haxe 4.0.0+c37e5ed23
(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
;$hx_exports["kha"]["_Color"] = $hx_exports["kha"]["_Color"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	Krom.setApplicationName("ArmorPaint");
	Main.tasks = 1;
	Main.tasks++;
	arm_Config.load(function() {
		Main.tasks--;
		Main.start();
	});
	Main.tasks--;
	Main.start();
};
Main.start = function() {
	if(Main.tasks > 0) {
		return;
	}
	arm_Config.init();
	var c = arm_Config.raw;
	var windowMode = c.window_mode == 0 ? 0 : 1;
	var windowFeatures = 0;
	if(c.window_resizable) {
		windowFeatures = windowFeatures | 1;
	}
	if(c.window_maximizable) {
		windowFeatures = windowFeatures | 4;
	}
	if(c.window_minimizable) {
		windowFeatures = windowFeatures | 2;
	}
	var title = "untitled - ArmorPaint";
	var options = new kha_SystemOptions(title,null,null,new kha_WindowOptions(null,c.window_x,c.window_y,c.window_w,c.window_h,null,null,windowFeatures,windowMode),new kha_FramebufferOptions(null,c.window_vsync,null,null,null,1));
	kha_System.start(options,function($window) {
		Krom.setApplicationName("ArmorPaint");
		iron_App.init(function() {
			iron_Scene.setActive("Scene",function(o) {
				arm_render_Uniforms.init();
				var path = new iron_RenderPath();
				arm_render_Inc.init(path);
				arm_render_RenderPathDeferred.init(path);
				path.commands = arm_render_RenderPathDeferred.commands;
				iron_RenderPath.setActive(path);
				new arm_App();
			});
		});
	});
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.is = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
var zui_Handle = function(ops) {
	this.changed = false;
	this.dragY = 0;
	this.dragX = 0;
	this.dragEnabled = false;
	this.lastMaxY = 0.0;
	this.lastMaxX = 0.0;
	this.layout = 0;
	this.scrollEnabled = false;
	this.scrollOffset = 0.0;
	this.redraws = 2;
	this.texture = null;
	this.text = "";
	this.value = 0.0;
	this.color = -1;
	this.position = 0;
	this.selected = false;
	if(ops != null) {
		if(ops.selected != null) {
			this.selected = ops.selected;
		}
		if(ops.position != null) {
			this.position = ops.position;
		}
		if(ops.value != null) {
			this.value = ops.value;
		}
		if(ops.text != null) {
			this.text = ops.text;
		}
		if(ops.color != null) {
			this.color = ops.color;
		}
		if(ops.layout != null) {
			this.layout = ops.layout;
		}
	}
};
$hxClasses["zui.Handle"] = zui_Handle;
zui_Handle.__name__ = "zui.Handle";
zui_Handle.prototype = {
	nest: function(i,ops) {
		if(this.children == null) {
			this.children = new haxe_ds_IntMap();
		}
		var c = this.children.h[i];
		if(c == null) {
			c = new zui_Handle(ops);
			this.children.h[i] = c;
		}
		return c;
	}
	,__class__: zui_Handle
};
var arm_App = function() {
	arm_Log.init();
	arm_App.lastWindowHeight = kha_System.windowHeight();
	iron_App.onResize = arm_App.onResize;
	kha_System.notifyOnDropFiles(function(dropPath) {
		dropPath = StringTools.rtrim(dropPath);
		arm_App.dropPaths.push(dropPath);
	});
	kha_System.notifyOnApplicationState(function() {
	},function() {
	},function() {
	},function() {
		iron_system_Input.getKeyboard().upListener(18);
		iron_system_Input.getKeyboard().upListener(91);
	},function() {
	});
	Krom.setSaveAndQuitCallback(arm_App.saveAndQuitCallback);
	iron_data_Data.getFont("font.ttf",function(f) {
		iron_data_Data.getImage("color_wheel.k",function(image) {
			arm_App.font = f;
			arm_Translator.loadTranslations(arm_Config.raw.locale);
			arm_ui_UIFiles.filename = arm_Translator.tr("untitled");
			arm_App.theme = zui_Themes.dark;
			arm_App.theme.FILL_WINDOW_BG = true;
			if(arm_Config.raw.locale == "en") {
				var kimg = Object.create(kha_KravurImage.prototype);
				kimg.mySize = 13;
				kimg.width = 128;
				kimg.height = 128;
				kimg.baseline = 10;
				var this1 = new Array(arm_data_ConstData.font_x0.length);
				var chars = this1;
				var _g = [];
				var _g1 = 32;
				while(_g1 < 127) {
					var i = _g1++;
					_g.push(i);
				}
				kha_graphics2_Graphics.fontGlyphs = _g;
				var _g2 = 0;
				while(_g2 < 95) {
					var i1 = _g2++;
					chars[i1] = new kha_graphics2_truetype_Stbtt_$bakedchar();
				}
				var _g3 = 0;
				var _g4 = arm_data_ConstData.font_x0.length;
				while(_g3 < _g4) {
					var i2 = _g3++;
					chars[i2].x0 = arm_data_ConstData.font_x0[i2];
				}
				var _g5 = 0;
				var _g6 = arm_data_ConstData.font_y0.length;
				while(_g5 < _g6) {
					var i3 = _g5++;
					chars[i3].y0 = arm_data_ConstData.font_y0[i3];
				}
				var _g7 = 0;
				var _g8 = arm_data_ConstData.font_x1.length;
				while(_g7 < _g8) {
					var i4 = _g7++;
					chars[i4].x1 = arm_data_ConstData.font_x1[i4];
				}
				var _g9 = 0;
				var _g10 = arm_data_ConstData.font_y1.length;
				while(_g9 < _g10) {
					var i5 = _g9++;
					chars[i5].y1 = arm_data_ConstData.font_y1[i5];
				}
				var _g11 = 0;
				var _g12 = arm_data_ConstData.font_xoff.length;
				while(_g11 < _g12) {
					var i6 = _g11++;
					chars[i6].xoff = arm_data_ConstData.font_xoff[i6];
				}
				var _g13 = 0;
				var _g14 = arm_data_ConstData.font_yoff.length;
				while(_g13 < _g14) {
					var i7 = _g13++;
					chars[i7].yoff = arm_data_ConstData.font_yoff[i7];
				}
				var _g15 = 0;
				var _g16 = arm_data_ConstData.font_xadvance.length;
				while(_g15 < _g16) {
					var i8 = _g15++;
					chars[i8].xadvance = arm_data_ConstData.font_xadvance[i8];
				}
				kimg.chars = chars;
				iron_data_Data.getBlob("font13.bin",function(fontbin) {
					var tmp = fontbin.toBytes();
					kimg.texture = kha_Image.fromBytes(tmp,128,128,1);
					(js_Boot.__cast(arm_App.font , kha_Kravur)).images.h[130095] = kimg;
				});
			}
			arm_App.colorWheel = image;
			zui_Nodes.enumTexts = arm_App.enumTexts;
			arm_App.uiBox = new zui_Zui({ font : f, scaleFactor : arm_Config.raw.window_scale, color_wheel : arm_App.colorWheel});
			arm_App.uiMenu = new zui_Zui({ font : f, scaleFactor : arm_Config.raw.window_scale, color_wheel : arm_App.colorWheel});
			arm_App.defaultElementH = arm_App.uiMenu.t.ELEMENT_H;
			if(Krom.getArgCount() > 1) {
				var path = Krom.getArg(1);
				if(arm_sys_Path.isProject(path) || arm_sys_Path.isMesh(path) || arm_sys_Path.isTexture(path) || arm_sys_Path.isFont(path)) {
					arm_App.fileArg = path;
				}
			}
			iron_App.notifyOnUpdate(arm_App.update);
			new arm_ui_UISidebar();
			new arm_ui_UINodes();
			new arm_ui_UIView2D();
			new arm_plugin_Camera();
			iron_App.notifyOnRender2D(($_=arm_ui_UISidebar.inst,$bind($_,$_.renderCursor)));
			iron_App.notifyOnUpdate(($_=arm_ui_UINodes.inst,$bind($_,$_.update)));
			iron_App.notifyOnRender2D(($_=arm_ui_UINodes.inst,$bind($_,$_.render)));
			iron_App.notifyOnUpdate(($_=arm_ui_UISidebar.inst,$bind($_,$_.update)));
			iron_App.notifyOnRender2D(($_=arm_ui_UISidebar.inst,$bind($_,$_.render)));
			iron_App.notifyOnRender2D(arm_App.render);
			arm_App.appx = arm_ui_UIToolbar.inst.toolbarw;
			arm_App.appy = arm_ui_UIHeader.inst.headerh * 2;
			var cam = iron_Scene.active.camera;
			cam.data.raw.fov = (cam.data.raw.fov * 100 | 0) / 100;
			cam.buildProjection();
			if(arm_App.fileArg != "") {
				iron_App.notifyOnInit(function() {
					arm_io_ImportAsset.run(arm_App.fileArg,-1,-1,false);
					if(Krom.getArgCount() > 2) {
						arm_Context.textureExportPath = Krom.getArg(2);
						if(Krom.getArgCount() > 3) {
							arm_ui_UIFiles.filename = Krom.getArg(3);
						}
					}
				});
			}
			if(arm_Config.raw.theme != "dark.json") {
				arm_ui_BoxPreferences.loadTheme(arm_Config.raw.theme);
			}
		});
	});
};
$hxClasses["arm.App"] = arm_App;
arm_App.__name__ = "arm.App";
arm_App.saveAndQuitCallback = function(save) {
	arm_App.saveWindowRect();
	if(save) {
		arm_Project.projectSave(true);
	} else {
		kha_System.stop();
	}
};
arm_App.w = function() {
	if(arm_ui_UISidebar.inst != null && arm_Context.materialPreview) {
		return 256;
	}
	if(arm_ui_UISidebar.inst != null && arm_Context.decalPreview) {
		return 512;
	}
	var res = 0;
	if(arm_ui_UINodes.inst == null || arm_ui_UISidebar.inst == null) {
		res = kha_System.windowWidth() - arm_ui_UISidebar.defaultWindowW - 54;
	} else if(arm_ui_UINodes.inst.show || arm_ui_UIView2D.inst.show) {
		res = kha_System.windowWidth() - arm_ui_UISidebar.inst.windowW - arm_ui_UINodes.inst.defaultWindowW - arm_ui_UIToolbar.inst.toolbarw;
	} else if(arm_ui_UISidebar.inst.show) {
		res = kha_System.windowWidth() - arm_ui_UISidebar.inst.windowW - arm_ui_UIToolbar.inst.toolbarw;
	} else {
		res = kha_System.windowWidth();
	}
	if(arm_ui_UISidebar.inst != null && arm_Context.viewIndex > -1) {
		res = res / 2 | 0;
	}
	if(res > 0) {
		return res;
	} else {
		return 1;
	}
};
arm_App.h = function() {
	if(arm_ui_UISidebar.inst != null && arm_Context.materialPreview) {
		return 256;
	}
	if(arm_ui_UISidebar.inst != null && arm_Context.decalPreview) {
		return 512;
	}
	var res = kha_System.windowHeight();
	if(arm_ui_UISidebar.inst == null) {
		res -= 88;
	} else if(arm_ui_UISidebar.inst != null && arm_ui_UISidebar.inst.show && res > 0) {
		res -= (56 * arm_Config.raw.window_scale | 0) + arm_ui_UIStatus.inst.statush;
	}
	if(res > 0) {
		return res;
	} else {
		return 1;
	}
};
arm_App.x = function() {
	if(arm_Context.viewIndex == 1) {
		return arm_App.appx + arm_App.w();
	} else {
		return arm_App.appx;
	}
};
arm_App.y = function() {
	return arm_App.appy;
};
arm_App.onResize = function() {
	arm_App.resize();
	var ratio = kha_System.windowHeight() / arm_App.lastWindowHeight;
	arm_ui_UISidebar.inst.tabh = arm_ui_UISidebar.inst.tabh * ratio | 0;
	arm_ui_UISidebar.inst.tabh1 = arm_ui_UISidebar.inst.tabh1 * ratio | 0;
	var tmp = kha_System.windowHeight() - arm_ui_UISidebar.inst.tabh;
	arm_ui_UISidebar.inst.tabh2 = tmp - arm_ui_UISidebar.inst.tabh1;
	arm_App.lastWindowHeight = kha_System.windowHeight();
};
arm_App.saveWindowRect = function() {
	arm_Config.raw.window_w = kha_System.windowWidth();
	arm_Config.raw.window_h = kha_System.windowHeight();
	arm_Config.raw.window_x = kha_Window.get(0).get_x();
	arm_Config.raw.window_y = kha_Window.get(0).get_y();
	arm_Config.save();
};
arm_App.resize = function() {
	if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
		return;
	}
	var cam = iron_Scene.active.camera;
	if(cam.data.raw.ortho != null) {
		cam.data.raw.ortho[2] = -2 * (arm_App.h() / arm_App.w());
		cam.data.raw.ortho[3] = 2 * (arm_App.h() / arm_App.w());
	}
	cam.buildProjection();
	if(arm_Context.cameraType == 1) {
		arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
	}
	arm_Context.ddirty = 2;
	if(arm_ui_UISidebar.inst.show) {
		arm_App.appx = arm_ui_UIToolbar.inst.toolbarw;
		arm_App.appy = arm_ui_UIHeader.inst.headerh * 2;
	} else {
		arm_App.appx = 0;
		arm_App.appy = 0;
	}
	if(arm_ui_UINodes.inst.grid != null) {
		arm_ui_UINodes.inst.grid.unload();
		arm_ui_UINodes.inst.grid = null;
	}
	arm_App.redrawUI();
};
arm_App.redrawUI = function() {
	arm_ui_UISidebar.inst.hwnd.redraws = 2;
	arm_ui_UISidebar.inst.hwnd1.redraws = 2;
	arm_ui_UISidebar.inst.hwnd2.redraws = 2;
	arm_ui_UIHeader.inst.headerHandle.redraws = 2;
	arm_ui_UIToolbar.inst.toolbarHandle.redraws = 2;
	arm_ui_UIStatus.inst.statusHandle.redraws = 2;
	arm_ui_UIMenubar.inst.menuHandle.redraws = 2;
	arm_ui_UIMenubar.inst.workspaceHandle.redraws = 2;
	arm_ui_UINodes.inst.hwnd.redraws = 2;
	if(arm_Context.ddirty < 0) {
		arm_Context.ddirty = 0;
	}
};
arm_App.update = function() {
	var mouse = iron_system_Input.getMouse();
	if((arm_App.dragAsset != null || arm_App.dragMaterial != null || arm_App.dragLayer != null || arm_App.dragFile != null) && (mouse.movementX != 0 || mouse.movementY != 0)) {
		arm_App.isDragging = true;
	}
	if(mouse.released() && (arm_App.dragAsset != null || arm_App.dragMaterial != null || arm_App.dragLayer != null || arm_App.dragFile != null)) {
		var mx = mouse.x;
		var my = mouse.y;
		var inViewport = arm_Context.paintVec.x < 1 && arm_Context.paintVec.x > 0 && arm_Context.paintVec.y < 1 && arm_Context.paintVec.y > 0;
		var inLayers = arm_ui_UISidebar.inst.htab.position == 0 && mx > arm_ui_UISidebar.inst.tabx && my < arm_ui_UISidebar.inst.tabh;
		var in2dView = arm_ui_UIView2D.inst.show && arm_ui_UIView2D.inst.type == 0 && mx > arm_ui_UIView2D.inst.wx && mx < arm_ui_UIView2D.inst.wx + arm_ui_UIView2D.inst.ww && my > arm_ui_UIView2D.inst.wy && my < arm_ui_UIView2D.inst.wy + arm_ui_UIView2D.inst.wh;
		var inNodes = arm_ui_UINodes.inst.show && mx > arm_ui_UINodes.inst.wx && mx < arm_ui_UINodes.inst.wx + arm_ui_UINodes.inst.ww && my > arm_ui_UINodes.inst.wy && my < arm_ui_UINodes.inst.wy + arm_ui_UINodes.inst.wh;
		if(arm_App.dragAsset != null) {
			if(inNodes) {
				var index = 0;
				var _g = 0;
				var _g1 = arm_Project.assets.length;
				while(_g < _g1) {
					var i = _g++;
					if(arm_Project.assets[i] == arm_App.dragAsset) {
						index = i;
						break;
					}
				}
				arm_ui_UINodes.inst.acceptAssetDrag(index);
			} else if(inViewport || inLayers || in2dView) {
				arm_Layers.createImageMask(arm_App.dragAsset);
			}
			arm_App.dragAsset = null;
		} else if(arm_App.dragMaterial != null) {
			if(inViewport || inLayers || in2dView) {
				arm_Layers.createFillLayer();
			} else if(inNodes) {
				var index1 = 0;
				var _g2 = 0;
				var _g11 = arm_Project.materials.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					if(arm_Project.materials[i1] == arm_App.dragMaterial) {
						index1 = i1;
						break;
					}
				}
				arm_ui_UINodes.inst.acceptMaterialDrag(index1);
			}
			arm_App.dragMaterial = null;
		} else if(arm_App.dragLayer != null) {
			if(inNodes) {
				var index2 = 0;
				var _g3 = 0;
				var _g12 = arm_Project.layers.length;
				while(_g3 < _g12) {
					var i2 = _g3++;
					if(arm_Project.layers[i2] == arm_App.dragLayer) {
						index2 = i2;
						break;
					}
				}
				arm_ui_UINodes.inst.acceptLayerDrag(index2);
			} else if(inLayers && arm_App.isDragging) {
				HxOverrides.remove(arm_Project.layers,arm_App.dragLayer);
				arm_Project.layers.splice(arm_ui_TabLayers.dragDestination,0,arm_App.dragLayer);
				arm_node_MaterialParser.parseMeshMaterial();
			}
			arm_App.dragLayer = null;
		} else if(arm_App.dragFile != null) {
			var inBrowser = mx > arm_App.x() && mx < arm_App.x() + (kha_System.windowWidth() - arm_ui_UIToolbar.inst.toolbarw - arm_ui_UISidebar.inst.windowW) && my > kha_System.windowHeight() - arm_ui_UIStatus.inst.statush;
			if(!inBrowser) {
				arm_App.dropX = mouse.x;
				arm_App.dropY = mouse.y;
				arm_io_ImportAsset.run(arm_App.dragFile,arm_App.dropX,arm_App.dropY);
			}
			arm_App.dragFile = null;
		}
		arm_App.isDragging = false;
	}
	if(arm_App.dropPaths.length > 0) {
		var wait = false;
		if(!wait) {
			arm_App.dropX = mouse.x;
			arm_App.dropY = mouse.y;
			var dropPath = arm_App.dropPaths.shift();
			arm_io_ImportAsset.run(dropPath,arm_App.dropX,arm_App.dropY);
		}
	}
	if(arm_ui_UIBox.show) {
		arm_ui_UIBox.update();
	}
	if(arm_ui_UIMenu.show) {
		arm_ui_UIMenu.update();
	}
	var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
	var isPicker = arm_Context.tool == 10;
	zui_Zui.alwaysRedrawWindow = !arm_Context.cacheDraws || arm_ui_UIMenu.show || arm_ui_UIBox.show || arm_App.isDragging || isPicker || decal || arm_ui_UIView2D.inst.show || !arm_Config.raw.brush_3d || arm_Context.frame < 3;
	if(zui_Zui.alwaysRedrawWindow && arm_Context.ddirty < 0) {
		arm_Context.ddirty = 0;
	}
};
arm_App.getDragBackground = function() {
	var _this = arm_Res.bundled;
	var icons = __map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"];
	if(arm_App.dragLayer != null) {
		return arm_Res.tile50(icons,4,1);
	} else {
		return null;
	}
};
arm_App.getDragImage = function() {
	arm_App.dragTint = -1;
	arm_App.dragRect = null;
	if(arm_App.dragAsset != null) {
		return arm_ui_UISidebar.inst.getImage(arm_App.dragAsset);
	}
	if(arm_App.dragMaterial != null) {
		return arm_App.dragMaterial.imageIcon;
	}
	if(arm_App.dragLayer != null && arm_Context.layerIsMask) {
		return arm_App.dragLayer.texpaint_mask_preview;
	}
	if(arm_App.dragFile != null) {
		var _this = arm_Res.bundled;
		var icons = __map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"];
		arm_App.dragRect = arm_App.dragFile.indexOf(".") > 0 ? arm_Res.tile50(icons,3,1) : arm_Res.tile50(icons,2,1);
		arm_App.dragTint = arm_ui_UISidebar.inst.ui.t.HIGHLIGHT_COL;
		return icons;
	} else {
		return arm_App.dragLayer.texpaint_preview;
	}
};
arm_App.render = function(g) {
	if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
		return;
	}
	var mouse = iron_system_Input.getMouse();
	if(arm_App.isDragging) {
		Krom.setMouseCursor(1);
		var img = arm_App.getDragImage();
		var size = 50 * arm_ui_UISidebar.inst.ui.ops.scaleFactor;
		var ratio = size / img.get_width();
		var h = img.get_height() * ratio;
		var inv = 0;
		g.set_color(arm_App.dragTint);
		var bgRect = arm_App.getDragBackground();
		if(bgRect != null) {
			var _this = arm_Res.bundled;
			g.drawScaledSubImage(__map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"],bgRect.x,bgRect.y,bgRect.w,bgRect.h,mouse.x + arm_App.dragOffX,mouse.y + arm_App.dragOffY + inv,size,h - inv * 2);
		}
		if(arm_App.dragRect == null) {
			g.drawScaledImage(img,mouse.x + arm_App.dragOffX,mouse.y + arm_App.dragOffY + inv,size,h - inv * 2);
		} else {
			g.drawScaledSubImage(img,arm_App.dragRect.x,arm_App.dragRect.y,arm_App.dragRect.w,arm_App.dragRect.h,mouse.x + arm_App.dragOffX,mouse.y + arm_App.dragOffY + inv,size,h - inv * 2);
		}
		g.set_color(-1);
	}
	var usingMenu = arm_ui_UIMenu.show && mouse.y > arm_ui_UIHeader.inst.headerh;
	arm_App.uiEnabled = !arm_ui_UIBox.show && !usingMenu;
	if(arm_ui_UIBox.show) {
		arm_ui_UIBox.render(g);
	}
	if(arm_ui_UIMenu.show) {
		arm_ui_UIMenu.render(g);
	}
};
arm_App.enumTexts = function(nodeType) {
	if(nodeType == "TEX_IMAGE") {
		if(arm_Project.assetNames.length > 0) {
			return arm_Project.assetNames;
		} else {
			return [""];
		}
	} else if(nodeType == "LAYER" || nodeType == "LAYER_MASK") {
		var layerNames = [];
		var _g = 0;
		var _g1 = arm_Project.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			layerNames.push(l.name);
		}
		return layerNames;
	} else if(nodeType == "MATERIAL") {
		var materialNames = [];
		var _g2 = 0;
		var _g11 = arm_Project.materials;
		while(_g2 < _g11.length) {
			var m = _g11[_g2];
			++_g2;
			materialNames.push(m.canvas.name);
		}
		return materialNames;
	}
	return null;
};
arm_App.getAssetIndex = function(fileName) {
	var i = arm_Project.assetNames.indexOf(fileName);
	if(i >= 0) {
		return i;
	} else {
		return 0;
	}
};
arm_App.prototype = {
	__class__: arm_App
};
var arm_Config = function() { };
$hxClasses["arm.Config"] = arm_Config;
arm_Config.__name__ = "arm.Config";
arm_Config.load = function(done) {
	try {
		iron_data_Data.getBlob((arm_sys_Path.isProtected() ? Krom.savePath() : "") + "config.arm",function(blob) {
			arm_Config.configLoaded = true;
			arm_Config.raw = JSON.parse(blob.toString());
			done();
		});
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		done();
	}
};
arm_Config.save = function() {
	var path = (arm_sys_Path.isProtected() ? Krom.savePath() : arm_sys_Path.data() + arm_sys_Path.sep) + "config.arm";
	var bytes = haxe_io_Bytes.ofString(JSON.stringify(arm_Config.raw));
	Krom.fileSaveBytes(path,bytes.b.bufferValue);
};
arm_Config.init = function() {
	if(!arm_Config.configLoaded || arm_Config.raw == null) {
		arm_Config.raw = { };
		arm_Config.raw.locale = "system";
		arm_Config.raw.window_mode = 0;
		arm_Config.raw.window_resizable = true;
		arm_Config.raw.window_minimizable = true;
		arm_Config.raw.window_maximizable = true;
		arm_Config.raw.window_w = 1600;
		arm_Config.raw.window_h = 900;
		arm_Config.raw.window_x = -1;
		arm_Config.raw.window_y = -1;
		arm_Config.raw.window_scale = 1.0;
		arm_Config.raw.window_vsync = true;
		arm_Config.raw.rp_bloom = false;
		arm_Config.raw.rp_gi = false;
		arm_Config.raw.rp_vignette = 0.4;
		arm_Config.raw.rp_motionblur = false;
		arm_Config.raw.rp_ssgi = true;
		arm_Config.raw.rp_ssr = false;
		arm_Config.raw.rp_supersample = 1.0;
		var disp = kha_Display.get_primary();
		if(disp != null && disp.get_width() >= 3000 && disp.get_height() >= 2000) {
			arm_Config.raw.window_scale = 2.0;
		}
		arm_Config.raw.version = Main.version;
		arm_Config.raw.sha = Main.sha;
		arm_Config.raw.bookmarks = [];
		arm_Config.raw.plugins = [];
		arm_Config.raw.keymap = "default.json";
		arm_Config.raw.theme = "dark.json";
		arm_Config.raw.undo_steps = 4;
		arm_Config.raw.pressure_radius = true;
		arm_Config.raw.pressure_hardness = true;
		arm_Config.raw.pressure_angle = false;
		arm_Config.raw.pressure_opacity = false;
		arm_Config.raw.pressure_sensitivity = 1.0;
		arm_Config.raw.brush_3d = true;
		arm_Config.raw.brush_live = false;
	} else if(arm_Config.raw.sha != Main.sha) {
		arm_Config.configLoaded = false;
		arm_Config.init();
		return;
	}
	arm_Config.loadKeymap();
};
arm_Config.restore = function() {
	zui_Handle.global = new zui_Handle();
	arm_Config.configLoaded = false;
	arm_Config.init();
	arm_Translator.loadTranslations(arm_Config.raw.locale);
	arm_Config.applyConfig();
	arm_ui_BoxPreferences.loadTheme(arm_Config.raw.theme);
};
arm_Config.applyConfig = function() {
	arm_Config.raw.rp_ssgi = arm_Context.hssgi.selected;
	arm_Config.raw.rp_ssr = arm_Context.hssr.selected;
	arm_Config.raw.rp_bloom = arm_Context.hbloom.selected;
	arm_Config.raw.rp_gi = arm_Context.hvxao.selected;
	var i = arm_Context.hsupersample.position;
	arm_Config.raw.rp_supersample = i == 0 ? 0.25 : i == 1 ? 0.5 : i == 2 ? 1.0 : i == 3 ? 1.5 : i == 4 ? 2.0 : 4.0;
	iron_object_Uniforms.defaultFilter = arm_Config.raw.rp_supersample < 1.0 ? 0 : 1;
	arm_Config.save();
	arm_Context.ddirty = 2;
	var current = kha_graphics4_Graphics2.current;
	if(current != null) {
		current.end();
	}
	arm_render_Inc.applyConfig();
	if(current != null) {
		current.begin(false);
	}
};
arm_Config.loadKeymap = function() {
	iron_data_Data.getBlob("keymap_presets/" + arm_Config.raw.keymap,function(blob) {
		arm_Config.keymap = JSON.parse(blob.toString());
	});
};
arm_Config.saveKeymap = function() {
	var path = iron_data_Data.dataPath + "keymap_presets/" + arm_Config.raw.keymap;
	var bytes = haxe_io_Bytes.ofString(JSON.stringify(arm_Config.keymap));
	Krom.fileSaveBytes(path,bytes.b.bufferValue);
};
arm_Config.getTextureRes = function() {
	var res = arm_App.resHandle.position;
	if(res == 0) {
		return 128;
	} else if(res == 1) {
		return 256;
	} else if(res == 2) {
		return 512;
	} else if(res == 3) {
		return 1024;
	} else if(res == 4) {
		return 2048;
	} else if(res == 5) {
		return 4096;
	} else if(res == 6) {
		return 8192;
	} else if(res == 7) {
		return 16384;
	} else {
		return 0;
	}
};
arm_Config.getTextureResBias = function() {
	var res = arm_App.resHandle.position;
	if(res == 0) {
		return 16.0;
	} else if(res == 1) {
		return 8.0;
	} else if(res == 2) {
		return 4.0;
	} else if(res == 3) {
		return 2.0;
	} else if(res == 4) {
		return 1.5;
	} else if(res == 5) {
		return 1.0;
	} else if(res == 6) {
		return 0.5;
	} else if(res == 7) {
		return 0.25;
	} else {
		return 1.0;
	}
};
arm_Config.getTextureResPos = function(i) {
	if(i == 128) {
		return 0;
	} else if(i == 256) {
		return 1;
	} else if(i == 512) {
		return 2;
	} else if(i == 1024) {
		return 3;
	} else if(i == 2048) {
		return 4;
	} else if(i == 4096) {
		return 5;
	} else if(i == 8192) {
		return 6;
	} else if(i == 16384) {
		return 7;
	} else {
		return 0;
	}
};
var iron_math_Vec4 = function(x,y,z,w) {
	if(w == null) {
		w = 1.0;
	}
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["iron.math.Vec4"] = iron_math_Vec4;
iron_math_Vec4.__name__ = "iron.math.Vec4";
iron_math_Vec4.prototype = {
	__class__: iron_math_Vec4
};
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = "kha.math.FastMatrix4";
kha_math_FastMatrix4.prototype = {
	__class__: kha_math_FastMatrix4
};
var iron_math_Mat4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this.self = new kha_math_FastMatrix4(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33);
};
$hxClasses["iron.math.Mat4"] = iron_math_Mat4;
iron_math_Mat4.__name__ = "iron.math.Mat4";
iron_math_Mat4.prototype = {
	__class__: iron_math_Mat4
};
var arm_Context = function() { };
$hxClasses["arm.Context"] = arm_Context;
arm_Context.__name__ = "arm.Context";
arm_Context.selectMaterialScene = function(i) {
	if(arm_Project.materialsScene.length <= i || arm_Context.object == arm_Context.paintObject) {
		return;
	}
	arm_Context.materialScene = arm_Project.materialsScene[i];
	if(((arm_Context.object) instanceof iron_object_MeshObject)) {
		var mats = (js_Boot.__cast(arm_Context.object , iron_object_MeshObject)).materials;
		var _g = 0;
		var _g1 = mats.length;
		while(_g < _g1) {
			var i1 = _g++;
			mats[i1] = arm_Context.materialScene.data;
		}
	}
	arm_node_MaterialParser.parsePaintMaterial();
	arm_ui_UISidebar.inst.hwnd.redraws = 2;
};
arm_Context.selectMaterial = function(i) {
	if(arm_Project.materials.length <= i) {
		return;
	}
	arm_Context.setMaterial(arm_Project.materials[i]);
};
arm_Context.setMaterial = function(m) {
	if(arm_Project.materials.indexOf(m) == -1) {
		return;
	}
	arm_Context.material = m;
	arm_node_MaterialParser.parsePaintMaterial();
	arm_ui_UISidebar.inst.hwnd1.redraws = 2;
	arm_ui_UIHeader.inst.headerHandle.redraws = 2;
	arm_ui_UINodes.inst.hwnd.redraws = 2;
	var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
	if(decal) {
		var current = kha_graphics4_Graphics2.current;
		if(current != null) {
			current.end();
		}
		arm_util_RenderUtil.makeDecalPreview();
		if(current != null) {
			current.begin(false);
		}
	}
};
arm_Context.selectBrush = function(i) {
	if(arm_Project.brushes.length <= i) {
		return;
	}
	arm_Context.setBrush(arm_Project.brushes[i]);
};
arm_Context.setBrush = function(b) {
	if(arm_Project.brushes.indexOf(b) == -1) {
		return;
	}
	arm_Context.brush = b;
	arm_node_MaterialParser.parseBrush();
	arm_Context.parseBrushInputs();
	arm_ui_UISidebar.inst.hwnd1.redraws = 2;
	arm_ui_UINodes.inst.hwnd.redraws = 2;
};
arm_Context.setLayer = function(l,isMask) {
	if(isMask == null) {
		isMask = false;
	}
	if(l == arm_Context.layer && arm_Context.layerIsMask == isMask) {
		return;
	}
	arm_Context.layer = l;
	arm_Context.layerIsMask = isMask;
	arm_ui_UIHeader.inst.headerHandle.redraws = 2;
	var current = kha_graphics4_Graphics2.current;
	if(current != null) {
		current.end();
	}
	arm_Layers.setObjectMask();
	arm_node_MaterialParser.parseMeshMaterial();
	arm_node_MaterialParser.parsePaintMaterial();
	if(current != null) {
		current.begin(false);
	}
	arm_ui_UISidebar.inst.hwnd.redraws = 2;
	arm_ui_UIView2D.inst.hwnd.redraws = 2;
};
arm_Context.selectTool = function(i) {
	arm_Context.tool = i;
	arm_node_MaterialParser.parsePaintMaterial();
	arm_node_MaterialParser.parseMeshMaterial();
	arm_ui_UIHeader.inst.headerHandle.redraws = 2;
	arm_ui_UIToolbar.inst.toolbarHandle.redraws = 2;
	arm_Context.ddirty = 3;
	var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
	if(decal) {
		var current = kha_graphics4_Graphics2.current;
		if(current != null) {
			current.end();
		}
		if(arm_Context.tool == 4) {
			arm_util_RenderUtil.makeTextPreview();
		}
		arm_util_RenderUtil.makeDecalPreview();
		if(current != null) {
			current.begin(false);
		}
	}
	if(arm_Context.tool == 7) {
		arm_util_ParticleUtil.initParticle();
		arm_node_MaterialParser.parseParticleMaterial();
	}
};
arm_Context.selectObject = function(o) {
	arm_Context.object = o;
	if(arm_ui_UIHeader.inst.worktab.position == 1) {
		if(((o) instanceof iron_object_MeshObject)) {
			var _g = 0;
			var _g1 = arm_Project.materialsScene.length;
			while(_g < _g1) {
				var i = _g++;
				if(arm_Project.materialsScene[i].data == (js_Boot.__cast(o , iron_object_MeshObject)).materials[0]) {
					arm_Context.materialScene = arm_Project.materialsScene[i];
					arm_ui_UISidebar.inst.hwnd.redraws = 2;
					break;
				}
			}
		}
	}
};
arm_Context.selectPaintObject = function(o) {
	arm_ui_UIHeader.inst.headerHandle.redraws = 2;
	var _g = 0;
	var _g1 = arm_Project.paintObjects;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		p.skip_context = "paint";
	}
	arm_Context.paintObject = o;
	var mask = arm_Context.layer.objectMask;
	if(arm_Context.layerFilter > 0) {
		mask = arm_Context.layerFilter;
	}
	if(arm_Context.mergedObject == null || mask > 0) {
		arm_Context.paintObject.skip_context = "";
	}
	arm_util_UVUtil.uvmapCached = false;
	arm_util_UVUtil.trianglemapCached = false;
};
arm_Context.mainObject = function() {
	var _g = 0;
	var _g1 = arm_Project.paintObjects;
	while(_g < _g1.length) {
		var po = _g1[_g];
		++_g;
		if(po.children.length > 0) {
			return po;
		}
	}
	return arm_Project.paintObjects[0];
};
var arm_History = function() { };
$hxClasses["arm.History"] = arm_History;
arm_History.__name__ = "arm.History";
arm_History.undo = function() {
	if(arm_History.undos > 0) {
		var active = arm_History.steps.length - 1 - arm_History.redos;
		var step = arm_History.steps[active];
		if(step.name == arm_Translator.tr("New Layer")) {
			arm_Context.layer = arm_Project.layers[step.layer];
			arm_Context.layer.delete();
		} else if(step.name == arm_Translator.tr("Delete Layer")) {
			var l = arm_Layers.newLayer(false);
			var _this = arm_Project.layers;
			var pos = step.layer;
			var x = arm_Project.layers.pop();
			_this.splice(pos,0,x);
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay = arm_History.undoLayers[arm_History.undoI];
			l.swap(lay);
			if(step.has_mask) {
				l.createMask(0,false);
				l.swapMask(lay);
				arm_Context.setLayer(l,true);
				arm_Context.layersPreviewDirty = true;
			}
			l.maskOpacity = step.layer_opacity;
			l.blending = step.layer_blending;
			l.objectMask = step.layer_object;
		} else if(step.name == arm_Translator.tr("Duplicate Layer")) {
			arm_Context.layer = arm_Project.layers[step.layer + 1];
			arm_Context.layer.delete();
		} else if(step.name == arm_Translator.tr("Order Layers")) {
			var target = arm_Project.layers[step.prev_order];
			arm_Project.layers[step.prev_order] = arm_Project.layers[step.layer];
			arm_Project.layers[step.layer] = target;
		} else if(step.name == arm_Translator.tr("Merge Layers")) {
			arm_Context.layer = arm_Project.layers[step.layer];
			arm_Context.layer.delete();
			arm_Context.layer = arm_Layers.newLayer(false);
			var _this1 = arm_Project.layers;
			var pos1 = step.layer;
			var x1 = arm_Project.layers.pop();
			_this1.splice(pos1,0,x1);
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay1 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swap(lay1);
			arm_Context.layer = arm_Layers.newLayer(false);
			var _this2 = arm_Project.layers;
			var pos2 = step.layer + 1;
			var x2 = arm_Project.layers.pop();
			_this2.splice(pos2,0,x2);
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay2 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swap(lay2);
			if(step.has_mask) {
				arm_Context.layer.createMask(0,false);
				arm_Context.layer.swapMask(lay2);
				arm_Context.setLayer(arm_Context.layer,true);
			}
			arm_Context.layer.maskOpacity = step.layer_opacity;
			arm_Context.layer.blending = step.layer_blending;
			arm_Context.layer.objectMask = step.layer_object;
			arm_Context.layersPreviewDirty = true;
		} else if(step.name == arm_Translator.tr("New Mask")) {
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay3 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.setLayer(arm_Project.layers[step.layer],true);
			arm_Context.layer.swapMask(lay3);
			arm_Context.layer.deleteMask();
			arm_Context.setLayer(arm_Project.layers[step.layer],false);
		} else if(step.name == arm_Translator.tr("Delete Mask")) {
			arm_Context.setLayer(arm_Project.layers[step.layer],false);
			arm_Context.layer.createMask(0,false);
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay4 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swapMask(lay4);
			arm_Context.layersPreviewDirty = true;
			arm_Context.setLayer(arm_Context.layer,true);
		} else if(step.name == arm_Translator.tr("Apply Mask")) {
			arm_Context.layer = arm_Project.layers[step.layer];
			arm_Context.layer.delete();
			arm_Context.layer = arm_Layers.newLayer(false);
			var _this3 = arm_Project.layers;
			var pos3 = step.layer;
			var x3 = arm_Project.layers.pop();
			_this3.splice(pos3,0,x3);
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay5 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swap(lay5);
			arm_Context.layer.createMask(0,false);
			arm_Context.layer.swapMask(lay5);
			arm_Context.layersPreviewDirty = true;
			arm_Context.setLayer(arm_Context.layer,true);
		} else if(step.name == arm_Translator.tr("To Fill Layer")) {
			arm_Context.layer.toPaintLayer();
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay6 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swap(lay6);
		} else if(step.name == arm_Translator.tr("To Paint Layer")) {
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay7 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swap(lay7);
			arm_Context.layer.material_mask = arm_Project.materials[step.material];
		} else if(step.name == arm_Translator.tr("Layer Opacity")) {
			arm_Context.setLayer(arm_Project.layers[step.layer]);
			var t = arm_Context.layer.maskOpacity;
			arm_Context.layer.maskOpacity = step.layer_opacity;
			step.layer_opacity = t;
			arm_node_MaterialParser.parseMeshMaterial();
		} else if(step.name == arm_Translator.tr("Layer Blending")) {
			arm_Context.setLayer(arm_Project.layers[step.layer]);
			var t1 = arm_Context.layer.blending;
			arm_Context.layer.blending = step.layer_blending;
			step.layer_blending = t1;
			arm_node_MaterialParser.parseMeshMaterial();
		} else if(step.name == arm_Translator.tr("Edit Nodes")) {
			arm_History.swapCanvas(step);
		} else {
			arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
			var lay8 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.selectPaintObject(arm_Project.paintObjects[step.object]);
			arm_Context.setLayer(arm_Project.layers[step.layer],step.is_mask);
			if(step.is_mask) {
				arm_Context.layer.swapMask(lay8);
			} else {
				arm_Context.layer.swap(lay8);
			}
			arm_Context.layerPreviewDirty = true;
		}
		arm_History.undos--;
		arm_History.redos++;
		arm_ui_UISidebar.inst.hwnd.redraws = 2;
		arm_Context.ddirty = 2;
		if(arm_ui_UIView2D.inst.show) {
			arm_ui_UIView2D.inst.hwnd.redraws = 2;
		}
	}
};
arm_History.redo = function() {
	if(arm_History.redos > 0) {
		var active = arm_History.steps.length - arm_History.redos;
		var step = arm_History.steps[active];
		if(step.name == arm_Translator.tr("New Layer")) {
			arm_Layers.newLayer();
			var _this = arm_Project.layers;
			var pos = step.layer;
			var x = arm_Project.layers.pop();
			_this.splice(pos,0,x);
		} else if(step.name == arm_Translator.tr("Delete Layer")) {
			arm_Context.layer = arm_Project.layers[step.layer];
			arm_History.swapActive();
			arm_Context.layer.delete();
		} else if(step.name == arm_Translator.tr("Duplicate Layer")) {
			arm_Context.layer = arm_Project.layers[step.layer];
			arm_Context.layer = arm_Context.layer.duplicate();
		} else if(step.name == arm_Translator.tr("Order Layers")) {
			var target = arm_Project.layers[step.prev_order];
			arm_Project.layers[step.prev_order] = arm_Project.layers[step.layer];
			arm_Project.layers[step.layer] = target;
		} else if(step.name == arm_Translator.tr("Merge Layers")) {
			arm_Context.layer = arm_Project.layers[step.layer + 1];
			iron_App.notifyOnRender(arm_History.redoMergeLayers);
			iron_App.notifyOnRender(arm_Layers.mergeSelectedLayer);
		} else if(step.name == arm_Translator.tr("New Mask")) {
			arm_Context.layer = arm_Project.layers[step.layer];
			arm_Context.layer.createMask(0,false);
			arm_Context.setLayer(arm_Project.layers[step.layer],true);
			var lay = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swapMask(lay);
			arm_Context.layerPreviewDirty = true;
			arm_History.undoI = (arm_History.undoI + 1) % arm_Config.raw.undo_steps;
		} else if(step.name == arm_Translator.tr("Delete Mask")) {
			arm_Context.layer = arm_Project.layers[step.layer];
			arm_History.swapMaskActive();
			arm_Context.layer.deleteMask();
			arm_Context.setLayer(arm_Context.layer,false);
		} else if(step.name == arm_Translator.tr("Apply Mask")) {
			var makeApply = null;
			makeApply = function(g) {
				g.end();
				arm_Context.layer = arm_Project.layers[step.layer];
				arm_History.copyToUndoWithMask();
				arm_Context.layer.applyMask();
				arm_Context.setLayer(arm_Context.layer,false);
				g.begin();
				iron_App.removeRender(makeApply);
			};
			iron_App.notifyOnRender(makeApply);
		} else if(step.name == arm_Translator.tr("To Fill Layer")) {
			var lay1 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swap(lay1);
			arm_Context.layer.material_mask = arm_Project.materials[step.material];
			arm_History.undoI = (arm_History.undoI + 1) % arm_Config.raw.undo_steps;
		} else if(step.name == arm_Translator.tr("To Paint Layer")) {
			arm_Context.layer.toPaintLayer();
			var lay2 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.layer.swap(lay2);
			arm_History.undoI = (arm_History.undoI + 1) % arm_Config.raw.undo_steps;
		} else if(step.name == arm_Translator.tr("Layer Opacity")) {
			arm_Context.setLayer(arm_Project.layers[step.layer]);
			var t = arm_Context.layer.maskOpacity;
			arm_Context.layer.maskOpacity = step.layer_opacity;
			step.layer_opacity = t;
			arm_node_MaterialParser.parseMeshMaterial();
		} else if(step.name == arm_Translator.tr("Layer Blending")) {
			arm_Context.setLayer(arm_Project.layers[step.layer]);
			var t1 = arm_Context.layer.blending;
			arm_Context.layer.blending = step.layer_blending;
			step.layer_blending = t1;
			arm_node_MaterialParser.parseMeshMaterial();
		} else if(step.name == arm_Translator.tr("Edit Nodes")) {
			arm_History.swapCanvas(step);
		} else {
			var lay3 = arm_History.undoLayers[arm_History.undoI];
			arm_Context.selectPaintObject(arm_Project.paintObjects[step.object]);
			arm_Context.setLayer(arm_Project.layers[step.layer],step.is_mask);
			if(step.is_mask) {
				arm_Context.layer.swapMask(lay3);
			} else {
				arm_Context.layer.swap(lay3);
			}
			arm_Context.layerPreviewDirty = true;
			arm_History.undoI = (arm_History.undoI + 1) % arm_Config.raw.undo_steps;
		}
		arm_History.undos++;
		arm_History.redos--;
		arm_ui_UISidebar.inst.hwnd.redraws = 2;
		arm_Context.ddirty = 2;
		if(arm_ui_UIView2D.inst.show) {
			arm_ui_UIView2D.inst.hwnd.redraws = 2;
		}
	}
};
arm_History.reset = function() {
	arm_History.steps = [{ name : arm_Translator.tr("New"), layer : 0, object : 0, material : 0, brush : 0, is_mask : false, has_mask : false}];
	arm_History.undos = 0;
	arm_History.redos = 0;
	arm_History.undoI = 0;
};
arm_History.paint = function() {
	var isMask = arm_Context.layerIsMask;
	arm_History.copyToUndo(arm_Context.layer.id,arm_History.undoI,isMask);
	arm_History.pushUndo = false;
	arm_History.push(arm_ui_UIToolbar.inst.toolNames[arm_Context.tool]);
};
arm_History.newLayer = function() {
	arm_History.push(arm_Translator.tr("New Layer"));
};
arm_History.duplicateLayer = function() {
	arm_History.push(arm_Translator.tr("Duplicate Layer"));
};
arm_History.deleteLayer = function() {
	arm_History.swapActive();
	arm_History.push(arm_Translator.tr("Delete Layer"));
};
arm_History.orderLayers = function(prevOrder) {
	var step = arm_History.push(arm_Translator.tr("Order Layers"));
	step.prev_order = prevOrder;
};
arm_History.mergeLayers = function(g) {
	arm_History.copyMergingLayers();
	var step = arm_History.push(arm_Translator.tr("Merge Layers"));
	step.layer -= 1;
	arm_History.steps.shift();
	arm_History.undos--;
	iron_App.removeRender(arm_History.mergeLayers);
};
arm_History.newMask = function() {
	arm_History.push(arm_Translator.tr("New Mask"));
};
arm_History.deleteMask = function() {
	arm_History.swapMaskActive();
	arm_History.push(arm_Translator.tr("Delete Mask"));
};
arm_History.applyMask = function() {
	arm_History.copyToUndoWithMask();
	arm_History.push(arm_Translator.tr("Apply Mask"));
};
arm_History.toFillLayer = function() {
	arm_History.copyToUndo(arm_Context.layer.id,arm_History.undoI,false);
	arm_History.push(arm_Translator.tr("To Fill Layer"));
};
arm_History.toPaintLayer = function() {
	arm_History.copyToUndo(arm_Context.layer.id,arm_History.undoI,false);
	arm_History.push(arm_Translator.tr("To Paint Layer"));
};
arm_History.layerOpacity = function() {
	arm_History.push(arm_Translator.tr("Layer Opacity"));
};
arm_History.layerBlending = function() {
	arm_History.push(arm_Translator.tr("Layer Blending"));
};
arm_History.editNodes = function(canvas,canvas_type) {
	var step = arm_History.push(arm_Translator.tr("Edit Nodes"));
	step.canvas_type = canvas_type;
	step.canvas = JSON.parse(JSON.stringify(canvas));
};
arm_History.push = function(name) {
	kha_Window.get(0).set_title(arm_ui_UIFiles.filename + "* - ArmorPaint");
	if(arm_History.undos < arm_Config.raw.undo_steps) {
		arm_History.undos++;
	}
	if(arm_History.redos > 0) {
		var _g = 0;
		var _g1 = arm_History.redos;
		while(_g < _g1) {
			var i = _g++;
			arm_History.steps.pop();
		}
		arm_History.redos = 0;
	}
	var opos = arm_Project.paintObjects.indexOf(arm_Context.object);
	var lpos = arm_Project.layers.indexOf(arm_Context.layer);
	var mpos = arm_Project.materials.indexOf(arm_Context.material);
	var bpos = arm_Project.brushes.indexOf(arm_Context.brush);
	arm_History.steps.push({ name : name, layer : lpos, object : opos, material : mpos, brush : bpos, is_mask : arm_Context.layerIsMask, has_mask : arm_Context.layer.texpaint_mask != null, layer_opacity : arm_Context.layer.maskOpacity, layer_object : arm_Context.layer.objectMask, layer_blending : arm_Context.layer.blending});
	while(arm_History.steps.length > arm_Config.raw.undo_steps + 1) arm_History.steps.shift();
	return arm_History.steps[arm_History.steps.length - 1];
};
arm_History.redoMergeLayers = function(g) {
	arm_History.copyMergingLayers();
	iron_App.removeRender(arm_History.redoMergeLayers);
};
arm_History.copyMergingLayers = function() {
	var lay = arm_Context.layer;
	arm_History.copyToUndo(lay.id,arm_History.undoI,false);
	if(lay.texpaint_mask != null) {
		arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
		arm_History.copyToUndo(lay.id,arm_History.undoI,true);
	}
	var below = arm_Project.layers.indexOf(lay) - 1;
	lay = arm_Project.layers[below];
	arm_History.copyToUndo(lay.id,arm_History.undoI,false);
};
arm_History.copyToUndoWithMask = function() {
	arm_History.copyToUndo(arm_Context.layer.id,arm_History.undoI,false);
	arm_History.undoI = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
	arm_History.copyToUndo(arm_Context.layer.id,arm_History.undoI,true);
};
arm_History.swapActive = function() {
	var undoLayer = arm_History.undoLayers[arm_History.undoI];
	undoLayer.swap(arm_Context.layer);
	if(arm_Context.layer.texpaint_mask != null) {
		undoLayer.swapMask(arm_Context.layer);
	}
	arm_History.undoI = (arm_History.undoI + 1) % arm_Config.raw.undo_steps;
};
arm_History.swapMaskActive = function() {
	var undoLayer = arm_History.undoLayers[arm_History.undoI];
	undoLayer.swapMask(arm_Context.layer);
	arm_History.undoI = (arm_History.undoI + 1) % arm_Config.raw.undo_steps;
};
arm_History.copyToUndo = function(fromId,toId,isMask) {
	var path = iron_RenderPath.active;
	if(isMask) {
		path.setTarget("texpaint_mask_undo" + toId);
		path.bindTarget("texpaint_mask" + fromId,"tex");
		path.drawShader("shader_datas/copy_pass/copy_pass");
	} else {
		path.setTarget("texpaint_undo" + toId,["texpaint_nor_undo" + toId,"texpaint_pack_undo" + toId]);
		path.bindTarget("texpaint" + fromId,"tex0");
		path.bindTarget("texpaint_nor" + fromId,"tex1");
		path.bindTarget("texpaint_pack" + fromId,"tex2");
		path.drawShader("shader_datas/copy_mrt3_pass/copy_mrt3_pass");
	}
	arm_History.undoI = (arm_History.undoI + 1) % arm_Config.raw.undo_steps;
};
arm_History.swapCanvas = function(step) {
	if(step.canvas_type == 0) {
		var _canvas = arm_Project.materials[step.material].canvas;
		arm_Project.materials[step.material].canvas = step.canvas;
		step.canvas = _canvas;
		arm_Context.material = arm_Project.materials[step.material];
	} else {
		var _canvas1 = arm_Project.brushes[step.brush].canvas;
		arm_Project.brushes[step.brush].canvas = step.canvas;
		step.canvas = _canvas1;
		arm_Context.brush = arm_Project.brushes[step.brush];
	}
	var canvasChanged = null;
	canvasChanged = function(_) {
		arm_ui_UINodes.inst.canvasChanged();
		iron_App.removeRender(canvasChanged);
	};
	iron_App.notifyOnRender(canvasChanged);
	arm_ui_UINodes.inst.getNodes().handle = new zui_Handle();
	arm_ui_UINodes.inst.hwnd.redraws = 2;
};
var arm_Layers = function() { };
$hxClasses["arm.Layers"] = arm_Layers;
arm_Layers.__name__ = "arm.Layers";
arm_Layers.initLayers = function(g) {
	g.end();
	var layers = arm_Project.layers;
	layers[0].texpaint.get_g4().begin();
	layers[0].texpaint.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(0.5,0.5,0.5,1.0));
	layers[0].texpaint.get_g4().end();
	layers[0].texpaint_nor.get_g4().begin();
	layers[0].texpaint_nor.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(0.5,0.5,1.0,0.0));
	layers[0].texpaint_nor.get_g4().end();
	layers[0].texpaint_pack.get_g4().begin();
	layers[0].texpaint_pack.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(1.0,0.4,0.0,0.0));
	layers[0].texpaint_pack.get_g4().end();
	g.begin();
	iron_App.removeRender(arm_Layers.initLayers);
	arm_Context.layerPreviewDirty = true;
	arm_Context.ddirty = 3;
};
arm_Layers.resizeLayers = function(g) {
	var C = arm_Config.raw;
	if(arm_App.resHandle.position >= (7 | 0)) {
		C.undo_steps = 1;
		if(arm_Context.undoHandle != null) {
			arm_Context.undoHandle.value = C.undo_steps;
		}
		while(arm_History.undoLayers.length > C.undo_steps) {
			var l = arm_History.undoLayers.pop();
			l.unload();
		}
	}
	g.end();
	var _g = 0;
	var _g1 = arm_Project.layers;
	while(_g < _g1.length) {
		var l1 = _g1[_g];
		++_g;
		l1.resizeAndSetBits();
	}
	var _g2 = 0;
	var _g3 = arm_History.undoLayers;
	while(_g2 < _g3.length) {
		var l2 = _g3[_g2];
		++_g2;
		l2.resizeAndSetBits();
	}
	var rts = iron_RenderPath.active.renderTargets;
	(__map_reserved["texpaint_blend0"] != null ? rts.getReserved("texpaint_blend0") : rts.h["texpaint_blend0"]).image.unload();
	(__map_reserved["texpaint_blend0"] != null ? rts.getReserved("texpaint_blend0") : rts.h["texpaint_blend0"]).raw.width = arm_Config.getTextureRes();
	(__map_reserved["texpaint_blend0"] != null ? rts.getReserved("texpaint_blend0") : rts.h["texpaint_blend0"]).raw.height = arm_Config.getTextureRes();
	(__map_reserved["texpaint_blend0"] != null ? rts.getReserved("texpaint_blend0") : rts.h["texpaint_blend0"]).image = kha_Image.createRenderTarget(arm_Config.getTextureRes(),arm_Config.getTextureRes(),1);
	(__map_reserved["texpaint_blend1"] != null ? rts.getReserved("texpaint_blend1") : rts.h["texpaint_blend1"]).image.unload();
	(__map_reserved["texpaint_blend1"] != null ? rts.getReserved("texpaint_blend1") : rts.h["texpaint_blend1"]).raw.width = arm_Config.getTextureRes();
	(__map_reserved["texpaint_blend1"] != null ? rts.getReserved("texpaint_blend1") : rts.h["texpaint_blend1"]).raw.height = arm_Config.getTextureRes();
	(__map_reserved["texpaint_blend1"] != null ? rts.getReserved("texpaint_blend1") : rts.h["texpaint_blend1"]).image = kha_Image.createRenderTarget(arm_Config.getTextureRes(),arm_Config.getTextureRes(),1);
	arm_Context.brushBlendDirty = true;
	if((__map_reserved["texpaint_blur"] != null ? rts.getReserved("texpaint_blur") : rts.h["texpaint_blur"]) != null) {
		(__map_reserved["texpaint_blur"] != null ? rts.getReserved("texpaint_blur") : rts.h["texpaint_blur"]).image.unload();
		var size = arm_Config.getTextureRes() * 0.95 | 0;
		(__map_reserved["texpaint_blur"] != null ? rts.getReserved("texpaint_blur") : rts.h["texpaint_blur"]).raw.width = size;
		(__map_reserved["texpaint_blur"] != null ? rts.getReserved("texpaint_blur") : rts.h["texpaint_blur"]).raw.height = size;
		(__map_reserved["texpaint_blur"] != null ? rts.getReserved("texpaint_blur") : rts.h["texpaint_blur"]).image = kha_Image.createRenderTarget(size,size);
	}
	g.begin();
	arm_Context.ddirty = 2;
	iron_App.removeRender(arm_Layers.resizeLayers);
};
arm_Layers.setLayerBits = function(g) {
	g.end();
	var _g = 0;
	var _g1 = arm_Project.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		l.resizeAndSetBits();
	}
	var _g2 = 0;
	var _g3 = arm_History.undoLayers;
	while(_g2 < _g3.length) {
		var l1 = _g3[_g2];
		++_g2;
		l1.resizeAndSetBits();
	}
	g.begin();
	iron_App.removeRender(arm_Layers.setLayerBits);
};
arm_Layers.makeMergePipe = function(red,green,blue,alpha) {
	var pipe = new kha_graphics4_PipelineState();
	pipe.vertexShader = Reflect.field(kha_Shaders,"layer_merge_vert");
	pipe.fragmentShader = Reflect.field(kha_Shaders,"layer_merge_frag");
	var vs = new kha_graphics4_VertexStructure();
	vs.add("pos",1);
	pipe.inputLayout = [vs];
	pipe.colorWriteMasksRed = [red];
	pipe.colorWriteMasksGreen = [green];
	pipe.colorWriteMasksBlue = [blue];
	pipe.colorWriteMasksAlpha = [alpha];
	pipe.compile();
	return pipe;
};
arm_Layers.makePipe = function() {
	arm_Layers.pipeMerge = arm_Layers.makeMergePipe(true,true,true,true);
	arm_Layers.pipeMergeR = arm_Layers.makeMergePipe(true,false,false,false);
	arm_Layers.pipeMergeG = arm_Layers.makeMergePipe(false,true,false,false);
	arm_Layers.pipeMergeB = arm_Layers.makeMergePipe(false,false,true,false);
	arm_Layers.pipeMergeA = arm_Layers.makeMergePipe(false,false,false,true);
	arm_Layers.tex0 = arm_Layers.pipeMerge.getTextureUnit("tex0");
	arm_Layers.tex1 = arm_Layers.pipeMerge.getTextureUnit("tex1");
	arm_Layers.texmask = arm_Layers.pipeMerge.getTextureUnit("texmask");
	arm_Layers.texa = arm_Layers.pipeMerge.getTextureUnit("texa");
	arm_Layers.opac = arm_Layers.pipeMerge.getConstantLocation("opac");
	arm_Layers.blending = arm_Layers.pipeMerge.getConstantLocation("blending");
	arm_Layers.pipeCopy = new kha_graphics4_PipelineState();
	arm_Layers.pipeCopy.vertexShader = Reflect.field(kha_Shaders,"layer_view_vert");
	arm_Layers.pipeCopy.fragmentShader = Reflect.field(kha_Shaders,"layer_copy_frag");
	var vs = new kha_graphics4_VertexStructure();
	vs.add("pos",2);
	vs.add("tex",1);
	vs.add("col",3);
	arm_Layers.pipeCopy.inputLayout = [vs];
	arm_Layers.pipeCopy.compile();
	arm_Layers.pipeMask = new kha_graphics4_PipelineState();
	arm_Layers.pipeMask.vertexShader = Reflect.field(kha_Shaders,"layer_merge_vert");
	arm_Layers.pipeMask.fragmentShader = Reflect.field(kha_Shaders,"mask_merge_frag");
	var vs1 = new kha_graphics4_VertexStructure();
	vs1.add("pos",1);
	arm_Layers.pipeMask.inputLayout = [vs1];
	arm_Layers.pipeMask.compile();
	arm_Layers.tex0Mask = arm_Layers.pipeMask.getTextureUnit("tex0");
	arm_Layers.texaMask = arm_Layers.pipeMask.getTextureUnit("texa");
};
arm_Layers.makeCursorPipe = function() {
	arm_Layers.pipeCursor = new kha_graphics4_PipelineState();
	arm_Layers.pipeCursor.vertexShader = Reflect.field(kha_Shaders,"cursor_vert");
	arm_Layers.pipeCursor.fragmentShader = Reflect.field(kha_Shaders,"cursor_frag");
	var vs = new kha_graphics4_VertexStructure();
	vs.add("pos",6);
	vs.add("nor",5);
	vs.add("tex",5);
	arm_Layers.pipeCursor.inputLayout = [vs];
	arm_Layers.pipeCursor.blendSource = 3;
	arm_Layers.pipeCursor.blendDestination = 5;
	arm_Layers.pipeCursor.depthWrite = false;
	arm_Layers.pipeCursor.depthMode = 0;
	arm_Layers.pipeCursor.compile();
	arm_Layers.cursorVP = arm_Layers.pipeCursor.getConstantLocation("VP");
	arm_Layers.cursorInvVP = arm_Layers.pipeCursor.getConstantLocation("invVP");
	arm_Layers.cursorMouse = arm_Layers.pipeCursor.getConstantLocation("mouse");
	arm_Layers.cursorTexStep = arm_Layers.pipeCursor.getConstantLocation("texStep");
	arm_Layers.cursorRadius = arm_Layers.pipeCursor.getConstantLocation("radius");
	arm_Layers.cursorCameraRight = arm_Layers.pipeCursor.getConstantLocation("cameraRight");
	arm_Layers.cursorTint = arm_Layers.pipeCursor.getConstantLocation("tint");
	arm_Layers.cursorGbufferD = arm_Layers.pipeCursor.getTextureUnit("gbufferD");
	arm_Layers.cursorTex = arm_Layers.pipeCursor.getTextureUnit("tex");
};
arm_Layers.makeTempImg = function() {
	var l = arm_Project.layers[0];
	if(arm_Layers.imga != null && arm_Layers.imga.get_width() != l.texpaint.get_width()) {
		var _this = iron_RenderPath.active.renderTargets;
		(__map_reserved["temptex0"] != null ? _this.getReserved("temptex0") : _this.h["temptex0"]).unload();
		iron_RenderPath.active.renderTargets.remove("temptex0");
		arm_Layers.imga = null;
	}
	if(arm_Layers.imga == null) {
		var t = new iron_RenderTargetRaw();
		t.name = "temptex0";
		t.width = l.texpaint.get_width();
		t.height = l.texpaint.get_height();
		t.format = "RGBA32";
		var rt = iron_RenderPath.active.createRenderTarget(t);
		arm_Layers.imga = rt.image;
	}
};
arm_Layers.makeExportImg = function() {
	var l = arm_Project.layers[0];
	if(arm_Layers.expa != null && arm_Layers.expa.get_width() != l.texpaint.get_width()) {
		arm_Layers.expa.unload();
		arm_Layers.expb.unload();
		arm_Layers.expc.unload();
		arm_Layers.expa = null;
		arm_Layers.expb = null;
		arm_Layers.expc = null;
	}
	if(arm_Layers.expa == null) {
		arm_Layers.expa = kha_Image.createRenderTarget(l.texpaint.get_width(),l.texpaint.get_height());
		arm_Layers.expb = kha_Image.createRenderTarget(l.texpaint.get_width(),l.texpaint.get_height());
		arm_Layers.expc = kha_Image.createRenderTarget(l.texpaint.get_width(),l.texpaint.get_height());
	}
};
arm_Layers.mergeSelectedLayer = function(g) {
	if(arm_Layers.pipeMerge == null) {
		arm_Layers.makePipe();
	}
	var l0 = arm_Project.layers[0];
	var l1 = arm_Context.layer;
	var _g = 1;
	var _g1 = arm_Project.layers.length;
	while(_g < _g1) {
		var i = _g++;
		if(arm_Project.layers[i] == l1) {
			l0 = arm_Project.layers[i - 1];
			break;
		}
	}
	g.end();
	arm_Layers.makeTempImg();
	if(l1.texpaint_mask != null) {
		l1.applyMask();
	}
	if(iron_data_ConstData.screenAlignedVB == null) {
		iron_data_ConstData.createScreenAlignedData();
	}
	arm_Layers.imga.get_g2().begin(false);
	arm_Layers.imga.get_g2().set_pipeline(arm_Layers.pipeCopy);
	arm_Layers.imga.get_g2().drawImage(l0.texpaint,0,0);
	arm_Layers.imga.get_g2().set_pipeline(null);
	arm_Layers.imga.get_g2().end();
	var _this = iron_RenderPath.active.renderTargets;
	var empty = (__map_reserved["empty_white"] != null ? _this.getReserved("empty_white") : _this.h["empty_white"]).image;
	if(l1.paintBase) {
		l0.texpaint.get_g4().begin();
		l0.texpaint.get_g4().setPipeline(arm_Layers.pipeMerge);
		l0.texpaint.get_g4().setTexture(arm_Layers.tex0,l1.texpaint);
		l0.texpaint.get_g4().setTexture(arm_Layers.tex1,empty);
		l0.texpaint.get_g4().setTexture(arm_Layers.texmask,empty);
		l0.texpaint.get_g4().setTexture(arm_Layers.texa,arm_Layers.imga);
		l0.texpaint.get_g4().setFloat(arm_Layers.opac,l1.maskOpacity);
		l0.texpaint.get_g4().setInt(arm_Layers.blending,l1.blending);
		l0.texpaint.get_g4().setVertexBuffer(iron_data_ConstData.screenAlignedVB);
		l0.texpaint.get_g4().setIndexBuffer(iron_data_ConstData.screenAlignedIB);
		l0.texpaint.get_g4().drawIndexedVertices();
		l0.texpaint.get_g4().end();
	}
	arm_Layers.imga.get_g2().begin(false);
	arm_Layers.imga.get_g2().set_pipeline(arm_Layers.pipeCopy);
	arm_Layers.imga.get_g2().drawImage(l0.texpaint_nor,0,0);
	arm_Layers.imga.get_g2().set_pipeline(null);
	arm_Layers.imga.get_g2().end();
	if(l1.paintNor) {
		l0.texpaint_nor.get_g4().begin();
		l0.texpaint_nor.get_g4().setPipeline(arm_Layers.pipeMerge);
		l0.texpaint_nor.get_g4().setTexture(arm_Layers.tex0,l1.texpaint);
		l0.texpaint_nor.get_g4().setTexture(arm_Layers.tex1,l1.texpaint_nor);
		l0.texpaint_nor.get_g4().setTexture(arm_Layers.texmask,empty);
		l0.texpaint_nor.get_g4().setTexture(arm_Layers.texa,arm_Layers.imga);
		l0.texpaint_nor.get_g4().setFloat(arm_Layers.opac,l1.maskOpacity);
		l0.texpaint_nor.get_g4().setInt(arm_Layers.blending,-1);
		l0.texpaint_nor.get_g4().setVertexBuffer(iron_data_ConstData.screenAlignedVB);
		l0.texpaint_nor.get_g4().setIndexBuffer(iron_data_ConstData.screenAlignedIB);
		l0.texpaint_nor.get_g4().drawIndexedVertices();
		l0.texpaint_nor.get_g4().end();
	}
	arm_Layers.imga.get_g2().begin(false);
	arm_Layers.imga.get_g2().set_pipeline(arm_Layers.pipeCopy);
	arm_Layers.imga.get_g2().drawImage(l0.texpaint_pack,0,0);
	arm_Layers.imga.get_g2().set_pipeline(null);
	arm_Layers.imga.get_g2().end();
	if(l1.paintOcc || l1.paintRough || l1.paintMet || l1.paintHeight) {
		if(l1.paintOcc && l1.paintRough && l1.paintMet && l1.paintHeight) {
			arm_Layers.commandsMergePack(arm_Layers.pipeMerge,l0.texpaint_pack,l1.texpaint,l1.texpaint_pack,l1.maskOpacity,empty);
		} else {
			if(l1.paintOcc) {
				arm_Layers.commandsMergePack(arm_Layers.pipeMergeR,l0.texpaint_pack,l1.texpaint,l1.texpaint_pack,l1.maskOpacity,empty);
			}
			if(l1.paintRough) {
				arm_Layers.commandsMergePack(arm_Layers.pipeMergeG,l0.texpaint_pack,l1.texpaint,l1.texpaint_pack,l1.maskOpacity,empty);
			}
			if(l1.paintMet) {
				arm_Layers.commandsMergePack(arm_Layers.pipeMergeB,l0.texpaint_pack,l1.texpaint,l1.texpaint_pack,l1.maskOpacity,empty);
			}
		}
	}
	g.begin();
	arm_Context.layer.delete();
	iron_App.removeRender(arm_Layers.mergeSelectedLayer);
	arm_Context.setLayer(l0);
	arm_Context.layerPreviewDirty = true;
};
arm_Layers.commandsMergePack = function(pipe,i0,i1,i1pack,i1maskOpacity,i1texmask) {
	i0.get_g4().begin();
	i0.get_g4().setPipeline(pipe);
	i0.get_g4().setTexture(arm_Layers.tex0,i1);
	i0.get_g4().setTexture(arm_Layers.tex1,i1pack);
	i0.get_g4().setTexture(arm_Layers.texmask,i1texmask);
	i0.get_g4().setTexture(arm_Layers.texa,arm_Layers.imga);
	i0.get_g4().setFloat(arm_Layers.opac,i1maskOpacity);
	i0.get_g4().setInt(arm_Layers.blending,-1);
	i0.get_g4().setVertexBuffer(iron_data_ConstData.screenAlignedVB);
	i0.get_g4().setIndexBuffer(iron_data_ConstData.screenAlignedIB);
	i0.get_g4().drawIndexedVertices();
	i0.get_g4().end();
};
arm_Layers.isFillMaterial = function() {
	var m = arm_Context.material;
	var _g = 0;
	var _g1 = arm_Project.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.material_mask == m) {
			return true;
		}
	}
	return false;
};
arm_Layers.updateFillLayers = function(fills) {
	if(fills == null) {
		fills = 1;
	}
	var layers = arm_Project.layers;
	var selectedLayer = arm_Context.layer;
	var isMask = arm_Context.layerIsMask;
	var selectedTool = arm_Context.tool;
	var current = null;
	var first = true;
	var _g = 0;
	while(_g < layers.length) {
		var l = layers[_g];
		++_g;
		if(l.material_mask == arm_Context.material) {
			if(first) {
				current = kha_graphics4_Graphics2.current;
				if(current != null) {
					current.end();
				}
				arm_Context.pdirty = fills;
				arm_Context.layerIsMask = false;
				arm_Context.tool = 2;
			}
			arm_Context.layer = l;
			arm_Layers.setObjectMask();
			if(first) {
				first = false;
				arm_node_MaterialParser.parsePaintMaterial();
			}
			var _g1 = 0;
			var _g11 = fills;
			while(_g1 < _g11) {
				var i = _g1++;
				arm_render_RenderPathPaint.commandsPaint();
			}
		}
	}
	if(!first) {
		arm_Context.pdirty = 0;
		arm_Context.ddirty = 2;
		arm_Context.rdirty = 2;
		if(current != null) {
			current.begin(false);
		}
		arm_Context.layer = selectedLayer;
		arm_Context.layerIsMask = isMask;
		arm_Layers.setObjectMask();
		arm_Context.tool = selectedTool;
	}
};
arm_Layers.setObjectMask = function() {
	var ar = ["None"];
	var _g = 0;
	var _g1 = arm_Project.paintObjects;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		ar.push(p.name);
	}
	var mask = arm_Context.layer.objectMask;
	if(arm_Context.layerFilter > 0) {
		mask = arm_Context.layerFilter;
	}
	if(mask > 0) {
		if(arm_Context.mergedObject != null) {
			arm_Context.mergedObject.visible = false;
		}
		var o = arm_Project.paintObjects[0];
		var _g2 = 0;
		var _g3 = arm_Project.paintObjects;
		while(_g2 < _g3.length) {
			var p1 = _g3[_g2];
			++_g2;
			if(p1.name == ar[mask]) {
				o = p1;
				break;
			}
		}
		arm_Context.selectPaintObject(o);
	} else {
		if(arm_Context.mergedObject == null) {
			arm_util_MeshUtil.mergeMesh();
		}
		arm_Context.selectPaintObject(arm_Context.mainObject());
		arm_Context.paintObject.skip_context = "paint";
		arm_Context.mergedObject.visible = true;
	}
};
arm_Layers.newLayer = function(clear) {
	if(clear == null) {
		clear = true;
	}
	if(arm_Project.layers.length > 255) {
		return null;
	}
	var l = new arm_data_LayerSlot();
	l.objectMask = arm_Context.layerFilter;
	arm_Project.layers.push(l);
	arm_Context.setLayer(l);
	if(clear) {
		iron_App.notifyOnRender($bind(l,l.clear));
	}
	arm_Context.layerPreviewDirty = true;
	return l;
};
arm_Layers.newGroup = function() {
	if(arm_Project.layers.length > 255) {
		return null;
	}
	var l = new arm_data_LayerSlot("",true);
	arm_Project.layers.push(l);
	arm_Context.setLayer(l);
	return l;
};
arm_Layers.createFillLayer = function() {
	var makeFill = null;
	makeFill = function(g) {
		g.end();
		var l = arm_Layers.newLayer(false);
		arm_History.newLayer();
		l.objectMask = arm_Context.layerFilter;
		arm_History.toFillLayer();
		l.toFillLayer();
		g.begin();
		iron_App.removeRender(makeFill);
	};
	iron_App.notifyOnRender(makeFill);
};
arm_Layers.createImageMask = function(asset) {
	var l = arm_Context.layer;
	if(l != arm_Project.layers[0]) {
		arm_History.newMask();
		l.createMask(0,true,arm_ui_UISidebar.inst.getImage(asset));
		arm_Context.setLayer(l,true);
		arm_Context.layerPreviewDirty = true;
	}
};
var arm_Log = function() { };
$hxClasses["arm.Log"] = arm_Log;
arm_Log.__name__ = "arm.Log";
arm_Log.info = function(s) {
	arm_Log.messageTimer = 5.0;
	arm_Log.message = s;
	arm_Log.messageColor = 0;
	haxe_Log.trace(s,{ fileName : "arm/Log.hx", lineNumber : 16, className : "arm.Log", methodName : "info"});
};
arm_Log.error = function(s) {
	arm_Log.messageTimer = 8.0;
	arm_Log.message = s;
	arm_Log.messageColor = -5636096;
	haxe_Log.trace(s,{ fileName : "arm/Log.hx", lineNumber : 23, className : "arm.Log", methodName : "error"});
};
arm_Log.trace = function(s) {
	haxe_Log.trace(s,{ fileName : "arm/Log.hx", lineNumber : 27, className : "arm.Log", methodName : "trace"});
};
arm_Log.init = function() {
	if(arm_Log.haxeTrace == null) {
		arm_Log.haxeTrace = haxe_Log.trace;
		haxe_Log.trace = arm_Log.consoleTrace;
	}
};
arm_Log.consoleTrace = function(v,inf) {
	arm_Log.lastTraces.unshift(Std.string(v));
	if(arm_Log.lastTraces.length > 10) {
		arm_Log.lastTraces.pop();
	}
	arm_Log.haxeTrace(v,inf);
	if(arm_ui_UIStatus.inst != null) {
		arm_ui_UIStatus.inst.statusHandle.redraws = 2;
	}
};
var arm_Operator = function() { };
$hxClasses["arm.Operator"] = arm_Operator;
arm_Operator.__name__ = "arm.Operator";
arm_Operator.shortcut = function(s,type) {
	if(type == null) {
		type = 0;
	}
	if(s == "") {
		return false;
	}
	var mouse = iron_system_Input.getMouse();
	var kb = iron_system_Input.getKeyboard();
	var shift = s.indexOf("shift") >= 0;
	var ctrl = s.indexOf("ctrl") >= 0;
	var alt = s.indexOf("alt") >= 0;
	var flag = shift == kb.down("shift") && ctrl == kb.down("control") && alt == kb.down("alt");
	if(s.indexOf("+") > 0) {
		s = HxOverrides.substr(s,s.lastIndexOf("+") + 1,null);
	} else if(shift || ctrl || alt) {
		return flag;
	}
	var key = s == "left" || s == "right" || s == "middle" ? mouse.down(s) : type == 1 ? kb.repeat(s) : type == 2 ? kb.down(s) : kb.started(s);
	if(flag) {
		return key;
	} else {
		return false;
	}
};
var arm_Plugin = function() {
	this.apiversion = "0.1";
	this.version = "0.1";
	this.delete = null;
	this.update = null;
	this.draw = null;
	this.drawUI = null;
	this.name = arm_Plugin.pluginName;
	var key = this.name;
	var _this = arm_Plugin.plugins;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,this);
	} else {
		_this.h[key] = this;
	}
};
$hxClasses["arm.Plugin"] = arm_Plugin;
arm_Plugin.__name__ = "arm.Plugin";
arm_Plugin.start = function(plugin) {
	try {
		iron_data_Data.getBlob("plugins/" + plugin,function(blob) {
			arm_Plugin.pluginName = plugin;
			(1, eval)(blob.toString());
			iron_data_Data.deleteBlob("plugins/" + plugin);
		});
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		haxe_Log.trace("Failed to load plugin '" + plugin + "'",{ fileName : "arm/Plugin.hx", lineNumber : 34, className : "arm.Plugin", methodName : "start"});
		haxe_Log.trace(e1,{ fileName : "arm/Plugin.hx", lineNumber : 34, className : "arm.Plugin", methodName : "start"});
	}
};
arm_Plugin.stop = function(plugin) {
	var _this = arm_Plugin.plugins;
	var p = __map_reserved[plugin] != null ? _this.getReserved(plugin) : _this.h[plugin];
	if(p != null && p.delete != null) {
		p.delete();
	}
	arm_Plugin.plugins.remove(plugin);
};
arm_Plugin.prototype = {
	__class__: arm_Plugin
};
var iron_App = function(_appReady) {
	_appReady();
	kha_System.notifyOnFrames(iron_App.render);
	kha_Scheduler.addTimeTask(iron_App.update,0,0.016666666666666666 * iron_system_Time.scale);
};
$hxClasses["iron.App"] = iron_App;
iron_App.__name__ = "iron.App";
iron_App.init = function(_appReady) {
	new iron_App(_appReady);
};
iron_App.update = function() {
	if(iron_Scene.active == null || !iron_Scene.active.ready) {
		return;
	}
	if(iron_App.pauseUpdates) {
		return;
	}
	iron_Scene.active.updateFrame();
	var i = 0;
	var l = iron_App.traitUpdates.length;
	while(i < l) {
		if(iron_App.traitInits.length > 0) {
			var _g = 0;
			var _g1 = iron_App.traitInits;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(iron_App.traitInits.length > 0) {
					f();
				} else {
					break;
				}
			}
			iron_App.traitInits.splice(0,iron_App.traitInits.length);
		}
		iron_App.traitUpdates[i]();
		if(l <= iron_App.traitUpdates.length) {
			++i;
		} else {
			l = iron_App.traitUpdates.length;
		}
	}
	i = 0;
	l = iron_App.traitLateUpdates.length;
	while(i < l) {
		iron_App.traitLateUpdates[i]();
		if(l <= iron_App.traitLateUpdates.length) {
			++i;
		} else {
			l = iron_App.traitLateUpdates.length;
		}
	}
	if(iron_App.onEndFrames != null) {
		var _g2 = 0;
		var _g11 = iron_App.onEndFrames;
		while(_g2 < _g11.length) {
			var f1 = _g11[_g2];
			++_g2;
			f1();
		}
	}
	if(iron_App.lastw == -1) {
		iron_App.lastw = arm_App.w();
		iron_App.lasth = arm_App.h();
	}
	if(iron_App.lastw != arm_App.w() || iron_App.lasth != arm_App.h()) {
		if(iron_App.onResize != null) {
			iron_App.onResize();
		} else if(iron_Scene.active != null && iron_Scene.active.camera != null) {
			iron_Scene.active.camera.buildProjection();
		}
	}
	iron_App.lastw = arm_App.w();
	iron_App.lasth = arm_App.h();
};
iron_App.render = function(frames) {
	var frame = frames[0];
	iron_App.framebuffer = frame;
	iron_system_Time.update();
	if(iron_Scene.active == null || !iron_Scene.active.ready) {
		iron_App.render2D(frame);
		return;
	}
	if(iron_App.traitInits.length > 0) {
		var _g = 0;
		var _g1 = iron_App.traitInits;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(iron_App.traitInits.length > 0) {
				f();
			} else {
				break;
			}
		}
		iron_App.traitInits.splice(0,iron_App.traitInits.length);
	}
	iron_Scene.active.renderFrame(frame.get_g4());
	var _g2 = 0;
	var _g11 = iron_App.traitRenders;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		if(iron_App.traitRenders.length > 0) {
			f1(frame.get_g4());
		} else {
			break;
		}
	}
	iron_App.render2D(frame);
};
iron_App.render2D = function(frame) {
	if(iron_App.traitRenders2D.length > 0) {
		frame.get_g2().begin(false);
		var _g = 0;
		var _g1 = iron_App.traitRenders2D;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(iron_App.traitRenders2D.length > 0) {
				f(frame.get_g2());
			} else {
				break;
			}
		}
		frame.get_g2().end();
	}
};
iron_App.notifyOnInit = function(f) {
	iron_App.traitInits.push(f);
};
iron_App.removeInit = function(f) {
	HxOverrides.remove(iron_App.traitInits,f);
};
iron_App.notifyOnUpdate = function(f) {
	iron_App.traitUpdates.push(f);
};
iron_App.removeUpdate = function(f) {
	HxOverrides.remove(iron_App.traitUpdates,f);
};
iron_App.removeLateUpdate = function(f) {
	HxOverrides.remove(iron_App.traitLateUpdates,f);
};
iron_App.notifyOnRender = function(f) {
	iron_App.traitRenders.push(f);
};
iron_App.removeRender = function(f) {
	HxOverrides.remove(iron_App.traitRenders,f);
};
iron_App.notifyOnRender2D = function(f) {
	iron_App.traitRenders2D.push(f);
};
iron_App.removeRender2D = function(f) {
	HxOverrides.remove(iron_App.traitRenders2D,f);
};
iron_App.notifyOnReset = function(f) {
	if(iron_App.onResets == null) {
		iron_App.onResets = [];
	}
	iron_App.onResets.push(f);
};
iron_App.notifyOnEndFrame = function(f) {
	if(iron_App.onEndFrames == null) {
		iron_App.onEndFrames = [];
	}
	iron_App.onEndFrames.push(f);
};
iron_App.prototype = {
	__class__: iron_App
};
var iron_system_ArmPack = function() { };
$hxClasses["iron.system.ArmPack"] = iron_system_ArmPack;
iron_system_ArmPack.__name__ = "iron.system.ArmPack";
iron_system_ArmPack.decode = function(b) {
	var i = new haxe_io_BytesInput(b);
	i.set_bigEndian(false);
	return iron_system_ArmPack.read(i);
};
iron_system_ArmPack.read = function(i,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	try {
		var b = i.readByte();
		switch(b) {
		case 192:
			return null;
		case 194:
			return false;
		case 195:
			return true;
		case 196:
			return i.read(i.readByte());
		case 197:
			return i.read(i.readUInt16());
		case 198:
			return i.read(i.readInt32());
		case 202:
			return i.readFloat();
		case 204:
			return i.readByte();
		case 205:
			return i.readUInt16();
		case 206:
			return i.readInt32();
		case 208:
			return i.readInt8();
		case 209:
			return i.readInt16();
		case 210:
			return i.readInt32();
		case 217:
			return i.readString(i.readByte());
		case 218:
			return i.readString(i.readUInt16());
		case 219:
			return i.readString(i.readInt32());
		case 220:
			return iron_system_ArmPack.readArray(i,i.readUInt16(),key,parentKey);
		case 221:
			return iron_system_ArmPack.readArray(i,i.readInt32(),key,parentKey);
		case 222:
			return iron_system_ArmPack.readMap(i,i.readUInt16(),key,parentKey);
		case 223:
			return iron_system_ArmPack.readMap(i,i.readInt32(),key,parentKey);
		default:
			if(b < 128) {
				return b;
			} else if(b < 144) {
				return iron_system_ArmPack.readMap(i,15 & b,key,parentKey);
			} else if(b < 160) {
				return iron_system_ArmPack.readArray(i,15 & b,key,parentKey);
			} else if(b < 192) {
				return i.readString(31 & b);
			} else if(b > 223) {
				return -256 | b;
			}
		}
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(((e1) instanceof haxe_io_Eof)) {
			var e2 = e1;
		} else {
			throw e;
		}
	}
	return null;
};
iron_system_ArmPack.readArray = function(i,length,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	var b = i.readByte();
	var _g = i;
	_g.set_position(_g.pos - 1);
	if(b == 202) {
		var _g1 = i;
		_g1.set_position(_g1.pos + 1);
		var this1 = new Float32Array(length);
		var a = this1;
		var _g2 = 0;
		var _g11 = length;
		while(_g2 < _g11) {
			var x = _g2++;
			a[x] = i.readFloat();
		}
		return a;
	} else if(b == 210) {
		var _g3 = i;
		_g3.set_position(_g3.pos + 1);
		var this2 = new Uint32Array(length);
		var a1 = this2;
		var _g4 = 0;
		var _g12 = length;
		while(_g4 < _g12) {
			var x1 = _g4++;
			a1[x1] = i.readInt32();
		}
		return a1;
	} else if(b == 209) {
		var _g5 = i;
		_g5.set_position(_g5.pos + 1);
		var this3 = new Int16Array(length);
		var a2 = this3;
		var _g6 = 0;
		var _g13 = length;
		while(_g6 < _g13) {
			var x2 = _g6++;
			a2[x2] = i.readInt16();
		}
		return a2;
	} else {
		var a3 = [];
		var _g7 = 0;
		var _g14 = length;
		while(_g7 < _g14) {
			var x3 = _g7++;
			a3.push(iron_system_ArmPack.read(i,key,parentKey));
		}
		return a3;
	}
};
iron_system_ArmPack.readMap = function(i,length,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	var out = { };
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var n = _g++;
		var k = Std.string(iron_system_ArmPack.read(i));
		var v = iron_system_ArmPack.read(i,k,key);
		out[k] = v;
	}
	return out;
};
iron_system_ArmPack.encode = function(d) {
	var o = new haxe_io_BytesOutput();
	o.set_bigEndian(false);
	iron_system_ArmPack.write(o,d);
	return o.getBytes();
};
iron_system_ArmPack.write = function(o,d) {
	var _g = Type.typeof(d);
	switch(_g._hx_index) {
	case 0:
		o.writeByte(192);
		break;
	case 1:
		o.writeByte(210);
		o.writeInt32(d);
		break;
	case 2:
		o.writeByte(202);
		o.writeFloat(d);
		break;
	case 3:
		o.writeByte(d ? 195 : 194);
		break;
	case 4:
		var f = Reflect.fields(d);
		o.writeByte(223);
		o.writeInt32(f.length);
		var _g1 = 0;
		while(_g1 < f.length) {
			var k = f[_g1];
			++_g1;
			o.writeByte(219);
			o.writeInt32(k.length);
			o.writeString(k);
			iron_system_ArmPack.write(o,Reflect.field(d,k));
		}
		break;
	case 6:
		var c = _g.c;
		var _g2 = c.__name__;
		if(_g2 == null) {
			o.writeByte(221);
			o.writeInt32(d.length);
			var isInt16 = ((d) instanceof Int16Array);
			var isInt = js_Boot.__instanceof(d[0],Int) && !((d) instanceof Float32Array);
			var isFloat = typeof(d[0]) == "number";
			if(isInt16) {
				o.writeByte(209);
				var _g3 = 0;
				var _g11 = d.length;
				while(_g3 < _g11) {
					var i = _g3++;
					o.writeInt16(d[i]);
				}
			} else if(isFloat && !isInt) {
				o.writeByte(202);
				var _g4 = 0;
				var _g12 = d.length;
				while(_g4 < _g12) {
					var i1 = _g4++;
					o.writeFloat(d[i1]);
				}
			} else if(isInt) {
				o.writeByte(210);
				var _g5 = 0;
				var _g13 = d.length;
				while(_g5 < _g13) {
					var i2 = _g5++;
					o.writeInt32(d[i2]);
				}
			} else {
				var _g6 = 0;
				var _g14 = d.length;
				while(_g6 < _g14) {
					var i3 = _g6++;
					iron_system_ArmPack.write(o,d[i3]);
				}
			}
		} else {
			switch(_g2) {
			case "Array":
				o.writeByte(221);
				o.writeInt32(d.length);
				var isInt161 = ((d) instanceof Int16Array);
				var isInt1 = js_Boot.__instanceof(d[0],Int) && !((d) instanceof Float32Array);
				var isFloat1 = typeof(d[0]) == "number";
				if(isInt161) {
					o.writeByte(209);
					var _g7 = 0;
					var _g15 = d.length;
					while(_g7 < _g15) {
						var i4 = _g7++;
						o.writeInt16(d[i4]);
					}
				} else if(isFloat1 && !isInt1) {
					o.writeByte(202);
					var _g8 = 0;
					var _g16 = d.length;
					while(_g8 < _g16) {
						var i5 = _g8++;
						o.writeFloat(d[i5]);
					}
				} else if(isInt1) {
					o.writeByte(210);
					var _g9 = 0;
					var _g17 = d.length;
					while(_g9 < _g17) {
						var i6 = _g9++;
						o.writeInt32(d[i6]);
					}
				} else {
					var _g10 = 0;
					var _g18 = d.length;
					while(_g10 < _g18) {
						var i7 = _g10++;
						iron_system_ArmPack.write(o,d[i7]);
					}
				}
				break;
			case "String":
				o.writeByte(219);
				o.writeInt32(d.length);
				o.writeString(d);
				break;
			case "haxe.io.Bytes":
				o.writeByte(198);
				o.writeInt32(d.length);
				o.write(d);
				break;
			default:
			}
		}
		break;
	default:
	}
};
var iron_data_Data = function() { };
$hxClasses["iron.data.Data"] = iron_data_Data;
iron_data_Data.__name__ = "iron.data.Data";
iron_data_Data.getMesh = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedMeshes;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingMeshes;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingMeshes;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_MeshData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedMeshes;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		b.handle = handle;
		var _g = 0;
		var _this4 = iron_data_Data.loadingMeshes;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingMeshes.remove(handle);
	});
};
iron_data_Data.deleteMesh = function(handle) {
	var _this = iron_data_Data.cachedMeshes;
	var mesh = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(mesh == null) {
		return;
	}
	mesh.delete();
	iron_data_Data.cachedMeshes.remove(handle);
};
iron_data_Data.getLight = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedLights;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingLights;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingLights;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_LightData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedLights;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingLights;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingLights.remove(handle);
	});
};
iron_data_Data.getCamera = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedCameras;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingCameras;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingCameras;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_CameraData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedCameras;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingCameras;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingCameras.remove(handle);
	});
};
iron_data_Data.getMaterial = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedMaterials;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingMaterials;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingMaterials;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_MaterialData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedMaterials;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingMaterials;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingMaterials.remove(handle);
	});
};
iron_data_Data.getParticle = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedParticles;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingParticles;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingParticles;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_ParticleData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedParticles;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingParticles;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingParticles.remove(handle);
	});
};
iron_data_Data.getWorld = function(file,name,done) {
	if(name == null) {
		done(null);
		return;
	}
	var handle = file + name;
	var _this = iron_data_Data.cachedWorlds;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingWorlds;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingWorlds;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_WorldData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedWorlds;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingWorlds;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingWorlds.remove(handle);
	});
};
iron_data_Data.getShader = function(file,name,done,overrideContext) {
	var cacheName = name;
	if(overrideContext != null) {
		cacheName += "2";
	}
	var _this = iron_data_Data.cachedShaders;
	var cached = __map_reserved[cacheName] != null ? _this.getReserved(cacheName) : _this.h[cacheName];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingShaders;
	var loading = __map_reserved[cacheName] != null ? _this1.getReserved(cacheName) : _this1.h[cacheName];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingShaders;
	var value = [done];
	if(__map_reserved[cacheName] != null) {
		_this2.setReserved(cacheName,value);
	} else {
		_this2.h[cacheName] = value;
	}
	iron_data_ShaderData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedShaders;
		if(__map_reserved[cacheName] != null) {
			_this3.setReserved(cacheName,b);
		} else {
			_this3.h[cacheName] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingShaders;
		var _g1 = __map_reserved[cacheName] != null ? _this4.getReserved(cacheName) : _this4.h[cacheName];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingShaders.remove(cacheName);
	},overrideContext);
};
iron_data_Data.getSceneRaw = function(file,done) {
	var _this = iron_data_Data.cachedSceneRaws;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingSceneRaws;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingSceneRaws;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var compressed = StringTools.endsWith(file,".lz4");
	var isJson = StringTools.endsWith(file,".json");
	var ext = compressed || isJson || StringTools.endsWith(file,".arm") ? "" : ".arm";
	iron_data_Data.getBlob(file + ext,function(b) {
		var compressed1 = compressed;
		var parsed = null;
		if(isJson) {
			var s = b.toString();
			if(s.charAt(0) == "{") {
				parsed = JSON.parse(s);
			} else {
				var i = new haxe_io_BytesInput(b.toBytes());
				i.set_bigEndian(false);
				parsed = iron_system_ArmPack.read(i);
			}
		} else {
			var i1 = new haxe_io_BytesInput(b.toBytes());
			i1.set_bigEndian(false);
			parsed = iron_system_ArmPack.read(i1);
		}
		iron_data_Data.returnSceneRaw(file,parsed);
	});
};
iron_data_Data.returnSceneRaw = function(file,parsed) {
	var _this = iron_data_Data.cachedSceneRaws;
	if(__map_reserved[file] != null) {
		_this.setReserved(file,parsed);
	} else {
		_this.h[file] = parsed;
	}
	var _g = 0;
	var _this1 = iron_data_Data.loadingSceneRaws;
	var _g1 = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		f(parsed);
	}
	iron_data_Data.loadingSceneRaws.remove(file);
};
iron_data_Data.getMeshRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getLightRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getCameraRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getMaterialRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getParticleRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getWorldRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getShaderRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getBlob = function(file,done) {
	var _this = iron_data_Data.cachedBlobs;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingBlobs;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingBlobs;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	kha_Assets.loadBlobFromPath(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == "." ? file : iron_data_Data.dataPath + file,function(b) {
		var _this3 = iron_data_Data.cachedBlobs;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingBlobs;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingBlobs.remove(file);
		iron_data_Data.assetsLoaded++;
	});
};
iron_data_Data.deleteBlob = function(handle) {
	var _this = iron_data_Data.cachedBlobs;
	var blob = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(blob == null) {
		return;
	}
	blob.unload();
	iron_data_Data.cachedBlobs.remove(handle);
};
iron_data_Data.getImage = function(file,done,readable,format) {
	if(format == null) {
		format = "RGBA32";
	}
	if(readable == null) {
		readable = false;
	}
	var _this = iron_data_Data.cachedImages;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingImages;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingImages;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	kha_Assets.loadImageFromPath(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == "." ? file : iron_data_Data.dataPath + file,readable,function(b) {
		var _this3 = iron_data_Data.cachedImages;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingImages;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingImages.remove(file);
		iron_data_Data.assetsLoaded++;
	});
};
iron_data_Data.deleteImage = function(handle) {
	var _this = iron_data_Data.cachedImages;
	var image = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(image == null) {
		return;
	}
	image.unload();
	iron_data_Data.cachedImages.remove(handle);
};
iron_data_Data.getFont = function(file,done) {
	var _this = iron_data_Data.cachedFonts;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingFonts;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingFonts;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	kha_Assets.loadFontFromPath(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == "." ? file : iron_data_Data.dataPath + file,function(b) {
		var _this3 = iron_data_Data.cachedFonts;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingFonts;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingFonts.remove(file);
		iron_data_Data.assetsLoaded++;
	});
};
iron_data_Data.isAbsolute = function(file) {
	if(!(file.charAt(0) == "/" || file.charAt(1) == ":")) {
		if(file.charAt(0) == "\\") {
			return file.charAt(1) == "\\";
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var iron_system_Input = function() { };
$hxClasses["iron.system.Input"] = iron_system_Input;
iron_system_Input.__name__ = "iron.system.Input";
iron_system_Input.reset = function() {
	iron_system_Input.occupied = false;
	if(iron_system_Input.mouse != null) {
		iron_system_Input.mouse.reset();
	}
	if(iron_system_Input.pen != null) {
		iron_system_Input.pen.reset();
	}
	if(iron_system_Input.keyboard != null) {
		iron_system_Input.keyboard.reset();
	}
	var _g = 0;
	var _g1 = iron_system_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.reset();
	}
};
iron_system_Input.endFrame = function() {
	if(iron_system_Input.mouse != null) {
		iron_system_Input.mouse.endFrame();
	}
	if(iron_system_Input.pen != null) {
		iron_system_Input.pen.endFrame();
	}
	if(iron_system_Input.keyboard != null) {
		iron_system_Input.keyboard.endFrame();
	}
	var _g = 0;
	var _g1 = iron_system_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.endFrame();
	}
	if(iron_system_Input.virtualButtons != null) {
		var _this = iron_system_Input.virtualButtons;
		var vb = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(vb.hasNext()) {
			var vb1 = vb.next();
			vb1.started = vb1.released = false;
		}
	}
};
iron_system_Input.getMouse = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
	}
	if(iron_system_Input.mouse == null) {
		iron_system_Input.mouse = new iron_system_Mouse();
	}
	return iron_system_Input.mouse;
};
iron_system_Input.getPen = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
	}
	if(iron_system_Input.pen == null) {
		iron_system_Input.pen = new iron_system_Pen();
	}
	return iron_system_Input.pen;
};
iron_system_Input.getKeyboard = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
	}
	if(iron_system_Input.keyboard == null) {
		iron_system_Input.keyboard = new iron_system_Keyboard();
	}
	return iron_system_Input.keyboard;
};
var iron_object_Object = function() {
	this.isEmpty = false;
	this.properties = null;
	this.culledShadow = false;
	this.culledMesh = false;
	this.culled = false;
	this.visibleShadow = true;
	this.visibleMesh = true;
	this.visible = true;
	this.animation = null;
	this.lods = null;
	this.children = [];
	this.parent = null;
	this.traits = [];
	this.constraints = null;
	this.name = "";
	this.raw = null;
	this.uid = iron_object_Object.uidCounter++;
	this.urandom = iron_object_Object.seededRandom();
	this.transform = new iron_object_Transform(this);
	this.isEmpty = js_Boot.getClass(this) == iron_object_Object;
	if(this.isEmpty && iron_Scene.active != null) {
		iron_Scene.active.empties.push(this);
	}
};
$hxClasses["iron.object.Object"] = iron_object_Object;
iron_object_Object.__name__ = "iron.object.Object";
iron_object_Object.seededRandom = function() {
	iron_object_Object.seed = (iron_object_Object.seed * 9301 + 49297) % 233280;
	return iron_object_Object.seed / 233280.0;
};
iron_object_Object.prototype = {
	addChild: function(o,parentInverse) {
		if(parentInverse == null) {
			parentInverse = false;
		}
		if(o.parent == this) {
			return;
		}
		this.children.push(o);
		o.parent = this;
		if(parentInverse) {
			o.transform.applyParentInverse();
		}
	}
	,remove: function() {
		if(this.isEmpty && iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.empties,this);
		}
		if(this.animation != null) {
			this.animation.remove();
		}
		while(this.children.length > 0) this.children[0].remove();
		while(this.traits.length > 0) this.traits[0].remove();
		if(this.parent != null) {
			HxOverrides.remove(this.parent.children,this);
			this.parent = null;
		}
	}
	,getChild: function(name) {
		if(this.name == name) {
			return this;
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var r = c.getChild(name);
				if(r != null) {
					return r;
				}
			}
		}
		return null;
	}
	,getChildren: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(!recursive) {
			return this.children;
		}
		var retChildren = this.children.slice();
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			retChildren = retChildren.concat(child.getChildren(recursive));
		}
		return retChildren;
	}
	,addTrait: function(t) {
		this.traits.push(t);
		t.object = this;
		if(t._add != null) {
			var _g = 0;
			var _g1 = t._add;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
			t._add = null;
		}
	}
	,removeTrait: function(t) {
		if(t._init != null) {
			var _g = 0;
			var _g1 = t._init;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				iron_App.removeInit(f);
			}
			t._init = null;
		}
		if(t._update != null) {
			var _g2 = 0;
			var _g11 = t._update;
			while(_g2 < _g11.length) {
				var f1 = _g11[_g2];
				++_g2;
				iron_App.removeUpdate(f1);
			}
			t._update = null;
		}
		if(t._lateUpdate != null) {
			var _g3 = 0;
			var _g12 = t._lateUpdate;
			while(_g3 < _g12.length) {
				var f2 = _g12[_g3];
				++_g3;
				iron_App.removeLateUpdate(f2);
			}
			t._lateUpdate = null;
		}
		if(t._render != null) {
			var _g4 = 0;
			var _g13 = t._render;
			while(_g4 < _g13.length) {
				var f3 = _g13[_g4];
				++_g4;
				iron_App.removeRender(f3);
			}
			t._render = null;
		}
		if(t._render2D != null) {
			var _g5 = 0;
			var _g14 = t._render2D;
			while(_g5 < _g14.length) {
				var f4 = _g14[_g5];
				++_g5;
				iron_App.removeRender2D(f4);
			}
			t._render2D = null;
		}
		if(t._remove != null) {
			var _g6 = 0;
			var _g15 = t._remove;
			while(_g6 < _g15.length) {
				var f5 = _g15[_g6];
				++_g6;
				f5();
			}
			t._remove = null;
		}
		HxOverrides.remove(this.traits,t);
	}
	,setupAnimation: function(oactions) {
		if(oactions == null) {
			return;
		}
		this.animation = new iron_object_ObjectAnimation(this,oactions);
	}
	,__class__: iron_object_Object
};
var iron_RenderPath = function() {
	this.onVoxelize = null;
	this.voxelized = 0;
	this.depthBuffers = [];
	this.cachedShaderContexts = new haxe_ds_StringMap();
	this.loading = 0;
	this.lastFrameTime = 0.0;
	this.viewportScaled = false;
	this.scissorSet = false;
	this.lastH = 0;
	this.lastW = 0;
	this.depthToRenderTarget = new haxe_ds_StringMap();
	this.renderTargets = new haxe_ds_StringMap();
	this.commands = null;
	this.paused = false;
	this.drawOrder = 0;
	this.currentG = null;
	this.isProbe = false;
	this.isProbeCube = false;
	this.isProbePlanar = false;
	this.point = null;
	this.sun = null;
	this.light = null;
	this.currentTarget = null;
	this.frame = 0;
	this.frameTime = 0.0;
	this.frameScissorH = 0;
	this.frameScissorW = 0;
	this.frameScissorY = 0;
	this.frameScissorX = 0;
	this.frameScissor = false;
};
$hxClasses["iron.RenderPath"] = iron_RenderPath;
iron_RenderPath.__name__ = "iron.RenderPath";
iron_RenderPath.setActive = function(renderPath) {
	iron_RenderPath.active = renderPath;
};
iron_RenderPath.sortMeshesDistance = function(meshes) {
	meshes.sort(function(a,b) {
		if(a.cameraDistance >= b.cameraDistance) {
			return 1;
		} else {
			return -1;
		}
	});
};
iron_RenderPath.sortMeshesShader = function(meshes) {
	meshes.sort(function(a,b) {
		if(a.materials[0].name >= b.materials[0].name) {
			return 1;
		} else {
			return -1;
		}
	});
};
iron_RenderPath.prototype = {
	get_ready: function() {
		return this.loading == 0;
	}
	,voxelize: function() {
		if(this.onVoxelize != null) {
			return this.onVoxelize();
		}
		return true;
	}
	,renderFrame: function(g) {
		if(!this.get_ready() || this.paused || arm_App.w() == 0 || arm_App.h() == 0) {
			return;
		}
		if(this.lastW > 0 && (this.lastW != arm_App.w() || this.lastH != arm_App.h())) {
			this.resize();
		}
		this.lastW = arm_App.w();
		this.lastH = arm_App.h();
		this.frameTime = kha_Scheduler.time() - this.lastFrameTime;
		this.lastFrameTime = kha_Scheduler.time();
		var cam = iron_Scene.active.camera;
		this.isProbePlanar = cam != null && cam.renderTarget != null;
		this.isProbeCube = cam != null && cam.renderTargetCube != null;
		this.isProbe = this.isProbePlanar || this.isProbeCube;
		if(this.isProbePlanar) {
			this.frameG = cam.renderTarget.get_g4();
		} else if(this.isProbeCube) {
			this.frameG = cam.renderTargetCube.get_g4();
		} else {
			this.frameG = g;
		}
		this.currentW = arm_App.w();
		this.currentH = arm_App.h();
		this.currentD = 1;
		this.currentFace = -1;
		this.meshesSorted = false;
		var _g = 0;
		var _g1 = iron_Scene.active.lights;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.visible) {
				l.buildMatrix(iron_Scene.active.camera);
			}
			if(l.data.raw.type == "sun") {
				this.sun = l;
			} else {
				this.point = l;
			}
		}
		this.light = iron_Scene.active.lights[0];
		this.commands();
		if(!this.isProbe) {
			this.frame++;
		}
	}
	,setTarget: function(target,additional,viewportScale) {
		if(viewportScale == null) {
			viewportScale = 1.0;
		}
		if(target == "") {
			this.currentD = 1;
			this.currentTarget = null;
			this.currentFace = -1;
			if(this.isProbeCube) {
				this.currentW = iron_Scene.active.camera.renderTargetCube.get_width();
				this.currentH = iron_Scene.active.camera.renderTargetCube.get_height();
				var g = this.frameG;
				var additionalRenderTargets = null;
				var face = iron_Scene.active.camera.currentFace;
				if(face == null) {
					face = -1;
				}
				if(this.currentG != null) {
					if(this.scissorSet) {
						this.currentG.disableScissor();
						this.scissorSet = false;
					}
					this.currentG.end();
					this.currentG = null;
					this.bindParams = null;
				}
				this.currentG = g;
				this.additionalTargets = additionalRenderTargets;
				if(face >= 0) {
					g.beginFace(face);
				} else {
					g.begin(additionalRenderTargets);
				}
			} else {
				this.currentW = arm_App.w();
				this.currentH = arm_App.h();
				if(this.frameScissor) {
					this.setFrameScissor();
				}
				var g1 = this.frameG;
				var additionalRenderTargets1 = null;
				if(this.currentG != null) {
					if(this.scissorSet) {
						this.currentG.disableScissor();
						this.scissorSet = false;
					}
					this.currentG.end();
					this.currentG = null;
					this.bindParams = null;
				}
				this.currentG = g1;
				this.additionalTargets = additionalRenderTargets1;
				g1.begin(additionalRenderTargets1);
				if(!this.isProbe) {
					this.setCurrentViewport(arm_App.w(),arm_App.h());
					this.setCurrentScissor(arm_App.w(),arm_App.h());
				}
			}
		} else {
			var _this = this.renderTargets;
			var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
			this.currentTarget = rt;
			var additionalImages = null;
			if(additional != null) {
				additionalImages = [];
				var _g = 0;
				while(_g < additional.length) {
					var s = additional[_g];
					++_g;
					var _this1 = this.renderTargets;
					var t = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
					additionalImages.push(t.image);
				}
			}
			var targetG = rt.isCubeMap ? rt.cubeMap.get_g4() : rt.image.get_g4();
			this.currentW = rt.isCubeMap ? rt.cubeMap.get_width() : rt.image.get_width();
			this.currentH = rt.isCubeMap ? rt.cubeMap.get_height() : rt.image.get_height();
			if(rt.is3D) {
				this.currentD = rt.image.get_depth();
			}
			var face1 = this.currentFace;
			if(face1 == null) {
				face1 = -1;
			}
			if(this.currentG != null) {
				if(this.scissorSet) {
					this.currentG.disableScissor();
					this.scissorSet = false;
				}
				this.currentG.end();
				this.currentG = null;
				this.bindParams = null;
			}
			this.currentG = targetG;
			this.additionalTargets = additionalImages;
			if(face1 >= 0) {
				targetG.beginFace(face1);
			} else {
				targetG.begin(additionalImages);
			}
		}
		if(viewportScale != 1.0) {
			this.viewportScaled = true;
			var viewW = this.currentW * viewportScale | 0;
			var viewH = this.currentH * viewportScale | 0;
			this.currentG.viewport(0,viewH,viewW,viewH);
			this.currentG.scissor(0,viewH,viewW,viewH);
		} else if(this.viewportScaled) {
			this.viewportScaled = false;
			this.setCurrentViewport(this.currentW,this.currentH);
			this.setCurrentScissor(this.currentW,this.currentH);
		}
		this.bindParams = null;
	}
	,setDepthFrom: function(target,from) {
		var _this = this.renderTargets;
		var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
		var _this1 = this.renderTargets;
		rt.image.setDepthStencilFrom((__map_reserved[from] != null ? _this1.getReserved(from) : _this1.h[from]).image);
	}
	,setCurrentViewport: function(viewW,viewH) {
		this.currentG.viewport(arm_App.x(),this.currentH - (viewH - arm_App.y()),viewW,viewH);
	}
	,setCurrentScissor: function(viewW,viewH) {
		this.currentG.scissor(arm_App.x(),this.currentH - (viewH - arm_App.y()),viewW,viewH);
		this.scissorSet = true;
	}
	,setFrameScissor: function() {
		this.frameG.scissor(this.frameScissorX,this.currentH - (this.frameScissorH - this.frameScissorY),this.frameScissorW,this.frameScissorH);
	}
	,setViewport: function(viewW,viewH) {
		this.setCurrentViewport(viewW,viewH);
		this.setCurrentScissor(viewW,viewH);
	}
	,clearTarget: function(colorFlag,depthFlag) {
		if(colorFlag == -1) {
			if(iron_Scene.active.world != null) {
				colorFlag = iron_Scene.active.world.raw.background_color;
			} else if(iron_Scene.active.camera != null) {
				var cc = iron_Scene.active.camera.data.raw.clear_color;
				if(cc != null) {
					colorFlag = kha__$Color_Color_$Impl_$.fromFloats(cc[0],cc[1],cc[2]);
				}
			}
		}
		this.currentG.clear(colorFlag,depthFlag,null);
	}
	,clearImage: function(target,color) {
		var _this = this.renderTargets;
		var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
		rt.image.clear(0,0,0,rt.image.get_width(),rt.image.get_height(),rt.image.get_depth(),color);
	}
	,generateMipmaps: function(target) {
		var _this = this.renderTargets;
		var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
		rt.image.generateMipmaps(1000);
	}
	,drawMeshes: function(context) {
		var isShadows = context == "shadowmap";
		if(isShadows) {
			if(this.light == null || !this.light.data.raw.cast_shadow || !this.light.visible || this.light.data.raw.strength == 0) {
				return;
			}
		}
		if(this.currentFace >= 0 && this.light != null) {
			this.light.setCubeFace(this.currentFace,iron_Scene.active.camera);
		}
		var drawn = false;
		if(!drawn) {
			this.submitDraw(context);
		}
		if(this.scissorSet) {
			this.currentG.disableScissor();
			this.scissorSet = false;
		}
		this.currentG.end();
		this.currentG = null;
		this.bindParams = null;
	}
	,submitDraw: function(context) {
		var camera = iron_Scene.active.camera;
		var meshes = iron_Scene.active.meshes;
		iron_object_MeshObject.lastPipeline = null;
		if(!this.meshesSorted && camera != null) {
			var camX = camera.transform.world.self._30;
			var camY = camera.transform.world.self._31;
			var camZ = camera.transform.world.self._32;
			var _g = 0;
			while(_g < meshes.length) {
				var mesh = meshes[_g];
				++_g;
				var vx = camX - mesh.transform.world.self._30;
				var vy = camY - mesh.transform.world.self._31;
				var vz = camZ - mesh.transform.world.self._32;
				mesh.cameraDistance = Math.sqrt(vx * vx + vy * vy + vz * vz);
			}
			if(this.drawOrder == 1) {
				iron_RenderPath.sortMeshesShader(meshes);
			} else {
				iron_RenderPath.sortMeshesDistance(meshes);
			}
			this.meshesSorted = true;
		}
		var _g1 = 0;
		while(_g1 < meshes.length) {
			var m = meshes[_g1];
			++_g1;
			m.render(this.currentG,context,this.bindParams);
		}
	}
	,drawSkydome: function(handle) {
		if(iron_data_ConstData.skydomeVB == null) {
			iron_data_ConstData.createSkydomeData();
		}
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(cc.context == null) {
			return;
		}
		this.currentG.setPipeline(cc.context.pipeState);
		iron_object_Uniforms.setContextConstants(this.currentG,cc.context,this.bindParams);
		iron_object_Uniforms.setObjectConstants(this.currentG,cc.context,null);
		this.currentG.setVertexBuffer(iron_data_ConstData.skydomeVB);
		this.currentG.setIndexBuffer(iron_data_ConstData.skydomeIB);
		this.currentG.drawIndexedVertices();
		if(this.scissorSet) {
			this.currentG.disableScissor();
			this.scissorSet = false;
		}
		this.currentG.end();
		this.currentG = null;
		this.bindParams = null;
	}
	,bindTarget: function(target,uniform) {
		if(this.bindParams != null) {
			this.bindParams.push(target);
			this.bindParams.push(uniform);
		} else {
			this.bindParams = [target,uniform];
		}
	}
	,drawShader: function(handle) {
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(iron_data_ConstData.screenAlignedVB == null) {
			iron_data_ConstData.createScreenAlignedData();
		}
		this.currentG.setPipeline(cc.context.pipeState);
		iron_object_Uniforms.setContextConstants(this.currentG,cc.context,this.bindParams);
		iron_object_Uniforms.setObjectConstants(this.currentG,cc.context,null);
		this.currentG.setVertexBuffer(iron_data_ConstData.screenAlignedVB);
		this.currentG.setIndexBuffer(iron_data_ConstData.screenAlignedIB);
		this.currentG.drawIndexedVertices();
		if(this.scissorSet) {
			this.currentG.disableScissor();
			this.scissorSet = false;
		}
		this.currentG.end();
		this.currentG = null;
		this.bindParams = null;
	}
	,loadShader: function(handle) {
		var _gthis = this;
		this.loading++;
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(cc != null) {
			this.loading--;
			return;
		}
		cc = new iron_CachedShaderContext();
		var _this1 = this.cachedShaderContexts;
		if(__map_reserved[handle] != null) {
			_this1.setReserved(handle,cc);
		} else {
			_this1.h[handle] = cc;
		}
		var shaderPath = handle.split("/");
		iron_data_Data.getShader(shaderPath[0],shaderPath[1],function(res) {
			cc.context = res.getContext(shaderPath[2]);
			_gthis.loading--;
		});
	}
	,resize: function() {
		if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
			return;
		}
		var _this = this.renderTargets;
		var rt = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(rt.hasNext()) {
			var rt1 = rt.next();
			var tmp;
			if(!(rt1.raw.width > 0 || rt1.depthStencilFrom == "")) {
				var key = rt1.depthStencilFrom;
				var _this1 = this.depthToRenderTarget;
				tmp = rt1 == (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]);
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var nodepth = null;
			var _this2 = this.renderTargets;
			var rt2 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(rt2.hasNext()) {
				var rt21 = rt2.next();
				var tmp1;
				if(!(rt21.raw.width > 0 || rt21.depthStencilFrom != "")) {
					var key1 = rt21.raw.depth_buffer;
					var _this3 = this.depthToRenderTarget;
					tmp1 = (__map_reserved[key1] != null ? _this3.getReserved(key1) : _this3.h[key1]) != null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					continue;
				}
				nodepth = rt21;
				break;
			}
			if(nodepth != null) {
				rt1.image.setDepthStencilFrom(nodepth.image);
			}
		}
		var _this4 = this.renderTargets;
		var rt3 = new haxe_ds__$StringMap_StringMapIterator(_this4,_this4.arrayKeys());
		while(rt3.hasNext()) {
			var rt4 = rt3.next();
			if(rt4.raw.width == 0) {
				rt4.image.unload();
				rt4.image = this.createImage(rt4.raw,rt4.depthStencil);
			}
		}
		var _this5 = this.renderTargets;
		var rt5 = new haxe_ds__$StringMap_StringMapIterator(_this5,_this5.arrayKeys());
		while(rt5.hasNext()) {
			var rt6 = rt5.next();
			if(rt6.depthStencilFrom != "") {
				var key2 = rt6.depthStencilFrom;
				var _this6 = this.depthToRenderTarget;
				rt6.image.setDepthStencilFrom((__map_reserved[key2] != null ? _this6.getReserved(key2) : _this6.h[key2]).image);
			}
		}
	}
	,createRenderTarget: function(t) {
		var rt = this.createTarget(t);
		var key = t.name;
		var _this = this.renderTargets;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,rt);
		} else {
			_this.h[key] = rt;
		}
		return rt;
	}
	,createDepthBuffer: function(name,format) {
		this.depthBuffers.push({ name : name, format : format});
	}
	,createTarget: function(t) {
		var rt = new iron_RenderTarget(t);
		if(t.depth_buffer != null) {
			rt.hasDepth = true;
			var key = t.depth_buffer;
			var _this = this.depthToRenderTarget;
			var depthTarget = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(depthTarget == null) {
				var _g = 0;
				var _g1 = this.depthBuffers;
				while(_g < _g1.length) {
					var db = _g1[_g];
					++_g;
					if(db.name == t.depth_buffer) {
						var key1 = db.name;
						var _this1 = this.depthToRenderTarget;
						if(__map_reserved[key1] != null) {
							_this1.setReserved(key1,rt);
						} else {
							_this1.h[key1] = rt;
						}
						var s = db.format;
						var tmp;
						if(s == null || s == "") {
							tmp = 1;
						} else {
							switch(s) {
							case "DEPTH16":
								tmp = 5;
								break;
							case "DEPTH24":
								tmp = 1;
								break;
							default:
								tmp = 1;
							}
						}
						rt.depthStencil = tmp;
						rt.image = this.createImage(t,rt.depthStencil);
						break;
					}
				}
			} else {
				rt.depthStencil = 0;
				rt.depthStencilFrom = t.depth_buffer;
				rt.image = this.createImage(t,rt.depthStencil);
				rt.image.setDepthStencilFrom(depthTarget.image);
			}
		} else {
			rt.hasDepth = false;
			if(t.depth != null && t.depth > 1) {
				rt.is3D = true;
			}
			if(t.is_cubemap) {
				rt.isCubeMap = true;
				rt.depthStencil = 0;
				rt.cubeMap = this.createCubeMap(t,rt.depthStencil);
			} else {
				rt.depthStencil = 0;
				rt.image = this.createImage(t,rt.depthStencil);
			}
		}
		return rt;
	}
	,createImage: function(t,depthStencil) {
		var width = t.width == 0 ? arm_App.w() : t.width;
		var height = t.height == 0 ? arm_App.h() : t.height;
		var depth = t.depth != null ? t.depth : 0;
		if(t.displayp != null) {
			if(width > height) {
				width = width * (t.displayp / height) | 0;
				height = t.displayp;
			} else {
				height = height * (t.displayp / width) | 0;
				width = t.displayp;
			}
		}
		if(t.scale != null) {
			width = width * t.scale | 0;
			height = height * t.scale | 0;
			depth = depth * t.scale | 0;
		}
		if(width < 1) {
			width = 1;
		}
		if(height < 1) {
			height = 1;
		}
		if(t.depth != null && t.depth > 1) {
			var img;
			if(t.format != null) {
				switch(t.format) {
				case "DEPTH16":
					img = 3;
					break;
				case "R16":
					img = 6;
					break;
				case "R32":
					img = 5;
					break;
				case "R8":
					img = 1;
					break;
				case "RGBA128":
					img = 2;
					break;
				case "RGBA32":
					img = 0;
					break;
				case "RGBA64":
					img = 4;
					break;
				default:
					img = 0;
				}
			} else {
				img = 0;
			}
			var img1 = kha_Image.create3D(width,height,depth,img);
			if(t.mipmaps) {
				img1.generateMipmaps(1000);
			}
			return img1;
		} else if(t.is_image != null && t.is_image) {
			var tmp;
			if(t.format != null) {
				switch(t.format) {
				case "DEPTH16":
					tmp = 3;
					break;
				case "R16":
					tmp = 6;
					break;
				case "R32":
					tmp = 5;
					break;
				case "R8":
					tmp = 1;
					break;
				case "RGBA128":
					tmp = 2;
					break;
				case "RGBA32":
					tmp = 0;
					break;
				case "RGBA64":
					tmp = 4;
					break;
				default:
					tmp = 0;
				}
			} else {
				tmp = 0;
			}
			return kha_Image.create(width,height,tmp);
		} else {
			var tmp1;
			if(t.format != null) {
				switch(t.format) {
				case "DEPTH16":
					tmp1 = 3;
					break;
				case "R16":
					tmp1 = 6;
					break;
				case "R32":
					tmp1 = 5;
					break;
				case "R8":
					tmp1 = 1;
					break;
				case "RGBA128":
					tmp1 = 2;
					break;
				case "RGBA32":
					tmp1 = 0;
					break;
				case "RGBA64":
					tmp1 = 4;
					break;
				default:
					tmp1 = 0;
				}
			} else {
				tmp1 = 0;
			}
			return kha_Image.createRenderTarget(width,height,tmp1,depthStencil);
		}
	}
	,createCubeMap: function(t,depthStencil) {
		var tmp;
		if(t.format != null) {
			switch(t.format) {
			case "DEPTH16":
				tmp = 3;
				break;
			case "R16":
				tmp = 6;
				break;
			case "R32":
				tmp = 5;
				break;
			case "R8":
				tmp = 1;
				break;
			case "RGBA128":
				tmp = 2;
				break;
			case "RGBA32":
				tmp = 0;
				break;
			case "RGBA64":
				tmp = 4;
				break;
			default:
				tmp = 0;
			}
		} else {
			tmp = 0;
		}
		return kha_graphics4_CubeMap.createRenderTarget(t.width,tmp,depthStencil);
	}
	,__class__: iron_RenderPath
	,__properties__: {get_ready:"get_ready"}
};
var iron_Scene = function() {
	this.traitRemoves = [];
	this.traitInits = [];
	this.groups = null;
	this.uid = iron_Scene.uidCounter++;
	this.meshes = [];
	this.lights = [];
	this.cameras = [];
	this.empties = [];
	this.animations = [];
	this.armatures = [];
	this.embedded = new haxe_ds_StringMap();
	this.root = new iron_object_Object();
	this.root.name = "Root";
	this.traitInits = [];
	this.traitRemoves = [];
	this.initializing = true;
	if(iron_Scene.global == null) {
		iron_Scene.global = new iron_object_Object();
	}
};
$hxClasses["iron.Scene"] = iron_Scene;
iron_Scene.__name__ = "iron.Scene";
iron_Scene.create = function(format,done) {
	iron_Scene.active = new iron_Scene();
	iron_Scene.active.ready = false;
	iron_Scene.active.raw = format;
	iron_data_Data.getWorld(format.name,format.world_ref,function(world) {
		iron_Scene.active.world = world;
		iron_Scene.active.addScene(format.name,null,function(sceneObject) {
			var _g = 0;
			var _g1 = sceneObject.getChildren(true);
			while(_g < _g1.length) {
				var object = _g1[_g];
				++_g;
				iron_Scene.createTraits(iron_Scene.getRawObjectByName(format,object.name).traits,object);
			}
			if(iron_Scene.active.cameras.length == 0) {
				haxe_Log.trace("No camera found for scene \"" + format.name + "\"",{ fileName : "Sources/iron/Scene.hx", lineNumber : 131, className : "iron.Scene", methodName : "create"});
			}
			iron_Scene.active.camera = iron_Scene.active.getCamera(format.camera_ref);
			iron_Scene.active.ready = true;
			var _g2 = 0;
			var _g3 = iron_Scene.active.traitInits;
			while(_g2 < _g3.length) {
				var f = _g3[_g2];
				++_g2;
				f();
			}
			iron_Scene.active.traitInits = [];
			iron_Scene.active.sceneParent = sceneObject;
			iron_Scene.active.initializing = false;
			done(sceneObject);
		});
	});
};
iron_Scene.setActive = function(sceneName,done) {
	if(!iron_Scene.framePassed) {
		return;
	}
	iron_Scene.framePassed = false;
	if(iron_Scene.active != null) {
		iron_Scene.active.remove();
	}
	iron_data_Data.getSceneRaw(sceneName,function(format) {
		iron_Scene.create(format,function(o) {
			if(done != null) {
				done(o);
			}
			iron_RenderPath.active.voxelized = 0;
		});
	});
};
iron_Scene.getRawObjectByName = function(format,name) {
	return iron_Scene.traverseObjs(format.objects,name);
};
iron_Scene.traverseObjs = function(children,name) {
	var _g = 0;
	while(_g < children.length) {
		var o = children[_g];
		++_g;
		if(o.name == name) {
			return o;
		}
		if(o.children != null) {
			var res = iron_Scene.traverseObjs(o.children,name);
			if(res != null) {
				return res;
			}
		}
	}
	return null;
};
iron_Scene.generateTransform = function(object,transform) {
	var tmp;
	if(object.transform != null) {
		var a = object.transform.values;
		tmp = new iron_math_Mat4(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);
	} else {
		tmp = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	}
	transform.world = tmp;
	var _this = transform.world;
	var loc = transform.loc;
	var quat = transform.rot;
	var scale = transform.scale;
	loc.x = _this.self._30;
	loc.y = _this.self._31;
	loc.z = _this.self._32;
	var _this1 = iron_math_Mat4.helpVec;
	_this1.x = _this.self._00;
	_this1.y = _this.self._01;
	_this1.z = _this.self._02;
	_this1.w = 1.0;
	var _this2 = _this1;
	scale.x = Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y + _this2.z * _this2.z);
	var _this3 = iron_math_Mat4.helpVec;
	_this3.x = _this.self._10;
	_this3.y = _this.self._11;
	_this3.z = _this.self._12;
	_this3.w = 1.0;
	var _this4 = _this3;
	scale.y = Math.sqrt(_this4.x * _this4.x + _this4.y * _this4.y + _this4.z * _this4.z);
	var _this5 = iron_math_Mat4.helpVec;
	_this5.x = _this.self._20;
	_this5.y = _this.self._21;
	_this5.z = _this.self._22;
	_this5.w = 1.0;
	var _this6 = _this5;
	scale.z = Math.sqrt(_this6.x * _this6.x + _this6.y * _this6.y + _this6.z * _this6.z);
	var _this7 = _this.self;
	var m3 = _this7._12;
	var m4 = _this7._22;
	var m5 = _this7._32;
	var m6 = _this7._13;
	var m7 = _this7._23;
	var m8 = _this7._33;
	var c00 = _this7._11 * (m4 * m8 - m5 * m7) - _this7._21 * (m3 * m8 - m5 * m6) + _this7._31 * (m3 * m7 - m4 * m6);
	var m31 = _this7._12;
	var m41 = _this7._22;
	var m51 = _this7._32;
	var m61 = _this7._13;
	var m71 = _this7._23;
	var m81 = _this7._33;
	var c01 = _this7._10 * (m41 * m81 - m51 * m71) - _this7._20 * (m31 * m81 - m51 * m61) + _this7._30 * (m31 * m71 - m41 * m61);
	var m32 = _this7._11;
	var m42 = _this7._21;
	var m52 = _this7._31;
	var m62 = _this7._13;
	var m72 = _this7._23;
	var m82 = _this7._33;
	var c02 = _this7._10 * (m42 * m82 - m52 * m72) - _this7._20 * (m32 * m82 - m52 * m62) + _this7._30 * (m32 * m72 - m42 * m62);
	var m33 = _this7._11;
	var m43 = _this7._21;
	var m53 = _this7._31;
	var m63 = _this7._12;
	var m73 = _this7._22;
	var m83 = _this7._32;
	var c03 = _this7._10 * (m43 * m83 - m53 * m73) - _this7._20 * (m33 * m83 - m53 * m63) + _this7._30 * (m33 * m73 - m43 * m63);
	if(_this7._00 * c00 - _this7._01 * c01 + _this7._02 * c02 - _this7._03 * c03 < 0.0) {
		scale.x = -scale.x;
	}
	var invs = 1.0 / scale.x;
	iron_math_Mat4.helpMat.self._00 = _this.self._00 * invs;
	iron_math_Mat4.helpMat.self._01 = _this.self._01 * invs;
	iron_math_Mat4.helpMat.self._02 = _this.self._02 * invs;
	invs = 1.0 / scale.y;
	iron_math_Mat4.helpMat.self._10 = _this.self._10 * invs;
	iron_math_Mat4.helpMat.self._11 = _this.self._11 * invs;
	iron_math_Mat4.helpMat.self._12 = _this.self._12 * invs;
	invs = 1.0 / scale.z;
	iron_math_Mat4.helpMat.self._20 = _this.self._20 * invs;
	iron_math_Mat4.helpMat.self._21 = _this.self._21 * invs;
	iron_math_Mat4.helpMat.self._22 = _this.self._22 * invs;
	var m = iron_math_Mat4.helpMat;
	var m11 = m.self._00;
	var m12 = m.self._10;
	var m13 = m.self._20;
	var m21 = m.self._01;
	var m22 = m.self._11;
	var m23 = m.self._21;
	var m311 = m.self._02;
	var m321 = m.self._12;
	var m331 = m.self._22;
	var tr = m11 + m22 + m331;
	var s = 0.0;
	if(tr > 0) {
		s = 0.5 / Math.sqrt(tr + 1.0);
		quat.w = 0.25 / s;
		quat.x = (m321 - m23) * s;
		quat.y = (m13 - m311) * s;
		quat.z = (m21 - m12) * s;
	} else if(m11 > m22 && m11 > m331) {
		s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
		quat.w = (m321 - m23) / s;
		quat.x = 0.25 * s;
		quat.y = (m12 + m21) / s;
		quat.z = (m13 + m311) / s;
	} else if(m22 > m331) {
		s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
		quat.w = (m13 - m311) / s;
		quat.x = (m12 + m21) / s;
		quat.y = 0.25 * s;
		quat.z = (m23 + m321) / s;
	} else {
		s = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
		quat.w = (m21 - m12) / s;
		quat.x = (m13 + m311) / s;
		quat.y = (m23 + m321) / s;
		quat.z = 0.25 * s;
	}
	if(object.local_only != null) {
		transform.localOnly = object.local_only;
	}
	if(transform.object.parent != null) {
		transform.update();
	}
};
iron_Scene.createTraits = function(traits,object) {
	if(traits == null) {
		return;
	}
	var _g = 0;
	while(_g < traits.length) {
		var t = traits[_g];
		++_g;
		if(t.type == "Script") {
			var args = [];
			if(t.parameters != null) {
				var _g1 = 0;
				var _g11 = t.parameters;
				while(_g1 < _g11.length) {
					var param = _g11[_g1];
					++_g1;
					args.push(iron_Scene.parseArg(param));
				}
			}
			var traitInst = iron_Scene.createTraitClassInstance(t.class_name,args);
			if(traitInst == null) {
				haxe_Log.trace("Error: Trait '" + t.class_name + "' referenced in object '" + object.name + "' not found",{ fileName : "Sources/iron/Scene.hx", lineNumber : 799, className : "iron.Scene", methodName : "createTraits"});
				continue;
			}
			if(t.props != null) {
				var _g2 = 0;
				var _g12 = t.props.length / 3 | 0;
				while(_g2 < _g12) {
					var i = _g2++;
					var pname = t.props[i * 3];
					var ptype = t.props[i * 3 + 1];
					var pval = t.props[i * 3 + 2];
					if(StringTools.endsWith(ptype,"Object") && pval != "") {
						Reflect.setProperty(traitInst,pname,iron_Scene.active.getChild(pval));
					} else {
						switch(ptype) {
						case "Vec2":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec2(pval[0],pval[1]));
							break;
						case "Vec3":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec3(pval[0],pval[1],pval[2]));
							break;
						case "Vec4":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec4(pval[0],pval[1],pval[2],pval[3]));
							break;
						default:
							Reflect.setProperty(traitInst,pname,pval);
						}
					}
				}
			}
			object.addTrait(traitInst);
		}
	}
};
iron_Scene.parseArg = function(str) {
	if(str == "true") {
		return true;
	} else if(str == "false") {
		return false;
	} else if(str == "null") {
		return null;
	} else if(str.charAt(0) == "'") {
		return StringTools.replace(str,"'","");
	} else if(str.charAt(0) == "\"") {
		return StringTools.replace(str,"\"","");
	} else if(str.charAt(0) == "[") {
		str = StringTools.replace(str,"[","");
		str = StringTools.replace(str,"]","");
		str = StringTools.replace(str," ","");
		var ar = [];
		var vals = str.split(",");
		var _g = 0;
		while(_g < vals.length) {
			var v = vals[_g];
			++_g;
			ar.push(iron_Scene.parseArg(v));
		}
		return ar;
	} else {
		var f = parseFloat(str);
		var i = Std.parseInt(str);
		if(f == i) {
			return i;
		} else {
			return f;
		}
	}
};
iron_Scene.createConstraints = function(constraints,object) {
	if(constraints == null) {
		return;
	}
	object.constraints = [];
	var _g = 0;
	while(_g < constraints.length) {
		var c = constraints[_g];
		++_g;
		var constr = new iron_object_Constraint(c);
		object.constraints.push(constr);
	}
};
iron_Scene.createTraitClassInstance = function(traitName,args) {
	var cname = $hxClasses[traitName];
	if(cname == null) {
		return null;
	}
	return Type.createInstance(cname,args);
};
iron_Scene.prototype = {
	remove: function() {
		var _g = 0;
		var _g1 = this.traitRemoves;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
		var _g2 = 0;
		var _g3 = this.meshes;
		while(_g2 < _g3.length) {
			var o = _g3[_g2];
			++_g2;
			o.remove();
		}
		var _g4 = 0;
		var _g5 = this.lights;
		while(_g4 < _g5.length) {
			var o1 = _g5[_g4];
			++_g4;
			o1.remove();
		}
		var _g6 = 0;
		var _g7 = this.cameras;
		while(_g6 < _g7.length) {
			var o2 = _g7[_g6];
			++_g6;
			o2.remove();
		}
		var _g8 = 0;
		var _g9 = this.empties;
		while(_g8 < _g9.length) {
			var o3 = _g9[_g8];
			++_g8;
			o3.remove();
		}
		this.groups = null;
		this.root.remove();
	}
	,updateFrame: function() {
		if(!this.ready) {
			return;
		}
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var anim = _g1[_g];
			++_g;
			anim.update(0.016666666666666666 * iron_system_Time.scale);
		}
		var _g2 = 0;
		var _g3 = this.empties;
		while(_g2 < _g3.length) {
			var e = _g3[_g2];
			++_g2;
			if(e != null && e.parent != null) {
				e.transform.update();
			}
		}
	}
	,renderFrame: function(g) {
		if(!this.ready || iron_RenderPath.active == null) {
			return;
		}
		iron_Scene.framePassed = true;
		if(this.camera != null) {
			this.camera.renderFrame(g);
		} else {
			iron_RenderPath.active.renderFrame(g);
		}
	}
	,addObject: function(parent) {
		var object = new iron_object_Object();
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,getChild: function(name) {
		return this.root.getChild(name);
	}
	,getCamera: function(name) {
		var _g = 0;
		var _g1 = this.cameras;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == name) {
				return c;
			}
		}
		return null;
	}
	,addMeshObject: function(data,materials,parent) {
		var object = new iron_object_MeshObject(data,materials);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addLightObject: function(data,parent) {
		var object = new iron_object_LightObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addCameraObject: function(data,parent) {
		var object = new iron_object_CameraObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addScene: function(sceneName,parent,done) {
		var _gthis = this;
		if(parent == null) {
			parent = this.addObject();
			parent.name = sceneName;
		}
		iron_data_Data.getSceneRaw(sceneName,function(format) {
			iron_Scene.createTraits(format.traits,parent);
			_gthis.loadEmbeddedData(format.embedded_datas,function() {
				var objectsTraversed = 0;
				var objectsCount = _gthis.getObjectsCount(format.objects);
				var traverseObjects = null;
				traverseObjects = function(parent1,objects,parentObject,done1) {
					if(objects == null) {
						return;
					}
					var _g = 0;
					var _g1 = objects.length;
					while(_g < _g1) {
						var i = _g++;
						var o = [objects[i]];
						if(o[0].spawn != null && o[0].spawn == false) {
							if((objectsTraversed += 1) == objectsCount) {
								done1();
							}
							continue;
						}
						var o1 = o[0];
						var traverseObjects1 = (function(o2) {
							return function(object) {
								if(object != null) {
									traverseObjects(object,o2[0].children,o2[0],done1);
								}
								if((objectsTraversed += 1) == objectsCount) {
									done1();
								}
							};
						})(o);
						_gthis.createObject(o1,format,parent1,parentObject,traverseObjects1);
					}
				};
				if(format.objects == null || format.objects.length == 0) {
					done(parent);
				} else {
					traverseObjects(parent,format.objects,null,function() {
						done(parent);
					});
				}
			});
		});
	}
	,getObjectsCount: function(objects,discardNoSpawn) {
		if(discardNoSpawn == null) {
			discardNoSpawn = true;
		}
		if(objects == null) {
			return 0;
		}
		var result = objects.length;
		var _g = 0;
		while(_g < objects.length) {
			var o = objects[_g];
			++_g;
			if(discardNoSpawn && o.spawn != null && o.spawn == false) {
				continue;
			}
			if(o.children != null) {
				result += this.getObjectsCount(o.children);
			}
		}
		return result;
	}
	,spawnObject: function(name,parent,done,spawnChildren) {
		if(spawnChildren == null) {
			spawnChildren = true;
		}
		var _gthis = this;
		var objectsTraversed = 0;
		var obj = iron_Scene.getRawObjectByName(this.raw,name);
		var objectsCount = spawnChildren ? this.getObjectsCount([obj],false) : 1;
		var spawnObjectTree = null;
		spawnObjectTree = function(obj1,parent1,parentObject,done1) {
			_gthis.createObject(obj1,_gthis.raw,parent1,parentObject,function(object) {
				if(spawnChildren && obj1.children != null) {
					var _g = 0;
					var _g1 = obj1.children;
					while(_g < _g1.length) {
						var child = _g1[_g];
						++_g;
						spawnObjectTree(child,object,obj1,done1);
					}
				}
				if((objectsTraversed += 1) == objectsCount && done1 != null) {
					while(object.name != name) object = object.parent;
					done1(object);
				}
			});
		};
		spawnObjectTree(obj,parent,null,done);
	}
	,createObject: function(o,format,parent,parentObject,done) {
		var _gthis = this;
		var sceneName = format.name;
		if(o.type == "camera_object") {
			iron_data_Data.getCamera(sceneName,o.data_ref,function(b) {
				var object = _gthis.addCameraObject(b,parent);
				_gthis.returnObject(object,o,done);
			});
		} else if(o.type == "light_object") {
			iron_data_Data.getLight(sceneName,o.data_ref,function(b1) {
				var object1 = _gthis.addLightObject(b1,parent);
				_gthis.returnObject(object1,o,done);
			});
		} else if(o.type == "mesh_object") {
			if(o.material_refs == null || o.material_refs.length == 0) {
				this.createMeshObject(o,format,parent,parentObject,null,done);
			} else {
				var this1 = new Array(o.material_refs.length);
				var materials = this1;
				var materialsLoaded = 0;
				var _g = 0;
				var _g1 = o.material_refs.length;
				while(_g < _g1) {
					var i = [_g++];
					var ref = o.material_refs[i[0]];
					iron_data_Data.getMaterial(sceneName,ref,(function(i1) {
						return function(mat) {
							materials[i1[0]] = mat;
							materialsLoaded += 1;
							if(materialsLoaded == o.material_refs.length) {
								_gthis.createMeshObject(o,format,parent,parentObject,materials,done);
							}
						};
					})(i));
				}
			}
		} else if(o.type == "object") {
			var object2 = this.addObject(parent);
			this.returnObject(object2,o,function(ro) {
				if(o.group_ref != null) {
					var spawned = 0;
					var object_refs = _gthis.getGroupObjectRefs(o.group_ref);
					if(object_refs.length == 0) {
						done(ro);
					} else {
						var _g2 = 0;
						while(_g2 < object_refs.length) {
							var s = object_refs[_g2];
							++_g2;
							_gthis.spawnObject(s,ro,function(spawnedObject) {
								if(!_gthis.isObjectInGroup(o.group_ref,spawnedObject.parent)) {
									var _g3 = 0;
									var _g11 = format.groups;
									while(_g3 < _g11.length) {
										var group = _g11[_g3];
										++_g3;
										if(group.name == o.group_ref) {
											spawnedObject.transform.translate(-group.instance_offset[0],-group.instance_offset[1],-group.instance_offset[2]);
											break;
										}
									}
								}
								if((spawned += 1) == object_refs.length) {
									done(ro);
								}
							});
						}
					}
				} else {
					done(ro);
				}
			});
		} else {
			done(null);
		}
	}
	,getGroupObjectRefs: function(group_ref) {
		var _g = 0;
		var _g1 = iron_Scene.active.raw.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.name == group_ref) {
				return g.object_refs;
			}
		}
		return null;
	}
	,getGroupObjectsRaw: function(groupRef) {
		var objectRefs = this.getGroupObjectRefs(groupRef);
		var objects = [];
		if(objectRefs == null) {
			return objects;
		}
		var _g = 0;
		while(_g < objectRefs.length) {
			var objRef = objectRefs[_g];
			++_g;
			var rawObj = iron_Scene.getRawObjectByName(this.raw,objRef);
			objects.push(rawObj);
			var childRefs = this.getChildObjectsRaw(rawObj);
			objects = objects.concat(childRefs);
		}
		return objects;
	}
	,getChildObjectsRaw: function(rawObj,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var children = rawObj.children;
		if(children == null) {
			return [];
		}
		children = children.slice();
		if(recursive) {
			var _g = 0;
			var _g1 = rawObj.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var childRefs = this.getChildObjectsRaw(child);
				children = children.concat(childRefs);
			}
		}
		return children;
	}
	,isObjectInGroup: function(groupRef,object) {
		var _g = 0;
		var _g1 = this.getGroupObjectsRaw(groupRef);
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj.name == object.name) {
				return true;
			}
		}
		return false;
	}
	,createMeshObject: function(o,format,parent,parentObject,materials,done) {
		var _gthis = this;
		var ref = o.data_ref.split("/");
		var object_file = "";
		var data_ref = "";
		var sceneName = format.name;
		if(ref.length == 2) {
			object_file = ref[0];
			data_ref = ref[1];
		} else {
			object_file = sceneName;
			data_ref = o.data_ref;
		}
		if(parentObject != null && parentObject.bone_actions != null) {
			var bactions = [];
			var _g = 0;
			var _g1 = parentObject.bone_actions;
			while(_g < _g1.length) {
				var ref1 = _g1[_g];
				++_g;
				iron_data_Data.getSceneRaw(ref1,function(action) {
					bactions.push(action);
					if(bactions.length == parentObject.bone_actions.length) {
						var armature = null;
						var _g2 = 0;
						var _g11 = _gthis.armatures;
						while(_g2 < _g11.length) {
							var a = _g11[_g2];
							++_g2;
							if(a.uid == parent.uid) {
								armature = a;
								break;
							}
						}
						if(armature == null) {
							var _g21 = 0;
							var _g3 = _gthis.armatures;
							while(_g21 < _g3.length) {
								var a1 = _g3[_g21];
								++_g21;
								if(a1.name == parent.name) {
									parent.name += "." + parent.uid;
									break;
								}
							}
							armature = new iron_data_Armature(parent.uid,parent.name,bactions);
							_gthis.armatures.push(armature);
						}
						_gthis.returnMeshObject(object_file,data_ref,sceneName,armature,materials,parent,o,done);
					}
				});
			}
		} else {
			this.returnMeshObject(object_file,data_ref,sceneName,null,materials,parent,o,done);
		}
	}
	,returnMeshObject: function(object_file,data_ref,sceneName,armature,materials,parent,o,done) {
		var _gthis = this;
		iron_data_Data.getMesh(object_file,data_ref,function(mesh) {
			if(mesh.isSkinned) {
				var g = mesh.geom;
				if(armature != null) {
					g.addArmature(armature);
				} else {
					g.addAction(mesh.format.objects,"none");
				}
			}
			var object = _gthis.addMeshObject(mesh,materials,parent);
			if(o.particle_refs != null) {
				var _g = 0;
				var _g1 = o.particle_refs;
				while(_g < _g1.length) {
					var ref = _g1[_g];
					++_g;
					(js_Boot.__cast(object , iron_object_MeshObject)).setupParticleSystem(sceneName,ref);
				}
			}
			if(o.tilesheet_ref != null) {
				(js_Boot.__cast(object , iron_object_MeshObject)).setupTilesheet(sceneName,o.tilesheet_ref,o.tilesheet_action_ref);
			}
			_gthis.returnObject(object,o,done);
		});
	}
	,returnObject: function(object,o,done) {
		var _gthis = this;
		if(object != null && o.object_actions != null) {
			var oactions = [];
			while(oactions.length < o.object_actions.length) oactions.push(null);
			var actionsLoaded = 0;
			var _g = 0;
			var _g1 = o.object_actions.length;
			while(_g < _g1) {
				var i = [_g++];
				var ref = o.object_actions[i[0]];
				if(ref == "null") {
					actionsLoaded += 1;
					continue;
				}
				iron_data_Data.getSceneRaw(ref,(function(i1) {
					return function(action) {
						oactions[i1[0]] = action;
						actionsLoaded += 1;
						if(actionsLoaded == o.object_actions.length) {
							_gthis.returnObjectLoaded(object,o,oactions,done);
						}
					};
				})(i));
			}
		} else {
			this.returnObjectLoaded(object,o,null,done);
		}
	}
	,returnObjectLoaded: function(object,o,oactions,done) {
		if(object != null) {
			object.raw = o;
			object.name = o.name;
			if(o.visible != null) {
				object.visible = o.visible;
			}
			if(o.visible_mesh != null) {
				object.visibleMesh = o.visible_mesh;
			}
			if(o.visible_shadow != null) {
				object.visibleShadow = o.visible_shadow;
			}
			iron_Scene.createConstraints(o.constraints,object);
			iron_Scene.generateTransform(o,object.transform);
			object.setupAnimation(oactions);
			if(o.properties != null) {
				object.properties = new haxe_ds_StringMap();
				var _g = 0;
				var _g1 = o.properties;
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					var key = p.name;
					var _this = object.properties;
					var value = p.value;
					if(__map_reserved[key] != null) {
						_this.setReserved(key,value);
					} else {
						_this.h[key] = value;
					}
				}
			}
			if(!iron_Scene.active.initializing) {
				iron_Scene.createTraits(o.traits,object);
			}
		}
		done(object);
	}
	,loadEmbeddedData: function(datas,done) {
		if(datas == null) {
			done();
			return;
		}
		var loaded = 0;
		var _g = 0;
		while(_g < datas.length) {
			var file = datas[_g];
			++_g;
			this.embedData(file,function() {
				loaded += 1;
				if(loaded == datas.length) {
					done();
				}
			});
		}
	}
	,embedData: function(file,done) {
		var _gthis = this;
		if(StringTools.endsWith(file,".raw")) {
			iron_data_Data.getBlob(file,function(blob) {
				var b = blob.toBytes();
				var w = (Math.pow(b.length,0.33333333333333331) | 0) + 1;
				var image = kha_Image.fromBytes3D(b,w,w,w,1);
				var _this = _gthis.embedded;
				if(__map_reserved[file] != null) {
					_this.setReserved(file,image);
				} else {
					_this.h[file] = image;
				}
				done();
			});
		} else {
			iron_data_Data.getImage(file,function(image1) {
				var _this1 = _gthis.embedded;
				if(__map_reserved[file] != null) {
					_this1.setReserved(file,image1);
				} else {
					_this1.h[file] = image1;
				}
				done();
			});
		}
	}
	,__class__: iron_Scene
};
var iron_system_Time = function() { };
$hxClasses["iron.system.Time"] = iron_system_Time;
iron_system_Time.__name__ = "iron.system.Time";
iron_system_Time.update = function() {
	iron_system_Time.realDelta = kha_Scheduler.realTime() - iron_system_Time.last;
	iron_system_Time.last = kha_Scheduler.realTime();
};
var arm_IronBridge = $hx_exports["iron"] = function() { };
$hxClasses["arm.IronBridge"] = arm_IronBridge;
arm_IronBridge.__name__ = "arm.IronBridge";
var kha_Blob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.Blob"] = kha_Blob;
kha_Blob.__name__ = "kha.Blob";
kha_Blob.fromBytes = function(bytes) {
	return new kha_Blob(bytes);
};
kha_Blob.alloc = function(size) {
	return new kha_Blob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_Blob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_Blob.prototype = {
	sub: function(start,length) {
		return new kha_Blob(this.bytes.sub(start,length));
	}
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value;
	}
	,readU8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		return byte;
	}
	,readS16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_Blob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_Blob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_Blob
	,__properties__: {get_length:"get_length"}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: $extend(haxe_io_Input.prototype.__properties__,{set_position:"set_position"})
});
var arm_sys_File = function() { };
$hxClasses["arm.sys.File"] = arm_sys_File;
arm_sys_File.__name__ = "arm.sys.File";
arm_sys_File.readDirectory = function(path,foldersOnly) {
	if(foldersOnly == null) {
		foldersOnly = false;
	}
	return Krom.readDirectory(path,foldersOnly).split("\n");
};
arm_sys_File.copy = function(srcPath,dstPath) {
	Krom.sysCommand("copy" + " \"" + srcPath + "\" \"" + dstPath + "\"");
};
arm_sys_File.start = function(path) {
	Krom.sysCommand("start \"\" \"" + path + "\"");
};
arm_sys_File.explorer = function(url) {
	Krom.sysCommand("explorer \"" + url + "\"");
};
arm_sys_File.delete = function(path) {
	Krom.sysCommand("del /f" + " \"" + path + "\"");
};
arm_sys_File.exists = function(path) {
	var slash = path.lastIndexOf(arm_sys_Path.sep);
	var dir = HxOverrides.substr(path,0,slash);
	var file = HxOverrides.substr(path,slash + 1,null);
	return arm_sys_File.readDirectory(dir).indexOf(file) >= 0;
};
arm_sys_File.download = function(url,dstPath) {
	Krom.sysCommand("powershell -c \"Invoke-WebRequest -Uri " + url + " -OutFile '" + dstPath + "'");
};
arm_sys_File.downloadBytes = function(url) {
	var save = arm_sys_Path.data() + arm_sys_Path.sep + "download.bin";
	arm_sys_File.download(url,save);
	try {
		return haxe_io_Bytes.ofData(Krom.loadBlob(save));
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = "kha.Canvas";
kha_Canvas.__isInterface__ = true;
kha_Canvas.prototype = {
	__class__: kha_Canvas
	,__properties__: {get_g4:"get_g4",get_height:"get_height",get_width:"get_width"}
};
var kha_Image = function(texture) {
	this.pixels = null;
	this.texture_ = texture;
};
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = "kha.Image";
kha_Image.__interfaces__ = [kha_Canvas];
kha_Image.__properties__ = {get_nonPow2Supported:"get_nonPow2Supported"};
kha_Image.getRenderTargetFormat = function(format) {
	switch(format) {
	case 0:
		return 0;
	case 1:
		return 5;
	case 2:
		return 3;
	case 3:
		return 4;
	case 4:
		return 1;
	case 5:
		return 2;
	case 6:
		return 6;
	default:
		return 0;
	}
};
kha_Image.getDepthBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return 24;
	case 2:
		return 24;
	case 3:
		return 24;
	case 4:
		return 32;
	case 5:
		return 16;
	}
};
kha_Image.getStencilBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return -1;
	case 2:
		return 8;
	case 3:
		return 8;
	case 4:
		return 8;
	case 5:
		return 0;
	}
};
kha_Image.getTextureFormat = function(format) {
	switch(format) {
	case 0:
		return 0;
	case 2:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 7;
	default:
		return 1;
	}
};
kha_Image._fromTexture = function(texture) {
	return new kha_Image(texture);
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	var readable = true;
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTextureFromBytes(bytes.b.bufferValue,width,height,kha_Image.getTextureFormat(format),readable);
	return image;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	if(format == null) {
		format = 0;
	}
	var readable = true;
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTextureFromBytes3D(bytes.b.bufferValue,width,height,depth,kha_Image.getTextureFormat(format),readable);
	return image;
};
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTexture(width,height,kha_Image.getTextureFormat(format));
	return image;
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	if(format == null) {
		format = 0;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTexture3D(width,height,depth,kha_Image.getTextureFormat(format));
	return image;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.renderTarget_ = Krom.createRenderTarget(width,height,kha_Image.getDepthBufferBits(depthStencil),kha_Image.getRenderTargetFormat(format),kha_Image.getStencilBufferBits(depthStencil),contextId);
	return image;
};
kha_Image.get_nonPow2Supported = function() {
	return true;
};
kha_Image.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_Image.prototype = {
	unload: function() {
		Krom.unloadImage(this);
		this.texture_ = null;
		this.renderTarget_ = null;
	}
	,getPixels: function() {
		if(this.renderTarget_ != null) {
			if(this.pixels == null) {
				this.pixels = new haxe_io_Bytes(new ArrayBuffer(kha_Image.formatByteSize(this.format) * this.get_width() * this.get_height()));
			}
			Krom.getRenderTargetPixels(this.renderTarget_,this.pixels.b.bufferValue);
			return this.pixels;
		} else {
			return haxe_io_Bytes.ofData(Krom.getTexturePixels(this.texture_));
		}
	}
	,generateMipmaps: function(levels) {
		if(this.texture_ == null) {
			Krom.generateRenderTargetMipmaps(this.renderTarget_,levels);
		} else {
			Krom.generateTextureMipmaps(this.texture_,levels);
		}
	}
	,setMipmaps: function(mipmaps) {
		Krom.setMipmaps(this.texture_,mipmaps);
	}
	,setDepthStencilFrom: function(image) {
		Krom.setDepthStencilFrom(this.renderTarget_,image.renderTarget_);
	}
	,clear: function(x,y,z,width,height,depth,color) {
		Krom.clearTexture(this.texture_,x,y,z,width,height,depth,color);
	}
	,get_width: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.width;
		}
	}
	,get_height: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.height;
		}
	}
	,get_depth: function() {
		if(this.texture_ != null) {
			return this.texture_.depth;
		} else {
			return 1;
		}
	}
	,get_realWidth: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.realWidth;
		}
	}
	,get_realHeight: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.realHeight;
		}
	}
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_krom_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_Image
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_realHeight:"get_realHeight",get_realWidth:"get_realWidth",get_depth:"get_depth",get_height:"get_height",get_width:"get_width"}
};
var arm_node_Material = function() { };
$hxClasses["arm.node.Material"] = arm_node_Material;
arm_node_Material.__name__ = "arm.node.Material";
arm_node_Material.getNode = function(id) {
	var _g = 0;
	var _g1 = arm_node_Material.nodes;
	while(_g < _g1.length) {
		var n = _g1[_g];
		++_g;
		if(n.id == id) {
			return n;
		}
	}
	return null;
};
arm_node_Material.getInputLink = function(inp) {
	var _g = 0;
	var _g1 = arm_node_Material.links;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.to_id == inp.node_id) {
			var node = arm_node_Material.getNode(inp.node_id);
			if(node.inputs.length <= l.to_socket) {
				return null;
			}
			if(node.inputs[l.to_socket] == inp) {
				return l;
			}
		}
	}
	return null;
};
arm_node_Material.parse = function(canvas,_con,_vert,_frag,_geom,_tesc,_tese,_matcon,_parse_displacement) {
	if(_parse_displacement == null) {
		_parse_displacement = false;
	}
	arm_node_Material.nodes = canvas.nodes;
	arm_node_Material.links = canvas.links;
	arm_node_Material.parsed = [];
	arm_node_Material.con = _con;
	arm_node_Material.vert = _vert;
	arm_node_Material.frag = _frag;
	arm_node_Material.geom = _geom;
	arm_node_Material.tesc = _tesc;
	arm_node_Material.tese = _tese;
	arm_node_Material.curshader = arm_node_Material.frag;
	arm_node_Material.matcon = _matcon;
	arm_node_Material.parsing_disp = false;
	arm_node_Material.normal_written = false;
	arm_node_Material.cotangentFrameWritten = false;
	arm_node_Material.sample_bump = false;
	arm_node_Material.sample_bump_res = "";
	arm_node_Material.out_normaltan = "vec3(0.5, 0.5, 1.0)";
	var output_node = arm_node_Material.node_by_type(arm_node_Material.nodes,"OUTPUT_MATERIAL");
	if(output_node != null) {
		return arm_node_Material.parse_output(output_node);
	}
	output_node = arm_node_Material.node_by_type(arm_node_Material.nodes,"OUTPUT_MATERIAL_PBR");
	if(output_node != null) {
		return arm_node_Material.parse_output_pbr(output_node);
	}
	return null;
};
arm_node_Material.finalize = function(con) {
	var vert = con.vert;
	var frag = con.frag;
	if(frag.dotNV) {
		frag.vVec = true;
		frag.n = true;
	}
	if(frag.vVec) {
		vert.wposition = true;
	}
	if(frag.bposition) {
		if(arm_node_Material.triplanar) {
			frag.write_attrib("vec3 bposition = vec3(\r\n\t\t\t\t\ttexCoord1.x * texCoordBlend.y + texCoord2.x * texCoordBlend.z,\r\n\t\t\t\t\ttexCoord.x * texCoordBlend.x + texCoord2.y * texCoordBlend.z,\r\n\t\t\t\t\ttexCoord.y * texCoordBlend.x + texCoord1.y * texCoordBlend.y);");
		} else if(frag.ndcpos) {
			vert.add_out("vec3 bposition");
			vert.write("bposition = (ndc.xyz / ndc.w);");
		} else {
			vert.add_out("vec3 bposition");
			vert.add_uniform("vec3 dim","_dim");
			vert.add_uniform("vec3 hdim","_halfDim");
			vert.write_attrib("bposition = (pos.xyz + hdim) / dim;");
		}
	}
	if(frag.wposition) {
		vert.add_uniform("mat4 W","_worldMatrix");
		vert.add_out("vec3 wposition");
		vert.write_attrib("wposition = vec4(mul(vec4(pos.xyz, 1.0), W)).xyz;");
	} else if(vert.wposition) {
		vert.add_uniform("mat4 W","_worldMatrix");
		vert.write_attrib("vec3 wposition = vec4(mul(vec4(pos.xyz, 1.0), W)).xyz;");
	}
	if(frag.vposition) {
		vert.add_uniform("mat4 WV","_worldViewMatrix");
		vert.add_out("vec3 vposition");
		vert.write_attrib("vposition = vec4(mul(vec4(pos.xyz, 1.0), WV)).xyz;");
	}
	if(frag.mposition) {
		vert.add_out("vec3 mposition");
		if(frag.ndcpos) {
			vert.write("mposition = (ndc.xyz / ndc.w);");
		} else {
			vert.write_attrib("mposition = pos.xyz;");
		}
	}
	if(frag.wtangent) {
		con.add_elem("tang","short4norm");
		vert.add_uniform("mat3 N","_normalMatrix");
		vert.add_out("vec3 wtangent");
		vert.write_attrib("wtangent = normalize(mul(tang, N));");
	}
	if(frag.vVecCam) {
		vert.add_uniform("mat4 WV","_worldViewMatrix");
		vert.add_out("vec3 eyeDirCam");
		vert.write_attrib("eyeDirCam = vec4(mul(vec4(pos.xyz, 1.0), WV)).xyz; eyeDirCam.z *= -1.0;");
		frag.write_attrib("vec3 vVecCam = normalize(eyeDirCam);");
	}
	if(frag.vVec) {
		vert.add_uniform("vec3 eye","_cameraPosition");
		vert.add_out("vec3 eyeDir");
		vert.write_attrib("eyeDir = eye - wposition;");
		frag.write_attrib("vec3 vVec = normalize(eyeDir);");
	}
	if(frag.n) {
		vert.add_uniform("mat3 N","_normalMatrix");
		vert.add_out("vec3 wnormal");
		vert.write_attrib("wnormal = mul(vec3(nor.xy, pos.w), N);");
		frag.write_attrib("vec3 n = normalize(wnormal);");
	} else if(vert.n) {
		vert.add_uniform("mat3 N","_normalMatrix");
		vert.write_attrib("vec3 wnormal = normalize(mul(vec3(nor.xy, pos.w), N));");
	}
	if(frag.nAttr) {
		vert.add_out("vec3 nAttr");
		vert.write_attrib("nAttr = vec3(nor.xy, pos.w);");
	}
	if(frag.dotNV) {
		frag.write_attrib("float dotNV = max(dot(n, vVec), 0.0);");
	}
	if(frag.wvpposition) {
		vert.add_out("vec4 wvpposition");
		vert.write_end("wvpposition = gl_Position;");
	}
	if(con.is_elem("col")) {
		vert.add_out("vec3 vcolor");
		vert.write_attrib("vcolor = col.rgb;");
	}
};
arm_node_Material.parse_output = function(node) {
	if(arm_node_Material.parse_surface || arm_node_Material.parse_opacity) {
		return arm_node_Material.parse_shader_input(node.inputs[0]);
	}
	return null;
};
arm_node_Material.parse_output_pbr = function(node) {
	if(arm_node_Material.parse_surface || arm_node_Material.parse_opacity) {
		return arm_node_Material.parse_shader(node,null);
	}
	return null;
};
arm_node_Material.parse_shader_input = function(inp) {
	var l = arm_node_Material.getInputLink(inp);
	if(l != null) {
		var from_node = arm_node_Material.getNode(l.from_id);
		if(from_node.type == "REROUTE") {
			return arm_node_Material.parse_shader_input(from_node.inputs[0]);
		}
		return arm_node_Material.parse_shader(from_node,from_node.outputs[l.from_socket]);
	} else {
		return { out_basecol : "vec3(0.8, 0.8, 0.8)", out_roughness : "0.0", out_metallic : "0.0", out_occlusion : "1.0", out_opacity : "1.0", out_height : "0.0", out_emission : "0.0", out_subsurface : "0.0"};
	}
};
arm_node_Material.parse_shader = function(node,socket) {
	var sout = { out_basecol : "vec3(0.8, 0.8, 0.8)", out_roughness : "0.0", out_metallic : "0.0", out_occlusion : "1.0", out_opacity : "1.0", out_height : "0.0", out_emission : "0.0", out_subsurface : "0.0"};
	if(node.type == "OUTPUT_MATERIAL_PBR") {
		if(arm_node_Material.parse_surface) {
			arm_node_Material.parse_normal_map_color_input(node.inputs[5]);
			sout.out_basecol = arm_node_Material.parse_vector_input(node.inputs[0]);
			sout.out_occlusion = arm_node_Material.parse_value_input(node.inputs[2]);
			sout.out_roughness = arm_node_Material.parse_value_input(node.inputs[3]);
			sout.out_metallic = arm_node_Material.parse_value_input(node.inputs[4]);
			if(arm_node_Material.parse_emission) {
				sout.out_emission = arm_node_Material.parse_value_input(node.inputs[6]);
			}
			if(arm_node_Material.parse_subsurface) {
				sout.out_subsurface = arm_node_Material.parse_value_input(node.inputs[8]);
			}
		}
		if(arm_node_Material.parse_opacity) {
			sout.out_opacity = arm_node_Material.parse_value_input(node.inputs[1]);
		}
		if(node.inputs.length > 7 && arm_node_Material.parse_height) {
			if(!arm_node_Material.parse_height_as_channel) {
				arm_node_Material.curshader = arm_node_Material.vert;
			}
			sout.out_height = arm_node_Material.parse_value_input(node.inputs[7]);
			if(!arm_node_Material.parse_height_as_channel) {
				arm_node_Material.curshader = arm_node_Material.frag;
			}
		}
	}
	return sout;
};
arm_node_Material.parse_vector_input = function(inp) {
	var l = arm_node_Material.getInputLink(inp);
	if(l != null) {
		var from_node = arm_node_Material.getNode(l.from_id);
		if(from_node.type == "REROUTE") {
			return arm_node_Material.parse_vector_input(from_node.inputs[0]);
		}
		var res_var = arm_node_Material.write_result(l);
		var st = from_node.outputs[l.from_socket].type;
		if(st == "RGB" || st == "RGBA" || st == "VECTOR") {
			return res_var;
		} else {
			return "(" + res_var + ").xxx";
		}
	} else if(inp.type == "VALUE") {
		var v_0 = 0.0;
		var v_1 = 0.0;
		var v_2 = 0.0;
		return "vec3(" + v_0 + ", " + v_1 + ", " + v_2 + ")";
	} else {
		var v = inp.default_value;
		return "vec3(" + v[0] + ", " + v[1] + ", " + v[2] + ")";
	}
};
arm_node_Material.parse_vector = function(node,socket) {
	if(node.type == "ATTRIBUTE") {
		if(socket == node.outputs[0]) {
			if(arm_node_Material.curshader.context.allow_vcols) {
				arm_node_Material.curshader.context.add_elem("col","short4norm");
			} else {
				arm_node_Material.curshader.write_attrib("vec3 vcolor = vec3(1.0, 1.0, 1.0);");
			}
			return "vcolor";
		} else {
			arm_node_Material.curshader.context.add_elem("tex","short2norm");
			return "vec3(texCoord.x, 1.0 - texCoord.y, 0.0)";
		}
	} else if(node.type == "RGB") {
		var v = socket.default_value;
		return "vec3(" + v[0] + ", " + v[1] + ", " + v[2] + ")";
	} else if(node.type == "TEX_BRICK") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_brick);
		var co = arm_node_Material.getCoord(node);
		var col1 = arm_node_Material.parse_vector_input(node.inputs[1]);
		var col2 = arm_node_Material.parse_vector_input(node.inputs[2]);
		var col3 = arm_node_Material.parse_vector_input(node.inputs[3]);
		var scale = arm_node_Material.parse_value_input(node.inputs[4]);
		var res = "tex_brick(" + co + " * " + scale + ", " + col1 + ", " + col2 + ", " + col3 + ")";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res);
		}
		return res;
	} else if(node.type == "TEX_CHECKER") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_checker);
		var co1 = arm_node_Material.getCoord(node);
		var col11 = arm_node_Material.parse_vector_input(node.inputs[1]);
		var col21 = arm_node_Material.parse_vector_input(node.inputs[2]);
		var scale1 = arm_node_Material.parse_value_input(node.inputs[3]);
		var res1 = "tex_checker(" + co1 + ", " + col11 + ", " + col21 + ", " + scale1 + ")";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res1);
		}
		return res1;
	} else if(node.type == "TEX_GRADIENT") {
		var co2 = arm_node_Material.getCoord(node);
		var but = node.buttons[0];
		var grad = but.data[but.default_value].toUpperCase();
		grad = StringTools.replace(grad," ","_");
		var f = arm_node_Material.getGradient(grad,co2);
		var res2 = "(" + ("clamp(" + f + ", 0.0, 1.0)") + ").xxx";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res2);
		}
		return res2;
	} else if(node.type == "TEX_IMAGE") {
		if(arm_node_Material.parsed.indexOf(arm_node_Material.res_var_name(node,node.outputs[1])) >= 0) {
			var varname = arm_node_Material.store_var_name(node);
			return "" + varname + ".rgb";
		}
		var tex_name = arm_node_Material.node_name(node);
		var tex = arm_node_Material.make_texture(node,tex_name);
		if(tex != null) {
			var to_linear = node.buttons[1].default_value == 1;
			var texstore = arm_node_Material.texture_store(node,tex,tex_name,to_linear);
			return "" + texstore + ".rgb";
		} else {
			var tex_store = arm_node_Material.store_var_name(node);
			arm_node_Material.curshader.write("vec4 " + tex_store + " = vec4(1.0, 0.0, 1.0, 1.0);");
			return "" + tex_store + ".rgb";
		}
	} else if(node.type == "TEX_MAGIC") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_magic);
		var co3 = arm_node_Material.getCoord(node);
		var scale2 = arm_node_Material.parse_value_input(node.inputs[1]);
		var res3 = "tex_magic(" + co3 + " * " + scale2 + " * 4.0)";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res3);
		}
		return res3;
	} else if(node.type == "TEX_MUSGRAVE") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_musgrave);
		var co4 = arm_node_Material.getCoord(node);
		var scale3 = arm_node_Material.parse_value_input(node.inputs[1]);
		var res4 = "(" + ("tex_musgrave_f(" + co4 + " * " + scale3 + " * 0.5)") + ").xxx";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res4);
		}
		return res4;
	} else if(node.type == "TEX_NOISE") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_noise);
		arm_node_Material.curshader.add_uniform("sampler2D snoise256","$noise256.k");
		var co5 = arm_node_Material.getCoord(node);
		var scale4 = arm_node_Material.parse_value_input(node.inputs[1]);
		var res5 = "vec3(tex_noise(" + co5 + " * " + scale4 + "), tex_noise(" + co5 + " * " + scale4 + " + 0.33), tex_noise(" + co5 + " * " + scale4 + " + 0.66))";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res5);
		}
		return res5;
	} else if(node.type == "TEX_VORONOI") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_voronoi);
		arm_node_Material.curshader.add_uniform("sampler2D snoise256","$noise256.k");
		var co6 = arm_node_Material.getCoord(node);
		var scale5 = arm_node_Material.parse_value_input(node.inputs[1]);
		var but1 = node.buttons[0];
		var coloring = but1.data[but1.default_value].toUpperCase();
		coloring = StringTools.replace(coloring," ","_");
		var res6 = "";
		if(coloring == "INTENSITY") {
			res6 = "(" + ("tex_voronoi(" + co6 + " * " + scale5 + ").a") + ").xxx";
		} else {
			res6 = "tex_voronoi(" + co6 + " * " + scale5 + ").rgb";
		}
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res6);
		}
		return res6;
	} else if(node.type == "TEX_WAVE") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_wave);
		var co7 = arm_node_Material.getCoord(node);
		var scale6 = arm_node_Material.parse_value_input(node.inputs[1]);
		var res7 = "(" + ("tex_wave_f(" + co7 + " * " + scale6 + ")") + ").xxx";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res7);
		}
		return res7;
	} else if(node.type == "BRIGHTCONTRAST") {
		var out_col = arm_node_Material.parse_vector_input(node.inputs[0]);
		var bright = arm_node_Material.parse_value_input(node.inputs[1]);
		var contr = arm_node_Material.parse_value_input(node.inputs[2]);
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_brightcontrast);
		return "brightcontrast(" + out_col + ", " + bright + ", " + contr + ")";
	} else if(node.type == "GAMMA") {
		var out_col1 = arm_node_Material.parse_vector_input(node.inputs[0]);
		var gamma = arm_node_Material.parse_value_input(node.inputs[1]);
		return "pow(" + out_col1 + ", " + ("(" + ("" + gamma) + ").xxx") + ")";
	} else if(node.type == "BLUR") {
		arm_node_Material.tex_coord = "texCoordBlur";
		arm_node_Material.curshader.write("vec2 texCoordBlur = texCoord;");
		var out_col2 = arm_node_Material.parse_vector_input(node.inputs[0]);
		arm_node_Material.tex_coord = "texCoord";
		var _this = arm_node_Material.parsedMap;
		out_col2 = __map_reserved[out_col2] != null ? _this.getReserved(out_col2) : _this.h[out_col2];
		if(out_col2 == null) {
			return "vec3(0.0, 0.0, 0.0)";
		}
		var key = out_col2.split(".")[0];
		var _this1 = arm_node_Material.textureMap;
		out_col2 = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
		if(out_col2 == null) {
			return "vec3(0.0, 0.0, 0.0)";
		}
		out_col2 += ".rgb";
		var strength = arm_node_Material.parse_value_input(node.inputs[1]);
		if(strength == "0.0") {
			return "vec3(0.0, 0.0, 0.0)";
		}
		var steps = "int(" + strength + " * 10 + 1)";
		var texture = out_col2.substring(out_col2.indexOf("(") + 1,out_col2.indexOf(","));
		arm_node_Material.curshader.write("vec3 res1 = vec3(0.0, 0.0, 0.0);");
		arm_node_Material.curshader.write("for (int i = -" + steps + "; i <= " + steps + "; ++i) {");
		arm_node_Material.curshader.write("for (int j = -" + steps + "; j <= " + steps + "; ++j) {");
		arm_node_Material.curshader.write("texCoordBlur = texCoord + vec2(i, j) / textureSize(" + texture + ", 0);");
		arm_node_Material.curshader.write("res1 += " + out_col2 + ";");
		arm_node_Material.curshader.write("}");
		arm_node_Material.curshader.write("}");
		arm_node_Material.curshader.write("res1 /= (" + steps + " * 2 + 1) * (" + steps + " * 2 + 1);");
		return "res1";
	} else if(node.type == "HUE_SAT") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_hue_sat);
		var hue = arm_node_Material.parse_value_input(node.inputs[0]);
		var sat = arm_node_Material.parse_value_input(node.inputs[1]);
		var val = arm_node_Material.parse_value_input(node.inputs[2]);
		var fac = arm_node_Material.parse_value_input(node.inputs[3]);
		var col = arm_node_Material.parse_vector_input(node.inputs[4]);
		return "hue_sat(" + col + ", vec4(" + hue + "-0.5, " + sat + ", " + val + ", 1.0-" + fac + "))";
	} else if(node.type == "INVERT") {
		var fac1 = arm_node_Material.parse_value_input(node.inputs[0]);
		var out_col3 = arm_node_Material.parse_vector_input(node.inputs[1]);
		return "mix(" + out_col3 + ", vec3(1.0, 1.0, 1.0) - (" + out_col3 + "), " + fac1 + ")";
	} else if(node.type == "MIX_RGB") {
		var fac2 = arm_node_Material.parse_value_input(node.inputs[0]);
		var fac_var = arm_node_Material.node_name(node) + "_fac";
		arm_node_Material.curshader.write("float " + fac_var + " = " + fac2 + ";");
		var col12 = arm_node_Material.parse_vector_input(node.inputs[1]);
		var col22 = arm_node_Material.parse_vector_input(node.inputs[2]);
		var but2 = node.buttons[0];
		var blend = but2.data[but2.default_value].toUpperCase();
		blend = StringTools.replace(blend," ","_");
		but2 = node.buttons[1];
		var use_clamp = but2.default_value == "true";
		var out_col4 = "";
		if(blend == "MIX") {
			out_col4 = "mix(" + col12 + ", " + col22 + ", " + fac_var + ")";
		} else if(blend == "DARKEN") {
			out_col4 = "min(" + col12 + ", " + col22 + " * " + fac_var + ")";
		} else if(blend == "MULTIPLY") {
			out_col4 = "mix(" + col12 + ", " + col12 + " * " + col22 + ", " + fac_var + ")";
		} else if(blend == "BURN") {
			out_col4 = "mix(" + col12 + ", vec3(1.0, 1.0, 1.0) - (vec3(1.0, 1.0, 1.0) - " + col12 + ") / " + col22 + ", " + fac_var + ")";
		} else if(blend == "LIGHTEN") {
			out_col4 = "max(" + col12 + ", " + col22 + " * " + fac_var + ")";
		} else if(blend == "SCREEN") {
			out_col4 = "(vec3(1.0, 1.0, 1.0) - (" + ("(" + ("1.0 - " + fac_var) + ").xxx") + (" + " + fac_var + " * (vec3(1.0, 1.0, 1.0) - " + col22 + ")) * (vec3(1.0, 1.0, 1.0) - " + col12 + "))");
		} else if(blend == "DODGE") {
			out_col4 = "mix(" + col12 + ", " + col12 + " / (vec3(1.0, 1.0, 1.0) - " + col22 + "), " + fac_var + ")";
		} else if(blend == "ADD") {
			out_col4 = "mix(" + col12 + ", " + col12 + " + " + col22 + ", " + fac_var + ")";
		} else if(blend == "OVERLAY") {
			out_col4 = "(" + col12 + " < vec3(0.5, 0.5, 0.5) ? vec3(2.0, 2.0, 2.0) * " + col12 + " * " + col22 + " : vec3(1.0, 1.0, 1.0) - vec3(2.0, 2.0, 2.0) * (vec3(1.0, 1.0, 1.0) - " + col22 + ") * (vec3(1.0, 1.0, 1.0) - " + col12 + "))";
		} else if(blend == "SOFT_LIGHT") {
			out_col4 = "((1.0 - " + fac_var + ") * " + col12 + " + " + fac_var + " * ((vec3(1.0, 1.0, 1.0) - " + col12 + ") * " + col22 + " * " + col12 + " + " + col12 + " * (vec3(1.0, 1.0, 1.0) - (vec3(1.0, 1.0, 1.0) - " + col22 + ") * (vec3(1.0, 1.0, 1.0) - " + col12 + "))))";
		} else if(blend == "LINEAR_LIGHT") {
			out_col4 = "(" + col12 + " + " + fac_var + " * (vec3(2.0, 2.0, 2.0) * (" + col22 + " - vec3(0.5, 0.5, 0.5))))";
		} else if(blend == "DIFFERENCE") {
			out_col4 = "mix(" + col12 + ", abs(" + col12 + " - " + col22 + "), " + fac_var + ")";
		} else if(blend == "SUBTRACT") {
			out_col4 = "mix(" + col12 + ", " + col12 + " - " + col22 + ", " + fac_var + ")";
		} else if(blend == "DIVIDE") {
			out_col4 = "(" + ("(" + ("(1.0 - " + fac_var + ") * " + col12 + " + " + fac_var + " * " + col12 + " / " + col22) + ").xxx") + ")";
		} else if(blend == "HUE") {
			arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_hue_sat);
			out_col4 = "mix(" + col12 + ", hsv_to_rgb(vec3(rgb_to_hsv(" + col22 + ").r, rgb_to_hsv(" + col12 + ").g, rgb_to_hsv(" + col12 + ").b)), " + fac_var + ")";
		} else if(blend == "SATURATION") {
			arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_hue_sat);
			out_col4 = "mix(" + col12 + ", hsv_to_rgb(vec3(rgb_to_hsv(" + col12 + ").r, rgb_to_hsv(" + col22 + ").g, rgb_to_hsv(" + col12 + ").b)), " + fac_var + ")";
		} else if(blend == "COLOR") {
			arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_hue_sat);
			out_col4 = "mix(" + col12 + ", hsv_to_rgb(vec3(rgb_to_hsv(" + col22 + ").r, rgb_to_hsv(" + col22 + ").g, rgb_to_hsv(" + col12 + ").b)), " + fac_var + ")";
		} else if(blend == "VALUE") {
			arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_hue_sat);
			out_col4 = "mix(" + col12 + ", hsv_to_rgb(vec3(rgb_to_hsv(" + col12 + ").r, rgb_to_hsv(" + col12 + ").g, rgb_to_hsv(" + col22 + ").b)), " + fac_var + ")";
		}
		if(use_clamp) {
			return "clamp(" + out_col4 + ", vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))";
		} else {
			return out_col4;
		}
	} else if(node.type == "VALTORGB") {
		var fac3 = arm_node_Material.parse_value_input(node.inputs[0]);
		var interp = node.buttons[0].data == 0 ? "LINEAR" : "CONSTANT";
		var elems = node.buttons[0].default_value;
		if(elems.length == 1) {
			var v1 = elems[0];
			return "vec3(" + v1[0] + ", " + v1[1] + ", " + v1[2] + ")";
		}
		var cols_var = arm_node_Material.node_name(node) + "_cols";
		arm_node_Material.curshader.write("vec3 " + cols_var + "[" + Std.string(elems.length) + "];");
		var _g = 0;
		var _g1 = elems.length;
		while(_g < _g1) {
			var i = _g++;
			var v2 = elems[i];
			arm_node_Material.curshader.write("" + cols_var + "[" + i + "] = " + ("vec3(" + v2[0] + ", " + v2[1] + ", " + v2[2] + ")") + ";");
		}
		var fac_var1 = arm_node_Material.node_name(node) + "_fac";
		arm_node_Material.curshader.write("float " + fac_var1 + " = " + fac3 + ";");
		var index = "0";
		var _g2 = 1;
		var _g3 = elems.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			index += " + (" + fac_var1 + " > " + elems[i1][4] + " ? 1 : 0)";
		}
		var index_var = arm_node_Material.node_name(node) + "_i";
		arm_node_Material.curshader.write("int " + index_var + " = " + index + ";");
		if(interp == "CONSTANT") {
			return "" + cols_var + "[" + index_var + "]";
		} else {
			var facs_var = arm_node_Material.node_name(node) + "_facs";
			arm_node_Material.curshader.write("float " + facs_var + "[" + Std.string(elems.length) + "];");
			var _g4 = 0;
			var _g5 = elems.length;
			while(_g4 < _g5) {
				var i2 = _g4++;
				arm_node_Material.curshader.write("" + facs_var + "[" + i2 + "] = " + elems[i2][4] + ";");
			}
			return "mix(" + cols_var + "[" + index_var + "], " + cols_var + "[" + index_var + " + 1], (" + fac_var1 + " - " + facs_var + "[" + index_var + "]) * (1.0 / (" + facs_var + "[" + index_var + " + 1] - " + facs_var + "[" + index_var + "]) ))";
		}
	} else if(node.type == "CURVE_VEC") {
		var fac4 = arm_node_Material.parse_value_input(node.inputs[0]);
		var vec = arm_node_Material.parse_vector_input(node.inputs[1]);
		var curves = node.buttons[0].default_value;
		var name = arm_node_Material.node_name(node);
		var vc0 = arm_node_Material.vector_curve(name + "0",vec + ".x",curves[0]);
		var vc1 = arm_node_Material.vector_curve(name + "1",vec + ".y",curves[1]);
		var vc2 = arm_node_Material.vector_curve(name + "2",vec + ".z",curves[2]);
		return "(vec3(" + vc0 + ", " + vc1 + ", " + vc2 + ") * " + fac4 + ")";
	} else if(node.type == "CURVE_RGB") {
		var fac5 = arm_node_Material.parse_value_input(node.inputs[0]);
		var vec1 = arm_node_Material.parse_vector_input(node.inputs[1]);
		var curves1 = node.buttons[0].default_value;
		var name1 = arm_node_Material.node_name(node);
		var vc01 = arm_node_Material.vector_curve(name1 + "0",vec1 + ".x",curves1[0]);
		var vc11 = arm_node_Material.vector_curve(name1 + "1",vec1 + ".y",curves1[1]);
		var vc21 = arm_node_Material.vector_curve(name1 + "2",vec1 + ".z",curves1[2]);
		var vc3a = arm_node_Material.vector_curve(name1 + "3a",vec1 + ".x",curves1[3]);
		var vc3b = arm_node_Material.vector_curve(name1 + "3b",vec1 + ".y",curves1[3]);
		var vc3c = arm_node_Material.vector_curve(name1 + "3c",vec1 + ".z",curves1[3]);
		return "(sqrt(vec3(" + vc01 + ", " + vc11 + ", " + vc21 + ") * vec3(" + vc3a + ", " + vc3b + ", " + vc3c + ")) * " + fac5 + ")";
	} else if(node.type == "COMBHSV") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_hue_sat);
		var h = arm_node_Material.parse_value_input(node.inputs[0]);
		var s = arm_node_Material.parse_value_input(node.inputs[1]);
		var v3 = arm_node_Material.parse_value_input(node.inputs[2]);
		return "hsv_to_rgb(vec3(" + h + ", " + s + ", " + v3 + "))";
	} else if(node.type == "COMBRGB") {
		var r = arm_node_Material.parse_value_input(node.inputs[0]);
		var g = arm_node_Material.parse_value_input(node.inputs[1]);
		var b = arm_node_Material.parse_value_input(node.inputs[2]);
		return "vec3(" + r + ", " + g + ", " + b + ")";
	} else if(node.type == "WAVELENGTH") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_wavelength_to_rgb);
		var wl = arm_node_Material.parse_value_input(node.inputs[0]);
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_wavelength_to_rgb);
		return "wavelength_to_rgb((" + wl + " - 450.0) / 150.0)";
	} else if(node.type == "CAMERA") {
		arm_node_Material.curshader.vVecCam = true;
		return "vVecCam";
	} else if(node.type == "LAYER") {
		if(socket == node.outputs[0]) {
			var l = node.buttons[0].default_value;
			arm_node_Material.curshader.add_uniform("sampler2D texpaint","_texpaint" + Std.string(l));
			return "texture(texpaint, texCoord).rgb";
		} else if(socket == node.outputs[5]) {
			var l1 = node.buttons[0].default_value;
			arm_node_Material.curshader.add_uniform("sampler2D texpaint_nor","_texpaint_nor" + Std.string(l1));
			return "texture(texpaint_nor, texCoord).rgb";
		}
	} else if(node.type == "MATERIAL") {
		return "vec3(0.0, 0.0, 0.0)";
	} else if(node.type == "NEW_GEOMETRY") {
		if(socket == node.outputs[0]) {
			arm_node_Material.curshader.wposition = true;
			return "wposition";
		} else if(socket == node.outputs[1]) {
			arm_node_Material.curshader.n = true;
			return "n";
		} else if(socket == node.outputs[2]) {
			arm_node_Material.curshader.wtangent = true;
			return "wtangent";
		} else if(socket == node.outputs[3]) {
			arm_node_Material.curshader.n = true;
			return "n";
		} else if(socket == node.outputs[4]) {
			arm_node_Material.curshader.vVec = true;
			return "vVec";
		} else if(socket == node.outputs[5]) {
			arm_node_Material.curshader.mposition = true;
			return "mposition";
		}
	} else if(node.type == "OBJECT_INFO") {
		arm_node_Material.curshader.wposition = true;
		return "wposition";
	} else if(node.type == "TANGENT") {
		arm_node_Material.curshader.wtangent = true;
		return "wtangent";
	} else if(node.type == "TEX_COORD") {
		if(socket == node.outputs[0]) {
			arm_node_Material.curshader.bposition = true;
			return "bposition";
		} else if(socket == node.outputs[1]) {
			arm_node_Material.curshader.n = true;
			return "n";
		} else if(socket == node.outputs[2]) {
			arm_node_Material.curshader.context.add_elem("tex","short2norm");
			return "vec3(texCoord.x, 1.0 - texCoord.y, 0.0)";
		} else if(socket == node.outputs[3]) {
			arm_node_Material.curshader.mposition = true;
			return "mposition";
		} else if(socket == node.outputs[4]) {
			arm_node_Material.curshader.vposition = true;
			return "vposition";
		} else if(socket == node.outputs[5]) {
			arm_node_Material.curshader.wvpposition = true;
			return "wvpposition.xyz";
		} else if(socket == node.outputs[6]) {
			return "vec3(0.0, 0.0, 0.0)";
		}
	} else if(node.type == "UVMAP") {
		arm_node_Material.curshader.context.add_elem("tex","short2norm");
		return "vec3(texCoord.x, 1.0 - texCoord.y, 0.0)";
	} else if(node.type == "BUMP") {
		var res8 = "";
		var strength1 = arm_node_Material.parse_value_input(node.inputs[0]);
		arm_node_Material.sample_bump = true;
		var height = arm_node_Material.parse_value_input(node.inputs[2]);
		arm_node_Material.sample_bump = false;
		var nor = arm_node_Material.parse_vector_input(node.inputs[3]);
		if(arm_node_Material.sample_bump_res != "") {
			arm_node_Material.curshader.nAttr = true;
			arm_node_Material.curshader.write("" + arm_node_Material.sample_bump_res + "_x *= (" + strength1 + ") * 16.0;");
			arm_node_Material.curshader.write("" + arm_node_Material.sample_bump_res + "_y *= (" + strength1 + ") * 16.0;");
			arm_node_Material.curshader.write("vec3 " + arm_node_Material.sample_bump_res + "_a = normalize(vec3(1.0, 0.0, " + arm_node_Material.sample_bump_res + "_x));");
			arm_node_Material.curshader.write("vec3 " + arm_node_Material.sample_bump_res + "_b = normalize(vec3(0.0, 1.0, " + arm_node_Material.sample_bump_res + "_y));");
			res8 = "normalize(mul(nAttr, mat3(" + arm_node_Material.sample_bump_res + "_a, " + arm_node_Material.sample_bump_res + "_b, normalize(vec3(" + arm_node_Material.sample_bump_res + "_x, " + arm_node_Material.sample_bump_res + "_y, 1.0)))))";
			arm_node_Material.sample_bump_res = "";
		} else {
			arm_node_Material.curshader.n = true;
			res8 = "n";
		}
		res8 = "(" + res8 + " + " + nor + ")";
		if(!arm_node_Material.curshader.invTBN) {
			arm_node_Material.curshader.invTBN = true;
			arm_node_Material.curshader.nAttr = true;
			arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_cotangentFrame);
			arm_node_Material.curshader.write("mat3 invTBN = transpose(cotangentFrame(nAttr, -nAttr, texCoord));");
		}
		res8 = "(normalize(mul(" + res8 + ", invTBN)) * 0.5 + 0.5)";
		return res8;
	} else if(node.type == "MAPPING") {
		var out = arm_node_Material.parse_vector_input(node.inputs[0]);
		var node_translation = node.buttons[0].default_value;
		var node_rotation = node.buttons[1].default_value;
		var node_scale = node.buttons[2].default_value;
		if(node_scale[0] != 1.0 || node_scale[1] != 1.0 || node_scale[2] != 1.0) {
			var v4 = node_scale;
			out = "(" + out + " * " + ("vec3(" + v4[0] + ", " + v4[1] + ", " + v4[2] + ")") + ")";
		}
		if(node_rotation[2] != 0.0) {
			var a = node_rotation[2] * (Math.PI / 180);
			out = "vec3(" + out + ".x * " + Math.cos(a) + " - (" + out + ".y) * " + Math.sin(a) + ", " + out + ".x * " + Math.sin(a) + " + (" + out + ".y) * " + Math.cos(a) + ", 0.0)";
		}
		if(node_translation[0] != 0.0 || node_translation[1] != 0.0 || node_translation[2] != 0.0) {
			var v5 = node_translation;
			out = "(" + out + " + " + ("vec3(" + v5[0] + ", " + v5[1] + ", " + v5[2] + ")") + ")";
		}
		return out;
	} else if(node.type == "NORMAL") {
		if(socket == node.outputs[0]) {
			var v6 = node.outputs[0].default_value;
			return "vec3(" + v6[0] + ", " + v6[1] + ", " + v6[2] + ")";
		} else if(socket == node.outputs[1]) {
			var nor1 = arm_node_Material.parse_vector_input(node.inputs[0]);
			var v7 = node.outputs[0].default_value;
			var norout = "vec3(" + v7[0] + ", " + v7[1] + ", " + v7[2] + ")";
			return "(" + ("dot(" + norout + ", " + nor1 + ")") + ").xxx";
		}
	} else if(node.type == "NORMAL_MAP") {
		var strength2 = arm_node_Material.parse_value_input(node.inputs[0]);
		arm_node_Material.parse_normal_map_color_input(node.inputs[1],strength2);
		return null;
	} else if(node.type != "VECT_TRANSFORM") {
		if(node.type == "COMBXYZ") {
			var x = arm_node_Material.parse_value_input(node.inputs[0]);
			var y = arm_node_Material.parse_value_input(node.inputs[1]);
			var z = arm_node_Material.parse_value_input(node.inputs[2]);
			return "vec3(" + x + ", " + y + ", " + z + ")";
		} else if(node.type == "VECT_MATH") {
			var vec11 = arm_node_Material.parse_vector_input(node.inputs[0]);
			var vec2 = arm_node_Material.parse_vector_input(node.inputs[1]);
			var but3 = node.buttons[0];
			var op = but3.data[but3.default_value].toUpperCase();
			op = StringTools.replace(op," ","_");
			if(op == "ADD") {
				return "(" + vec11 + " + " + vec2 + ")";
			} else if(op == "SUBTRACT") {
				return "(" + vec11 + " - " + vec2 + ")";
			} else if(op == "AVERAGE") {
				return "((" + vec11 + " + " + vec2 + ") / 2.0)";
			} else if(op == "DOT_PRODUCT") {
				return "(" + ("dot(" + vec11 + ", " + vec2 + ")") + ").xxx";
			} else if(op == "CROSS_PRODUCT") {
				return "cross(" + vec11 + ", " + vec2 + ")";
			} else if(op == "NORMALIZE") {
				return "normalize(" + vec11 + ")";
			}
		} else if(node.type == "Displacement") {
			var height1 = arm_node_Material.parse_value_input(node.inputs[0]);
			return "(" + ("" + height1) + ").xxx";
		} else if(arm_node_Material.customNodes.get(node.type) != null) {
			return (arm_node_Material.customNodes.get(node.type))(node);
		}
	}
	return "vec3(0.0, 0.0, 0.0)";
};
arm_node_Material.parse_normal_map_color_input = function(inp,strength) {
	if(strength == null) {
		strength = "1.0";
	}
	arm_node_Material.frag.write_normal++;
	arm_node_Material.out_normaltan = arm_node_Material.parse_vector_input(inp);
	if(!arm_node_Material.arm_export_tangents) {
		arm_node_Material.frag.write("vec3 texn = (" + arm_node_Material.out_normaltan + ") * 2.0 - 1.0;");
		arm_node_Material.frag.write("texn.y = -texn.y;");
		if(!arm_node_Material.cotangentFrameWritten) {
			arm_node_Material.cotangentFrameWritten = true;
			arm_node_Material.frag.add_function(arm_node_MaterialFunctions.str_cotangentFrame);
		}
		arm_node_Material.frag.n = true;
		arm_node_Material.frag.write("mat3 TBN = cotangentFrame(n, vVec, texCoord);");
		arm_node_Material.frag.write("n = mul(normalize(texn), TBN);");
	}
	arm_node_Material.frag.write_normal--;
};
arm_node_Material.parse_value_input = function(inp) {
	var l = arm_node_Material.getInputLink(inp);
	if(l != null) {
		var from_node = arm_node_Material.getNode(l.from_id);
		if(from_node.type == "REROUTE") {
			return arm_node_Material.parse_value_input(from_node.inputs[0]);
		}
		var res_var = arm_node_Material.write_result(l);
		var st = from_node.outputs[l.from_socket].type;
		if(st == "RGB" || st == "RGBA" || st == "VECTOR") {
			return "" + res_var + ".x";
		} else {
			return res_var;
		}
	} else {
		return "" + inp.default_value;
	}
};
arm_node_Material.parse_value = function(node,socket) {
	if(node.type == "ATTRIBUTE") {
		arm_node_Material.curshader.add_uniform("float time","_time");
		return "time";
	} else if(node.type == "CAMERA") {
		if(socket == node.outputs[1]) {
			arm_node_Material.curshader.add_uniform("vec2 cameraProj","_cameraPlaneProj");
			arm_node_Material.curshader.wvpposition = true;
			return "(cameraProj.y / ((wvpposition.z / wvpposition.w) - cameraProj.x))";
		} else {
			arm_node_Material.curshader.add_uniform("vec3 eye","_cameraPosition");
			arm_node_Material.curshader.wposition = true;
			return "distance(eye, wposition)";
		}
	} else if(node.type == "LAYER") {
		if(socket == node.outputs[1]) {
			var l = node.buttons[0].default_value;
			arm_node_Material.curshader.add_uniform("sampler2D texpaint","_texpaint" + Std.string(l));
			return "texture(texpaint, texCoord).a";
		} else if(socket == node.outputs[2]) {
			var l1 = node.buttons[0].default_value;
			arm_node_Material.curshader.add_uniform("sampler2D texpaint_pack","_texpaint_pack" + Std.string(l1));
			return "texture(texpaint_pack, texCoord).r";
		} else if(socket == node.outputs[3]) {
			var l2 = node.buttons[0].default_value;
			arm_node_Material.curshader.add_uniform("sampler2D texpaint_pack","_texpaint_pack" + Std.string(l2));
			return "texture(texpaint_pack, texCoord).g";
		} else if(socket == node.outputs[4]) {
			var l3 = node.buttons[0].default_value;
			arm_node_Material.curshader.add_uniform("sampler2D texpaint_pack","_texpaint_pack" + Std.string(l3));
			return "texture(texpaint_pack, texCoord).b";
		} else if(socket == node.outputs[7]) {
			var l4 = node.buttons[0].default_value;
			arm_node_Material.curshader.add_uniform("sampler2D texpaint_pack","_texpaint_pack" + Std.string(l4));
			return "texture(texpaint_pack, texCoord).a";
		}
	} else if(node.type == "LAYER_MASK") {
		if(socket == node.outputs[0]) {
			var l5 = node.buttons[0].default_value;
			arm_node_Material.curshader.add_uniform("sampler2D texpaint_mask","_texpaint_mask" + Std.string(l5));
			return "texture(texpaint_mask, texCoord).r";
		}
	} else if(node.type == "MATERIAL") {
		return "0.0";
	} else if(node.type == "FRESNEL") {
		var ior = arm_node_Material.parse_value_input(node.inputs[0]);
		arm_node_Material.curshader.dotNV = true;
		return "pow(1.0 - dotNV, 7.25 / " + ior + ")";
	} else if(node.type == "NEW_GEOMETRY") {
		if(socket == node.outputs[6]) {
			return "0.0";
		} else if(socket == node.outputs[7]) {
			return "0.0";
		}
	} else if(node.type == "HAIR_INFO") {
		return "0.5";
	} else if(node.type == "LAYER_WEIGHT") {
		var blend = arm_node_Material.parse_value_input(node.inputs[0]);
		if(socket == node.outputs[0]) {
			arm_node_Material.curshader.dotNV = true;
			return "clamp(pow(1.0 - dotNV, (1.0 - " + blend + ") * 10.0), 0.0, 1.0)";
		} else if(socket == node.outputs[1]) {
			arm_node_Material.curshader.dotNV = true;
			return "((1.0 - dotNV) * " + blend + ")";
		}
	} else if(node.type == "OBJECT_INFO") {
		if(socket == node.outputs[1]) {
			arm_node_Material.curshader.add_uniform("float objectInfoIndex","_objectInfoIndex");
			return "objectInfoIndex";
		} else if(socket == node.outputs[2]) {
			arm_node_Material.curshader.add_uniform("float objectInfoMaterialIndex","_objectInfoMaterialIndex");
			return "objectInfoMaterialIndex";
		} else if(socket == node.outputs[3]) {
			arm_node_Material.curshader.add_uniform("float objectInfoRandom","_objectInfoRandom");
			return "objectInfoRandom";
		}
	} else if(node.type == "VALUE") {
		return "" + node.outputs[0].default_value;
	} else if(node.type == "TEX_BRICK") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_brick);
		var co = arm_node_Material.getCoord(node);
		var scale = arm_node_Material.parse_value_input(node.inputs[4]);
		var res = "tex_brick_f(" + co + " * " + scale + ")";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res);
		}
		return res;
	} else if(node.type == "TEX_CHECKER") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_checker);
		var co1 = arm_node_Material.getCoord(node);
		var scale1 = arm_node_Material.parse_value_input(node.inputs[3]);
		var res1 = "tex_checker_f(" + co1 + ", " + scale1 + ")";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res1);
		}
		return res1;
	} else if(node.type == "TEX_GRADIENT") {
		var co2 = arm_node_Material.getCoord(node);
		var but = node.buttons[0];
		var grad = but.data[but.default_value].toUpperCase();
		grad = StringTools.replace(grad," ","_");
		var f = arm_node_Material.getGradient(grad,co2);
		var res2 = "(clamp(" + f + ", 0.0, 1.0))";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res2);
		}
		return res2;
	} else if(node.type == "TEX_IMAGE") {
		if(arm_node_Material.parsed.indexOf(arm_node_Material.res_var_name(node,node.outputs[0])) >= 0) {
			var varname = arm_node_Material.store_var_name(node);
			return "" + varname + ".a";
		}
		var tex_name = arm_node_Material.node_name(node);
		var tex = arm_node_Material.make_texture(node,tex_name);
		if(tex != null) {
			var to_linear = node.buttons[1].default_value == 1;
			var texstore = arm_node_Material.texture_store(node,tex,tex_name,to_linear);
			return "" + texstore + ".a";
		}
	} else if(node.type == "TEX_MAGIC") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_magic);
		var co3 = arm_node_Material.getCoord(node);
		var scale2 = arm_node_Material.parse_value_input(node.inputs[1]);
		var res3 = "tex_magic_f(" + co3 + " * " + scale2 + " * 4.0)";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res3);
		}
		return res3;
	} else if(node.type == "TEX_MUSGRAVE") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_musgrave);
		var co4 = arm_node_Material.getCoord(node);
		var scale3 = arm_node_Material.parse_value_input(node.inputs[1]);
		var res4 = "tex_musgrave_f(" + co4 + " * " + scale3 + " * 0.5)";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res4);
		}
		return res4;
	} else if(node.type == "TEX_NOISE") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_noise);
		arm_node_Material.curshader.add_uniform("sampler2D snoise256","$noise256.k");
		var co5 = arm_node_Material.getCoord(node);
		var scale4 = arm_node_Material.parse_value_input(node.inputs[1]);
		var res5 = "tex_noise(" + co5 + " * " + scale4 + ")";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res5);
		}
		return res5;
	} else if(node.type == "TEX_VORONOI") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_voronoi);
		arm_node_Material.curshader.add_uniform("sampler2D snoise256","$noise256.k");
		var co6 = arm_node_Material.getCoord(node);
		var scale5 = arm_node_Material.parse_value_input(node.inputs[1]);
		var but1 = node.buttons[0];
		var coloring = but1.data[but1.default_value].toUpperCase();
		coloring = StringTools.replace(coloring," ","_");
		var res6 = "";
		if(coloring == "INTENSITY") {
			res6 = "tex_voronoi(" + co6 + " * " + scale5 + ").a";
		} else {
			res6 = "tex_voronoi(" + co6 + " * " + scale5 + ").r";
		}
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res6);
		}
		return res6;
	} else if(node.type == "TEX_WAVE") {
		arm_node_Material.curshader.add_function(arm_node_MaterialFunctions.str_tex_wave);
		var co7 = arm_node_Material.getCoord(node);
		var scale6 = arm_node_Material.parse_value_input(node.inputs[1]);
		var res7 = "tex_wave_f(" + co7 + " * " + scale6 + ")";
		if(arm_node_Material.sample_bump) {
			arm_node_Material.write_bump(node,res7);
		}
		return res7;
	} else if(node.type == "NORMAL") {
		var nor = arm_node_Material.parse_vector_input(node.inputs[0]);
		var v = node.outputs[0].default_value;
		var norout = "vec3(" + v[0] + ", " + v[1] + ", " + v[2] + ")";
		return "dot(" + norout + ", " + nor + ")";
	} else if(node.type == "MATH") {
		var val1 = arm_node_Material.parse_value_input(node.inputs[0]);
		var val2 = arm_node_Material.parse_value_input(node.inputs[1]);
		var but2 = node.buttons[0];
		var op = but2.data[but2.default_value].toUpperCase();
		op = StringTools.replace(op," ","_");
		but2 = node.buttons[1];
		var use_clamp = but2.default_value == "true";
		var out_val = "";
		if(op == "ADD") {
			out_val = "(" + val1 + " + " + val2 + ")";
		} else if(op == "SUBTRACT") {
			out_val = "(" + val1 + " - " + val2 + ")";
		} else if(op == "MULTIPLY") {
			out_val = "(" + val1 + " * " + val2 + ")";
		} else if(op == "DIVIDE") {
			out_val = "(" + val1 + " / " + val2 + ")";
		} else if(op == "POWER") {
			out_val = "pow(" + val1 + ", " + val2 + ")";
		} else if(op == "LOGARITHM") {
			out_val = "log(" + val1 + ")";
		} else if(op == "SQUARE_ROOT") {
			out_val = "sqrt(" + val1 + ")";
		} else if(op == "ABSOLUTE") {
			out_val = "abs(" + val1 + ")";
		} else if(op == "MINIMUM") {
			out_val = "min(" + val1 + ", " + val2 + ")";
		} else if(op == "MAXIMUM") {
			out_val = "max(" + val1 + ", " + val2 + ")";
		} else if(op == "LESS_THAN") {
			out_val = "float(" + val1 + " < " + val2 + ")";
		} else if(op == "GREATER_THAN") {
			out_val = "float(" + val1 + " > " + val2 + ")";
		} else if(op == "ROUND") {
			out_val = "floor(" + val1 + " + 0.5)";
		} else if(op == "FLOOR") {
			out_val = "floor(" + val1 + ")";
		} else if(op == "CEIL") {
			out_val = "ceil(" + val1 + ")";
		} else if(op == "FRACT") {
			out_val = "fract(" + val1 + ")";
		} else if(op == "MODULO") {
			out_val = "mod(" + val1 + ", " + val2 + ")";
		} else if(op == "SINE") {
			out_val = "sin(" + val1 + ")";
		} else if(op == "COSINE") {
			out_val = "cos(" + val1 + ")";
		} else if(op == "TANGENT") {
			out_val = "tan(" + val1 + ")";
		} else if(op == "ARCSINE") {
			out_val = "asin(" + val1 + ")";
		} else if(op == "ARCCOSINE") {
			out_val = "acos(" + val1 + ")";
		} else if(op == "ARCTANGENT") {
			out_val = "atan(" + val1 + ")";
		} else if(op == "ARCTAN2") {
			out_val = "atan2(" + val1 + ", " + val2 + ")";
		}
		if(use_clamp) {
			return "clamp(" + out_val + ", 0.0, 1.0)";
		} else {
			return out_val;
		}
	} else if(node.type == "RGBTOBW") {
		var col = arm_node_Material.parse_vector_input(node.inputs[0]);
		return "(((" + col + ".r * 0.3 + " + col + ".g * 0.59 + " + col + ".b * 0.11) / 3.0) * 2.5)";
	} else if(node.type == "SEPRGB") {
		var col1 = arm_node_Material.parse_vector_input(node.inputs[0]);
		if(socket == node.outputs[0]) {
			return "" + col1 + ".r";
		} else if(socket == node.outputs[1]) {
			return "" + col1 + ".g";
		} else if(socket == node.outputs[2]) {
			return "" + col1 + ".b";
		}
	} else if(node.type == "SEPXYZ") {
		var vec = arm_node_Material.parse_vector_input(node.inputs[0]);
		if(socket == node.outputs[0]) {
			return "" + vec + ".x";
		} else if(socket == node.outputs[1]) {
			return "" + vec + ".y";
		} else if(socket == node.outputs[2]) {
			return "" + vec + ".z";
		}
	} else if(node.type == "VECT_MATH") {
		var vec1 = arm_node_Material.parse_vector_input(node.inputs[0]);
		var vec2 = arm_node_Material.parse_vector_input(node.inputs[1]);
		var but3 = node.buttons[0];
		var op1 = but3.data[but3.default_value].toUpperCase();
		op1 = StringTools.replace(op1," ","_");
		if(op1 == "DOT_PRODUCT") {
			return "dot(" + vec1 + ", " + vec2 + ")";
		} else {
			return "0.0";
		}
	} else if(arm_node_Material.customNodes.get(node.type) != null) {
		return (arm_node_Material.customNodes.get(node.type))(node);
	}
	return "0.0";
};
arm_node_Material.getCoord = function(node) {
	if(arm_node_Material.getInputLink(node.inputs[0]) != null) {
		return arm_node_Material.parse_vector_input(node.inputs[0]);
	} else {
		arm_node_Material.curshader.bposition = true;
		return "bposition";
	}
};
arm_node_Material.getGradient = function(grad,co) {
	if(grad == "LINEAR") {
		return "" + co + ".x";
	} else if(grad == "QUADRATIC") {
		return "0.0";
	} else if(grad == "EASING") {
		return "0.0";
	} else if(grad == "DIAGONAL") {
		return "(" + co + ".x + " + co + ".y) * 0.5";
	} else if(grad == "RADIAL") {
		return "atan(" + co + ".y, " + co + ".x) / (3.141592 * 2.0) + 0.5";
	} else if(grad == "QUADRATIC_SPHERE") {
		return "0.0";
	} else {
		return "max(1.0 - sqrt(" + co + ".x * " + co + ".x + " + co + ".y * " + co + ".y + " + co + ".z * " + co + ".z), 0.0)";
	}
};
arm_node_Material.vector_curve = function(name,fac,points) {
	var ys_var = name + "_ys";
	var num = points.length / 2 | 0;
	arm_node_Material.curshader.write("float " + ys_var + "[" + num + "];");
	var _g = 0;
	var _g1 = num;
	while(_g < _g1) {
		var i = _g++;
		arm_node_Material.curshader.write("" + ys_var + "[" + i + "] = " + points[i * 2 + 1] + ";");
	}
	var fac_var = name + "_fac";
	arm_node_Material.curshader.write("float " + fac_var + " = " + fac + ";");
	var index = "0";
	var _g2 = 1;
	var _g3 = num;
	while(_g2 < _g3) {
		var i1 = _g2++;
		index += " + (" + fac_var + " > " + points[i1 * 2] + " ? 1 : 0)";
	}
	var index_var = name + "_i";
	arm_node_Material.curshader.write("int " + index_var + " = " + index + ";");
	var facs_var = name + "_xs";
	arm_node_Material.curshader.write("float " + facs_var + "[" + num + "];");
	var _g4 = 0;
	var _g5 = num;
	while(_g4 < _g5) {
		var i2 = _g4++;
		arm_node_Material.curshader.write("" + facs_var + "[" + i2 + "] = " + points[i2 * 2] + ";");
	}
	return "mix(" + ys_var + "[" + index_var + "], " + ys_var + "[" + index_var + " + 1], (" + fac_var + " - " + facs_var + "[" + index_var + "]) * (1.0 / (" + facs_var + "[" + index_var + " + 1] - " + facs_var + "[" + index_var + "])))";
};
arm_node_Material.res_var_name = function(node,socket) {
	return arm_node_Material.node_name(node) + "_" + arm_node_Material.safesrc(socket.name) + "_res";
};
arm_node_Material.write_result = function(l) {
	var from_node = arm_node_Material.getNode(l.from_id);
	var from_socket = from_node.outputs[l.from_socket];
	var res_var = arm_node_Material.res_var_name(from_node,from_socket);
	var st = from_socket.type;
	if(arm_node_Material.parsed.indexOf(res_var) < 0) {
		arm_node_Material.parsed.push(res_var);
		if(st == "RGB" || st == "RGBA" || st == "VECTOR") {
			var res = arm_node_Material.parse_vector(from_node,from_socket);
			if(res == null) {
				return null;
			}
			var _this = arm_node_Material.parsedMap;
			if(__map_reserved[res_var] != null) {
				_this.setReserved(res_var,res);
			} else {
				_this.h[res_var] = res;
			}
			arm_node_Material.curshader.write("vec3 " + res_var + " = " + res + ";");
		} else if(st == "VALUE") {
			var res1 = arm_node_Material.parse_value(from_node,from_socket);
			if(res1 == null) {
				return null;
			}
			var _this1 = arm_node_Material.parsedMap;
			if(__map_reserved[res_var] != null) {
				_this1.setReserved(res_var,res1);
			} else {
				_this1.h[res_var] = res1;
			}
			arm_node_Material.curshader.write("float " + res_var + " = " + res1 + ";");
		}
	}
	return res_var;
};
arm_node_Material.store_var_name = function(node) {
	return arm_node_Material.node_name(node) + "_store";
};
arm_node_Material.texture_store = function(node,tex,tex_name,to_linear) {
	if(to_linear == null) {
		to_linear = false;
	}
	arm_node_Material.matcon.bind_textures.push(tex);
	arm_node_Material.curshader.context.add_elem("tex","short2norm");
	arm_node_Material.curshader.add_uniform("sampler2D " + tex_name);
	var uv_name = "";
	if(arm_node_Material.getInputLink(node.inputs[0]) != null) {
		uv_name = arm_node_Material.parse_vector_input(node.inputs[0]);
	} else {
		uv_name = arm_node_Material.tex_coord;
	}
	var tex_store = arm_node_Material.store_var_name(node);
	if(arm_node_Material.triplanar) {
		arm_node_Material.curshader.write("vec4 " + tex_store + " = vec4(0.0, 0.0, 0.0, 0.0);");
		arm_node_Material.curshader.write("if (texCoordBlend.x > 0) " + tex_store + " += texture(" + tex_name + ", " + uv_name + ".xy) * texCoordBlend.x;");
		arm_node_Material.curshader.write("if (texCoordBlend.y > 0) " + tex_store + " += texture(" + tex_name + ", " + uv_name + "1.xy) * texCoordBlend.y;");
		arm_node_Material.curshader.write("if (texCoordBlend.z > 0) " + tex_store + " += texture(" + tex_name + ", " + uv_name + "2.xy) * texCoordBlend.z;");
	} else {
		var _this = arm_node_Material.textureMap;
		var value = "texture(" + tex_name + ", " + uv_name + ".xy)";
		if(__map_reserved[tex_store] != null) {
			_this.setReserved(tex_store,value);
		} else {
			_this.h[tex_store] = value;
		}
		arm_node_Material.curshader.write("vec4 " + tex_store + " = texture(" + tex_name + ", " + uv_name + ".xy);");
		if(!StringTools.endsWith(tex.file,".jpg")) {
			arm_node_Material.curshader.write("" + tex_store + ".rgb *= " + tex_store + ".a;");
		}
	}
	if(arm_node_Material.sample_bump) {
		arm_node_Material.sample_bump_res = tex_store;
		arm_node_Material.curshader.write("float " + tex_store + "_x = dFdx(" + tex_store + ").x;");
		arm_node_Material.curshader.write("float " + tex_store + "_y = dFdy(" + tex_store + ").x;");
		arm_node_Material.sample_bump = false;
	}
	if(to_linear) {
		arm_node_Material.curshader.write("" + tex_store + ".rgb = pow(" + tex_store + ".rgb, vec3(2.2, 2.2, 2.2));");
	}
	return tex_store;
};
arm_node_Material.write_bump = function(node,res) {
	arm_node_Material.sample_bump_res = arm_node_Material.store_var_name(node) + "_bump";
	arm_node_Material.curshader.write("float " + arm_node_Material.sample_bump_res + "_x = dFdx(" + res + ");");
	arm_node_Material.curshader.write("float " + arm_node_Material.sample_bump_res + "_y = dFdy(" + res + ");");
	arm_node_Material.sample_bump = false;
};
arm_node_Material.node_by_type = function(nodes,ntype) {
	var _g = 0;
	while(_g < nodes.length) {
		var n = nodes[_g];
		++_g;
		if(n.type == ntype) {
			return n;
		}
	}
	return null;
};
arm_node_Material.node_name = function(node) {
	var s = arm_node_Material.safesrc(node.name) + node.id;
	return s;
};
arm_node_Material.safesrc = function(s) {
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		var code = HxOverrides.cca(s,i);
		var letter = code >= 65 && code <= 90 || code >= 97 && code <= 122;
		if(!letter) {
			s = StringTools.replace(s,s.charAt(i),"_");
		}
	}
	return s;
};
arm_node_Material.enumData = function(s) {
	var _g = 0;
	var _g1 = arm_Project.assets;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.name == s) {
			return a.file;
		}
	}
	return "";
};
arm_node_Material.make_texture = function(image_node,tex_name,matname) {
	var filepath = arm_node_Material.enumData(arm_App.enumTexts(image_node.type)[image_node.buttons[0].default_value]);
	if(filepath == "" || filepath.indexOf(".") == -1) {
		return null;
	}
	var tex = { name : tex_name, file : filepath};
	if(arm_Context.textureFilter) {
		tex.min_filter = "anisotropic";
		tex.mag_filter = "linear";
		tex.mipmap_filter = "linear";
		tex.generate_mipmaps = true;
	} else {
		tex.min_filter = "point";
		tex.mag_filter = "point";
		tex.mipmap_filter = "no";
	}
	tex.u_addressing = "repeat";
	tex.v_addressing = "repeat";
	return tex;
};
var arm_util_MaterialUtil = function() { };
$hxClasses["arm.util.MaterialUtil"] = arm_util_MaterialUtil;
arm_util_MaterialUtil.__name__ = "arm.util.MaterialUtil";
arm_util_MaterialUtil.removeMaterialCache = function() {
	iron_data_Data.cachedMaterials.remove("SceneMaterial2");
	iron_data_Data.cachedShaders.remove("Material2_data");
	iron_data_Data.cachedSceneRaws.remove("Material2_data");
};
var arm_util_MeshUtil = function() { };
$hxClasses["arm.util.MeshUtil"] = arm_util_MeshUtil;
arm_util_MeshUtil.__name__ = "arm.util.MeshUtil";
arm_util_MeshUtil.mergeMesh = function() {
	var vlen = 0;
	var ilen = 0;
	var maxScale = 0.0;
	var paintObjects = arm_Project.paintObjects;
	var _g = 0;
	var _g1 = paintObjects.length;
	while(_g < _g1) {
		var i = _g++;
		vlen += paintObjects[i].data.raw.vertex_arrays[0].values.length;
		ilen += paintObjects[i].data.raw.index_arrays[0].values.length;
		if(paintObjects[i].data.scalePos > maxScale) {
			maxScale = paintObjects[i].data.scalePos;
		}
	}
	vlen = vlen / 4 | 0;
	var this1 = new Int16Array(vlen * 4);
	var va0 = this1;
	var this2 = new Int16Array(vlen * 2);
	var va1 = this2;
	var this3 = new Int16Array(vlen * 2);
	var va2 = this3;
	var this4 = new Uint32Array(ilen);
	var ia = this4;
	var voff = 0;
	var ioff = 0;
	var _g2 = 0;
	var _g3 = paintObjects.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		var vas = paintObjects[i1].data.raw.vertex_arrays;
		var ias = paintObjects[i1].data.raw.index_arrays;
		var scale = paintObjects[i1].data.scalePos;
		var _g21 = 0;
		var _g31 = vas[0].values.length;
		while(_g21 < _g31) {
			var j = _g21++;
			va0[j + voff * 4] = vas[0].values[j];
		}
		var _g4 = 0;
		var _g5 = va0.length / 4 | 0;
		while(_g4 < _g5) {
			var j1 = _g4++;
			va0[j1 * 4 + voff * 4] = va0[j1 * 4 + voff * 4] * scale / maxScale | 0;
			va0[j1 * 4 + 1 + voff * 4] = va0[j1 * 4 + 1 + voff * 4] * scale / maxScale | 0;
			va0[j1 * 4 + 2 + voff * 4] = va0[j1 * 4 + 2 + voff * 4] * scale / maxScale | 0;
		}
		var _g6 = 0;
		var _g7 = vas[1].values.length;
		while(_g6 < _g7) {
			var j2 = _g6++;
			va1[j2 + voff * 2] = vas[1].values[j2];
		}
		var _g8 = 0;
		var _g9 = vas[2].values.length;
		while(_g8 < _g9) {
			var j3 = _g8++;
			va2[j3 + voff * 2] = vas[2].values[j3];
		}
		var _g10 = 0;
		var _g11 = ias[0].values.length;
		while(_g10 < _g11) {
			var j4 = _g10++;
			ia[j4 + ioff] = ias[0].values[j4] + voff;
		}
		voff += vas[0].values.length / 4 | 0;
		ioff += ias[0].values.length | 0;
	}
	var raw = { name : arm_Context.paintObject.name, vertex_arrays : [{ values : va0, attrib : "pos", data : "short4norm"},{ values : va1, attrib : "nor", data : "short2norm"},{ values : va2, attrib : "tex", data : "short2norm"}], index_arrays : [{ values : ia, material : 0}], scale_pos : maxScale, scale_tex : 1.0};
	new iron_data_MeshData(raw,function(md) {
		arm_Context.mergedObject = new iron_object_MeshObject(md,arm_Context.paintObject.materials);
		arm_Context.mergedObject.name = arm_Context.paintObject.name;
		arm_Context.mergedObject.force_context = "paint";
		arm_Context.mainObject().addChild(arm_Context.mergedObject);
	});
};
arm_util_MeshUtil.swapAxis = function(a,b) {
	var objects = arm_ui_UIHeader.inst.worktab.position == 1 ? [js_Boot.__cast(arm_Context.object , iron_object_MeshObject)] : arm_Project.paintObjects;
	var _g = 0;
	while(_g < objects.length) {
		var o = objects[_g];
		++_g;
		var vas = o.data.raw.vertex_arrays;
		var pa = vas[0].values;
		var na0 = a == 2 ? vas[0].values : vas[1].values;
		var na1 = b == 2 ? vas[0].values : vas[1].values;
		var c = a == 2 ? 3 : a;
		var d = b == 2 ? 3 : b;
		var e = a == 2 ? 4 : 2;
		var f = b == 2 ? 4 : 2;
		var _g1 = 0;
		var _g11 = pa.length / 4 | 0;
		while(_g1 < _g11) {
			var i = _g1++;
			var t = pa[i * 4 + a];
			pa[i * 4 + a] = pa[i * 4 + b];
			pa[i * 4 + b] = -t;
			t = na0[i * e + c];
			na0[i * e + c] = na1[i * f + d];
			na1[i * f + d] = -t;
		}
		var g = o.data.geom;
		var _this = g.vertexBufferMap;
		var posbuf = __map_reserved["pos"] != null ? _this.getReserved("pos") : _this.h["pos"];
		if(posbuf != null) {
			posbuf.delete();
			g.vertexBufferMap.remove("pos");
		}
		var vertices = g.vertexBuffer.lockInt16();
		var _g2 = 0;
		var _g3 = vertices.length / 8 | 0;
		while(_g2 < _g3) {
			var i1 = _g2++;
			vertices[i1 * 8] = vas[0].values[i1 * 4];
			vertices[i1 * 8 + 1] = vas[0].values[i1 * 4 + 1];
			vertices[i1 * 8 + 2] = vas[0].values[i1 * 4 + 2];
			vertices[i1 * 8 + 3] = vas[0].values[i1 * 4 + 3];
			vertices[i1 * 8 + 4] = vas[1].values[i1 * 2];
			vertices[i1 * 8 + 5] = vas[1].values[i1 * 2 + 1];
		}
		g.vertexBuffer.unlock();
	}
	if(arm_Context.mergedObject != null) {
		arm_Context.mergedObject.remove();
		iron_data_Data.deleteMesh(arm_Context.mergedObject.data.handle);
		arm_Context.mergedObject = null;
	}
	arm_util_MeshUtil.mergeMesh();
};
arm_util_MeshUtil.flipNormals = function() {
	var objects = arm_ui_UIHeader.inst.worktab.position == 1 ? [js_Boot.__cast(arm_Context.object , iron_object_MeshObject)] : arm_Project.paintObjects;
	var _g = 0;
	while(_g < objects.length) {
		var o = objects[_g];
		++_g;
		var g = o.data.geom;
		var vertices = g.vertexBuffer.lockInt16();
		var _g1 = 0;
		var _g11 = vertices.length / 8 | 0;
		while(_g1 < _g11) {
			var i = _g1++;
			vertices[i * 8 + 3] = -vertices[i * 8 + 3];
			vertices[i * 8 + 4] = -vertices[i * 8 + 4];
			vertices[i * 8 + 5] = -vertices[i * 8 + 5];
		}
		g.vertexBuffer.unlock();
	}
};
arm_util_MeshUtil.calcNormals = function() {
	var va_x = 0.0;
	var va_y = 0.0;
	var va_z = 0.0;
	var va_w = 1.0;
	var vb_x = 0.0;
	var vb_y = 0.0;
	var vb_z = 0.0;
	var vb_w = 1.0;
	var vc_x = 0.0;
	var vc_y = 0.0;
	var vc_z = 0.0;
	var vc_w = 1.0;
	var cb_x = 0.0;
	var cb_y = 0.0;
	var cb_z = 0.0;
	var cb_w = 1.0;
	var ab_x = 0.0;
	var ab_y = 0.0;
	var ab_z = 0.0;
	var ab_w = 1.0;
	var objects = arm_ui_UIHeader.inst.worktab.position == 1 ? [js_Boot.__cast(arm_Context.object , iron_object_MeshObject)] : arm_Project.paintObjects;
	var _g = 0;
	while(_g < objects.length) {
		var o = objects[_g];
		++_g;
		var g = o.data.geom;
		var inda = g.indices[0];
		var vertices = g.vertexBuffer.lockInt16();
		var _g1 = 0;
		var _g11 = inda.length / 3 | 0;
		while(_g1 < _g11) {
			var i = _g1++;
			var i1 = inda[i * 3];
			var i2 = inda[i * 3 + 1];
			var i3 = inda[i * 3 + 2];
			va_x = vertices[i1 * 8];
			va_y = vertices[i1 * 8 + 1];
			va_z = vertices[i1 * 8 + 2];
			va_w = 1.0;
			vb_x = vertices[i2 * 8];
			vb_y = vertices[i2 * 8 + 1];
			vb_z = vertices[i2 * 8 + 2];
			vb_w = 1.0;
			vc_x = vertices[i3 * 8];
			vc_y = vertices[i3 * 8 + 1];
			vc_z = vertices[i3 * 8 + 2];
			vc_w = 1.0;
			cb_x = vc_x - vb_x;
			cb_y = vc_y - vb_y;
			cb_z = vc_z - vb_z;
			ab_x = va_x - vb_x;
			ab_y = va_y - vb_y;
			ab_z = va_z - vb_z;
			var ax = cb_x;
			var ay = cb_y;
			var az = cb_z;
			var vx = ab_x;
			var vy = ab_y;
			var vz = ab_z;
			cb_x = ay * vz - az * vy;
			cb_y = az * vx - ax * vz;
			cb_z = ax * vy - ay * vx;
			var n = Math.sqrt(cb_x * cb_x + cb_y * cb_y + cb_z * cb_z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				cb_x *= invN;
				cb_y *= invN;
				cb_z *= invN;
			}
			vertices[i1 * 8 + 4] = cb_x * 32767 | 0;
			vertices[i1 * 8 + 5] = cb_y * 32767 | 0;
			vertices[i1 * 8 + 3] = cb_z * 32767 | 0;
			vertices[i2 * 8 + 4] = cb_x * 32767 | 0;
			vertices[i2 * 8 + 5] = cb_y * 32767 | 0;
			vertices[i2 * 8 + 3] = cb_z * 32767 | 0;
			vertices[i3 * 8 + 4] = cb_x * 32767 | 0;
			vertices[i3 * 8 + 5] = cb_y * 32767 | 0;
			vertices[i3 * 8 + 3] = cb_z * 32767 | 0;
		}
		g.vertexBuffer.unlock();
	}
};
var arm_node_NodesMaterial = function() { };
$hxClasses["arm.node.NodesMaterial"] = arm_node_NodesMaterial;
arm_node_NodesMaterial.__name__ = "arm.node.NodesMaterial";
arm_node_NodesMaterial.createNode = function(nodeType) {
	var _g = 0;
	var _g1 = arm_node_NodesMaterial.list;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		var _g2 = 0;
		while(_g2 < c.length) {
			var n = c[_g2];
			++_g2;
			if(n.type == nodeType) {
				var isScene = arm_ui_UIHeader.inst.worktab.position == 1;
				var material = isScene ? arm_Context.materialScene : arm_Context.material;
				var canvas = material.canvas;
				var nodes = material.nodes;
				var node = arm_ui_UINodes.makeNode(n,nodes,canvas);
				canvas.nodes.push(node);
				return node;
			}
		}
	}
	return null;
};
var arm_sys_Path = function() { };
$hxClasses["arm.sys.Path"] = arm_sys_Path;
arm_sys_Path.__name__ = "arm.sys.Path";
arm_sys_Path.data = function() {
	return Krom.getFilesLocation() + arm_sys_Path.sep + iron_data_Data.dataPath;
};
arm_sys_Path.toRelative = function(from,to) {
	var a = from.split(arm_sys_Path.sep);
	var b = to.split(arm_sys_Path.sep);
	while(a[0] == b[0]) {
		a.shift();
		b.shift();
		if(a.length == 0 || b.length == 0) {
			break;
		}
	}
	var base = "";
	var _g = 0;
	var _g1 = a.length - 1;
	while(_g < _g1) {
		var i = _g++;
		base += ".." + arm_sys_Path.sep;
	}
	base += b.join(arm_sys_Path.sep);
	return base;
};
arm_sys_Path.baseDir = function(path) {
	return HxOverrides.substr(path,0,path.lastIndexOf(arm_sys_Path.sep) + 1);
};
arm_sys_Path.isMesh = function(path) {
	var p = path.toLowerCase();
	var _g = 0;
	var _g1 = arm_sys_Path.meshFormats;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(StringTools.endsWith(p,"." + s)) {
			return true;
		}
	}
	return false;
};
arm_sys_Path.isTexture = function(path) {
	var p = path.toLowerCase();
	var _g = 0;
	var _g1 = arm_sys_Path.textureFormats;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(StringTools.endsWith(p,"." + s)) {
			return true;
		}
	}
	return false;
};
arm_sys_Path.isFont = function(path) {
	var p = path.toLowerCase();
	return StringTools.endsWith(p,".ttf");
};
arm_sys_Path.isProject = function(path) {
	var p = path.toLowerCase();
	return StringTools.endsWith(p,".arm");
};
arm_sys_Path.isPlugin = function(path) {
	var p = path.toLowerCase();
	return StringTools.endsWith(p,".js");
};
arm_sys_Path.isJson = function(path) {
	var p = path.toLowerCase();
	return StringTools.endsWith(p,".json");
};
arm_sys_Path.isKnown = function(path) {
	if(!(arm_sys_Path.isMesh(path) || arm_sys_Path.isTexture(path) || arm_sys_Path.isFont(path) || arm_sys_Path.isProject(path))) {
		return arm_sys_Path.isPlugin(path);
	} else {
		return true;
	}
};
arm_sys_Path.checkExt = function(p,exts) {
	p = StringTools.replace(p,"-","_");
	var _g = 0;
	while(_g < exts.length) {
		var ext = exts[_g];
		++_g;
		if(StringTools.endsWith(p,"_" + ext)) {
			return true;
		}
	}
	return false;
};
arm_sys_Path.isFolder = function(p) {
	return p.indexOf(".") == -1;
};
arm_sys_Path.isProtected = function() {
	return Krom.getFilesLocation().indexOf("Program Files") >= 0;
};
var arm_Project = function() { };
$hxClasses["arm.Project"] = arm_Project;
arm_Project.__name__ = "arm.Project";
arm_Project.projectOpen = function() {
	arm_ui_UIFiles.show("arm",false,function(path) {
		if(!StringTools.endsWith(path,".arm")) {
			arm_Log.error(arm_Strings.error5);
			return;
		}
		var current = kha_graphics4_Graphics2.current;
		if(current != null) {
			current.end();
		}
		arm_io_ImportArm.runProject(path);
		if(current != null) {
			current.begin(false);
		}
	});
};
arm_Project.projectSave = function(saveAndQuit) {
	if(saveAndQuit == null) {
		saveAndQuit = false;
	}
	if(arm_Project.filepath == "") {
		arm_Project.projectSaveAs();
		return;
	}
	kha_Window.get(0).set_title(arm_ui_UIFiles.filename + " - ArmorPaint");
	var $export = null;
	$export = function(_) {
		arm_io_ExportArm.runProject();
		iron_App.removeRender($export);
		if(saveAndQuit) {
			kha_System.stop();
		}
	};
	iron_App.notifyOnRender($export);
};
arm_Project.projectSaveAs = function() {
	arm_ui_UIFiles.show("arm",true,function(path) {
		var f = arm_ui_UIFiles.filename;
		if(f == "") {
			f = arm_Translator.tr("untitled");
		}
		arm_Project.filepath = path + arm_sys_Path.sep + f;
		if(!StringTools.endsWith(arm_Project.filepath,".arm")) {
			arm_Project.filepath += ".arm";
		}
		arm_Project.projectSave();
	});
};
arm_Project.projectNewBox = function() {
	arm_ui_UIBox.showCustom(function(ui) {
		if(ui.tab(zui_Handle.global.nest(12,null),arm_Translator.tr("New Project"))) {
			ui.row([0.5,0.5]);
			arm_Context.projectType = ui.combo(zui_Handle.global.nest(13,{ position : arm_Context.projectType}),["Cube","Sphere","Tessellated Plane"],arm_Translator.tr("Template"));
			if(ui.button(arm_Translator.tr("OK")) || ui.isReturnDown) {
				arm_Project.projectNew();
				arm_util_ViewportUtil.scaleToBounds();
				arm_ui_UIBox.show = false;
				arm_App.redrawUI();
			}
		}
	});
};
arm_Project.projectNew = function(resetLayers) {
	if(resetLayers == null) {
		resetLayers = true;
	}
	kha_Window.get(0).set_title("ArmorPaint");
	arm_Project.filepath = "";
	if(arm_Context.mergedObject != null) {
		arm_Context.mergedObject.remove();
		iron_data_Data.deleteMesh(arm_Context.mergedObject.data.handle);
		arm_Context.mergedObject = null;
	}
	arm_util_ViewportUtil.resetViewport();
	arm_Context.layerPreviewDirty = true;
	arm_Context.paintObject = arm_Context.mainObject();
	arm_Context.selectPaintObject(arm_Context.mainObject());
	var _g = 1;
	var _g1 = arm_Project.paintObjects.length;
	while(_g < _g1) {
		var i = _g++;
		var p = arm_Project.paintObjects[i];
		if(p == arm_Context.paintObject) {
			continue;
		}
		iron_data_Data.deleteMesh(p.data.handle);
		p.remove();
	}
	var meshes = iron_Scene.active.meshes;
	var len = meshes.length;
	var _g2 = 0;
	var _g3 = len;
	while(_g2 < _g3) {
		var i1 = _g2++;
		var m = meshes[len - i1 - 1];
		if(arm_Context.projectObjects.indexOf(m) == -1) {
			iron_data_Data.deleteMesh(m.data.handle);
			m.remove();
		}
	}
	var handle = arm_Context.paintObject.data.handle;
	if(handle != "SceneSphere" && handle != "ScenePlane") {
		iron_data_Data.deleteMesh(handle);
	}
	if(arm_Context.projectType != 0) {
		var mesh = arm_Context.projectType == 1 ? new arm_format_proc_Sphere(1,512,256) : new arm_format_proc_Plane(1,1,512,512);
		var raw = { name : "Tessellated", vertex_arrays : [{ values : mesh.posa, attrib : "pos", data : "short4norm"},{ values : mesh.nora, attrib : "nor", data : "short2norm"},{ values : mesh.texa, attrib : "tex", data : "short2norm"}], index_arrays : [{ values : mesh.inda, material : 0}], scale_pos : mesh.scalePos, scale_tex : mesh.scaleTex};
		var md = new iron_data_MeshData(raw,function(md1) {
		});
		var _this = iron_data_Data.cachedMeshes;
		if(__map_reserved["SceneTessellated"] != null) {
			_this.setReserved("SceneTessellated",md);
		} else {
			_this.h["SceneTessellated"] = md;
		}
		if(arm_Context.projectType == 1) {
			arm_util_ViewportUtil.setView(0,0,1,0,0,0);
			arm_util_ViewportUtil.orbit(0,Math.PI / 6);
		} else if(arm_Context.projectType == 2) {
			arm_util_ViewportUtil.setView(0,0,5,0,0,0);
			arm_util_ViewportUtil.orbit(0,Math.PI / 6);
		}
	}
	var n = arm_Context.projectType == 0 ? "Cube" : "Tessellated";
	iron_data_Data.getMesh("Scene",n,function(md2) {
		var current = kha_graphics4_Graphics2.current;
		if(current != null) {
			current.end();
		}
		arm_Context.pickerMaskHandle.position = 0;
		arm_Context.paintObject.setData(md2);
		var _this1 = arm_Context.paintObject.transform.scale;
		_this1.x = 1;
		_this1.y = 1;
		_this1.z = 1;
		_this1.w = 1.0;
		arm_Context.paintObject.transform.buildMatrix();
		arm_Context.paintObject.name = n;
		arm_Project.paintObjects = [arm_Context.paintObject];
		while(arm_Project.materials.length > 0) arm_Project.materials.pop().unload();
		iron_data_Data.getMaterial("Scene","Material",function(m1) {
			arm_Project.materials.push(new arm_data_MaterialSlot(m1));
		});
		arm_Context.material = arm_Project.materials[0];
		arm_Project.brushes = [new arm_data_BrushSlot()];
		arm_Context.brush = arm_Project.brushes[0];
		arm_History.reset();
		arm_node_MaterialParser.parsePaintMaterial();
		arm_util_RenderUtil.makeMaterialPreview();
		var _g4 = 0;
		var _g5 = arm_Project.assets;
		while(_g4 < _g5.length) {
			var a = _g5[_g4];
			++_g4;
			iron_data_Data.deleteImage(a.file);
		}
		arm_Project.assets = [];
		arm_Project.assetNames = [];
		arm_Project.assetId = 0;
		arm_Context.ddirty = 4;
		arm_ui_UISidebar.inst.hwnd.redraws = 2;
		arm_ui_UISidebar.inst.hwnd1.redraws = 2;
		arm_ui_UISidebar.inst.hwnd2.redraws = 2;
		if(resetLayers) {
			while(arm_Project.layers.length > 0) arm_Project.layers.pop().unload();
			var layer = new arm_data_LayerSlot();
			arm_Project.layers.push(layer);
			arm_Context.setLayer(layer);
			iron_App.notifyOnRender(arm_Layers.initLayers);
		}
		if(current != null) {
			current.begin(false);
		}
		arm_Context.savedEnvmap = arm_Context.defaultEnvmap;
		iron_Scene.active.world.envmap = arm_Context.emptyEnvmap;
		iron_Scene.active.world.raw.envmap = "World_radiance.k";
		arm_Context.showEnvmapHandle.selected = arm_Context.showEnvmap = false;
		iron_Scene.active.world.probe.radiance = arm_Context.defaultRadiance;
		iron_Scene.active.world.probe.radianceMipmaps = arm_Context.defaultRadianceMipmaps;
		iron_Scene.active.world.probe.irradiance = arm_Context.defaultIrradiance;
		iron_Scene.active.world.probe.raw.strength = 4.0;
	});
};
arm_Project.importMaterial = function() {
	arm_ui_UIFiles.show("arm,blend",false,function(path) {
		if(StringTools.endsWith(path,".blend")) {
			arm_io_ImportBlend.runMaterial(path);
		} else {
			arm_io_ImportArm.runMaterial(path);
		}
	});
};
arm_Project.importBrush = function() {
	arm_ui_UIFiles.show("arm",false,function(path) {
		arm_io_ImportArm.runBrush(path);
	});
};
arm_Project.importMesh = function() {
	arm_ui_UIFiles.show(arm_sys_Path.meshFormats.join(","),false,function(path) {
		arm_Project.importMeshBox(path);
	});
};
arm_Project.importMeshBox = function(path) {
	arm_ui_UIBox.showCustom(function(ui) {
		if(ui.tab(zui_Handle.global.nest(14,null),arm_Translator.tr("Import Mesh"))) {
			if(StringTools.endsWith(path.toLowerCase(),".obj")) {
				arm_Context.splitBy = ui.combo(zui_Handle.global.nest(15,null),[arm_Translator.tr("Object"),arm_Translator.tr("Group"),arm_Translator.tr("Material"),arm_Translator.tr("UDIM Tile")],arm_Translator.tr("Split By"),true);
				if(ui.isHovered) {
					ui.tooltip(arm_Translator.tr("Split .obj mesh into objects"));
				}
			}
			if(StringTools.endsWith(path.toLowerCase(),".fbx")) {
				arm_Context.parseTransform = ui.check(zui_Handle.global.nest(16,{ selected : arm_Context.parseTransform}),arm_Translator.tr("Parse Transforms"));
				if(ui.isHovered) {
					ui.tooltip(arm_Translator.tr("Load per-object transforms from .fbx"));
				}
			}
			if(StringTools.endsWith(path.toLowerCase(),".fbx") || StringTools.endsWith(path.toLowerCase(),".blend")) {
				arm_Context.parseVCols = ui.check(zui_Handle.global.nest(17,{ selected : arm_Context.parseVCols}),arm_Translator.tr("Parse Vertex Colors"));
				if(ui.isHovered) {
					ui.tooltip(arm_Translator.tr("Import vertex color data"));
				}
			}
			ui.row([0.5,0.5]);
			if(ui.button(arm_Translator.tr("Cancel"))) {
				arm_ui_UIBox.show = false;
			}
			if(ui.button(arm_Translator.tr("Import")) || ui.isReturnDown) {
				arm_ui_UIBox.show = false;
				arm_App.redrawUI();
				arm_io_ImportMesh.run(path);
			}
		}
	});
	arm_ui_UIBox.clickToHide = false;
};
arm_Project.reimportMesh = function() {
	if(arm_Project.meshAssets != null && arm_Project.meshAssets.length > 0) {
		arm_io_ImportMesh.run(arm_Project.meshAssets[0],false);
		arm_Log.info("Mesh reimported.");
	} else {
		arm_Project.importAsset();
	}
};
arm_Project.importAsset = function(filters) {
	if(filters == null) {
		filters = arm_sys_Path.textureFormats.join(",") + "," + arm_sys_Path.meshFormats.join(",");
	}
	arm_ui_UIFiles.show(filters,false,function(path) {
		arm_io_ImportAsset.run(path);
	});
};
var arm_util_RenderUtil = function() { };
$hxClasses["arm.util.RenderUtil"] = arm_util_RenderUtil;
arm_util_RenderUtil.__name__ = "arm.util.RenderUtil";
arm_util_RenderUtil.makeMaterialPreview = function() {
	arm_Context.materialPreview = true;
	var sphere = iron_Scene.active.getChild(".Sphere");
	sphere.visible = true;
	var meshes = iron_Scene.active.meshes;
	iron_Scene.active.meshes = [sphere];
	var painto = arm_Context.paintObject;
	arm_Context.paintObject = sphere;
	if(arm_ui_UIHeader.inst.worktab.position == 1) {
		sphere.materials[0] = arm_Context.materialScene.data;
		arm_Context.materialScene.previewReady = true;
	} else {
		sphere.materials[0] = arm_Project.materials[0].data;
		arm_Context.material.previewReady = true;
	}
	var _this = arm_Context.savedCamera;
	var m = iron_Scene.active.camera.transform.local;
	_this.self._00 = m.self._00;
	_this.self._01 = m.self._01;
	_this.self._02 = m.self._02;
	_this.self._03 = m.self._03;
	_this.self._10 = m.self._10;
	_this.self._11 = m.self._11;
	_this.self._12 = m.self._12;
	_this.self._13 = m.self._13;
	_this.self._20 = m.self._20;
	_this.self._21 = m.self._21;
	_this.self._22 = m.self._22;
	_this.self._23 = m.self._23;
	_this.self._30 = m.self._30;
	_this.self._31 = m.self._31;
	_this.self._32 = m.self._32;
	_this.self._33 = m.self._33;
	var m1 = new iron_math_Mat4(0.9146286343879498,-0.0032648027153306235,0.404281837254303,0.4659988049397712,0.404295023959927,0.007367569133732468,-0.9145989516155143,-1.0687517188018691,0.000007410128652369705,0.9999675337275382,0.008058532943908717,0.015935682577325486,0,0,0,1);
	iron_Scene.active.camera.transform.setMatrix(m1);
	var savedFov = iron_Scene.active.camera.data.raw.fov;
	iron_Scene.active.camera.data.raw.fov = 0.92;
	arm_util_ViewportUtil.updateCameraType(0);
	var light = iron_Scene.active.lights[0];
	var savedLight = light.data.raw.strength;
	var probe = iron_Scene.active.world.probe;
	var savedProbe = probe.raw.strength;
	light.data.raw.strength = 1500;
	probe.raw.strength = 4;
	iron_Scene.active.world.envmap = arm_Context.previewEnvmap;
	iron_RenderPath.active.lastW = 256;
	iron_RenderPath.active.lastH = 256;
	iron_Scene.active.camera.buildProjection();
	iron_Scene.active.camera.buildMatrix();
	arm_node_MaterialParser.parseMeshPreviewMaterial();
	var _commands = iron_RenderPath.active.commands;
	iron_RenderPath.active.commands = arm_render_RenderPathPreview.commandsPreview;
	iron_RenderPath.active.renderFrame(iron_RenderPath.active.frameG);
	iron_RenderPath.active.commands = _commands;
	arm_Context.materialPreview = false;
	iron_RenderPath.active.lastW = arm_App.w();
	iron_RenderPath.active.lastH = arm_App.h();
	sphere.visible = false;
	iron_Scene.active.meshes = meshes;
	arm_Context.paintObject = painto;
	iron_Scene.active.camera.transform.setMatrix(arm_Context.savedCamera);
	arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
	iron_Scene.active.camera.data.raw.fov = savedFov;
	iron_Scene.active.camera.buildProjection();
	iron_Scene.active.camera.buildMatrix();
	light.data.raw.strength = savedLight;
	probe.raw.strength = savedProbe;
	iron_Scene.active.world.envmap = arm_Context.showEnvmap ? arm_Context.savedEnvmap : arm_Context.emptyEnvmap;
	arm_node_MaterialParser.parseMeshMaterial();
	arm_Context.ddirty = 0;
};
arm_util_RenderUtil.makeDecalPreview = function() {
	if(arm_Context.decalImage == null) {
		arm_Context.decalImage = kha_Image.createRenderTarget(512,512);
	}
	arm_Context.decalPreview = true;
	var plane = iron_Scene.active.getChild(".Plane");
	var _this = plane.transform.scale;
	_this.x = 1;
	_this.y = 1;
	_this.z = 1;
	_this.w = 1.0;
	var _this1 = plane.transform.rot;
	var f = -Math.PI / 2 / 2;
	var c1 = Math.cos(f);
	var s1 = Math.sin(f);
	f = 0.;
	var c2 = Math.cos(f);
	var s2 = Math.sin(f);
	f = 0.;
	var c3 = Math.cos(f);
	var s3 = Math.sin(f);
	_this1.x = s1 * c2 * c3 + c1 * s2 * s3;
	_this1.y = c1 * s2 * c3 + s1 * c2 * s3;
	_this1.z = c1 * c2 * s3 - s1 * s2 * c3;
	_this1.w = c1 * c2 * c3 - s1 * s2 * s3;
	plane.transform.buildMatrix();
	plane.visible = true;
	var meshes = iron_Scene.active.meshes;
	iron_Scene.active.meshes = [plane];
	var painto = arm_Context.paintObject;
	arm_Context.paintObject = plane;
	var _this2 = arm_Context.savedCamera;
	var m = iron_Scene.active.camera.transform.local;
	_this2.self._00 = m.self._00;
	_this2.self._01 = m.self._01;
	_this2.self._02 = m.self._02;
	_this2.self._03 = m.self._03;
	_this2.self._10 = m.self._10;
	_this2.self._11 = m.self._11;
	_this2.self._12 = m.self._12;
	_this2.self._13 = m.self._13;
	_this2.self._20 = m.self._20;
	_this2.self._21 = m.self._21;
	_this2.self._22 = m.self._22;
	_this2.self._23 = m.self._23;
	_this2.self._30 = m.self._30;
	_this2.self._31 = m.self._31;
	_this2.self._32 = m.self._32;
	_this2.self._33 = m.self._33;
	var m1 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	m1.self._00 += 0 * m1.self._03;
	m1.self._01 += 0 * m1.self._03;
	m1.self._02 += m1.self._03;
	m1.self._10 += 0 * m1.self._13;
	m1.self._11 += 0 * m1.self._13;
	m1.self._12 += m1.self._13;
	m1.self._20 += 0 * m1.self._23;
	m1.self._21 += 0 * m1.self._23;
	m1.self._22 += m1.self._23;
	m1.self._30 += 0 * m1.self._33;
	m1.self._31 += 0 * m1.self._33;
	m1.self._32 += m1.self._33;
	iron_Scene.active.camera.transform.setMatrix(m1);
	var savedFov = iron_Scene.active.camera.data.raw.fov;
	iron_Scene.active.camera.data.raw.fov = 0.92;
	arm_util_ViewportUtil.updateCameraType(0);
	var light = iron_Scene.active.lights[0];
	light.visible = false;
	iron_Scene.active.world.envmap = arm_Context.previewEnvmap;
	iron_RenderPath.active.lastW = 512;
	iron_RenderPath.active.lastH = 512;
	iron_Scene.active.camera.buildProjection();
	iron_Scene.active.camera.buildMatrix();
	arm_node_MaterialParser.parseMeshPreviewMaterial();
	var _commands = iron_RenderPath.active.commands;
	iron_RenderPath.active.commands = arm_render_RenderPathPreview.commandsDecal;
	iron_RenderPath.active.renderFrame(iron_RenderPath.active.frameG);
	iron_RenderPath.active.commands = _commands;
	arm_Context.decalPreview = false;
	iron_RenderPath.active.lastW = arm_App.w();
	iron_RenderPath.active.lastH = arm_App.h();
	plane.visible = false;
	iron_Scene.active.meshes = meshes;
	arm_Context.paintObject = painto;
	iron_Scene.active.camera.transform.setMatrix(arm_Context.savedCamera);
	iron_Scene.active.camera.data.raw.fov = savedFov;
	arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
	iron_Scene.active.camera.buildProjection();
	iron_Scene.active.camera.buildMatrix();
	var light1 = iron_Scene.active.lights[0];
	light1.visible = true;
	iron_Scene.active.world.envmap = arm_Context.showEnvmap ? arm_Context.savedEnvmap : arm_Context.emptyEnvmap;
	arm_node_MaterialParser.parseMeshMaterial();
	arm_Context.ddirty = 0;
};
arm_util_RenderUtil.makeTextPreview = function() {
	var text = arm_Context.textToolText;
	var font = arm_util_RenderUtil.getTextToolFont();
	var fontSize = 200;
	var textW = font.width(fontSize,text) | 0;
	var textH = font.height(fontSize) | 0;
	var texW = textW + 32;
	if(texW < 512) {
		texW = 512;
	}
	if(arm_Context.textToolImage != null && arm_Context.textToolImage.get_width() < texW) {
		arm_Context.textToolImage.unload();
		arm_Context.textToolImage = null;
	}
	if(arm_Context.textToolImage == null) {
		arm_Context.textToolImage = kha_Image.createRenderTarget(texW,texW,1);
	}
	var g2 = arm_Context.textToolImage.get_g2();
	g2.begin(true,-16777216);
	g2.set_font(font);
	g2.set_fontSize(fontSize);
	g2.set_color(-1);
	g2.drawString(text,texW / 2 - textW / 2,texW / 2 - textH / 2);
	g2.end();
};
arm_util_RenderUtil.getTextToolFont = function() {
	var fontName = arm_io_ImportFont.fontList[arm_Context.textToolHandle.position];
	if(fontName == "default.ttf") {
		return arm_ui_UISidebar.inst.ui.ops.font;
	}
	var _this = arm_io_ImportFont.fontMap;
	if(__map_reserved[fontName] != null) {
		return _this.getReserved(fontName);
	} else {
		return _this.h[fontName];
	}
};
arm_util_RenderUtil.makeBrushPreview = function() {
	if(arm_render_RenderPathPaint.liveLayerLocked) {
		return;
	}
	if(arm_render_RenderPathPaint.liveLayer == null) {
		arm_render_RenderPathPaint.liveLayer = new arm_data_LayerSlot("_live");
		arm_render_RenderPathPaint.liveLayer.createMask(0);
	}
	var l = arm_render_RenderPathPaint.liveLayer;
	l.texpaint.get_g4().begin();
	l.texpaint.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(0.0,0.0,0.0,0.0));
	l.texpaint.get_g4().end();
	l.texpaint_nor.get_g4().begin();
	l.texpaint_nor.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(0.5,0.5,1.0,0.0));
	l.texpaint_nor.get_g4().end();
	l.texpaint_pack.get_g4().begin();
	l.texpaint_pack.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(1.0,0.0,0.0,0.0));
	l.texpaint_pack.get_g4().end();
	if(arm_Context.brush.image == null) {
		arm_Context.brush.image = kha_Image.createRenderTarget(256,256);
		arm_Context.brush.imageIcon = kha_Image.createRenderTarget(50,50);
	}
	var _material = arm_Context.material;
	arm_Context.material = new arm_data_MaterialSlot();
	arm_node_MaterialParser.parsePaintMaterial();
	arm_render_RenderPathPaint.useLiveLayer(true);
	var path = iron_RenderPath.active;
	var hid = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
	var this1 = path.renderTargets;
	var _this = path.renderTargets;
	var value = __map_reserved["empty_black"] != null ? _this.getReserved("empty_black") : _this.h["empty_black"];
	var _this1 = this1;
	var key = "texpaint_undo" + hid;
	if(__map_reserved[key] != null) {
		_this1.setReserved(key,value);
	} else {
		_this1.h[key] = value;
	}
	var painto = arm_Context.paintObject;
	var visibles = [];
	var _g = 0;
	var _g1 = arm_Project.paintObjects;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		visibles.push(p.visible);
		p.visible = false;
	}
	var mergedObjectVisible = false;
	if(arm_Context.mergedObject != null) {
		mergedObjectVisible = arm_Context.mergedObject.visible;
		arm_Context.mergedObject.visible = false;
	}
	var cam = iron_Scene.active.camera;
	var _this2 = arm_Context.savedCamera;
	var m = cam.transform.local;
	_this2.self._00 = m.self._00;
	_this2.self._01 = m.self._01;
	_this2.self._02 = m.self._02;
	_this2.self._03 = m.self._03;
	_this2.self._10 = m.self._10;
	_this2.self._11 = m.self._11;
	_this2.self._12 = m.self._12;
	_this2.self._13 = m.self._13;
	_this2.self._20 = m.self._20;
	_this2.self._21 = m.self._21;
	_this2.self._22 = m.self._22;
	_this2.self._23 = m.self._23;
	_this2.self._30 = m.self._30;
	_this2.self._31 = m.self._31;
	_this2.self._32 = m.self._32;
	_this2.self._33 = m.self._33;
	var savedFov = cam.data.raw.fov;
	arm_util_ViewportUtil.updateCameraType(0);
	var m1 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	m1.self._00 += 0 * m1.self._03;
	m1.self._01 += 0 * m1.self._03;
	m1.self._02 += 0.5 * m1.self._03;
	m1.self._10 += 0 * m1.self._13;
	m1.self._11 += 0 * m1.self._13;
	m1.self._12 += 0.5 * m1.self._13;
	m1.self._20 += 0 * m1.self._23;
	m1.self._21 += 0 * m1.self._23;
	m1.self._22 += 0.5 * m1.self._23;
	m1.self._30 += 0 * m1.self._33;
	m1.self._31 += 0 * m1.self._33;
	m1.self._32 += 0.5 * m1.self._33;
	cam.transform.setMatrix(m1);
	cam.data.raw.fov = 0.92;
	cam.buildProjection();
	cam.buildMatrix();
	var m2 = iron_Scene.active.camera.VP;
	var a00 = m2.self._00;
	var a01 = m2.self._01;
	var a02 = m2.self._02;
	var a03 = m2.self._03;
	var a10 = m2.self._10;
	var a11 = m2.self._11;
	var a12 = m2.self._12;
	var a13 = m2.self._13;
	var a20 = m2.self._20;
	var a21 = m2.self._21;
	var a22 = m2.self._22;
	var a23 = m2.self._23;
	var a30 = m2.self._30;
	var a31 = m2.self._31;
	var a32 = m2.self._32;
	var a33 = m2.self._33;
	var b00 = a00 * a11 - a01 * a10;
	var b01 = a00 * a12 - a02 * a10;
	var b02 = a00 * a13 - a03 * a10;
	var b03 = a01 * a12 - a02 * a11;
	var b04 = a01 * a13 - a03 * a11;
	var b05 = a02 * a13 - a03 * a12;
	var b06 = a20 * a31 - a21 * a30;
	var b07 = a20 * a32 - a22 * a30;
	var b08 = a20 * a33 - a23 * a30;
	var b09 = a21 * a32 - a22 * a31;
	var b10 = a21 * a33 - a23 * a31;
	var b11 = a22 * a33 - a23 * a32;
	var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	if(det == 0.0) {
		m1.self._00 = 1.0;
		m1.self._01 = 0.0;
		m1.self._02 = 0.0;
		m1.self._03 = 0.0;
		m1.self._10 = 0.0;
		m1.self._11 = 1.0;
		m1.self._12 = 0.0;
		m1.self._13 = 0.0;
		m1.self._20 = 0.0;
		m1.self._21 = 0.0;
		m1.self._22 = 1.0;
		m1.self._23 = 0.0;
		m1.self._30 = 0.0;
		m1.self._31 = 0.0;
		m1.self._32 = 0.0;
		m1.self._33 = 1.0;
	} else {
		det = 1.0 / det;
		m1.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
		m1.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
		m1.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
		m1.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
		m1.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
		m1.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
		m1.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
		m1.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
		m1.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
		m1.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
		m1.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
		m1.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
		m1.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
		m1.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
		m1.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
		m1.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
	}
	var planeo = iron_Scene.active.getChild(".Plane");
	planeo.visible = true;
	arm_Context.paintObject = planeo;
	var _this_x = 0.0;
	var _this_y = 0.0;
	var _this_z = 0.0;
	var _this_w = 1.0;
	_this_x = m1.self._00;
	_this_y = m1.self._01;
	_this_z = m1.self._02;
	_this_w = 1.0;
	var sx = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
	var _this3 = planeo.transform.rot;
	var f = -Math.PI / 2 / 2;
	var c1 = Math.cos(f);
	var s1 = Math.sin(f);
	f = 0.;
	var c2 = Math.cos(f);
	var s2 = Math.sin(f);
	f = 0.;
	var c3 = Math.cos(f);
	var s3 = Math.sin(f);
	_this3.x = s1 * c2 * c3 + c1 * s2 * s3;
	_this3.y = c1 * s2 * c3 + s1 * c2 * s3;
	_this3.z = c1 * c2 * s3 - s1 * s2 * c3;
	_this3.w = c1 * c2 * c3 - s1 * s2 * s3;
	var _this4 = planeo.transform.scale;
	_this4.x = sx;
	_this4.y = 1.0;
	_this4.z = sx;
	_this4.w = 1.0;
	var _this5 = planeo.transform.loc;
	_this5.x = m1.self._30;
	_this5.y = -m1.self._31;
	_this5.z = 0.0;
	_this5.w = 1.0;
	planeo.transform.buildMatrix();
	arm_render_RenderPathPaint.liveLayerDrawn = 0;
	arm_render_RenderPathDeferred.drawGbuffer();
	var _brushRadius = arm_Context.brushRadius;
	var _brushOpacity = arm_Context.brushOpacity;
	var _brushHardness = arm_Context.brushHardness;
	arm_Context.brushRadius = 0.25;
	arm_Context.brushOpacity = 1.0;
	arm_Context.brushHardness = 0.8;
	var _x = arm_Context.paintVec.x;
	var _y = arm_Context.paintVec.y;
	var _lastX = arm_Context.lastPaintVecX;
	var _lastY = arm_Context.lastPaintVecY;
	var _pdirty = arm_Context.pdirty;
	arm_Context.pdirty = 2;
	var pointsX = [0.2,0.2,0.35,0.5,0.5,0.5,0.65,0.8,0.8,0.8];
	var pointsY = [0.5,0.5,0.35,0.2,0.4,0.6,0.45,0.3,0.5,0.7];
	var _g2 = 1;
	var _g3 = pointsX.length;
	while(_g2 < _g3) {
		var i = _g2++;
		arm_Context.lastPaintVecX = pointsX[i - 1];
		arm_Context.lastPaintVecY = pointsY[i - 1];
		arm_Context.paintVec.x = pointsX[i];
		arm_Context.paintVec.y = pointsY[i];
		arm_render_RenderPathPaint.commandsPaint();
	}
	arm_Context.brushRadius = _brushRadius;
	arm_Context.brushOpacity = _brushOpacity;
	arm_Context.brushHardness = _brushHardness;
	arm_Context.paintVec.x = _x;
	arm_Context.paintVec.y = _y;
	arm_Context.lastPaintVecX = _lastX;
	arm_Context.lastPaintVecY = _lastY;
	arm_Context.prevPaintVecX = -1;
	arm_Context.prevPaintVecY = -1;
	arm_Context.pdirty = _pdirty;
	arm_Context.material = _material;
	var _parse = null;
	_parse = function(_) {
		arm_node_MaterialParser.parsePaintMaterial();
		iron_App.removeRender(_parse);
	};
	iron_App.notifyOnRender(_parse);
	planeo.visible = false;
	var _g4 = 0;
	var _g5 = arm_Project.paintObjects.length;
	while(_g4 < _g5) {
		var i1 = _g4++;
		arm_Project.paintObjects[i1].visible = visibles[i1];
	}
	if(arm_Context.mergedObject != null) {
		arm_Context.mergedObject.visible = mergedObjectVisible;
	}
	arm_Context.paintObject = painto;
	iron_Scene.active.camera.transform.setMatrix(arm_Context.savedCamera);
	iron_Scene.active.camera.data.raw.fov = savedFov;
	arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
	iron_Scene.active.camera.buildProjection();
	iron_Scene.active.camera.buildMatrix();
	arm_render_RenderPathPaint.useLiveLayer(false);
	if(arm_Layers.pipeMerge == null) {
		arm_Layers.makePipe();
	}
	var l1 = arm_render_RenderPathPaint.liveLayer;
	var target = arm_Context.brush.image;
	target.get_g2().begin(true,0);
	target.get_g2().set_pipeline(arm_Layers.pipeCopy);
	target.get_g2().drawScaledImage(l1.texpaint,0,0,target.get_width(),target.get_height());
	target.get_g2().set_pipeline(null);
	target.get_g2().end();
	var _this6 = path.renderTargets;
	(__map_reserved["texpreview"] != null ? _this6.getReserved("texpreview") : _this6.h["texpreview"]).image = arm_Context.brush.image;
	var _this7 = path.renderTargets;
	(__map_reserved["texpreview_icon"] != null ? _this7.getReserved("texpreview_icon") : _this7.h["texpreview_icon"]).image = arm_Context.brush.imageIcon;
	path.setTarget("texpreview_icon");
	path.bindTarget("texpreview","tex");
	path.drawShader("shader_datas/supersample_resolve/supersample_resolve");
	arm_Context.brush.previewReady = true;
	arm_Context.brushBlendDirty = true;
};
var arm_Res = function() { };
$hxClasses["arm.Res"] = arm_Res;
arm_Res.__name__ = "arm.Res";
arm_Res.load = function(names,done) {
	var loaded = 0;
	var _g = 0;
	while(_g < names.length) {
		var s = [names[_g]];
		++_g;
		iron_data_Data.getImage(s[0],(function(s1) {
			return function(image) {
				var _this = arm_Res.bundled;
				if(__map_reserved[s1[0]] != null) {
					_this.setReserved(s1[0],image);
				} else {
					_this.h[s1[0]] = image;
				}
				loaded += 1;
				if(loaded == names.length) {
					done();
				}
			};
		})(s));
	}
};
arm_Res.tile50 = function(img,x,y) {
	var size = arm_ui_UISidebar.inst.ui.ops.scaleFactor > 1 ? 100 : 50;
	return { x : x * size, y : y * size, w : size, h : size};
};
arm_Res.tile18 = function(img,x,y) {
	var size = arm_ui_UISidebar.inst.ui.ops.scaleFactor > 1 ? 36 : 18;
	return { x : x * size, y : img.get_height() - (y + 1) * size, w : size, h : size};
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = "kha.Scheduler";
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	var hz = kha_Display.get_primary() != null ? kha_Display.get_primary().get_frequency() : 60;
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	if(restartTimers) {
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasks;
		while(_g2 < _g3.length) {
			var timeTask = _g3[_g2];
			++_g2;
			timeTask.paused = false;
		}
		var _g4 = 0;
		var _g5 = kha_Scheduler.frameTasks;
		while(_g4 < _g5.length) {
			var frameTask = _g5[_g4];
			++_g4;
			frameTask.paused = false;
		}
	}
};
kha_Scheduler.executeFrame = function() {
	var now = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.current;
	if(delta >= 0) {
		if(delta > kha_Scheduler.maxframetime) {
			kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
			delta = kha_Scheduler.maxframetime;
			frameEnd += delta;
		} else if(kha_Scheduler.vsync) {
			var realdif = kha_Scheduler.onedifhz;
			while(realdif < delta - kha_Scheduler.onedifhz) realdif += kha_Scheduler.onedifhz;
			delta = realdif;
			var _g = 0;
			var _g1 = kha_Scheduler.DIF_COUNT - 2;
			while(_g < _g1) {
				var i = _g++;
				delta += kha_Scheduler.deltas[i];
				kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
			}
			delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
			delta /= kha_Scheduler.DIF_COUNT;
			kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
			frameEnd += delta;
		} else {
			var _g2 = 0;
			var _g11 = kha_Scheduler.DIF_COUNT - 1;
			while(_g2 < _g11) {
				var i1 = _g2++;
				kha_Scheduler.deltas[i1] = kha_Scheduler.deltas[i1 + 1];
			}
			kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
			var next = 0;
			var _g21 = 0;
			var _g3 = kha_Scheduler.DIF_COUNT;
			while(_g21 < _g3) {
				var i2 = _g21++;
				next += kha_Scheduler.deltas[i2];
			}
			next /= kha_Scheduler.DIF_COUNT;
			frameEnd += next;
		}
		kha_Scheduler.lastTime = frameEnd;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.current = frameEnd;
		}
		var _g4 = 0;
		var _g12 = kha_Scheduler.pausedTimeTasks;
		while(_g4 < _g12.length) {
			var pausedTask = _g12[_g4];
			++_g4;
			pausedTask.next += delta;
		}
		if(kha_Scheduler.stopped) {
			var _g22 = 0;
			var _g31 = kha_Scheduler.timeTasks;
			while(_g22 < _g31.length) {
				var timeTask = _g31[_g22];
				++_g22;
				timeTask.next += delta;
			}
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g23 = 0;
		var _g32 = kha_Scheduler.outdatedTimeTasks;
		while(_g23 < _g32.length) {
			var task = _g32[_g23];
			++_g23;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g41 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g41 < _g5.length) {
			var task1 = _g5[_g41];
			++_g41;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.sortFrameTasks();
	var _g6 = 0;
	var _g13 = kha_Scheduler.frameTasks;
	while(_g6 < _g13.length) {
		var frameTask = _g13[_g6];
		++_g6;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g24 = 0;
	var _g33 = kha_Scheduler.frameTasks;
	while(_g24 < _g33.length) {
		var frameTask1 = _g33[_g24];
		++_g24;
		if(!frameTask1.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask1);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				} else {
					kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
				kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.DIF_COUNT;
	while(_g2 < _g3) {
		var i = _g2++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var arm_ui_UIFiles = function() { };
$hxClasses["arm.ui.UIFiles"] = arm_ui_UIFiles;
arm_ui_UIFiles.__name__ = "arm.ui.UIFiles";
arm_ui_UIFiles.show = function(filters,isSave,filesDone) {
	if(!arm_Context.nativeBrowser) {
		if(arm_ui_UIFiles.path == null) {
			arm_ui_UIFiles.path = "C:\\Users";
		}
		arm_ui_UIFiles.showCustom(filters,isSave,filesDone);
		return;
	}
	arm_ui_UIFiles.path = isSave ? Krom.saveDialog(filters,"") : Krom.openDialog(filters,"");
	if(arm_ui_UIFiles.path != null) {
		while(arm_ui_UIFiles.path.indexOf(arm_sys_Path.sep + arm_sys_Path.sep) >= 0) arm_ui_UIFiles.path = StringTools.replace(arm_ui_UIFiles.path,arm_sys_Path.sep + arm_sys_Path.sep,arm_sys_Path.sep);
		arm_ui_UIFiles.path = StringTools.replace(arm_ui_UIFiles.path,"\r","");
		arm_ui_UIFiles.filename = HxOverrides.substr(arm_ui_UIFiles.path,arm_ui_UIFiles.path.lastIndexOf(arm_sys_Path.sep) + 1,null);
		if(isSave) {
			arm_ui_UIFiles.path = HxOverrides.substr(arm_ui_UIFiles.path,0,arm_ui_UIFiles.path.lastIndexOf(arm_sys_Path.sep));
		}
		filesDone(arm_ui_UIFiles.path);
	}
	arm_ui_UIFiles.releaseKeys();
};
arm_ui_UIFiles.showCustom = function(filters,isSave,filesDone) {
	var known = false;
	arm_ui_UIBox.showCustom(function(ui) {
		if(ui.tab(zui_Handle.global.nest(9,null),arm_Translator.tr("File Browser"))) {
			var pathHandle = zui_Handle.global.nest(10,null);
			var fileHandle = zui_Handle.global.nest(11,null);
			ui.row([0.6,0.2,0.2]);
			arm_ui_UIFiles.filename = ui.textInput(fileHandle,arm_Translator.tr("File"));
			ui.text("*." + filters,1);
			if(ui.button(isSave ? arm_Translator.tr("Save") : arm_Translator.tr("Open")) || known || ui.isReturnDown) {
				arm_ui_UIBox.show = false;
				filesDone(known || isSave ? arm_ui_UIFiles.path : arm_ui_UIFiles.path + arm_sys_Path.sep + arm_ui_UIFiles.filename);
				if(known) {
					pathHandle.text = HxOverrides.substr(pathHandle.text,0,pathHandle.text.lastIndexOf(arm_sys_Path.sep));
				}
			}
			known = arm_sys_Path.isTexture(arm_ui_UIFiles.path) || arm_sys_Path.isMesh(arm_ui_UIFiles.path) || arm_sys_Path.isProject(arm_ui_UIFiles.path);
			arm_ui_UIFiles.path = arm_ui_UIFiles.fileBrowser(ui,pathHandle,false);
			if(pathHandle.changed) {
				ui.currentWindow.redraws = 3;
			}
		}
	},600,500);
};
arm_ui_UIFiles.releaseKeys = function() {
	var kb = iron_system_Input.getKeyboard();
	kb.upListener(16);
	kb.upListener(17);
};
arm_ui_UIFiles.fileBrowser = function(ui,handle,foldersOnly,dragFiles) {
	if(dragFiles == null) {
		dragFiles = false;
	}
	if(foldersOnly == null) {
		foldersOnly = false;
	}
	var _this = arm_Res.bundled;
	var icons = __map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"];
	var folder = arm_Res.tile50(icons,2,1);
	var file = arm_Res.tile50(icons,3,1);
	if(handle.text == "") {
		handle.text = "C:\\Users";
	}
	if(handle.text != arm_ui_UIFiles.lastPath) {
		arm_ui_UIFiles.files = [];
		var i1 = handle.text.indexOf(arm_sys_Path.sep);
		var nested = i1 > -1 && handle.text.length - 1 > i1;
		if(nested) {
			arm_ui_UIFiles.files.push("..");
		}
		var filesAll = arm_sys_File.readDirectory(handle.text,foldersOnly);
		var _g = 0;
		while(_g < filesAll.length) {
			var f = filesAll[_g];
			++_g;
			if(f == "" || f.charAt(0) == ".") {
				continue;
			}
			if(f.indexOf(".") > 0 && !arm_sys_Path.isKnown(f)) {
				continue;
			}
			arm_ui_UIFiles.files.push(f);
		}
	}
	arm_ui_UIFiles.lastPath = handle.text;
	handle.changed = false;
	var slotw = 70 * ui.ops.scaleFactor | 0;
	var num = ui._w / slotw | 0;
	var _g1 = 0;
	var _g11 = Math.ceil(arm_ui_UIFiles.files.length / num) | 0;
	while(_g1 < _g11) {
		var row = _g1++;
		var _g2 = [];
		var _g12 = 0;
		var _g21 = num * 2;
		while(_g12 < _g21) {
			var i = _g12++;
			_g2.push(1 / num);
		}
		ui.row(_g2);
		if(row > 0) {
			ui._y += ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor * 14.0;
		}
		var _g3 = 0;
		var _g4 = num;
		while(_g3 < _g4) {
			var j = _g3++;
			var i2 = j + row * num;
			if(i2 >= arm_ui_UIFiles.files.length) {
				ui.endElement(slotw);
				ui.endElement(slotw);
				continue;
			}
			var f1 = arm_ui_UIFiles.files[i2];
			var _x = ui._x;
			var rect = f1.indexOf(".") > 0 ? file : folder;
			var col = rect == file ? ui.t.LABEL_COL : ui.t.LABEL_COL - 2105376;
			if(arm_ui_UIFiles.selected == i2) {
				col = ui.t.HIGHLIGHT_COL;
			}
			var off = ui._w / 2 - 25 * ui.ops.scaleFactor;
			var uix = ui._x += off;
			var uiy = ui._y;
			var state = 0;
			var generic = true;
			if(StringTools.endsWith(f1,".arm")) {
				if(arm_ui_UIFiles.iconMap == null) {
					arm_ui_UIFiles.iconMap = new haxe_ds_StringMap();
				}
				var key = handle.text + arm_sys_Path.sep + f1;
				var _this1 = arm_ui_UIFiles.iconMap;
				var icon = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
				if(icon == null) {
					var bytes = haxe_io_Bytes.ofData(Krom.loadBlob(handle.text + arm_sys_Path.sep + f1));
					var i3 = new haxe_io_BytesInput(bytes);
					i3.set_bigEndian(false);
					var raw = iron_system_ArmPack.read(i3);
					if(raw.material_icons != null) {
						var bytesIcon = raw.material_icons[0];
						icon = kha_Image.fromBytes(arm_format_Lz4.decode(bytesIcon,262144),256,256);
						var key1 = handle.text + arm_sys_Path.sep + f1;
						var _this2 = arm_ui_UIFiles.iconMap;
						if(__map_reserved[key1] != null) {
							_this2.setReserved(key1,icon);
						} else {
							_this2.h[key1] = icon;
						}
					}
				}
				if(icon != null) {
					state = ui.image(icon,-1,rect.h);
					generic = false;
				}
			}
			if(generic) {
				state = ui.image(icons,col,rect.h,rect.x,rect.y,rect.w,rect.h);
			}
			if(state == 1) {
				if(f1 != ".." && dragFiles) {
					var mouse = iron_system_Input.getMouse();
					arm_App.dragOffX = -(mouse.x - uix - ui._windowX - 3);
					arm_App.dragOffY = -(mouse.y - uiy - ui._windowY + 1);
					arm_App.dragFile = handle.text;
					if(arm_App.dragFile.charAt(arm_App.dragFile.length - 1) != arm_sys_Path.sep) {
						arm_App.dragFile += arm_sys_Path.sep;
					}
					arm_App.dragFile += f1;
				}
				arm_ui_UIFiles.selected = i2;
				if(kha_Scheduler.time() - arm_Context.selectTime < 0.25) {
					arm_App.dragFile = null;
					arm_App.isDragging = false;
					handle.changed = ui.changed = true;
					if(f1 == "..") {
						handle.text = handle.text.substring(0,handle.text.lastIndexOf(arm_sys_Path.sep));
						if(handle.text.length == 2 && handle.text.charAt(1) == ":") {
							handle.text += arm_sys_Path.sep;
						}
					} else {
						if(handle.text.charAt(handle.text.length - 1) != arm_sys_Path.sep) {
							handle.text += arm_sys_Path.sep;
						}
						handle.text += f1;
					}
					arm_ui_UIFiles.selected = -1;
				}
				arm_Context.selectTime = kha_Scheduler.time();
			}
			ui._x = _x;
			ui._y += slotw * 0.75;
			var label = arm_ui_UIFiles.showExtensions || f1.indexOf(".") <= 0 ? f1 : HxOverrides.substr(f1,0,f1.lastIndexOf("."));
			ui.text(label,1);
			ui._y -= slotw * 0.75;
		}
	}
	ui._y += slotw * 0.8;
	return handle.text;
};
var arm_ui_UIMenu = function() { };
$hxClasses["arm.ui.UIMenu"] = arm_ui_UIMenu;
arm_ui_UIMenu.__name__ = "arm.ui.UIMenu";
arm_ui_UIMenu.render = function(g) {
	var ui = arm_App.uiMenu;
	var menuW = ui.t.ELEMENT_W * ui.ops.scaleFactor * 2.0 | 0;
	var BUTTON_COL = ui.t.BUTTON_COL;
	ui.t.BUTTON_COL = ui.t.SEPARATOR_COL;
	var ELEMENT_OFFSET = ui.t.ELEMENT_OFFSET;
	ui.t.ELEMENT_OFFSET = 0;
	var ELEMENT_H = ui.t.ELEMENT_H;
	ui.t.ELEMENT_H = 28;
	ui.beginRegion(g,arm_ui_UIMenu.menuX,arm_ui_UIMenu.menuY,menuW);
	if(arm_ui_UIMenu.menuCommands != null) {
		ui.fill(0,0,ui._w / ui.ops.scaleFactor,ui.t.ELEMENT_H * arm_ui_UIMenu.menuElements,ui.t.SEPARATOR_COL);
		arm_ui_UIMenu.menuCommands(ui);
	} else {
		var menuItems = [12,3,14,12,17,5];
		if(arm_ui_UIMenu.viewportColorHandle.selected) {
			menuItems[2] += 6;
		}
		var sepw = menuW / ui.ops.scaleFactor;
		g.set_color(ui.t.SEPARATOR_COL);
		g.fillRect(arm_ui_UIMenu.menuX,arm_ui_UIMenu.menuY,menuW,28 * menuItems[arm_ui_UIMenu.menuCategory] * ui.ops.scaleFactor);
		if(arm_ui_UIMenu.menuCategory == 0) {
			if(ui.button("      " + arm_Translator.tr("New Project..."),0,arm_Config.keymap.file_new)) {
				arm_Project.projectNewBox();
			}
			if(ui.button("      " + arm_Translator.tr("Open..."),0,arm_Config.keymap.file_open)) {
				arm_Project.projectOpen();
			}
			if(ui.button("      " + arm_Translator.tr("Save"),0,arm_Config.keymap.file_save)) {
				arm_Project.projectSave();
			}
			if(ui.button("      " + arm_Translator.tr("Save As..."),0,arm_Config.keymap.file_save_as)) {
				arm_Project.projectSaveAs();
			}
			ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
			if(ui.button("      " + arm_Translator.tr("Import Texture..."),0,arm_Config.keymap.file_import_assets)) {
				arm_Project.importAsset(arm_sys_Path.textureFormats.join(","));
			}
			if(ui.button("      " + arm_Translator.tr("Import Font..."),0)) {
				arm_Project.importAsset("ttf");
			}
			if(ui.button("      " + arm_Translator.tr("Import Material..."),0)) {
				arm_Project.importMaterial();
			}
			if(ui.button("      " + arm_Translator.tr("Import Mesh..."),0)) {
				arm_Project.importMesh();
			}
			if(ui.button("      " + arm_Translator.tr("Reimport Mesh"),0,arm_Config.keymap.file_reimport_mesh)) {
				arm_Project.reimportMesh();
			}
			ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
			if(ui.button("      " + arm_Translator.tr("Export Textures..."),0,arm_Config.keymap.file_export_textures_as)) {
				arm_ui_BoxExport.showTextures();
			}
			if(ui.button("      " + arm_Translator.tr("Export Mesh..."),0)) {
				arm_ui_BoxExport.showMesh();
			}
			ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
			if(ui.button("      " + arm_Translator.tr("Exit"),0)) {
				kha_System.stop();
			}
		} else if(arm_ui_UIMenu.menuCategory == 1) {
			var stepUndo = "";
			var stepRedo = "";
			if(arm_History.undos > 0) {
				stepUndo = arm_History.steps[arm_History.steps.length - 1 - arm_History.redos].name;
			}
			if(arm_History.redos > 0) {
				stepRedo = arm_History.steps[arm_History.steps.length - arm_History.redos].name;
			}
			ui.enabled = arm_History.undos > 0;
			var _g = new haxe_ds_StringMap();
			if(__map_reserved["step"] != null) {
				_g.setReserved("step",stepUndo);
			} else {
				_g.h["step"] = stepUndo;
			}
			if(ui.button("      " + arm_Translator.tr("Undo {step}",_g),0,arm_Config.keymap.edit_undo)) {
				arm_History.undo();
			}
			ui.enabled = arm_History.redos > 0;
			var _g1 = new haxe_ds_StringMap();
			if(__map_reserved["step"] != null) {
				_g1.setReserved("step",stepRedo);
			} else {
				_g1.h["step"] = stepRedo;
			}
			if(ui.button("      " + arm_Translator.tr("Redo {step}",_g1),0,arm_Config.keymap.edit_redo)) {
				arm_History.redo();
			}
			ui.enabled = true;
			ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
			if(ui.button("      " + arm_Translator.tr("Preferences..."),0,arm_Config.keymap.edit_prefs)) {
				arm_ui_BoxPreferences.show();
			}
		} else if(arm_ui_UIMenu.menuCategory == 2) {
			if(ui.button("      " + arm_Translator.tr("Import Envmap..."),0)) {
				arm_ui_UIFiles.show("hdr",false,function(path) {
					if(!StringTools.endsWith(path,".hdr")) {
						arm_Log.error("Error: .hdr file expected");
						return;
					}
					arm_io_ImportAsset.run(path);
				});
			}
			if(ui.button("      " + arm_Translator.tr("Distract Free"),0,arm_Config.keymap.view_distract_free)) {
				arm_ui_UISidebar.inst.toggleDistractFree();
				arm_ui_UISidebar.inst.ui.isHovered = false;
			}
			ui.changed = false;
			var p = iron_Scene.active.world.probe;
			var envHandle = zui_Handle.global.nest(67,null);
			envHandle.value = p.raw.strength;
			ui.row([0.125,0.875]);
			ui.endElement();
			var tmp = arm_Translator.tr("Environment");
			p.raw.strength = ui.slider(envHandle,tmp,0.0,8.0,true);
			if(envHandle.changed) {
				arm_Context.ddirty = 2;
			}
			if(iron_Scene.active.lights.length > 0) {
				var light = iron_Scene.active.lights[0];
				var lhandle = zui_Handle.global.nest(68,null);
				var scale = 1333;
				lhandle.value = light.data.raw.strength / scale;
				lhandle.value = (lhandle.value * 100 | 0) / 100;
				ui.row([0.125,0.875]);
				ui.endElement();
				var tmp1 = ui.slider(lhandle,arm_Translator.tr("Light"),0.0,4.0,true);
				light.data.raw.strength = tmp1 * scale;
				if(lhandle.changed) {
					arm_Context.ddirty = 2;
				}
				var sxhandle = zui_Handle.global.nest(69,null);
				sxhandle.value = light.data.raw.size;
				ui.row([0.125,0.875]);
				ui.endElement();
				var tmp2 = arm_Translator.tr("Light Size");
				light.data.raw.size = ui.slider(sxhandle,tmp2,0.0,4.0,true);
				if(sxhandle.changed) {
					arm_Context.ddirty = 2;
				}
			}
			var dispHandle = zui_Handle.global.nest(70,{ value : arm_Context.displaceStrength});
			ui.row([0.125,0.875]);
			ui.endElement();
			arm_Context.displaceStrength = ui.slider(dispHandle,arm_Translator.tr("Displace"),0.0,2.0,true);
			if(dispHandle.changed) {
				arm_node_MaterialParser.parseMeshMaterial();
			}
			var splitViewHandle = zui_Handle.global.nest(71,{ selected : arm_Context.splitView});
			arm_Context.splitView = ui.check(splitViewHandle," " + arm_Translator.tr("Split View"));
			if(splitViewHandle.changed) {
				arm_App.resize();
			}
			var cullHandle = zui_Handle.global.nest(72,{ selected : arm_Context.cullBackfaces});
			arm_Context.cullBackfaces = ui.check(cullHandle," " + arm_Translator.tr("Cull Backfaces"));
			if(cullHandle.changed) {
				arm_node_MaterialParser.parseMeshMaterial();
			}
			var filterHandle = zui_Handle.global.nest(73,{ selected : arm_Context.textureFilter});
			arm_Context.textureFilter = ui.check(filterHandle," " + arm_Translator.tr("Filter Textures"));
			if(filterHandle.changed) {
				arm_node_MaterialParser.parsePaintMaterial();
				arm_node_MaterialParser.parseMeshMaterial();
			}
			arm_Context.drawWireframe = ui.check(arm_Context.wireframeHandle," " + arm_Translator.tr("Wireframe"));
			if(arm_Context.wireframeHandle.changed) {
				ui.g.end();
				arm_util_UVUtil.cacheUVMap();
				ui.g.begin(false);
				arm_node_MaterialParser.parseMeshMaterial();
			}
			arm_Context.drawTexels = ui.check(arm_Context.texelsHandle," " + arm_Translator.tr("Texels"));
			if(arm_Context.texelsHandle.changed) {
				arm_node_MaterialParser.parseMeshMaterial();
			}
			var compassHandle = zui_Handle.global.nest(74,{ selected : arm_Context.showCompass});
			arm_Context.showCompass = ui.check(compassHandle," " + arm_Translator.tr("Compass"));
			if(compassHandle.changed) {
				arm_Context.ddirty = 2;
			}
			arm_Context.showEnvmap = ui.check(arm_Context.showEnvmapHandle," " + arm_Translator.tr("Envmap"));
			if(arm_Context.showEnvmapHandle.changed) {
				var world = iron_Scene.active.world;
				if(!arm_ui_UIMenu.envmapLoaded) {
					arm_ui_UIMenu.envmapLoaded = true;
					iron_data_Data.cachedImages.remove("World_radiance.k");
				}
				world.loadEnvmap(function(_) {
				});
				if(arm_Context.savedEnvmap == null) {
					arm_Context.savedEnvmap = world.envmap;
				}
				arm_Context.ddirty = 2;
			}
			if(arm_Context.showEnvmap) {
				arm_Context.showEnvmapBlur = ui.check(arm_Context.showEnvmapBlurHandle," " + arm_Translator.tr("Blurred"));
				if(arm_Context.showEnvmapBlurHandle.changed) {
					arm_Context.ddirty = 2;
				}
			} else if(ui.panel(arm_ui_UIMenu.viewportColorHandle," " + arm_Translator.tr("Viewport Color"),false,false,false)) {
				var hwheel = zui_Handle.global.nest(75,{ color : -16579837});
				var worldColor = zui_Ext.colorWheel(ui,hwheel);
				if(hwheel.changed) {
					var b = new haxe_io_Bytes(new ArrayBuffer(4));
					b.b[0] = (worldColor & 16711680) >>> 16;
					b.b[1] = (worldColor & 65280) >>> 8;
					b.b[2] = worldColor & 255;
					b.b[3] = 255;
					arm_Context.emptyEnvmap = kha_Image.fromBytes(b,1,1);
					arm_Context.ddirty = 2;
					if(ui.inputStarted) {
						arm_ui_UIMenu.changeStarted = true;
					}
				}
			}
			if(arm_Context.showEnvmap) {
				iron_Scene.active.world.envmap = arm_Context.showEnvmapBlur ? iron_Scene.active.world.probe.radianceMipmaps[0] : arm_Context.savedEnvmap;
			} else {
				iron_Scene.active.world.envmap = arm_Context.emptyEnvmap;
			}
			if(ui.changed) {
				arm_ui_UIMenu.keepOpen = true;
			}
		} else if(arm_ui_UIMenu.menuCategory == 3) {
			var modeHandle = zui_Handle.global.nest(76,null);
			var modes = [arm_Translator.tr("Lit"),arm_Translator.tr("Base Color"),arm_Translator.tr("Normal"),arm_Translator.tr("Occlusion"),arm_Translator.tr("Roughness"),arm_Translator.tr("Metallic"),arm_Translator.tr("Opacity"),arm_Translator.tr("TexCoord"),arm_Translator.tr("Object Normal"),arm_Translator.tr("Material ID"),arm_Translator.tr("Object ID"),arm_Translator.tr("Mask")];
			var _g2 = 0;
			var _g11 = modes.length;
			while(_g2 < _g11) {
				var i = _g2++;
				ui.radio(modeHandle,i,modes[i]);
			}
			arm_Context.viewportMode = modeHandle.position;
			if(modeHandle.changed) {
				var deferred = arm_Context.viewportMode == 0 || arm_Context.viewportMode == 12;
				if(deferred) {
					iron_RenderPath.active.commands = arm_render_RenderPathDeferred.commands;
				} else {
					if(arm_render_RenderPathForward.path == null) {
						arm_render_RenderPathForward.init(iron_RenderPath.active);
					}
					iron_RenderPath.active.commands = arm_render_RenderPathForward.commands;
				}
				arm_node_MaterialParser.parseMeshMaterial();
			}
		} else if(arm_ui_UIMenu.menuCategory == 4) {
			if(ui.button("      " + arm_Translator.tr("Reset"),0,arm_Config.keymap.view_reset)) {
				arm_util_ViewportUtil.resetViewport();
				arm_util_ViewportUtil.scaleToBounds();
			}
			ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
			if(ui.button("      " + arm_Translator.tr("Front"),0,arm_Config.keymap.view_front)) {
				arm_util_ViewportUtil.setView(0,-1,0,Math.PI / 2,0,0);
			}
			if(ui.button("      " + arm_Translator.tr("Back"),0,arm_Config.keymap.view_back)) {
				arm_util_ViewportUtil.setView(0,1,0,Math.PI / 2,0,Math.PI);
			}
			if(ui.button("      " + arm_Translator.tr("Right"),0,arm_Config.keymap.view_right)) {
				arm_util_ViewportUtil.setView(1,0,0,Math.PI / 2,0,Math.PI / 2);
			}
			if(ui.button("      " + arm_Translator.tr("Left"),0,arm_Config.keymap.view_left)) {
				arm_util_ViewportUtil.setView(-1,0,0,Math.PI / 2,0,-Math.PI / 2);
			}
			if(ui.button("      " + arm_Translator.tr("Top"),0,arm_Config.keymap.view_top)) {
				arm_util_ViewportUtil.setView(0,0,1,0,0,0);
			}
			if(ui.button("      " + arm_Translator.tr("Bottom"),0,arm_Config.keymap.view_bottom)) {
				arm_util_ViewportUtil.setView(0,0,-1,Math.PI,0,Math.PI);
			}
			ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
			ui.changed = false;
			if(ui.button("      " + arm_Translator.tr("Orbit Left"),0,arm_Config.keymap.view_orbit_left)) {
				arm_util_ViewportUtil.orbit(-Math.PI / 12,0);
			}
			if(ui.button("      " + arm_Translator.tr("Orbit Right"),0,arm_Config.keymap.view_orbit_right)) {
				arm_util_ViewportUtil.orbit(Math.PI / 12,0);
			}
			if(ui.button("      " + arm_Translator.tr("Orbit Up"),0,arm_Config.keymap.view_orbit_up)) {
				arm_util_ViewportUtil.orbit(0,-Math.PI / 12);
			}
			if(ui.button("      " + arm_Translator.tr("Orbit Down"),0,arm_Config.keymap.view_orbit_down)) {
				arm_util_ViewportUtil.orbit(0,Math.PI / 12);
			}
			if(ui.button("      " + arm_Translator.tr("Orbit Opposite"),0,arm_Config.keymap.view_orbit_opposite)) {
				arm_util_ViewportUtil.orbit(Math.PI,0);
			}
			if(ui.button("      " + arm_Translator.tr("Zoom In"),0,arm_Config.keymap.view_zoom_in)) {
				arm_util_ViewportUtil.zoom(0.2);
			}
			if(ui.button("      " + arm_Translator.tr("Zoom Out"),0,arm_Config.keymap.view_zoom_out)) {
				arm_util_ViewportUtil.zoom(-0.2);
			}
			var cam = iron_Scene.active.camera;
			arm_Context.fovHandle = zui_Handle.global.nest(77,{ value : (cam.data.raw.fov * 100 | 0) / 100});
			ui.row([0.125,0.875]);
			ui.endElement();
			var tmp3 = arm_Context.fovHandle;
			var tmp4 = arm_Translator.tr("FoV");
			cam.data.raw.fov = ui.slider(tmp3,tmp4,0.3,2.0,true);
			if(arm_Context.fovHandle.changed) {
				arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
			}
			ui.row([0.125,0.875]);
			ui.endElement();
			arm_Context.cameraControls = zui_Ext.inlineRadio(ui,zui_Handle.global.nest(78,{ position : arm_Context.cameraControls}),[arm_Translator.tr("Orbit"),arm_Translator.tr("Rotate"),arm_Translator.tr("Fly")],0);
			ui.row([0.125,0.875]);
			ui.endElement();
			arm_Context.cameraType = zui_Ext.inlineRadio(ui,arm_Context.camHandle,[arm_Translator.tr("Perspective"),arm_Translator.tr("Orthographic")],0);
			if(ui.isHovered) {
				ui.tooltip(arm_Translator.tr("Camera Type") + (" (" + Std.string(arm_Config.keymap.view_camera_type) + ")"));
			}
			if(arm_Context.camHandle.changed) {
				arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
			}
			if(ui.changed) {
				arm_ui_UIMenu.keepOpen = true;
			}
		} else if(arm_ui_UIMenu.menuCategory == 5) {
			if(ui.button("      " + arm_Translator.tr("Manual"),0)) {
				arm_sys_File.explorer("https://armorpaint.org/manual");
			}
			if(ui.button("      " + arm_Translator.tr("Issue Tracker"),0)) {
				arm_sys_File.explorer("https://github.com/armory3d/armorpaint/issues");
			}
			if(ui.button("      " + arm_Translator.tr("Report Bug"),0)) {
				var url = "https://github.com/armory3d/armorpaint/issues/new?labels=bug&template=bug_report.md&body=*ArmorPaint%20" + Main.version + "-" + Main.sha + ",%20" + kha_System.get_systemId() + "*";
				arm_sys_File.explorer(url);
			}
			if(ui.button("      " + arm_Translator.tr("Check for Updates..."),0)) {
				var url1 = "'https://luboslenco.gitlab.io/armorpaint/index.html'";
				var blob = arm_sys_File.downloadBytes(url1);
				if(blob != null) {
					var update = JSON.parse(blob.toString());
					var updateVersion = update.version | 0;
					if(updateVersion > 0) {
						var date = HxOverrides.substr("2020-03-29 18:35:37".split(" ")[0],2,null);
						var dateInt = Std.parseInt(StringTools.replace(date,"-",""));
						if(updateVersion > dateInt) {
							arm_ui_UIBox.showMessage(arm_Translator.tr("Update"),arm_Translator.tr("Update is available!\nPlease visit armorpaint.org to download."));
						} else {
							arm_ui_UIBox.showMessage(arm_Translator.tr("Update"),arm_Translator.tr("You are up to date!"));
						}
					}
				} else {
					arm_ui_UIBox.showMessage(arm_Translator.tr("Update"),arm_Translator.tr("Unable to check for updates.\nPlease visit armorpaint.org."));
				}
			}
			if(ui.button("      " + arm_Translator.tr("About..."),0)) {
				var gapi = "Direct3D11";
				var msg = "ArmorPaint.org - v" + Main.version + " (" + Main.date + ") - " + Main.sha + "\n";
				msg += kha_System.get_systemId() + " - " + gapi;
				var save = (arm_sys_Path.isProtected() ? Krom.savePath() : arm_sys_Path.data()) + arm_sys_Path.sep + "tmp.txt";
				Krom.sysCommand("wmic path win32_VideoController get name > \"" + save + "\"");
				var bytes = haxe_io_Bytes.ofData(Krom.loadBlob(save));
				var gpu = "";
				var _g3 = 30;
				var _g12 = bytes.length / 2 | 0;
				while(_g3 < _g12) {
					var i1 = _g3++;
					var code = bytes.b[i1 * 2];
					var c = String.fromCodePoint(code);
					if(c == "\n") {
						continue;
					}
					gpu += c;
				}
				msg += "\n" + gpu;
				arm_ui_UIBox.showMessage(arm_Translator.tr("About"),msg,true);
			}
		}
	}
	var first = arm_ui_UIMenu.showMenuFirst;
	arm_ui_UIMenu.hideMenu = ui.comboSelectedHandle == null && !arm_ui_UIMenu.changeStarted && !arm_ui_UIMenu.keepOpen && !first && (ui.changed || ui.inputReleased || ui.inputReleasedR || ui.isEscapeDown);
	arm_ui_UIMenu.showMenuFirst = false;
	arm_ui_UIMenu.keepOpen = false;
	if(ui.inputReleased) {
		arm_ui_UIMenu.changeStarted = false;
	}
	ui.t.BUTTON_COL = BUTTON_COL;
	ui.t.ELEMENT_OFFSET = ELEMENT_OFFSET;
	ui.t.ELEMENT_H = ELEMENT_H;
	ui.endRegion();
};
arm_ui_UIMenu.update = function() {
	if(arm_ui_UIMenu.hideMenu) {
		arm_ui_UIMenu.show = false;
		arm_App.redrawUI();
		arm_ui_UIMenu.showMenuFirst = true;
		arm_ui_UIMenu.menuCommands = null;
	}
};
arm_ui_UIMenu.draw = function(commands,elements,x,y) {
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	arm_ui_UIMenu.show = true;
	arm_ui_UIMenu.menuCommands = commands;
	arm_ui_UIMenu.menuElements = elements;
	arm_ui_UIMenu.menuX = x > -1 ? x : iron_system_Input.getMouse().x | 0;
	arm_ui_UIMenu.menuY = y > -1 ? y : iron_system_Input.getMouse().y | 0;
	var _this = arm_App.uiMenu;
	var menuW = _this.t.ELEMENT_W * _this.ops.scaleFactor * 2.0;
	if(arm_ui_UIMenu.menuX + menuW > kha_System.windowWidth()) {
		arm_ui_UIMenu.menuX = kha_System.windowWidth() - menuW | 0;
	}
	var menuH = arm_ui_UIMenu.menuElements * 28;
	if(arm_ui_UIMenu.menuY + menuH > kha_System.windowHeight()) {
		arm_ui_UIMenu.menuY = kha_System.windowHeight() - menuH;
		arm_ui_UIMenu.menuX += 1;
	}
};
var arm_ui_UINodes = function() {
	this.hwnd = zui_Handle.global.nest(4,null);
	this.grid = null;
	this.nodeSearchLast = "";
	this.nodeSearchOffset = 0;
	this.nodeSearchSpawn = null;
	this.recompileMat = false;
	this.mstartedlast = false;
	this.mchanged = false;
	this.mreleased = false;
	this.mdown = false;
	this.changed = false;
	this.popupY = 0.0;
	this.popupX = 0.0;
	this.addNodeButton = false;
	this.menuCategory = 0;
	this.hideMenu = false;
	this.showMenu = false;
	this.drawMenu = false;
	this.canvasType = 0;
	this.defaultWindowH = 0;
	this.defaultWindowW = 0;
	this.show = false;
	arm_ui_UINodes.inst = this;
	zui_Nodes.excludeRemove.push("OUTPUT_MATERIAL_PBR");
	zui_Nodes.excludeRemove.push("BrushOutputNode");
	zui_Nodes.onLinkDrag = $bind(this,this.onLinkDrag);
	var scale = arm_Config.raw.window_scale;
	this.ui = new zui_Zui({ font : arm_App.font, theme : arm_App.theme, color_wheel : arm_App.colorWheel, scaleFactor : scale});
	this.ui.scrollEnabled = false;
};
$hxClasses["arm.ui.UINodes"] = arm_ui_UINodes;
arm_ui_UINodes.__name__ = "arm.ui.UINodes";
arm_ui_UINodes.makeNode = function(n,nodes,canvas) {
	var node = JSON.parse(JSON.stringify(n));
	node.id = nodes.getNodeId(canvas.nodes);
	node.x = arm_ui_UINodes.inst.getNodeX();
	node.y = arm_ui_UINodes.inst.getNodeY();
	var _g = 0;
	var _g1 = node.inputs;
	while(_g < _g1.length) {
		var soc = _g1[_g];
		++_g;
		soc.id = nodes.getSocketId(canvas.nodes);
		soc.node_id = node.id;
	}
	var _g2 = 0;
	var _g3 = node.outputs;
	while(_g2 < _g3.length) {
		var soc1 = _g3[_g2];
		++_g2;
		soc1.id = nodes.getSocketId(canvas.nodes);
		soc1.node_id = node.id;
	}
	return node;
};
arm_ui_UINodes.prototype = {
	onLinkDrag: function(linkDrag,isNewLink) {
		var _gthis = this;
		if(isNewLink) {
			this.nodeSearch(-1,-1,function() {
				var n = _gthis.getNodes().nodesSelected[0];
				if(linkDrag.to_id == -1 && n.inputs.length > 0) {
					linkDrag.to_id = n.id;
					linkDrag.to_socket = 0;
					_gthis.getCanvas().links.push(linkDrag);
				} else if(linkDrag.from_id == -1 && n.outputs.length > 0) {
					linkDrag.from_id = n.id;
					linkDrag.from_socket = 0;
					_gthis.getCanvas().links.push(linkDrag);
				}
			});
		}
	}
	,getCanvas: function() {
		if(this.canvasType == 0) {
			return this.getCanvasMaterial();
		} else {
			return arm_Context.brush.canvas;
		}
	}
	,getCanvasMaterial: function() {
		var isScene = arm_ui_UIHeader.inst.worktab.position == 1;
		if(isScene) {
			return arm_Context.materialScene.canvas;
		} else {
			return arm_Context.material.canvas;
		}
	}
	,getNodes: function() {
		var isScene = arm_ui_UIHeader.inst.worktab.position == 1;
		if(this.canvasType == 0) {
			if(isScene) {
				return arm_Context.materialScene.nodes;
			} else {
				return arm_Context.material.nodes;
			}
		} else {
			return arm_Context.brush.nodes;
		}
	}
	,update: function() {
		var mouse = iron_system_Input.getMouse();
		this.mreleased = mouse.released();
		this.mdown = mouse.down();
		if(this.ui.changed) {
			this.mchanged = true;
			if(!this.mdown) {
				this.changed = true;
			}
		}
		if(this.mreleased && this.mchanged || this.changed) {
			this.mchanged = this.changed = false;
			this.canvasChanged();
			if(this.mreleased) {
				arm_ui_UISidebar.inst.hwnd.redraws = 2;
				arm_History.editNodes(this.lastCanvas,this.canvasType);
			}
		} else if(this.ui.changed && (this.mstartedlast || mouse.moved)) {
			this.recompileMat = true;
		}
		this.mstartedlast = mouse.started();
		if(!this.show) {
			return;
		}
		if(!arm_App.uiEnabled) {
			return;
		}
		var kb = iron_system_Input.getKeyboard();
		if(this.defaultWindowW == 0) {
			this.defaultWindowW = arm_App.w() / 2 | 0;
		}
		if(this.defaultWindowH == 0) {
			this.defaultWindowH = arm_App.h() / 2 | 0;
		}
		this.wx = (arm_App.w() | 0) + arm_ui_UIToolbar.inst.toolbarw;
		this.wy = arm_ui_UIHeader.inst.headerh * 2;
		if(arm_ui_UIView2D.inst.show) {
			this.wy += arm_App.h() - this.defaultWindowH;
		}
		var ww = this.defaultWindowW;
		var mx = mouse.x;
		var my = mouse.y;
		if(mx < this.wx || mx > this.wx + ww || my < this.wy) {
			return;
		}
		if(this.ui.isTyping) {
			return;
		}
		if(this.addNodeButton) {
			this.showMenu = true;
			this.addNodeButton = false;
		} else if(mouse.released()) {
			this.hideMenu = true;
		}
		var nodes = this.getNodes();
		if(nodes.nodesSelected.length > 0 && this.ui.isKeyPressed) {
			if(this.ui.key == 37) {
				var _g = 0;
				var _g1 = nodes.nodesSelected;
				while(_g < _g1.length) {
					var n = _g1[_g];
					++_g;
					n.x -= 1;
				}
			} else if(this.ui.key == 39) {
				var _g2 = 0;
				var _g11 = nodes.nodesSelected;
				while(_g2 < _g11.length) {
					var n1 = _g11[_g2];
					++_g2;
					n1.x += 1;
				}
			}
			if(this.ui.key == 38) {
				var _g3 = 0;
				var _g12 = nodes.nodesSelected;
				while(_g3 < _g12.length) {
					var n2 = _g12[_g3];
					++_g3;
					n2.y -= 1;
				}
			} else if(this.ui.key == 40) {
				var _g4 = 0;
				var _g13 = nodes.nodesSelected;
				while(_g4 < _g13.length) {
					var n3 = _g13[_g4];
					++_g4;
					n3.y += 1;
				}
			}
		}
		if(kb.started(arm_Config.keymap.node_search)) {
			this.nodeSearch();
		}
		if(this.nodeSearchSpawn != null) {
			this.ui.inputX = mouse.x;
			this.ui.inputY = mouse.y;
			this.nodeSearchSpawn = null;
		}
	}
	,canvasChanged: function() {
		if(this.canvasType == 0) {
			if(arm_Layers.isFillMaterial()) {
				arm_Layers.updateFillLayers();
				arm_ui_UISidebar.inst.hwnd.redraws = 2;
			}
			var _parse = null;
			_parse = function(_) {
				arm_node_MaterialParser.parsePaintMaterial();
				arm_util_RenderUtil.makeMaterialPreview();
				arm_ui_UISidebar.inst.hwnd1.redraws = 2;
				var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
				if(decal) {
					arm_util_RenderUtil.makeDecalPreview();
				}
				iron_App.removeRender(_parse);
			};
			iron_App.notifyOnRender(_parse);
		} else {
			var _parse1 = null;
			_parse1 = function(_1) {
				arm_node_MaterialParser.parseBrush();
				arm_Context.parseBrushInputs();
				arm_util_RenderUtil.makeBrushPreview();
				arm_ui_UISidebar.inst.hwnd1.redraws = 2;
				iron_App.removeRender(_parse1);
			};
			iron_App.notifyOnRender(_parse1);
		}
	}
	,nodeSearch: function(x,y,done) {
		if(y == null) {
			y = -1;
		}
		if(x == null) {
			x = -1;
		}
		var _gthis = this;
		var kb = iron_system_Input.getKeyboard();
		var searchHandle = zui_Handle.global.nest(97,null);
		var first = true;
		arm_ui_UIMenu.draw(function(ui) {
			ui.fill(0,0,ui._w / ui.ops.scaleFactor,ui.t.ELEMENT_H * 8,ui.t.WINDOW_BG_COL);
			ui.textInput(searchHandle,"");
			ui.changed = false;
			if(first) {
				first = false;
				ui.startTextEdit(searchHandle);
				ui.textSelected = searchHandle.text;
				searchHandle.text = "";
				_gthis.nodeSearchLast = "";
			}
			var search = searchHandle.text;
			if(ui.textSelected != "") {
				search = ui.textSelected;
			}
			if(search != _gthis.nodeSearchLast) {
				_gthis.nodeSearchOffset = 0;
				_gthis.nodeSearchLast = search;
			}
			if(ui.isKeyPressed) {
				if(ui.key == 40 && _gthis.nodeSearchOffset < 6) {
					_gthis.nodeSearchOffset++;
				}
				if(ui.key == 38 && _gthis.nodeSearchOffset > 0) {
					_gthis.nodeSearchOffset--;
				}
			}
			var enter = kb.down("enter");
			var count = 0;
			var BUTTON_COL = ui.t.BUTTON_COL;
			var nodeList = _gthis.canvasType == 0 ? arm_node_NodesMaterial.list : arm_node_NodesBrush.list;
			var _g = 0;
			while(_g < nodeList.length) {
				var list = nodeList[_g];
				++_g;
				var _g1 = 0;
				while(_g1 < list.length) {
					var n = list[_g1];
					++_g1;
					if(n.name.toLowerCase().indexOf(search) >= 0) {
						ui.t.BUTTON_COL = count == _gthis.nodeSearchOffset ? ui.t.HIGHLIGHT_COL : ui.t.WINDOW_BG_COL;
						if(ui.button(n.name,0) || enter && count == _gthis.nodeSearchOffset) {
							var nodes = _gthis.getNodes();
							var canvas = _gthis.getCanvas();
							_gthis.nodeSearchSpawn = arm_ui_UINodes.makeNode(n,nodes,canvas);
							canvas.nodes.push(_gthis.nodeSearchSpawn);
							nodes.nodesSelected = [_gthis.nodeSearchSpawn];
							nodes.nodesDrag = true;
							_gthis.hwnd.redraws = 2;
							if(enter) {
								ui.changed = true;
								count = 6;
							}
							if(done != null) {
								done();
							}
						}
						if(++count > 6) {
							break;
						}
					}
				}
				if(count > 6) {
					break;
				}
			}
			if(enter && count == 0) {
				ui.changed = true;
				searchHandle.text = "";
			}
			ui.t.BUTTON_COL = BUTTON_COL;
		},0,x,y);
	}
	,getNodeX: function() {
		var mouse = iron_system_Input.getMouse();
		var x = mouse.x - this.wx;
		var _this = this.getNodes();
		var zoomPan = (1.0 - _this.zoom) * _this.uiw / 2.5;
		var x1 = x - (_this.panX * (_this.scaleFactor * _this.zoom) + zoomPan);
		var _this1 = this.getNodes();
		return x1 / (_this1.scaleFactor * _this1.zoom) | 0;
	}
	,getNodeY: function() {
		var mouse = iron_system_Input.getMouse();
		var x = mouse.y - this.wy;
		var _this = this.getNodes();
		var zoomPan = (1.0 - _this.zoom) * _this.uih / 2.5;
		var x1 = x - (_this.panY * (_this.scaleFactor * _this.zoom) + zoomPan);
		var _this1 = this.getNodes();
		return x1 / (_this1.scaleFactor * _this1.zoom) | 0;
	}
	,drawGrid: function() {
		var ww = this.defaultWindowW;
		var wh = arm_App.h();
		var w = ww + 200;
		var h = wh + 200;
		if(w < 1) {
			w = 1;
		}
		if(h < 1) {
			h = 1;
		}
		this.grid = kha_Image.createRenderTarget(w,h);
		this.grid.get_g2().begin(true,this.ui.t.SEPARATOR_COL);
		this.grid.get_g2().set_color(this.ui.t.SEPARATOR_COL - 328965);
		var _g = 0;
		var _g1 = (h / 20 | 0) + 1;
		while(_g < _g1) {
			var i = _g++;
			this.grid.get_g2().drawLine(0,i * 20,w,i * 20);
		}
		var _g2 = 0;
		var _g3 = (w / 20 | 0) + 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.grid.get_g2().drawLine(i1 * 20,0,i1 * 20,h);
		}
		this.grid.get_g2().set_color(this.ui.t.SEPARATOR_COL - 592137);
		var _g4 = 0;
		var _g5 = (h / 100 | 0) + 1;
		while(_g4 < _g5) {
			var i2 = _g4++;
			this.grid.get_g2().drawLine(0,i2 * 100,w,i2 * 100);
		}
		var _g6 = 0;
		var _g7 = (w / 100 | 0) + 1;
		while(_g6 < _g7) {
			var i3 = _g6++;
			this.grid.get_g2().drawLine(i3 * 100,0,i3 * 100,h);
		}
		this.grid.get_g2().end();
	}
	,render: function(g) {
		if(this.recompileMat) {
			this.recompileMat = false;
			if(this.canvasType == 1) {
				this.canvasChanged();
			} else if(arm_Layers.isFillMaterial()) {
				arm_Layers.updateFillLayers();
			} else {
				arm_util_RenderUtil.makeMaterialPreview();
			}
			arm_ui_UISidebar.inst.hwnd1.redraws = 2;
		}
		if(!this.show) {
			return;
		}
		if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
			return;
		}
		if(!arm_App.uiEnabled && this.ui.inputRegistered) {
			this.ui.unregisterInput();
		}
		if(arm_App.uiEnabled && !this.ui.inputRegistered) {
			this.ui.registerInput();
		}
		if(this.ui.inputStarted) {
			this.lastCanvas = JSON.parse(JSON.stringify(this.getCanvas()));
		}
		g.end();
		if(this.grid == null) {
			this.drawGrid();
		}
		this.ui.begin(g);
		this.ww = this.defaultWindowW;
		this.wx = (arm_App.w() | 0) + arm_ui_UIToolbar.inst.toolbarw;
		this.wy = arm_ui_UIHeader.inst.headerh * 2;
		var _this = this.ui;
		var ew = _this.t.ELEMENT_W * _this.ops.scaleFactor * 0.7 | 0;
		this.wh = arm_App.h();
		if(arm_ui_UIView2D.inst.show) {
			this.wh = this.defaultWindowH;
			this.wy = arm_App.h() - this.defaultWindowH + arm_ui_UIHeader.inst.headerh * 2;
		}
		if(this.ui.window(this.hwnd,this.wx,this.wy,this.ww,this.wh)) {
			var nodes = this.getNodes();
			this.ui.g.set_color(-1);
			this.ui.g.drawImage(this.grid,nodes.panX * (nodes.scaleFactor * nodes.zoom) % 100 - 100,nodes.panY * (nodes.scaleFactor * nodes.zoom) % 100 - 100);
			var c = this.getCanvas();
			nodes.nodeCanvas(this.ui,c);
			if(nodes.nodesSelected.length > 0) {
				var img = null;
				var sel = nodes.nodesSelected[0];
				if(sel.type == "TEX_IMAGE") {
					var id = sel.buttons[0].default_value;
					if(id < arm_Project.assets.length) {
						img = arm_ui_UISidebar.inst.getImage(arm_Project.assets[id]);
					}
				} else if(sel.type == "LAYER") {
					var id1 = sel.buttons[0].default_value;
					if(id1 < arm_Project.layers.length) {
						img = arm_Project.layers[id1].texpaint_preview;
					}
				} else if(sel.type == "LAYER_MASK") {
					var id2 = sel.buttons[0].default_value;
					if(id2 < arm_Project.layers.length) {
						img = arm_Project.layers[id2].texpaint_mask_preview;
					}
				} else if(sel.type == "MATERIAL") {
					var id3 = sel.buttons[0].default_value;
					if(id3 < arm_Project.materials.length) {
						img = arm_Project.materials[id3].image;
					}
				}
				if(img != null) {
					var tw = 64 * this.ui.ops.scaleFactor;
					var th = tw * (img.get_height() / img.get_width());
					var tx = this.ww - tw - 8 * this.ui.ops.scaleFactor;
					var ty = this.wh - th - 40 * this.ui.ops.scaleFactor;
					var invertY = false;
					if(invertY) {
						this.ui.g.drawScaledImage(img,tx,ty + th,tw,-th);
					} else {
						this.ui.g.drawScaledImage(img,tx,ty,tw,th);
					}
				}
			}
			var ACCENT_COL = this.ui.t.ACCENT_COL;
			var BUTTON_H = this.ui.t.BUTTON_H;
			var ELEMENT_H = this.ui.t.ELEMENT_H;
			var FONT_SIZE = this.ui.fontSize;
			this.ui.t.ACCENT_COL = 0;
			this.ui.t.BUTTON_H = 30;
			this.ui.t.ELEMENT_H = 30;
			this.ui.fontSize = 22 * this.ui.ops.scaleFactor | 0;
			var _this1 = this.ui;
			this.ui._x = this.ww - _this1.t.ELEMENT_W * _this1.ops.scaleFactor * 1.4;
			var _this2 = this.ui;
			this.ui._y = this.wh - _this2.t.ELEMENT_H * _this2.ops.scaleFactor * 1.2;
			var _this3 = this.ui;
			this.ui._w = _this3.t.ELEMENT_W * _this3.ops.scaleFactor * 1.4 | 0;
			var h = zui_Handle.global.nest(101,null);
			h.text = c.name;
			c.name = this.ui.textInput(h,"",2);
			this.ui.t.ACCENT_COL = ACCENT_COL;
			this.ui.t.BUTTON_H = BUTTON_H;
			this.ui.t.ELEMENT_H = ELEMENT_H;
			this.ui.fontSize = FONT_SIZE;
			this.ui.g.set_color(this.ui.t.WINDOW_BG_COL);
			var _this4 = this.ui;
			var _this5 = this.ui;
			this.ui.g.fillRect(0,0,this.ww,_this4.t.ELEMENT_H * _this4.ops.scaleFactor + _this5.t.ELEMENT_OFFSET * _this5.ops.scaleFactor);
			this.ui.g.set_color(-1);
			this.ui._x = 0;
			this.ui._y = 0;
			this.ui._w = ew;
			var BUTTON_COL = this.ui.t.BUTTON_COL;
			this.ui.t.BUTTON_COL = this.ui.t.WINDOW_BG_COL;
			var cats = this.canvasType == 0 ? arm_node_NodesMaterial.categories : arm_node_NodesBrush.categories;
			var _g = 0;
			var _g1 = cats.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.ui.button(cats[i],0) && arm_ui_UISidebar.inst.ui.comboSelectedHandle == null || this.ui.isHovered && this.drawMenu) {
					this.addNodeButton = true;
					this.menuCategory = i;
					this.popupX = this.wx + this.ui._x;
					this.popupY = this.wy + this.ui._y;
				}
				if(i < cats.length - 1) {
					this.ui._x += ew + 3;
					this.ui._y = 0;
				}
			}
			this.ui._x += ew + 3;
			this.ui._y = 0;
			if(this.ui.button(arm_Translator.tr("Search"),0)) {
				this.nodeSearch(this.ui._windowX + this.ui._x | 0,this.ui._windowY + this.ui._y | 0);
			}
			if(this.ui.isHovered) {
				this.ui.tooltip(arm_Translator.tr("Search for nodes") + (" (" + Std.string(arm_Config.keymap.node_search) + ")"));
			}
			this.ui.t.BUTTON_COL = BUTTON_COL;
		}
		this.ui.end(!this.drawMenu);
		g.begin(false);
		if(this.drawMenu) {
			var list = this.canvasType == 0 ? arm_node_NodesMaterial.list : arm_node_NodesBrush.list;
			var numNodes = list[this.menuCategory].length;
			var ph = numNodes * this.ui.t.ELEMENT_H * this.ui.ops.scaleFactor;
			var py = this.popupY;
			g.set_color(this.ui.t.WINDOW_BG_COL);
			var menuw = ew * 2.0 | 0;
			g.fillRect(this.popupX,py,menuw,ph);
			this.ui.beginRegion(g,this.popupX | 0,py | 0,menuw);
			var BUTTON_COL1 = this.ui.t.BUTTON_COL;
			this.ui.t.BUTTON_COL = this.ui.t.WINDOW_BG_COL;
			var ELEMENT_OFFSET = this.ui.t.ELEMENT_OFFSET;
			this.ui.t.ELEMENT_OFFSET = 0;
			var _g2 = 0;
			var _g11 = list[this.menuCategory];
			while(_g2 < _g11.length) {
				var n = _g11[_g2];
				++_g2;
				if(this.ui.button("      " + n.name,0)) {
					var canvas = this.getCanvas();
					var nodes1 = this.getNodes();
					var node = arm_ui_UINodes.makeNode(n,nodes1,canvas);
					canvas.nodes.push(node);
					nodes1.nodesSelected = [node];
					nodes1.nodesDrag = true;
				}
			}
			this.ui.t.BUTTON_COL = BUTTON_COL1;
			this.ui.t.ELEMENT_OFFSET = ELEMENT_OFFSET;
			this.ui.endRegion();
		}
		if(this.showMenu) {
			this.showMenu = false;
			this.drawMenu = true;
		}
		if(this.hideMenu) {
			this.hideMenu = false;
			this.drawMenu = false;
		}
	}
	,acceptAssetDrag: function(assetIndex) {
		var n = this.canvasType == 0 ? arm_node_NodesMaterial.createNode("TEX_IMAGE") : arm_node_NodesBrush.createNode("TEX_IMAGE");
		n.buttons[0].default_value = assetIndex;
		this.getNodes().nodesSelected = [n];
	}
	,acceptLayerDrag: function(layerIndex) {
		var n = arm_node_NodesMaterial.createNode(arm_Context.layerIsMask ? "LAYER_MASK" : "LAYER");
		n.buttons[0].default_value = layerIndex;
		this.getNodes().nodesSelected = [n];
	}
	,acceptMaterialDrag: function(layerIndex) {
		var n = arm_node_NodesMaterial.createNode("MATERIAL");
		n.buttons[0].default_value = layerIndex;
		this.getNodes().nodesSelected = [n];
	}
	,__class__: arm_ui_UINodes
};
var arm_ui_UISidebar = function() {
	this.borderHandle = null;
	this.borderStarted = 0;
	this.htab2 = zui_Handle.global.nest(133,null);
	this.htab1 = zui_Handle.global.nest(123,null);
	this.htab = zui_Handle.global.nest(79,null);
	this.hwnd2 = zui_Handle.global.nest(8,null);
	this.hwnd1 = zui_Handle.global.nest(3,null);
	this.hwnd = zui_Handle.global.nest(2,null);
	this.isScrolling = false;
	this.show = true;
	this.tabh2 = 0;
	this.tabh1 = 0;
	this.tabh = 0;
	this.tabx = 0;
	this.windowW = 280;
	var _gthis = this;
	arm_ui_UISidebar.inst = this;
	new arm_ui_UIToolbar();
	new arm_ui_UIHeader();
	new arm_ui_UIStatus();
	new arm_ui_UIMenubar();
	arm_Context.textToolText = arm_Translator.tr("Text");
	this.windowW = arm_ui_UISidebar.defaultWindowW * arm_Config.raw.window_scale | 0;
	arm_ui_UIToolbar.inst.toolbarw = 54 * arm_Config.raw.window_scale | 0;
	arm_ui_UIHeader.inst.headerh = 28 * arm_Config.raw.window_scale | 0;
	arm_ui_UIStatus.inst.statush = 32 * arm_Config.raw.window_scale | 0;
	arm_ui_UIMenubar.inst.menubarw = 330 * arm_Config.raw.window_scale | 0;
	if(arm_Project.materials == null) {
		arm_Project.materials = [];
		iron_data_Data.getMaterial("Scene","Material",function(m) {
			arm_Project.materials.push(new arm_data_MaterialSlot(m));
			arm_Context.material = arm_Project.materials[0];
		});
	}
	if(arm_Project.materialsScene == null) {
		arm_Project.materialsScene = [];
		iron_data_Data.getMaterial("Scene","Material2",function(m1) {
			arm_Project.materialsScene.push(new arm_data_MaterialSlot(m1));
			arm_Context.materialScene = arm_Project.materialsScene[0];
		});
	}
	if(arm_Project.brushes == null) {
		arm_Project.brushes = [];
		arm_Project.brushes.push(new arm_data_BrushSlot());
		arm_Context.brush = arm_Project.brushes[0];
		arm_node_MaterialParser.parseBrush();
		arm_Context.parseBrushInputs();
	}
	if(arm_Project.layers == null) {
		arm_Project.layers = [];
		arm_Project.layers.push(new arm_data_LayerSlot());
		arm_Context.layer = arm_Project.layers[0];
	}
	if(arm_Context.emptyEnvmap == null) {
		var b = new haxe_io_Bytes(new ArrayBuffer(4));
		b.b[0] = 3;
		b.b[1] = 3;
		b.b[2] = 3;
		b.b[3] = 255;
		arm_Context.emptyEnvmap = kha_Image.fromBytes(b,1,1);
	}
	if(arm_Context.previewEnvmap == null) {
		var b1 = new haxe_io_Bytes(new ArrayBuffer(4));
		b1.b[0] = 0;
		b1.b[1] = 0;
		b1.b[2] = 0;
		b1.b[3] = 255;
		arm_Context.previewEnvmap = kha_Image.fromBytes(b1,1,1);
	}
	var world = iron_Scene.active.world;
	if(arm_Context.savedEnvmap == null) {
		arm_Context.defaultIrradiance = world.probe.irradiance;
		arm_Context.defaultRadiance = world.probe.radiance;
		arm_Context.defaultRadianceMipmaps = world.probe.radianceMipmaps;
	}
	world.envmap = arm_Context.showEnvmap ? arm_Context.savedEnvmap : arm_Context.emptyEnvmap;
	arm_Context.ddirty = 1;
	iron_App.notifyOnRender(function(g) {
		if(arm_Context.frame == 2) {
			arm_util_RenderUtil.makeMaterialPreview();
			_gthis.hwnd1.redraws = 2;
			arm_node_MaterialParser.parseMeshMaterial();
			arm_node_MaterialParser.parsePaintMaterial();
			arm_Context.ddirty = 0;
			arm_History.reset();
			if(arm_History.undoLayers == null) {
				arm_History.undoLayers = [];
				var _g = 0;
				var _g1 = arm_Config.raw.undo_steps;
				while(_g < _g1) {
					var i = _g++;
					var l = new arm_data_LayerSlot("_undo" + arm_History.undoLayers.length);
					l.createMask(0,false);
					arm_History.undoLayers.push(l);
				}
			}
		} else if(arm_Context.frame == 3) {
			arm_Context.ddirty = 1;
		}
		arm_Context.frame++;
		var mouse = iron_system_Input.getMouse();
		if(mouse.down()) {
			arm_Context.lastPaintVecX = arm_Context.paintVec.x;
			arm_Context.lastPaintVecY = arm_Context.paintVec.y;
		} else {
			if(arm_Context.splitView) {
				arm_Context.viewIndex = iron_system_Input.getMouse().x - arm_App.x() > arm_App.w() / 2 ? 1 : 0;
			}
			arm_Context.lastPaintVecX = (mouse.x - arm_App.x()) / arm_App.w();
			arm_Context.lastPaintVecY = (mouse.y - arm_App.y()) / arm_App.h();
			arm_Context.viewIndex = -1;
		}
	});
	var scale = arm_Config.raw.window_scale;
	this.ui = new zui_Zui({ theme : arm_App.theme, font : arm_App.font, scaleFactor : scale, color_wheel : arm_App.colorWheel});
	zui_Zui.onBorderHover = $bind(this,this.onBorderHover);
	zui_Zui.onTextHover = $bind(this,this.onTextHover);
	var resources = ["cursor.k","icons.k"];
	arm_Res.load(resources,$bind(this,this.done));
	arm_Context.projectObjects = [];
	var _g2 = 0;
	var _g11 = iron_Scene.active.meshes;
	while(_g2 < _g11.length) {
		var m2 = _g11[_g2];
		++_g2;
		arm_Context.projectObjects.push(m2);
	}
};
$hxClasses["arm.ui.UISidebar"] = arm_ui_UISidebar;
arm_ui_UISidebar.__name__ = "arm.ui.UISidebar";
arm_ui_UISidebar.hitRect = function(mx,my,x,y,w,h) {
	if(mx > x && mx < x + w && my > y) {
		return my < y + h;
	} else {
		return false;
	}
};
arm_ui_UISidebar.prototype = {
	done: function() {
		if(this.ui.ops.scaleFactor > 1) {
			this.setIconScale();
		}
		arm_Context.gizmo = iron_Scene.active.getChild(".GizmoTranslate");
		var _this = arm_Context.gizmo.transform.scale;
		_this.x = 0.5;
		_this.y = 0.5;
		_this.z = 0.5;
		_this.w = 1.0;
		arm_Context.gizmo.transform.buildMatrix();
		arm_Context.gizmoX = iron_Scene.active.getChild("GizmoX");
		arm_Context.gizmoY = iron_Scene.active.getChild("GizmoY");
		arm_Context.gizmoZ = iron_Scene.active.getChild("GizmoZ");
		arm_Context.object = iron_Scene.active.getChild("Cube");
		arm_Context.paintObject = js_Boot.__cast(arm_Context.object , iron_object_MeshObject);
		arm_Project.paintObjects = [arm_Context.paintObject];
		if(arm_App.fileArg == "") {
			iron_App.notifyOnRender(arm_Layers.initLayers);
		}
		if(arm_Config.raw.plugins != null) {
			var _g = 0;
			var _g1 = arm_Config.raw.plugins;
			while(_g < _g1.length) {
				var plugin = _g1[_g];
				++_g;
				arm_Plugin.start(plugin);
			}
		}
	}
	,update: function() {
		this.isScrolling = this.ui.isScrolling;
		this.updateUI();
		var _this = arm_Plugin.plugins;
		var p = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(p.hasNext()) {
			var p1 = p.next();
			if(p1.update != null) {
				p1.update();
			}
		}
		if(!arm_App.uiEnabled) {
			return;
		}
		if(!arm_ui_UINodes.inst.ui.isTyping && !this.ui.isTyping) {
			if(arm_Operator.shortcut(arm_Config.keymap.cycle_layers)) {
				var i = (arm_Project.layers.indexOf(arm_Context.layer) + 1) % arm_Project.layers.length;
				arm_Context.setLayer(arm_Project.layers[i]);
			} else if(arm_Operator.shortcut(arm_Config.keymap.toggle_2d_view)) {
				this.show2DView();
			} else if(arm_Operator.shortcut(arm_Config.keymap.toggle_node_editor)) {
				if(arm_ui_UINodes.inst.canvasType == 0) {
					this.showMaterialNodes();
				} else {
					this.showBrushNodes();
				}
			} else if(arm_Operator.shortcut(arm_Config.keymap.toggle_browser)) {
				this.toggleBrowser();
			}
		}
		if(arm_Operator.shortcut(arm_Config.keymap.file_save_as)) {
			arm_Project.projectSaveAs();
		} else if(arm_Operator.shortcut(arm_Config.keymap.file_save)) {
			arm_Project.projectSave();
		} else if(arm_Operator.shortcut(arm_Config.keymap.file_open)) {
			arm_Project.projectOpen();
		} else if(arm_Operator.shortcut(arm_Config.keymap.file_reimport_mesh)) {
			arm_Project.reimportMesh();
		} else if(arm_Operator.shortcut(arm_Config.keymap.file_new)) {
			arm_Project.projectNewBox();
		} else if(arm_Operator.shortcut(arm_Config.keymap.file_export_textures)) {
			if(arm_Context.textureExportPath == "") {
				arm_ui_BoxExport.showTextures();
			} else {
				var $export = null;
				$export = function(_) {
					arm_io_ExportTexture.run(arm_Context.textureExportPath);
					iron_App.removeRender($export);
				};
				iron_App.notifyOnRender($export);
			}
		} else if(arm_Operator.shortcut(arm_Config.keymap.file_export_textures_as)) {
			arm_ui_BoxExport.showTextures();
		} else if(arm_Operator.shortcut(arm_Config.keymap.file_import_assets)) {
			arm_Project.importAsset();
		} else if(arm_Operator.shortcut(arm_Config.keymap.edit_prefs)) {
			arm_ui_BoxPreferences.show();
		}
		var kb = iron_system_Input.getKeyboard();
		if(kb.started(arm_Config.keymap.view_distract_free) || kb.started("escape") && !this.show && !arm_ui_UIBox.show) {
			this.toggleDistractFree();
		}
		var mouse = iron_system_Input.getMouse();
		if((arm_Context.brushCanLock || arm_Context.brushLocked) && mouse.moved) {
			if(arm_Operator.shortcut(arm_Config.keymap.brush_radius,2) || arm_Operator.shortcut(arm_Config.keymap.brush_opacity,2) || arm_Operator.shortcut(arm_Config.keymap.brush_angle,2)) {
				if(arm_Context.brushLocked) {
					if(arm_Operator.shortcut(arm_Config.keymap.brush_opacity,2)) {
						arm_Context.brushOpacity += mouse.movementX / 500;
						arm_Context.brushOpacity = Math.max(0.0,Math.min(1.0,arm_Context.brushOpacity));
						arm_Context.brushOpacity = Math.round(arm_Context.brushOpacity * 100) / 100;
						arm_Context.brushOpacityHandle.value = arm_Context.brushOpacity;
					} else if(arm_Operator.shortcut(arm_Config.keymap.brush_angle,2)) {
						arm_Context.brushAngle -= mouse.movementX / 5;
						arm_Context.brushAngle = (arm_Context.brushAngle | 0) % 360;
						if(arm_Context.brushAngle < 0) {
							arm_Context.brushAngle += 360;
						}
						arm_Context.brushAngleHandle.value = arm_Context.brushAngle;
						arm_node_MaterialParser.parsePaintMaterial();
					} else {
						arm_Context.brushRadius += mouse.movementX / 150;
						arm_Context.brushRadius = Math.max(0.05,Math.min(4.0,arm_Context.brushRadius));
						arm_Context.brushRadius = Math.round(arm_Context.brushRadius * 100) / 100;
						arm_Context.brushRadiusHandle.value = arm_Context.brushRadius;
					}
					arm_ui_UIHeader.inst.headerHandle.redraws = 2;
				} else if(arm_Context.brushCanLock) {
					arm_Context.brushCanLock = false;
					arm_Context.brushLocked = true;
				}
			}
		}
		var right = arm_App.w();
		if(arm_ui_UIView2D.inst.show) {
			right = arm_App.w() * 2;
		}
		if(mouse.x - arm_App.x() > 0 && mouse.x - arm_App.x() < right && mouse.y - arm_App.y() > 0 && mouse.y - arm_App.y() < arm_App.h() && !this.ui.isTyping && !arm_ui_UIView2D.inst.ui.isTyping && !arm_ui_UINodes.inst.ui.isTyping) {
			if(arm_ui_UIHeader.inst.worktab.position == 0) {
				if(kb.down("shift")) {
					if(kb.started("1")) {
						arm_Context.selectMaterial(0);
					} else if(kb.started("2")) {
						arm_Context.selectMaterial(1);
					} else if(kb.started("3")) {
						arm_Context.selectMaterial(2);
					} else if(kb.started("4")) {
						arm_Context.selectMaterial(3);
					} else if(kb.started("5")) {
						arm_Context.selectMaterial(4);
					} else if(kb.started("6")) {
						arm_Context.selectMaterial(5);
					}
				}
				if(!mouse.down("right")) {
					if(arm_Operator.shortcut(arm_Config.keymap.tool_brush)) {
						arm_Context.selectTool(0);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_eraser)) {
						arm_Context.selectTool(1);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_fill)) {
						arm_Context.selectTool(2);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_bake)) {
						arm_Context.selectTool(8);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_colorid)) {
						arm_Context.selectTool(9);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_decal)) {
						arm_Context.selectTool(3);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_text)) {
						arm_Context.selectTool(4);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_clone)) {
						arm_Context.selectTool(5);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_blur)) {
						arm_Context.selectTool(6);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_particle)) {
						arm_Context.selectTool(7);
					} else if(arm_Operator.shortcut(arm_Config.keymap.tool_picker)) {
						arm_Context.selectTool(10);
					} else if(arm_Operator.shortcut(arm_Config.keymap.swap_brush_eraser)) {
						arm_Context.selectTool(arm_Context.tool == 0 ? 1 : 0);
					}
				}
				if(arm_Context.tool == 0 || arm_Context.tool == 1 || arm_Context.tool == 3 || arm_Context.tool == 4 || arm_Context.tool == 5 || arm_Context.tool == 6 || arm_Context.tool == 7) {
					if(arm_Operator.shortcut(arm_Config.keymap.brush_radius) || arm_Operator.shortcut(arm_Config.keymap.brush_opacity) || arm_Operator.shortcut(arm_Config.keymap.brush_angle)) {
						arm_Context.brushCanLock = true;
						if(!iron_system_Input.getPen().connected) {
							mouse.lock();
						}
						arm_Context.lockStartedX = mouse.x;
						arm_Context.lockStartedY = mouse.y;
					} else if(arm_Operator.shortcut(arm_Config.keymap.brush_radius_decrease,1)) {
						arm_Context.brushRadius -= 0.1;
						arm_Context.brushRadius = Math.round(arm_Context.brushRadius * 100) / 100;
						arm_Context.brushRadiusHandle.value = arm_Context.brushRadius;
						arm_ui_UIHeader.inst.headerHandle.redraws = 2;
					} else if(arm_Operator.shortcut(arm_Config.keymap.brush_radius_increase,1)) {
						arm_Context.brushRadius += 0.1;
						arm_Context.brushRadius = Math.round(arm_Context.brushRadius * 100) / 100;
						arm_Context.brushRadiusHandle.value = arm_Context.brushRadius;
						arm_ui_UIHeader.inst.headerHandle.redraws = 2;
					}
				}
			}
			if(arm_Operator.shortcut(arm_Config.keymap.view_reset)) {
				arm_util_ViewportUtil.resetViewport();
				arm_util_ViewportUtil.scaleToBounds();
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_back)) {
				arm_util_ViewportUtil.setView(0,1,0,Math.PI / 2,0,Math.PI);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_front)) {
				arm_util_ViewportUtil.setView(0,-1,0,Math.PI / 2,0,0);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_left)) {
				arm_util_ViewportUtil.setView(-1,0,0,Math.PI / 2,0,-Math.PI / 2);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_right)) {
				arm_util_ViewportUtil.setView(1,0,0,Math.PI / 2,0,Math.PI / 2);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_bottom)) {
				arm_util_ViewportUtil.setView(0,0,-1,Math.PI,0,Math.PI);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_top)) {
				arm_util_ViewportUtil.setView(0,0,1,0,0,0);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_camera_type)) {
				arm_Context.cameraType = arm_Context.cameraType == 0 ? 1 : 0;
				arm_Context.camHandle.position = arm_Context.cameraType;
				arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_orbit_left,1)) {
				arm_util_ViewportUtil.orbit(-Math.PI / 12,0);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_orbit_right,1)) {
				arm_util_ViewportUtil.orbit(Math.PI / 12,0);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_orbit_up,1)) {
				arm_util_ViewportUtil.orbit(0,-Math.PI / 12);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_orbit_down,1)) {
				arm_util_ViewportUtil.orbit(0,Math.PI / 12);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_orbit_opposite)) {
				arm_util_ViewportUtil.orbit(Math.PI,0);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_zoom_in,1)) {
				arm_util_ViewportUtil.zoom(0.2);
			} else if(arm_Operator.shortcut(arm_Config.keymap.view_zoom_out,1)) {
				arm_util_ViewportUtil.zoom(-0.2);
			}
		}
		if(arm_Context.brushCanLock || arm_Context.brushLocked) {
			if(mouse.moved && arm_Context.brushCanUnlock) {
				arm_Context.brushLocked = false;
				arm_Context.brushCanUnlock = false;
			}
			if(kb.released(arm_Config.keymap.brush_radius)) {
				mouse.unlock();
				arm_Context.brushCanUnlock = true;
				arm_Context.lastPaintX = -1;
				arm_Context.lastPaintY = -1;
			}
		}
		if(this.borderHandle != null) {
			if(this.borderHandle == arm_ui_UINodes.inst.hwnd || this.borderHandle == arm_ui_UIView2D.inst.hwnd) {
				if(this.borderStarted == 0) {
					arm_ui_UINodes.inst.defaultWindowW -= mouse.movementX | 0;
					if(arm_ui_UINodes.inst.defaultWindowW < 32) {
						arm_ui_UINodes.inst.defaultWindowW = 32;
					} else if(arm_ui_UINodes.inst.defaultWindowW > kha_System.windowWidth() * 0.7) {
						var tmp = kha_System.windowWidth() * 0.7 | 0;
						arm_ui_UINodes.inst.defaultWindowW = tmp;
					}
				} else {
					arm_ui_UINodes.inst.defaultWindowH -= mouse.movementY | 0;
					if(arm_ui_UINodes.inst.defaultWindowH < 32) {
						arm_ui_UINodes.inst.defaultWindowH = 32;
					} else if(arm_ui_UINodes.inst.defaultWindowH > arm_App.h() * 0.95) {
						var tmp1 = arm_App.h() * 0.95 | 0;
						arm_ui_UINodes.inst.defaultWindowH = tmp1;
					}
				}
			} else if(this.borderHandle == arm_ui_UIStatus.inst.statusHandle) {
				var my = mouse.movementY | 0;
				if(arm_ui_UIStatus.inst.statush - my >= 32 * arm_Config.raw.window_scale && arm_ui_UIStatus.inst.statush - my < kha_System.windowHeight() * 0.7) {
					arm_ui_UIStatus.inst.statush -= my;
				}
			} else if(this.borderStarted == 0) {
				arm_ui_UISidebar.defaultWindowW -= mouse.movementX | 0;
				if(arm_ui_UISidebar.defaultWindowW < 32) {
					arm_ui_UISidebar.defaultWindowW = 32;
				} else if(arm_ui_UISidebar.defaultWindowW > kha_System.windowWidth() - 32) {
					arm_ui_UISidebar.defaultWindowW = kha_System.windowWidth() - 32;
				}
				this.windowW = arm_ui_UISidebar.defaultWindowW * arm_Config.raw.window_scale | 0;
			} else {
				var my1 = mouse.movementY | 0;
				if(this.borderHandle == this.hwnd1 && this.borderStarted == 2) {
					if(this.tabh + my1 > 32 && this.tabh1 - my1 > 32) {
						this.tabh += my1;
						this.tabh1 -= my1;
					}
				} else if(this.borderHandle == this.hwnd2 && this.borderStarted == 2) {
					if(this.tabh1 + my1 > 32 && this.tabh2 - my1 > 32) {
						this.tabh1 += my1;
						this.tabh2 -= my1;
					}
				}
			}
		}
		if(!mouse.down()) {
			this.borderHandle = null;
			arm_App.isResizing = false;
		}
	}
	,toggleDistractFree: function() {
		this.show = !this.show;
		arm_App.resize();
	}
	,getBrushStencilRect: function() {
		var w = arm_Context.brushStencilImage.get_width() * (arm_App.h() / arm_Context.brushStencilImage.get_height()) * arm_Context.brushStencilScale | 0;
		var h = arm_App.h() * arm_Context.brushStencilScale | 0;
		var x = arm_App.x() + arm_Context.brushStencilX * arm_App.w() | 0;
		var y = arm_App.y() + arm_Context.brushStencilY * arm_App.h() | 0;
		return { w : w, h : h, x : x, y : y};
	}
	,updateUI: function() {
		if(arm_Log.messageTimer > 0) {
			arm_Log.messageTimer -= 0.016666666666666666 * iron_system_Time.scale;
			if(arm_Log.messageTimer <= 0) {
				arm_ui_UIStatus.inst.statusHandle.redraws = 2;
			}
		}
		if(!arm_App.uiEnabled) {
			return;
		}
		var mouse = iron_system_Input.getMouse();
		var kb = iron_system_Input.getKeyboard();
		var setCloneSource = arm_Context.tool == 5 && arm_Operator.shortcut(Std.string(arm_Config.keymap.set_clone_source) + "+" + Std.string(arm_Config.keymap.action_paint));
		if(arm_Context.brushStencilImage != null && arm_Operator.shortcut(arm_Config.keymap.stencil_transform)) {
			var r = this.getBrushStencilRect();
			if(mouse.started("left")) {
				arm_Context.brushStencilScaling = arm_ui_UISidebar.hitRect(mouse.x,mouse.y,r.x - 8,r.y - 8,16,16) || arm_ui_UISidebar.hitRect(mouse.x,mouse.y,r.x - 8,r.h + r.y - 8,16,16) || arm_ui_UISidebar.hitRect(mouse.x,mouse.y,r.w + r.x - 8,r.y - 8,16,16) || arm_ui_UISidebar.hitRect(mouse.x,mouse.y,r.w + r.x - 8,r.h + r.y - 8,16,16);
				var cosa = Math.cos(-arm_Context.brushStencilAngle);
				var sina = Math.sin(-arm_Context.brushStencilAngle);
				var ox = 0;
				var oy = -r.h / 2;
				var x = ox * cosa - oy * sina;
				var y = ox * sina + oy * cosa;
				x += r.x + r.w / 2;
				y += r.y + r.h / 2;
				arm_Context.brushStencilRotating = arm_ui_UISidebar.hitRect(mouse.x,mouse.y,x - 16 | 0,y - 16 | 0,32,32);
			}
			var _scale = arm_Context.brushStencilScale;
			if(mouse.down("left")) {
				if(arm_Context.brushStencilScaling) {
					var mult = mouse.x > r.x + r.w / 2 ? 1 : -1;
					arm_Context.brushStencilScale += mouse.movementX / 400 * mult;
				} else if(arm_Context.brushStencilRotating) {
					var gizmoX = r.x + r.w / 2;
					var gizmoY = r.y + r.h / 2;
					arm_Context.brushStencilAngle = -Math.atan2(mouse.y - gizmoY,mouse.x - gizmoX) - Math.PI / 2;
				} else {
					arm_Context.brushStencilX += mouse.movementX / arm_App.w();
					arm_Context.brushStencilY += mouse.movementY / arm_App.h();
				}
			} else {
				arm_Context.brushStencilScaling = false;
			}
			if(mouse.wheelDelta != 0) {
				arm_Context.brushStencilScale -= mouse.wheelDelta / 10;
			}
			var ratio = arm_App.h() / arm_Context.brushStencilImage.get_height();
			var oldW = _scale * arm_Context.brushStencilImage.get_width() * ratio;
			var newW = arm_Context.brushStencilScale * arm_Context.brushStencilImage.get_width() * ratio;
			var oldH = _scale * arm_App.h();
			var newH = arm_Context.brushStencilScale * arm_App.h();
			arm_Context.brushStencilX += (oldW - newW) / arm_App.w() / 2;
			arm_Context.brushStencilY += (oldH - newH) / arm_App.h() / 2;
		}
		var down = arm_Operator.shortcut(arm_Config.keymap.action_paint) || setCloneSource || arm_Operator.shortcut(Std.string(arm_Config.keymap.brush_ruler) + "+" + Std.string(arm_Config.keymap.action_paint)) || iron_system_Input.getPen().down() && !kb.down("alt");
		if(down) {
			var mx = mouse.x - arm_App.x();
			var my = mouse.y - arm_App.y();
			if(arm_Context.paint2d) {
				mx -= arm_App.w();
			}
			if(mx < arm_App.w() && mx > arm_App.x() && my < arm_App.h() && my > arm_App.y()) {
				if(setCloneSource) {
					arm_Context.cloneStartX = mx;
					arm_Context.cloneStartY = my;
				} else {
					if(arm_Context.brushTime == 0 && !arm_App.isDragging && !arm_App.isResizing && this.ui.comboSelectedHandle == null) {
						if(arm_Operator.shortcut(Std.string(arm_Config.keymap.brush_ruler) + "+" + Std.string(arm_Config.keymap.action_paint))) {
							arm_Context.lastPaintVecX = arm_Context.lastPaintX;
							arm_Context.lastPaintVecY = arm_Context.lastPaintY;
						}
						arm_History.pushUndo = true;
						if(arm_Context.tool == 5 && arm_Context.cloneStartX >= 0.0) {
							arm_Context.cloneDeltaX = (arm_Context.cloneStartX - mx) / arm_App.w();
							arm_Context.cloneDeltaY = (arm_Context.cloneStartY - my) / arm_App.h();
							arm_Context.cloneStartX = -1;
						} else if(arm_Context.tool == 7) {
							var emitter = iron_Scene.active.getChild(".ParticleEmitter");
							var psys = emitter.particleSystems[0];
							psys.time = 0;
						}
					}
					arm_Context.brushTime += 0.016666666666666666 * iron_system_Time.scale;
					if(arm_Context.runBrush != null) {
						arm_Context.runBrush(0);
					}
				}
			}
		} else if(arm_Context.brushTime > 0) {
			arm_Context.brushTime = 0;
			arm_Context.prevPaintVecX = -1;
			arm_Context.prevPaintVecY = -1;
			arm_Context.ddirty = 3;
			arm_Context.brushBlendDirty = true;
			arm_Context.layerPreviewDirty = true;
		}
		if(arm_Context.layersPreviewDirty) {
			arm_Context.layersPreviewDirty = false;
			arm_Context.layerPreviewDirty = false;
			if(arm_Layers.pipeMerge == null) {
				arm_Layers.makePipe();
			}
			var _g = 0;
			var _g1 = arm_Project.layers;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if(l.getChildren() != null) {
					continue;
				}
				var target = l.texpaint_preview;
				var source = l.texpaint;
				var g2 = target.get_g2();
				g2.begin(true,-16777216);
				g2.set_pipeline(arm_Layers.pipeCopy);
				g2.drawScaledImage(source,0,0,target.get_width(),target.get_height());
				g2.set_pipeline(null);
				g2.end();
				if(l.texpaint_mask != null) {
					var target1 = l.texpaint_mask_preview;
					var source1 = l.texpaint_mask;
					var g21 = target1.get_g2();
					g21.begin(true,0);
					g21.set_pipeline(arm_Layers.pipeCopy);
					g21.drawScaledImage(source1,0,0,target1.get_width(),target1.get_height());
					g21.set_pipeline(null);
					g21.end();
				}
			}
			this.hwnd.redraws = 2;
		}
		if(arm_Context.layerPreviewDirty && arm_Context.layer.getChildren() == null) {
			arm_Context.layerPreviewDirty = false;
			if(arm_Layers.pipeMerge == null) {
				arm_Layers.makePipe();
			}
			var l1 = arm_Context.layer;
			var target2 = arm_Context.layerIsMask ? l1.texpaint_mask_preview : l1.texpaint_preview;
			var source2 = arm_Context.layerIsMask ? l1.texpaint_mask : l1.texpaint;
			var g22 = target2.get_g2();
			g22.begin(true,0);
			g22.set_pipeline(arm_Layers.pipeCopy);
			g22.drawScaledImage(source2,0,0,target2.get_width(),target2.get_height());
			g22.set_pipeline(null);
			g22.end();
			this.hwnd.redraws = 2;
		}
		var undoPressed = arm_Operator.shortcut(arm_Config.keymap.edit_undo);
		var redoPressed = arm_Operator.shortcut(arm_Config.keymap.edit_redo) || kb.down("control") && kb.started("y");
		if(undoPressed) {
			arm_History.undo();
		} else if(redoPressed) {
			arm_History.redo();
		}
		if(arm_ui_UIHeader.inst.worktab.position == 1) {
			arm_plugin_Gizmo.update();
		}
		if(arm_Context.lastCombo != null || this.ui.tooltipImg == null && arm_Context.lastTooltip != null) {
			arm_App.redrawUI();
		}
		arm_Context.lastCombo = this.ui.comboSelectedHandle;
		arm_Context.lastTooltip = this.ui.tooltipImg;
	}
	,render: function(g) {
		if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
			return;
		}
		if(!arm_App.uiEnabled && this.ui.inputRegistered) {
			this.ui.unregisterInput();
		}
		if(arm_App.uiEnabled && !this.ui.inputRegistered) {
			this.ui.registerInput();
		}
		if(!this.show) {
			return;
		}
		g.end();
		this.ui.begin(g);
		arm_ui_UIToolbar.inst.renderUI(g);
		arm_ui_UIMenubar.inst.renderUI(g);
		arm_ui_UIHeader.inst.renderUI(g);
		arm_ui_UIStatus.inst.renderUI(g);
		this.tabx = kha_System.windowWidth() - this.windowW;
		if(this.tabh == 0) {
			this.tabh = this.tabh1 = this.tabh2 = kha_System.windowHeight() / 3 | 0;
		}
		arm_Context.gizmo.visible = false;
		if(arm_ui_UIHeader.inst.worktab.position == 0) {
			if(this.ui.window(this.hwnd,this.tabx,0,this.windowW,this.tabh)) {
				arm_ui_TabLayers.draw();
				arm_ui_TabHistory.draw();
				arm_ui_TabPlugins.draw();
			}
			if(this.ui.window(this.hwnd1,this.tabx,this.tabh,this.windowW,this.tabh1)) {
				arm_Context.object = arm_Context.paintObject;
				arm_ui_TabMaterials.draw();
				arm_ui_TabBrushes.draw();
				arm_ui_TabParticles.draw();
			}
			if(this.ui.window(this.hwnd2,this.tabx,this.tabh + this.tabh1,this.windowW,this.tabh2)) {
				arm_ui_TabTextures.draw();
				arm_ui_TabMeshes.draw();
				arm_ui_TabFonts.draw();
			}
		} else if(arm_ui_UIHeader.inst.worktab.position == 1) {
			arm_Context.gizmo.visible = true;
			if(this.ui.window(this.hwnd,this.tabx,0,this.windowW,this.tabh)) {
				arm_ui_TabOutliner.draw();
				arm_ui_TabPlugins.draw();
			}
			if(this.ui.window(this.hwnd1,this.tabx,this.tabh,this.windowW,this.tabh1)) {
				arm_ui_TabMaterials.draw();
				arm_ui_TabProperties.draw();
			}
			if(this.ui.window(this.hwnd2,this.tabx,this.tabh + this.tabh1,this.windowW,this.tabh2)) {
				arm_ui_TabTextures.draw();
				arm_ui_TabMeshes.draw();
				arm_ui_TabFonts.draw();
			}
		}
		this.ui.end();
		g.begin(false);
	}
	,renderCursor: function(g) {
		g.set_color(-1);
		if(arm_App.uiEnabled && arm_ui_UIHeader.inst.worktab.position == 0) {
			var mx = arm_App.x() + arm_Context.paintVec.x * arm_App.w();
			var my = arm_App.y() + arm_Context.paintVec.y * arm_App.h();
			if(arm_Context.brushLocked) {
				mx += arm_Context.lockStartedX - kha_System.windowWidth() / 2;
				my += arm_Context.lockStartedY - kha_System.windowHeight() / 2;
			}
			if(arm_Context.brushStencilImage != null && arm_Context.tool != 8 && arm_Context.tool != 10 && arm_Context.tool != 9) {
				var r = this.getBrushStencilRect();
				if(!arm_Operator.shortcut(arm_Config.keymap.stencil_hide,2)) {
					g.set_color(-1996488705);
					g.pushRotation(-arm_Context.brushStencilAngle,r.x + r.w / 2,r.y + r.h / 2);
					g.drawScaledImage(arm_Context.brushStencilImage,r.x,r.y,r.w,r.h);
					g.popTransformation();
					g.set_color(-1);
				}
				var transform = arm_Operator.shortcut(arm_Config.keymap.stencil_transform);
				if(transform) {
					g.drawRect(r.x,r.y,r.w,r.h);
					g.drawRect(r.x - 8,r.y - 8,16,16);
					g.drawRect(r.x - 8 + r.w,r.y - 8,16,16);
					g.drawRect(r.x - 8,r.y - 8 + r.h,16,16);
					g.drawRect(r.x - 8 + r.w,r.y - 8 + r.h,16,16);
					g.pushRotation(-arm_Context.brushStencilAngle,r.x + r.w / 2,r.y + r.h / 2);
					kha_graphics2_GraphicsExtension.fillCircle(g,r.x + r.w / 2,r.y - 4,8);
					g.popTransformation();
				}
			}
			if(arm_Context.tool == 10 && arm_Context.pickerSelectMaterial) {
				var img = arm_Context.material.imageIcon;
				g.drawImage(img,mx + 10,my + 10);
			}
			var _this = arm_Res.bundled;
			var cursorImg = __map_reserved["cursor.k"] != null ? _this.getReserved("cursor.k") : _this.h["cursor.k"];
			var psize = cursorImg.get_width() * (arm_Context.brushRadius * arm_Context.brushNodesRadius) | 0;
			var mouse = iron_system_Input.getMouse();
			var pen = iron_system_Input.getPen();
			var kb = iron_system_Input.getKeyboard();
			if(arm_Context.tool == 5 && !kb.down("alt") && (mouse.down() || pen.down())) {
				g.set_color(1728053247);
				g.drawScaledImage(cursorImg,mx + arm_Context.cloneDeltaX * arm_App.w() - psize / 2,my + arm_Context.cloneDeltaY * arm_App.h() - psize / 2,psize,psize);
				g.set_color(-1);
			}
			var in2dView = arm_ui_UIView2D.inst.show && arm_ui_UIView2D.inst.type == 0 && mx > arm_ui_UIView2D.inst.wx && mx < arm_ui_UIView2D.inst.wx + arm_ui_UIView2D.inst.ww && my > arm_ui_UIView2D.inst.wy && my < arm_ui_UIView2D.inst.wy + arm_ui_UIView2D.inst.wh;
			var inNodes = arm_ui_UINodes.inst.show && mx > arm_ui_UINodes.inst.wx && mx < arm_ui_UINodes.inst.wx + arm_ui_UINodes.inst.ww && my > arm_ui_UINodes.inst.wy && my < arm_ui_UINodes.inst.wy + arm_ui_UINodes.inst.wh;
			var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
			if(!arm_Config.raw.brush_3d || in2dView || decal && !arm_Config.raw.brush_live) {
				if(decal && !inNodes) {
					var psizex = 256 * (arm_Context.brushRadius * arm_Context.brushNodesRadius * arm_Context.brushScaleX) | 0;
					var psizey = 256 * (arm_Context.brushRadius * arm_Context.brushNodesRadius) | 0;
					g.set_color(kha__$Color_Color_$Impl_$.fromFloats(1,1,1,arm_Context.brushOpacity));
					var angle = (arm_Context.brushAngle + arm_Context.brushNodesAngle) * (Math.PI / 180);
					g.pushRotation(-angle,mx,my);
					g.drawScaledImage(arm_Context.decalImage,mx - psizex / 2,my - psizey / 2,psizex,psizey);
					g.popTransformation();
					g.set_color(-1);
				} else if(arm_Context.tool == 0 || arm_Context.tool == 1 || arm_Context.tool == 5 || arm_Context.tool == 6 || arm_Context.tool == 7) {
					g.drawScaledImage(cursorImg,mx - psize / 2,my - psize / 2,psize,psize);
				}
			}
			if(arm_Context.brushLazyRadius > 0 && !arm_Context.brushLocked && (arm_Context.tool == 0 || arm_Context.tool == 1 || arm_Context.tool == 3 || arm_Context.tool == 4 || arm_Context.tool == 5 || arm_Context.tool == 6 || arm_Context.tool == 7)) {
				g.fillRect(mx - 1,my - 1,2,2);
				var mx1 = arm_Context.brushLazyX * arm_App.w() + arm_App.x();
				var my1 = arm_Context.brushLazyY * arm_App.h() + arm_App.y();
				var radius = arm_Context.brushLazyRadius * 180;
				g.set_color(-10066330);
				g.drawScaledImage(cursorImg,mx1 - radius / 2,my1 - radius / 2,radius,radius);
				g.set_color(-1);
			}
		}
	}
	,showMaterialNodes: function() {
		arm_ui_UINodes.inst.ui.endInput();
		arm_ui_UINodes.inst.show = !arm_ui_UINodes.inst.show || arm_ui_UINodes.inst.canvasType != 0;
		arm_ui_UINodes.inst.canvasType = 0;
		arm_App.resize();
	}
	,showBrushNodes: function() {
		arm_ui_UINodes.inst.ui.endInput();
		arm_ui_UINodes.inst.show = !arm_ui_UINodes.inst.show || arm_ui_UINodes.inst.canvasType != 1;
		arm_ui_UINodes.inst.canvasType = 1;
		arm_App.resize();
	}
	,show2DView: function(type) {
		if(type == null) {
			type = 0;
		}
		arm_ui_UIView2D.inst.ui.endInput();
		if(arm_ui_UIView2D.inst.type != type) {
			arm_ui_UIView2D.inst.show = true;
		} else {
			arm_ui_UIView2D.inst.show = !arm_ui_UIView2D.inst.show;
		}
		arm_ui_UIView2D.inst.type = type;
		arm_ui_UIView2D.inst.hwnd.redraws = 2;
		arm_App.resize();
	}
	,toggleBrowser: function() {
		var minimized = arm_ui_UIStatus.inst.statush <= 32 * arm_Config.raw.window_scale;
		arm_ui_UIStatus.inst.statush = minimized ? 240 : 32;
		arm_ui_UIStatus.inst.statush = arm_ui_UIStatus.inst.statush * arm_Config.raw.window_scale | 0;
	}
	,getImage: function(asset) {
		if(asset != null) {
			return arm_Project.assetMap.h[asset.id];
		} else {
			return null;
		}
	}
	,setIconScale: function() {
		if(this.ui.ops.scaleFactor > 1) {
			arm_Res.load(["icons2x.k"],function() {
				var this1 = arm_Res.bundled;
				var _this = arm_Res.bundled;
				var value = __map_reserved["icons2x.k"] != null ? _this.getReserved("icons2x.k") : _this.h["icons2x.k"];
				var _this1 = this1;
				if(__map_reserved["icons.k"] != null) {
					_this1.setReserved("icons.k",value);
				} else {
					_this1.h["icons.k"] = value;
				}
			});
		} else {
			arm_Res.load(["icons.k"],function() {
			});
		}
	}
	,onBorderHover: function(handle,side) {
		if(!arm_App.uiEnabled) {
			return;
		}
		if(handle != this.hwnd && handle != this.hwnd1 && handle != this.hwnd2 && handle != arm_ui_UIStatus.inst.statusHandle && handle != arm_ui_UINodes.inst.hwnd && handle != arm_ui_UIView2D.inst.hwnd) {
			return;
		}
		if(handle == arm_ui_UINodes.inst.hwnd && side != 0 && side != 2) {
			return;
		}
		if(handle == arm_ui_UINodes.inst.hwnd && side == 2 && !arm_ui_UIView2D.inst.show) {
			return;
		}
		if(handle == arm_ui_UIView2D.inst.hwnd && side != 0) {
			return;
		}
		if(handle == this.hwnd && side == 2) {
			return;
		}
		if(handle == this.hwnd2 && side == 3) {
			return;
		}
		if(handle == arm_ui_UIStatus.inst.statusHandle && side != 2) {
			return;
		}
		if(side == 1) {
			return;
		}
		if(side == 0 || side == 1) {
			Krom.setMouseCursor(6);
		} else {
			Krom.setMouseCursor(5);
		}
		if(this.ui.inputStarted) {
			this.borderStarted = side;
			this.borderHandle = handle;
			arm_App.isResizing = true;
		}
	}
	,onTextHover: function() {
		Krom.setMouseCursor(3);
	}
	,tagUIRedraw: function() {
		arm_ui_UIHeader.inst.headerHandle.redraws = 2;
		arm_ui_UIToolbar.inst.toolbarHandle.redraws = 2;
		arm_ui_UIStatus.inst.statusHandle.redraws = 2;
		arm_ui_UIMenubar.inst.workspaceHandle.redraws = 2;
		arm_ui_UIMenubar.inst.menuHandle.redraws = 2;
		this.hwnd.redraws = 2;
		this.hwnd1.redraws = 2;
		this.hwnd2.redraws = 2;
	}
	,__class__: arm_ui_UISidebar
};
var arm_util_UVUtil = function() { };
$hxClasses["arm.util.UVUtil"] = arm_util_UVUtil;
arm_util_UVUtil.__name__ = "arm.util.UVUtil";
arm_util_UVUtil.cacheUVMap = function() {
	if(arm_util_UVUtil.uvmapCached) {
		return;
	}
	var res = arm_Config.getTextureRes();
	if(arm_util_UVUtil.uvmap == null) {
		arm_util_UVUtil.uvmap = kha_Image.createRenderTarget(res,res);
	}
	arm_util_UVUtil.uvmapCached = true;
	var merged = arm_Context.mergedObject;
	var mesh = arm_Context.layerFilter == 0 && merged != null ? merged.data.raw : arm_Context.paintObject.data.raw;
	var texa = mesh.vertex_arrays[2].values;
	var inda = mesh.index_arrays[0].values;
	arm_util_UVUtil.uvmap.get_g2().begin(true,0);
	arm_util_UVUtil.uvmap.get_g2().set_color(-3355444);
	var strength = res > 2048 ? 2.0 : 1.0;
	var f = 3.0518509475997192e-005 * arm_util_UVUtil.uvmap.get_width();
	var _g = 0;
	var _g1 = inda.length / 3 | 0;
	while(_g < _g1) {
		var i = _g++;
		var x1 = texa[inda[i * 3] * 2] * f;
		var x2 = texa[inda[i * 3 + 1] * 2] * f;
		var x3 = texa[inda[i * 3 + 2] * 2] * f;
		var y1 = texa[inda[i * 3] * 2 + 1] * f;
		var y2 = texa[inda[i * 3 + 1] * 2 + 1] * f;
		var y3 = texa[inda[i * 3 + 2] * 2 + 1] * f;
		arm_util_UVUtil.uvmap.get_g2().drawLine(x1,y1,x2,y2,strength);
		arm_util_UVUtil.uvmap.get_g2().drawLine(x2,y2,x3,y3,strength);
		arm_util_UVUtil.uvmap.get_g2().drawLine(x3,y3,x1,y1,strength);
	}
	arm_util_UVUtil.uvmap.get_g2().end();
};
arm_util_UVUtil.cacheTriangleMap = function() {
	if(arm_util_UVUtil.trianglemapCached) {
		return;
	}
	var res = arm_Config.getTextureRes();
	if(arm_util_UVUtil.trianglemap == null) {
		arm_util_UVUtil.trianglemap = kha_Image.createRenderTarget(res,res);
	}
	arm_util_UVUtil.trianglemapCached = true;
	var merged = arm_Context.mergedObject != null ? arm_Context.mergedObject.data.raw : arm_Context.paintObject.data.raw;
	var mesh = merged;
	var texa = mesh.vertex_arrays[2].values;
	var inda = mesh.index_arrays[0].values;
	arm_util_UVUtil.trianglemap.get_g2().begin(true,-16777216);
	var f = 3.0518509475997192e-005 * arm_util_UVUtil.trianglemap.get_width();
	var color = -16777216;
	var _g = 0;
	var _g1 = inda.length / 3 | 0;
	while(_g < _g1) {
		var i = _g++;
		if(color == -1) {
			color = -16777216;
		}
		++color;
		arm_util_UVUtil.trianglemap.get_g2().set_color(color);
		var x1 = texa[inda[i * 3] * 2] * f;
		var x2 = texa[inda[i * 3 + 1] * 2] * f;
		var x3 = texa[inda[i * 3 + 2] * 2] * f;
		var y1 = texa[inda[i * 3] * 2 + 1] * f;
		var y2 = texa[inda[i * 3 + 1] * 2 + 1] * f;
		var y3 = texa[inda[i * 3 + 2] * 2 + 1] * f;
		arm_util_UVUtil.trianglemap.get_g2().fillTriangle(x1,y1,x2,y2,x3,y3);
	}
	arm_util_UVUtil.trianglemap.get_g2().end();
};
var arm_util_ViewportUtil = function() { };
$hxClasses["arm.util.ViewportUtil"] = arm_util_ViewportUtil;
arm_util_ViewportUtil.__name__ = "arm.util.ViewportUtil";
arm_util_ViewportUtil.scaleToBounds = function() {
	var po = arm_Context.mergedObject == null ? arm_Context.mainObject() : arm_Context.mergedObject;
	var md = po.data;
	md.geom.calculateAABB();
	var r = Math.sqrt(md.geom.aabb.x * md.geom.aabb.x + md.geom.aabb.y * md.geom.aabb.y + md.geom.aabb.z * md.geom.aabb.z);
	po = arm_Context.mainObject();
	po.transform.dim.x = md.geom.aabb.x;
	po.transform.dim.y = md.geom.aabb.y;
	po.transform.dim.z = md.geom.aabb.z;
	var _this = po.transform.scale;
	_this.x = 2 / r;
	_this.y = 2 / r;
	_this.z = 2 / r;
	_this.w = 1.0;
	po.transform.buildMatrix();
};
arm_util_ViewportUtil.resetViewport = function() {
	var cam = iron_Scene.active.camera;
	var _g = 0;
	var _g1 = iron_Scene.active.raw.objects;
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		if(o.type == "camera_object") {
			var _this = cam.transform.local;
			var a = o.transform.values;
			_this.self._00 = a[0];
			_this.self._10 = a[1];
			_this.self._20 = a[2];
			_this.self._30 = a[3];
			_this.self._01 = a[4];
			_this.self._11 = a[5];
			_this.self._21 = a[6];
			_this.self._31 = a[7];
			_this.self._02 = a[8];
			_this.self._12 = a[9];
			_this.self._22 = a[10];
			_this.self._32 = a[11];
			_this.self._03 = a[12];
			_this.self._13 = a[13];
			_this.self._23 = a[14];
			_this.self._33 = a[15];
			cam.transform.decompose();
			if(arm_Context.fovHandle != null) {
				arm_Context.fovHandle.value = 0.92;
			}
			arm_Context.camHandle.position = 0;
			cam.data.raw.ortho = null;
			cam.buildProjection();
			arm_Context.ddirty = 2;
			arm_plugin_Camera.inst.reset();
			break;
		}
	}
};
arm_util_ViewportUtil.setView = function(x,y,z,rx,ry,rz) {
	var _this = arm_Context.object.transform.rot;
	_this.x = 0;
	_this.y = 0;
	_this.z = 0;
	_this.w = 1;
	arm_Context.object.transform.dirty = true;
	var cam = iron_Scene.active.camera;
	var _this1 = cam.transform.loc;
	var dist = Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z);
	var _this2 = cam.transform.loc;
	_this2.x = x * dist;
	_this2.y = y * dist;
	_this2.z = z * dist;
	_this2.w = 1.0;
	var _this3 = cam.transform.rot;
	var f = rx / 2;
	var c1 = Math.cos(f);
	var s1 = Math.sin(f);
	f = ry / 2;
	var c2 = Math.cos(f);
	var s2 = Math.sin(f);
	f = rz / 2;
	var c3 = Math.cos(f);
	var s3 = Math.sin(f);
	_this3.x = s1 * c2 * c3 + c1 * s2 * s3;
	_this3.y = c1 * s2 * c3 + s1 * c2 * s3;
	_this3.z = c1 * c2 * s3 - s1 * s2 * c3;
	_this3.w = c1 * c2 * c3 - s1 * s2 * s3;
	cam.transform.buildMatrix();
	cam.buildProjection();
	arm_Context.ddirty = 2;
	arm_plugin_Camera.inst.reset();
};
arm_util_ViewportUtil.orbit = function(x,y) {
	var cam = iron_Scene.active.camera;
	var dist = arm_plugin_Camera.dist;
	cam.transform.move(new iron_math_Vec4(-cam.transform.world.self._20,-cam.transform.world.self._21,-cam.transform.world.self._22),dist);
	cam.transform.rotate(new iron_math_Vec4(0,0,1),x);
	cam.transform.rotate(new iron_math_Vec4(cam.transform.world.self._00,cam.transform.world.self._01,cam.transform.world.self._02),y);
	cam.transform.move(new iron_math_Vec4(-cam.transform.world.self._20,-cam.transform.world.self._21,-cam.transform.world.self._22),-dist);
	arm_Context.ddirty = 2;
};
arm_util_ViewportUtil.zoom = function(f) {
	var cam = iron_Scene.active.camera;
	cam.transform.move(new iron_math_Vec4(-cam.transform.local.self._20,-cam.transform.local.self._21,-cam.transform.local.self._22),f);
	arm_plugin_Camera.dist -= f;
	arm_Context.ddirty = 2;
};
arm_util_ViewportUtil.updateCameraType = function(cameraType) {
	var cam = iron_Scene.active.cameras[0];
	var light = iron_Scene.active.lights[0];
	if(cameraType == 0) {
		cam.data.raw.ortho = null;
		light.visible = true;
	} else {
		var this1 = new Float32Array(4);
		var f32 = this1;
		var _this = cam.transform.world;
		var x = _this.self._30;
		var y = _this.self._31;
		var z = _this.self._32;
		var w = _this.self._33;
		if(w == null) {
			w = 1.0;
		}
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var _this_w = w;
		var f = cam.data.raw.fov * Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z) / 2.5;
		f32[0] = -2 * f;
		f32[1] = 2 * f;
		f32[2] = -2 * f * (arm_App.h() / arm_App.w());
		f32[3] = 2 * f * (arm_App.h() / arm_App.w());
		cam.data.raw.ortho = f32;
		light.visible = false;
	}
	cam.buildProjection();
	arm_Context.ddirty = 2;
};
var arm_ArmBridge = $hx_exports["arm"] = function() { };
$hxClasses["arm.ArmBridge"] = arm_ArmBridge;
arm_ArmBridge.__name__ = "arm.ArmBridge";
arm_ArmBridge.colorFromFloats = function(r,g,b,a) {
	return kha__$Color_Color_$Impl_$.fromFloats(r,g,b,a);
};
var zui_Ext = function() { };
$hxClasses["zui.Ext"] = zui_Ext;
zui_Ext.__name__ = "zui.Ext";
zui_Ext.inlineRadio = function(ui,handle,texts,align) {
	if(align == null) {
		align = 1;
	}
	if(!ui.isVisible(ui.t.ELEMENT_H * ui.ops.scaleFactor)) {
		ui.endElement();
		return handle.position;
	}
	if(ui.getReleased()) {
		if(++handle.position >= texts.length) {
			handle.position = 0;
		}
		handle.changed = ui.changed = true;
	} else {
		handle.changed = false;
	}
	var hover = ui.getHover();
	zui_Ext.drawInlineRadio(ui,texts[handle.position],hover,align);
	ui.endElement();
	return handle.position;
};
zui_Ext.drawInlineRadio = function(ui,text,hover,align) {
	if(align == null) {
		align = 1;
	}
	if(hover) {
		ui.g.set_color(ui.t.ACCENT_HOVER_COL);
		ui.g.fillRect(ui._x + ui.buttonOffsetY,ui._y + ui.buttonOffsetY,ui._w - ui.buttonOffsetY * 2,ui.t.BUTTON_H * ui.ops.scaleFactor);
	} else {
		ui.g.set_color(ui.t.ACCENT_COL);
		if(!ui.enabled) {
			ui.fadeColor();
		}
		ui.g.drawRect(ui._x + ui.buttonOffsetY,ui._y + ui.buttonOffsetY,ui._w - ui.buttonOffsetY * 2,ui.t.BUTTON_H * ui.ops.scaleFactor);
	}
	ui.g.set_color(ui.t.TEXT_COL);
	ui.drawString(ui.g,text,ui.t.TEXT_OFFSET * ui.ops.scaleFactor,0,align);
};
zui_Ext.colorWheel = function(ui,handle,alpha,w,rowAlign,colorPreview) {
	if(colorPreview == null) {
		colorPreview = true;
	}
	if(rowAlign == null) {
		rowAlign = false;
	}
	if(alpha == null) {
		alpha = false;
	}
	if(w == null) {
		w = ui._w;
	}
	zui_Ext.rgbToHsv(((handle.color & 16711680) >>> 16) * 0.00392156862745098,((handle.color & 65280) >>> 8) * 0.00392156862745098,(handle.color & 255) * 0.00392156862745098,zui_Ext.ar);
	var chue = zui_Ext.ar[0];
	var csat = zui_Ext.ar[1];
	var cval = zui_Ext.ar[2];
	var calpha = (handle.color >>> 24) * 0.00392156862745098;
	var px = ui._x;
	var py = ui._y;
	var scroll = ui.currentWindow != null && ui.currentWindow.scrollEnabled;
	if(!scroll) {
		w -= ui.t.SCROLL_W * ui.ops.scaleFactor | 0;
		px += (ui.t.SCROLL_W * ui.ops.scaleFactor | 0) / 2;
	}
	ui.image(ui.ops.color_wheel,kha__$Color_Color_$Impl_$.fromFloats(cval,cval,cval));
	var ph = ui._y - py;
	var ox = px + w / 2;
	var oy = py + ph / 2;
	var cw = w * 0.7;
	var cwh = cw / 2;
	var cx = ox;
	var cy = oy + csat * cwh;
	var theta = chue * (Math.PI * 2.0);
	var cx2 = Math.cos(theta) * (cx - ox) - Math.sin(theta) * (cy - oy) + ox;
	var cy2 = Math.sin(theta) * (cx - ox) + Math.cos(theta) * (cy - oy) + oy;
	cx = cx2;
	cy = cy2;
	ui.g.set_color(-16777216);
	ui.g.fillRect(cx - 3 * ui.ops.scaleFactor,cy - 3 * ui.ops.scaleFactor,6 * ui.ops.scaleFactor,6 * ui.ops.scaleFactor);
	ui.g.set_color(-1);
	ui.g.fillRect(cx - 2 * ui.ops.scaleFactor,cy - 2 * ui.ops.scaleFactor,4 * ui.ops.scaleFactor,4 * ui.ops.scaleFactor);
	if(rowAlign) {
		if(alpha) {
			ui.row([0.33333333333333331,0.33333333333333331,0.33333333333333331]);
		} else {
			ui.row([0.5,0.5]);
		}
	}
	var valHandle = handle.nest(0);
	valHandle.value = Math.round(cval * 100) / 100;
	cval = ui.slider(valHandle,"Value",0.0,1.0,true);
	if(valHandle.changed) {
		handle.changed = ui.changed = true;
	} else {
		handle.changed = false;
	}
	if(alpha) {
		var alphaHandle = handle.nest(1,{ value : Math.round(calpha * 100) / 100});
		calpha = ui.slider(alphaHandle,"Alpha",0.0,1.0,true);
		if(alphaHandle.changed) {
			handle.changed = ui.changed = true;
		}
	}
	var gx = ox + ui._windowX;
	var gy = oy + ui._windowY;
	if(ui.inputStarted && ui.getInputInRect(gx - cwh,gy - cwh,cw,cw)) {
		zui_Ext.wheelSelectedHande = handle;
	}
	if(ui.inputReleased) {
		zui_Ext.wheelSelectedHande = null;
	}
	if(ui.inputDown && zui_Ext.wheelSelectedHande == handle) {
		var vx = gx - ui.inputX;
		var vy = gy - ui.inputY;
		csat = Math.min(Math.sqrt(vx * vx + vy * vy),cwh) / cwh;
		var angle = Math.atan2(ui.inputX - gx,ui.inputY - gy);
		if(angle < 0) {
			angle = Math.PI + (Math.PI - Math.abs(angle));
		}
		angle = Math.PI * 2 - angle;
		chue = angle / (Math.PI * 2);
		handle.changed = ui.changed = true;
	}
	zui_Ext.hsvToRgb(chue,csat,cval,zui_Ext.ar);
	handle.color = kha__$Color_Color_$Impl_$.fromFloats(zui_Ext.ar[0],zui_Ext.ar[1],zui_Ext.ar[2],calpha);
	if(colorPreview) {
		ui.text("",2,handle.color);
	}
	return handle.color;
};
zui_Ext.textArea = function(ui,handle,align,editable) {
	if(editable == null) {
		editable = true;
	}
	if(align == null) {
		align = 0;
	}
	handle.text = StringTools.replace(handle.text,"\t","    ");
	var lines = handle.text.split("\n");
	var selected = ui.textSelectedHandle == handle;
	var cursorStartX = ui.cursorX;
	var keyPressed = selected && ui.isKeyPressed;
	ui.highlightOnSelect = false;
	ui.tabSwitchEnabled = false;
	ui.g.set_color(ui.t.SEPARATOR_COL);
	var g = ui.g;
	var x = ui._x + ui.buttonOffsetY;
	var y = ui._y + ui.buttonOffsetY;
	var w = ui._w - ui.buttonOffsetY * 2;
	var h = lines.length * (ui.t.ELEMENT_H * ui.ops.scaleFactor) - ui.buttonOffsetY * 2;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	g.fillRect(x,y - 1,w,h + 1);
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		if(!selected && ui.getHover() || selected && i == handle.position) {
			handle.position = i;
			handle.text = lines[i];
			ui.textInput(handle,"",align,editable);
			if(keyPressed && ui.key != 13) {
				lines[i] = ui.textSelected;
			}
		} else {
			ui.text(lines[i],align);
		}
		ui._y -= ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor;
	}
	ui._y += ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor;
	if(keyPressed) {
		if(ui.key == 40 && handle.position < lines.length - 1) {
			handle.position++;
		}
		if(ui.key == 38 && handle.position > 0) {
			handle.position--;
		}
		if(editable && ui.key == 13) {
			handle.position++;
			lines.splice(handle.position,0,HxOverrides.substr(lines[handle.position - 1],ui.cursorX,null));
			lines[handle.position - 1] = HxOverrides.substr(lines[handle.position - 1],0,ui.cursorX);
			ui.startTextEdit(handle);
			ui.cursorX = ui.highlightAnchor = 0;
		}
		if(editable && ui.key == 8 && cursorStartX == 0 && handle.position > 0) {
			handle.position--;
			ui.cursorX = ui.highlightAnchor = lines[handle.position].length;
			lines[handle.position] += lines[handle.position + 1];
			lines.splice(handle.position + 1,1);
		}
		ui.textSelected = lines[handle.position];
	}
	ui.highlightOnSelect = true;
	ui.tabSwitchEnabled = true;
	handle.text = lines.join("\n");
	return handle.text;
};
zui_Ext.hsvToRgb = function(cR,cG,cB,out) {
	var f = cR + 1.0;
	var px = Math.abs((f - (f | 0)) * 6.0 - 3.0);
	var f1 = cR + 0.66666666666666663;
	var py = Math.abs((f1 - (f1 | 0)) * 6.0 - 3.0);
	var f2 = cR + 0.33333333333333331;
	var pz = Math.abs((f2 - (f2 | 0)) * 6.0 - 3.0);
	out[0] = cB * (1.0 - cG + Math.min(Math.max(px - 1.0,0.0),1.0) * cG);
	out[1] = cB * (1.0 - cG + Math.min(Math.max(py - 1.0,0.0),1.0) * cG);
	out[2] = cB * (1.0 - cG + Math.min(Math.max(pz - 1.0,0.0),1.0) * cG);
};
zui_Ext.rgbToHsv = function(cR,cG,cB,out) {
	var a = cG < cB ? 0.0 : 1.0;
	var px = cB * (1.0 - a) + cG * a;
	var a1 = cG < cB ? 0.0 : 1.0;
	var py = cG * (1.0 - a1) + cB * a1;
	var a2 = cG < cB ? 0.0 : 1.0;
	var pz = -1.0 * (1.0 - a2) + 0.0 * a2;
	var a3 = cG < cB ? 0.0 : 1.0;
	var pw = 0.66666666666666663 * (1.0 - a3) + -0.33333333333333331 * a3;
	var a4 = cR < px ? 0.0 : 1.0;
	var qx = px * (1.0 - a4) + cR * a4;
	var a5 = cR < px ? 0.0 : 1.0;
	var qy = py * (1.0 - a5) + py * a5;
	var a6 = cR < px ? 0.0 : 1.0;
	var qz = pw * (1.0 - a6) + pz * a6;
	var a7 = cR < px ? 0.0 : 1.0;
	var qw = cR * (1.0 - a7) + px * a7;
	var d = qx - Math.min(qw,qy);
	out[0] = Math.abs(qz + (qw - qy) / (6.0 * d + 1.0e-10));
	out[1] = d / (qx + 1.0e-10);
	out[2] = qx;
};
var arm_ZuiBridge = $hx_exports["zui"] = function() { };
$hxClasses["arm.ZuiBridge"] = arm_ZuiBridge;
arm_ZuiBridge.__name__ = "arm.ZuiBridge";
var arm_Keep = function() { };
$hxClasses["arm.Keep"] = arm_Keep;
arm_Keep.__name__ = "arm.Keep";
arm_Keep.keep = function() {
	var x = iron_system_ArmPack.decode;
	var x1 = iron_system_ArmPack.encode;
};
var arm_Strings = function() { };
$hxClasses["arm.Strings"] = arm_Strings;
arm_Strings.__name__ = "arm.Strings";
var arm_Translator = function() { };
$hxClasses["arm.Translator"] = arm_Translator;
arm_Translator.__name__ = "arm.Translator";
arm_Translator.tr = function(id,vars) {
	var translation = id;
	var tmp;
	if(arm_Config.raw.locale != "en") {
		var _this = arm_Translator.translations;
		tmp = __map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id);
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = arm_Translator.translations;
		translation = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
	}
	if(vars != null) {
		var _g = new haxe_iterators_MapKeyValueIterator(vars);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			translation = StringTools.replace(translation,"{" + key + "}",value == null ? "null" : "" + value);
		}
	}
	return translation;
};
arm_Translator.loadTranslations = function(newLocale) {
	if(newLocale == "system") {
		arm_Config.raw.locale = Krom.language();
	}
	if(arm_Config.raw.locale != "en" && arm_Translator.getSupportedLocales().indexOf(newLocale) == -1) {
		arm_Config.raw.locale = "en";
	}
	if(arm_Config.raw.locale == "en") {
		var _this = arm_Translator.translations;
		_this.h = { };
		_this.rh = null;
		return;
	}
	var translationJson = haxe_io_Bytes.ofData(Krom.loadBlob("data/locale/" + arm_Config.raw.locale + ".json")).toString();
	var data = JSON.parse(translationJson);
	var access = data;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g1 = { value : _g_access[key], key : key};
		var key1 = _g1.key;
		var value = _g1.value;
		var _this1 = arm_Translator.translations;
		var key2 = key1 == null ? "null" : "" + key1;
		if(__map_reserved[key2] != null) {
			_this1.setReserved(key2,value);
		} else {
			_this1.h[key2] = value;
		}
	}
	var _g = [];
	var _g11 = 32;
	while(_g11 < 383) {
		var i = _g11++;
		_g.push(i);
	}
	kha_graphics2_Graphics.fontGlyphs = _g;
};
arm_Translator.getSupportedLocales = function() {
	var locales = ["system","en"];
	var _g = 0;
	var _g1 = arm_sys_File.readDirectory(arm_sys_Path.data() + arm_sys_Path.sep + "locale");
	while(_g < _g1.length) {
		var localeFilename = _g1[_g];
		++_g;
		locales.push(HxOverrides.substr(localeFilename,0,-5));
	}
	return locales;
};
var arm_data_BrushSlot = function(c) {
	this.id = 0;
	this.previewReady = false;
	this.imageIcon = null;
	this.image = null;
	this.nodes = new zui_Nodes();
	var _g = 0;
	var _g1 = arm_Project.brushes;
	while(_g < _g1.length) {
		var brush = _g1[_g];
		++_g;
		if(brush.id >= this.id) {
			this.id = brush.id + 1;
		}
	}
	if(c == null) {
		if(arm_data_BrushSlot.defaultCanvas == null) {
			iron_data_Data.getBlob("default_brush.json",function(b) {
				arm_data_BrushSlot.defaultCanvas = b.toString();
			});
		}
		this.canvas = JSON.parse(arm_data_BrushSlot.defaultCanvas);
	} else {
		this.canvas = c;
	}
	this.canvas.name = "Brush " + (this.id + 1);
};
$hxClasses["arm.data.BrushSlot"] = arm_data_BrushSlot;
arm_data_BrushSlot.__name__ = "arm.data.BrushSlot";
arm_data_BrushSlot.prototype = {
	__class__: arm_data_BrushSlot
};
var arm_data_ConstData = function() { };
$hxClasses["arm.data.ConstData"] = arm_data_ConstData;
arm_data_ConstData.__name__ = "arm.data.ConstData";
arm_data_ConstData.initLTC = function() {
	iron_data_Data.getBlob("ltc_mat.arm",function(ltc_mat) {
		iron_data_Data.getBlob("ltc_mag.arm",function(ltc_mag) {
			var i = new haxe_io_BytesInput(ltc_mat.toBytes());
			i.set_bigEndian(false);
			arm_data_ConstData.ltcMatTex = kha_Image.fromBytes(iron_system_ArmPack.read(i),64,64,2);
			var i1 = new haxe_io_BytesInput(ltc_mag.toBytes());
			i1.set_bigEndian(false);
			arm_data_ConstData.ltcMagTex = kha_Image.fromBytes(iron_system_ArmPack.read(i1),64,64,5);
		});
	});
};
var arm_data_LayerSlot = function(ext,isGroup) {
	if(isGroup == null) {
		isGroup = false;
	}
	if(ext == null) {
		ext = "";
	}
	this.paintSubs = true;
	this.paintEmis = true;
	this.paintHeight = true;
	this.paintNor = true;
	this.paintMet = true;
	this.paintRough = true;
	this.paintOcc = true;
	this.paintOpac = true;
	this.paintBase = true;
	this.uvType = 0;
	this.angle = 0.0;
	this.scale = 1.0;
	this.objectMask = 0;
	this.blending = 0;
	this.show_panel = false;
	this.material_mask = null;
	this.maskOpacity = 1.0;
	this.texpaint_mask = null;
	this.texpaint_preview = null;
	this.texpaint_pack = null;
	this.texpaint_nor = null;
	this.texpaint = null;
	this.parent = null;
	this.ext = "";
	this.visible = true;
	this.id = 0;
	if(ext == "") {
		this.id = 0;
		var _g = 0;
		var _g1 = arm_Project.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.id >= this.id) {
				this.id = l.id + 1;
			}
		}
		ext = this.id + "";
	}
	this.ext = ext;
	if(isGroup) {
		this.name = "Group " + (this.id + 1);
		return;
	}
	this.name = "Layer " + (this.id + 1);
	var format = arm_App.bitsHandle.position == 0 ? "RGBA32" : arm_App.bitsHandle.position == 1 ? "RGBA64" : "RGBA128";
	var t = new iron_RenderTargetRaw();
	t.name = "texpaint" + ext;
	t.width = arm_Config.getTextureRes();
	t.height = arm_Config.getTextureRes();
	t.format = format;
	this.texpaint = iron_RenderPath.active.createRenderTarget(t).image;
	var t1 = new iron_RenderTargetRaw();
	t1.name = "texpaint_nor" + ext;
	t1.width = arm_Config.getTextureRes();
	t1.height = arm_Config.getTextureRes();
	t1.format = format;
	this.texpaint_nor = iron_RenderPath.active.createRenderTarget(t1).image;
	var t2 = new iron_RenderTargetRaw();
	t2.name = "texpaint_pack" + ext;
	t2.width = arm_Config.getTextureRes();
	t2.height = arm_Config.getTextureRes();
	t2.format = format;
	this.texpaint_pack = iron_RenderPath.active.createRenderTarget(t2).image;
	this.texpaint_preview = kha_Image.createRenderTarget(200,200,0);
};
$hxClasses["arm.data.LayerSlot"] = arm_data_LayerSlot;
arm_data_LayerSlot.__name__ = "arm.data.LayerSlot";
arm_data_LayerSlot.prototype = {
	'delete': function() {
		this.unload();
		var children = this.getChildren();
		if(children != null) {
			var _g = 0;
			while(_g < children.length) {
				var c = children[_g];
				++_g;
				c.parent = null;
			}
		}
		var lpos = arm_Project.layers.indexOf(this);
		HxOverrides.remove(arm_Project.layers,this);
		arm_Context.setLayer(arm_Project.layers[lpos > 0 ? lpos - 1 : 0]);
	}
	,unload: function() {
		if(this.texpaint == null) {
			return;
		}
		this.texpaint.unload();
		this.texpaint_nor.unload();
		this.texpaint_pack.unload();
		iron_RenderPath.active.renderTargets.remove("texpaint" + this.ext);
		iron_RenderPath.active.renderTargets.remove("texpaint_nor" + this.ext);
		iron_RenderPath.active.renderTargets.remove("texpaint_pack" + this.ext);
		this.texpaint_preview.unload();
		this.deleteMask();
	}
	,swap: function(other) {
		var key = "texpaint" + this.ext;
		var _this = iron_RenderPath.active.renderTargets;
		(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).image = other.texpaint;
		var key1 = "texpaint_nor" + this.ext;
		var _this1 = iron_RenderPath.active.renderTargets;
		(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).image = other.texpaint_nor;
		var key2 = "texpaint_pack" + this.ext;
		var _this2 = iron_RenderPath.active.renderTargets;
		(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]).image = other.texpaint_pack;
		var key3 = "texpaint" + other.ext;
		var _this3 = iron_RenderPath.active.renderTargets;
		(__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]).image = this.texpaint;
		var key4 = "texpaint_nor" + other.ext;
		var _this4 = iron_RenderPath.active.renderTargets;
		(__map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4]).image = this.texpaint_nor;
		var key5 = "texpaint_pack" + other.ext;
		var _this5 = iron_RenderPath.active.renderTargets;
		(__map_reserved[key5] != null ? _this5.getReserved(key5) : _this5.h[key5]).image = this.texpaint_pack;
		var _texpaint = this.texpaint;
		var _texpaint_nor = this.texpaint_nor;
		var _texpaint_pack = this.texpaint_pack;
		this.texpaint = other.texpaint;
		this.texpaint_nor = other.texpaint_nor;
		this.texpaint_pack = other.texpaint_pack;
		other.texpaint = _texpaint;
		other.texpaint_nor = _texpaint_nor;
		other.texpaint_pack = _texpaint_pack;
	}
	,swapMask: function(other) {
		var key = "texpaint_mask" + this.ext;
		var _this = iron_RenderPath.active.renderTargets;
		(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).image = other.texpaint_mask;
		var key1 = "texpaint_mask" + other.ext;
		var _this1 = iron_RenderPath.active.renderTargets;
		(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).image = this.texpaint_mask;
		var _texpaint_mask = this.texpaint_mask;
		this.texpaint_mask = other.texpaint_mask;
		other.texpaint_mask = _texpaint_mask;
	}
	,createMask: function(color,clear,image) {
		if(clear == null) {
			clear = true;
		}
		if(this.texpaint_mask != null) {
			return;
		}
		var t = new iron_RenderTargetRaw();
		t.name = "texpaint_mask" + this.ext;
		t.width = arm_Config.getTextureRes();
		t.height = arm_Config.getTextureRes();
		t.format = "R8";
		this.texpaint_mask = iron_RenderPath.active.createRenderTarget(t).image;
		this.texpaint_mask_preview = kha_Image.createRenderTarget(200,200,1);
		if(clear) {
			this.createMaskColor = color;
			this.createMaskImage = image;
			iron_App.notifyOnRender($bind(this,this.clearMask));
		}
	}
	,clearMask: function(g) {
		g.end();
		this.texpaint_mask.get_g2().begin();
		if(this.createMaskImage != null) {
			this.texpaint_mask.get_g2().drawScaledImage(this.createMaskImage,0,0,this.texpaint_mask.get_width(),this.texpaint_mask.get_height());
		} else {
			this.texpaint_mask.get_g2().clear(this.createMaskColor);
		}
		this.texpaint_mask.get_g2().end();
		g.begin();
		iron_App.removeRender($bind(this,this.clearMask));
		arm_Context.layerPreviewDirty = true;
		this.createMaskColor = 0;
		this.createMaskImage = null;
	}
	,deleteMask: function() {
		if(this.texpaint_mask == null) {
			return;
		}
		this.texpaint_mask.unload();
		iron_RenderPath.active.renderTargets.remove("texpaint_mask" + this.ext);
		this.texpaint_mask = null;
		this.texpaint_mask_preview.unload();
	}
	,applyMask: function() {
		if(this.texpaint_mask == null) {
			return;
		}
		if(arm_Layers.pipeMerge == null) {
			arm_Layers.makePipe();
		}
		arm_Layers.makeTempImg();
		arm_Layers.imga.get_g2().begin(false);
		arm_Layers.imga.get_g2().set_pipeline(arm_Layers.pipeCopy);
		arm_Layers.imga.get_g2().drawImage(this.texpaint,0,0);
		arm_Layers.imga.get_g2().set_pipeline(null);
		arm_Layers.imga.get_g2().end();
		if(iron_data_ConstData.screenAlignedVB == null) {
			iron_data_ConstData.createScreenAlignedData();
		}
		this.texpaint.get_g4().begin();
		this.texpaint.get_g4().setPipeline(arm_Layers.pipeMask);
		this.texpaint.get_g4().setTexture(arm_Layers.tex0Mask,arm_Layers.imga);
		this.texpaint.get_g4().setTexture(arm_Layers.texaMask,this.texpaint_mask);
		this.texpaint.get_g4().setVertexBuffer(iron_data_ConstData.screenAlignedVB);
		this.texpaint.get_g4().setIndexBuffer(iron_data_ConstData.screenAlignedIB);
		this.texpaint.get_g4().drawIndexedVertices();
		this.texpaint.get_g4().end();
		this.deleteMask();
	}
	,duplicate: function() {
		var layers = arm_Project.layers;
		var i = 0;
		while(i++ < layers.length) if(layers[i] == this) {
			break;
		}
		++i;
		var l = new arm_data_LayerSlot();
		layers.splice(i,0,l);
		if(arm_Layers.pipeMerge == null) {
			arm_Layers.makePipe();
		}
		l.texpaint.get_g2().begin(false);
		l.texpaint.get_g2().set_pipeline(arm_Layers.pipeCopy);
		l.texpaint.get_g2().drawImage(this.texpaint,0,0);
		l.texpaint.get_g2().set_pipeline(null);
		l.texpaint.get_g2().end();
		l.texpaint_nor.get_g2().begin(false);
		l.texpaint_nor.get_g2().set_pipeline(arm_Layers.pipeCopy);
		l.texpaint_nor.get_g2().drawImage(this.texpaint_nor,0,0);
		l.texpaint_nor.get_g2().set_pipeline(null);
		l.texpaint_nor.get_g2().end();
		l.texpaint_pack.get_g2().begin(false);
		l.texpaint_pack.get_g2().set_pipeline(arm_Layers.pipeCopy);
		l.texpaint_pack.get_g2().drawImage(this.texpaint_pack,0,0);
		l.texpaint_pack.get_g2().set_pipeline(null);
		l.texpaint_pack.get_g2().end();
		l.texpaint_preview.get_g2().begin(true,0);
		l.texpaint_preview.get_g2().set_pipeline(arm_Layers.pipeCopy);
		l.texpaint_preview.get_g2().drawScaledImage(this.texpaint_preview,0,0,this.texpaint_preview.get_width(),this.texpaint_preview.get_height());
		l.texpaint_preview.get_g2().set_pipeline(null);
		l.texpaint_preview.get_g2().end();
		if(this.texpaint_mask != null) {
			l.createMask(0,false);
			l.texpaint_mask.get_g2().begin(false);
			l.texpaint_mask.get_g2().set_pipeline(arm_Layers.pipeCopy);
			l.texpaint_mask.get_g2().drawImage(this.texpaint_mask,0,0);
			l.texpaint_mask.get_g2().set_pipeline(null);
			l.texpaint_mask.get_g2().end();
			l.texpaint_mask_preview.get_g2().begin(true,0);
			l.texpaint_mask_preview.get_g2().set_pipeline(arm_Layers.pipeCopy);
			l.texpaint_mask_preview.get_g2().drawScaledImage(this.texpaint_mask_preview,0,0,this.texpaint_mask_preview.get_width(),this.texpaint_mask_preview.get_height());
			l.texpaint_mask_preview.get_g2().set_pipeline(null);
			l.texpaint_mask_preview.get_g2().end();
		}
		l.visible = this.visible;
		l.maskOpacity = this.maskOpacity;
		l.material_mask = this.material_mask;
		l.objectMask = this.objectMask;
		l.blending = this.blending;
		l.paintBase = this.paintBase;
		l.paintOpac = this.paintOpac;
		l.paintOcc = this.paintOcc;
		l.paintRough = this.paintRough;
		l.paintMet = this.paintMet;
		l.paintNor = this.paintNor;
		l.paintHeight = this.paintHeight;
		l.paintEmis = this.paintEmis;
		l.paintSubs = this.paintSubs;
		return l;
	}
	,resizeAndSetBits: function() {
		var format = arm_App.bitsHandle.position == 0 ? 0 : arm_App.bitsHandle.position == 1 ? 4 : 2;
		var res = arm_Config.getTextureRes();
		var rts = iron_RenderPath.active.renderTargets;
		var texpaint = this.texpaint;
		var texpaint_nor = this.texpaint_nor;
		var texpaint_pack = this.texpaint_pack;
		this.texpaint = kha_Image.createRenderTarget(res,res,format);
		this.texpaint_nor = kha_Image.createRenderTarget(res,res,format);
		this.texpaint_pack = kha_Image.createRenderTarget(res,res,format);
		if(arm_Layers.pipeMerge == null) {
			arm_Layers.makePipe();
		}
		this.texpaint.get_g2().begin(false);
		this.texpaint.get_g2().set_pipeline(arm_Layers.pipeCopy);
		this.texpaint.get_g2().drawScaledImage(texpaint,0,0,res,res);
		this.texpaint.get_g2().set_pipeline(null);
		this.texpaint.get_g2().end();
		this.texpaint_nor.get_g2().begin(false);
		this.texpaint_nor.get_g2().set_pipeline(arm_Layers.pipeCopy);
		this.texpaint_nor.get_g2().drawScaledImage(texpaint_nor,0,0,res,res);
		this.texpaint_nor.get_g2().set_pipeline(null);
		this.texpaint_nor.get_g2().end();
		this.texpaint_pack.get_g2().begin(false);
		this.texpaint_pack.get_g2().set_pipeline(arm_Layers.pipeCopy);
		this.texpaint_pack.get_g2().drawScaledImage(texpaint_pack,0,0,res,res);
		this.texpaint_pack.get_g2().set_pipeline(null);
		this.texpaint_pack.get_g2().end();
		iron_App.notifyOnInit(function() {
			texpaint.unload();
			texpaint_nor.unload();
			texpaint_pack.unload();
		});
		var key = "texpaint" + this.ext;
		(__map_reserved[key] != null ? rts.getReserved(key) : rts.h[key]).image = this.texpaint;
		var key1 = "texpaint_nor" + this.ext;
		(__map_reserved[key1] != null ? rts.getReserved(key1) : rts.h[key1]).image = this.texpaint_nor;
		var key2 = "texpaint_pack" + this.ext;
		(__map_reserved[key2] != null ? rts.getReserved(key2) : rts.h[key2]).image = this.texpaint_pack;
		if(this.texpaint_mask != null && this.texpaint_mask.get_width() != res) {
			var texpaint_mask = this.texpaint_mask;
			this.texpaint_mask = kha_Image.createRenderTarget(res,res,1);
			this.texpaint_mask.get_g2().begin(false);
			this.texpaint_mask.get_g2().set_pipeline(arm_Layers.pipeCopy);
			this.texpaint_mask.get_g2().drawScaledImage(texpaint_mask,0,0,res,res);
			this.texpaint_mask.get_g2().set_pipeline(null);
			this.texpaint_mask.get_g2().end();
			iron_App.notifyOnInit(function() {
				texpaint_mask.unload();
			});
			var key3 = "texpaint_mask" + this.ext;
			(__map_reserved[key3] != null ? rts.getReserved(key3) : rts.h[key3]).image = this.texpaint_mask;
		}
	}
	,clear: function(g) {
		g.end();
		this.texpaint.get_g4().begin();
		this.texpaint.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(0.0,0.0,0.0,0.0));
		this.texpaint.get_g4().end();
		this.texpaint_nor.get_g4().begin();
		this.texpaint_nor.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(0.5,0.5,1.0,0.0));
		this.texpaint_nor.get_g4().end();
		this.texpaint_pack.get_g4().begin();
		this.texpaint_pack.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(1.0,0.0,0.0,0.0));
		this.texpaint_pack.get_g4().end();
		g.begin();
		iron_App.removeRender($bind(this,this.clear));
	}
	,toFillLayer: function() {
		arm_Context.setLayer(this);
		this.material_mask = arm_Context.material;
		arm_Layers.updateFillLayers(4);
		var _parse = null;
		_parse = function(_) {
			arm_node_MaterialParser.parsePaintMaterial();
			arm_Context.layerPreviewDirty = true;
			arm_ui_UISidebar.inst.hwnd.redraws = 2;
			iron_App.removeRender(_parse);
		};
		iron_App.notifyOnRender(_parse);
	}
	,toPaintLayer: function() {
		arm_Context.setLayer(this);
		this.material_mask = null;
		arm_node_MaterialParser.parsePaintMaterial();
		arm_Context.layerPreviewDirty = true;
		arm_ui_UISidebar.inst.hwnd.redraws = 2;
	}
	,isVisible: function() {
		if(this.visible) {
			if(this.parent != null) {
				return this.parent.visible;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,getChildren: function() {
		var children = null;
		var _g = 0;
		var _g1 = arm_Project.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.parent == this) {
				if(children == null) {
					children = [];
				}
				children.push(l);
			}
		}
		return children;
	}
	,__class__: arm_data_LayerSlot
};
var arm_data_MaterialSlot = function(m,c) {
	this.paintSubs = true;
	this.paintEmis = true;
	this.paintHeight = true;
	this.paintNor = true;
	this.paintMet = true;
	this.paintRough = true;
	this.paintOcc = true;
	this.paintOpac = true;
	this.paintBase = true;
	this.id = 0;
	this.previewReady = false;
	this.imageIcon = null;
	this.image = null;
	this.nodes = new zui_Nodes();
	var _g = 0;
	var _g1 = arm_Project.materials;
	while(_g < _g1.length) {
		var mat = _g1[_g];
		++_g;
		if(mat.id >= this.id) {
			this.id = mat.id + 1;
		}
	}
	this.data = m;
	var w = 256;
	var wIcon = 50;
	this.image = kha_Image.createRenderTarget(w,w);
	this.imageIcon = kha_Image.createRenderTarget(wIcon,wIcon);
	if(c == null) {
		if(arm_data_MaterialSlot.defaultCanvas == null) {
			iron_data_Data.getBlob("default_material.json",function(b) {
				arm_data_MaterialSlot.defaultCanvas = b.toString();
			});
		}
		this.canvas = JSON.parse(arm_data_MaterialSlot.defaultCanvas);
	} else {
		this.canvas = c;
	}
	this.canvas.name = "Material " + (this.id + 1);
};
$hxClasses["arm.data.MaterialSlot"] = arm_data_MaterialSlot;
arm_data_MaterialSlot.__name__ = "arm.data.MaterialSlot";
arm_data_MaterialSlot.prototype = {
	unload: function() {
		this.image.unload();
		this.imageIcon.unload();
	}
	,__class__: arm_data_MaterialSlot
};
var arm_format_BlendParser = function(blob) {
	this.map = new haxe_ds_IntMap();
	this.dna = null;
	this.blocks = [];
	this.blob = blob;
	this.pos = 0;
	if(this.readChars(7) != "BLENDER") {
		var input = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(blob.toBytes());
		var output = arm_format_pako_Pako.inflate(input);
		this.blob = kha_Blob.fromBytes(haxe_io_Bytes.ofData(output.buffer));
		this.pos = 0;
		if(this.readChars(7) != "BLENDER") {
			return;
		}
	}
	this.parse();
};
$hxClasses["arm.format.BlendParser"] = arm_format_BlendParser;
arm_format_BlendParser.__name__ = "arm.format.BlendParser";
arm_format_BlendParser.getStruct = function(dna,typeIndex) {
	var _g = 0;
	var _g1 = dna.structs;
	while(_g < _g1.length) {
		var ds = _g1[_g];
		++_g;
		if(ds.type == typeIndex) {
			return ds;
		}
	}
	return null;
};
arm_format_BlendParser.getTypeIndex = function(dna,type) {
	var _g = 0;
	var _g1 = dna.types.length;
	while(_g < _g1) {
		var i = _g++;
		if(type == dna.types[i]) {
			return i;
		}
	}
	return -1;
};
arm_format_BlendParser.prototype = {
	get: function(type) {
		if(this.dna == null) {
			return null;
		}
		var typeIndex = arm_format_BlendParser.getTypeIndex(this.dna,type);
		if(typeIndex == -1) {
			return null;
		}
		var ds = arm_format_BlendParser.getStruct(this.dna,typeIndex);
		var handles = [];
		var _g = 0;
		var _g1 = this.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.dna.structs[b.sdnaIndex].type == typeIndex) {
				var h = new arm_format_Handle();
				handles.push(h);
				h.block = b;
				h.ds = ds;
			}
		}
		return handles;
	}
	,parse: function() {
		this.pointerSize = this.readChar() == "_" ? 4 : 8;
		this.littleEndian = this.readChar() == "v";
		if(this.littleEndian) {
			this.read16 = $bind(this,this.read16LE);
			this.read32 = $bind(this,this.read32LE);
			this.read64 = $bind(this,this.read64LE);
			this.readf32 = $bind(this,this.readf32LE);
		} else {
			this.read16 = $bind(this,this.read16BE);
			this.read32 = $bind(this,this.read32BE);
			this.read64 = $bind(this,this.read64BE);
			this.readf32 = $bind(this,this.readf32BE);
		}
		this.version = this.readChars(3);
		while(this.pos < this.blob.get_length()) {
			this.align();
			var b = new arm_format_Block();
			b.code = this.readChars(4);
			if(b.code == "ENDB") {
				break;
			}
			this.blocks.push(b);
			b.blend = this;
			b.size = this.read32();
			var addr = this.readPointer();
			if(!this.map.h.hasOwnProperty(addr.high)) {
				var this1 = this.map;
				var key = addr.high;
				var value = new haxe_ds_IntMap();
				this1.h[key] = value;
			}
			this.map.h[addr.high].h[addr.low] = b;
			b.sdnaIndex = this.read32();
			b.count = this.read32();
			b.pos = this.pos;
			if(b.code == "DNA1") {
				this.dna = new arm_format_Dna();
				var id = this.readChars(4);
				var nameId = this.readChars(4);
				var namesCount = this.read32();
				var _g = 0;
				var _g1 = namesCount;
				while(_g < _g1) {
					var i = _g++;
					this.dna.names.push(this.readString());
				}
				this.align();
				var typeId = this.readChars(4);
				var typesCount = this.read32();
				var _g2 = 0;
				var _g3 = typesCount;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.dna.types.push(this.readString());
				}
				this.align();
				var lenId = this.readChars(4);
				var _g4 = 0;
				var _g5 = typesCount;
				while(_g4 < _g5) {
					var i2 = _g4++;
					this.dna.typesLength.push(this.read16());
				}
				this.align();
				var structId = this.readChars(4);
				var structCount = this.read32();
				var _g6 = 0;
				var _g7 = structCount;
				while(_g6 < _g7) {
					var i3 = _g6++;
					var ds = new arm_format_DnaStruct();
					this.dna.structs.push(ds);
					ds.dna = this.dna;
					ds.type = this.read16();
					var fieldCount = this.read16();
					if(fieldCount > 0) {
						ds.fieldTypes = [];
						ds.fieldNames = [];
						var _g61 = 0;
						var _g71 = fieldCount;
						while(_g61 < _g71) {
							var j = _g61++;
							ds.fieldTypes.push(this.read16());
							ds.fieldNames.push(this.read16());
						}
					}
				}
			} else {
				this.pos += b.size;
			}
		}
	}
	,align: function() {
		var mod = this.pos % 4;
		if(mod > 0) {
			this.pos += 4 - mod;
		}
	}
	,read8: function() {
		var i = this.blob.readU8(this.pos);
		this.pos += 1;
		return i;
	}
	,read16LE: function() {
		var i = this.blob.readS16LE(this.pos);
		this.pos += 2;
		return i;
	}
	,read32LE: function() {
		var i = this.blob.readS32LE(this.pos);
		this.pos += 4;
		return i;
	}
	,read64LE: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(this.read32(),this.read32());
		return this1;
	}
	,readf32LE: function() {
		var f = this.blob.readF32LE(this.pos);
		this.pos += 4;
		return f;
	}
	,read16BE: function() {
		var i = this.blob.readS16BE(this.pos);
		this.pos += 2;
		return i;
	}
	,read32BE: function() {
		var i = this.blob.readS32BE(this.pos);
		this.pos += 4;
		return i;
	}
	,read64BE: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(this.read32(),this.read32());
		return this1;
	}
	,readf32BE: function() {
		var f = this.blob.readF32BE(this.pos);
		this.pos += 4;
		return f;
	}
	,read8array: function(len) {
		var this1 = new Int32Array(len);
		var ar = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			ar[i] = this.read8();
		}
		return ar;
	}
	,read16array: function(len) {
		var this1 = new Int32Array(len);
		var ar = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			ar[i] = this.read16();
		}
		return ar;
	}
	,read32array: function(len) {
		var this1 = new Int32Array(len);
		var ar = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			ar[i] = this.read32();
		}
		return ar;
	}
	,readf32array: function(len) {
		var this1 = new Float32Array(len);
		var ar = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			ar[i] = this.readf32();
		}
		return ar;
	}
	,readString: function() {
		var s = "";
		while(true) {
			var ch = this.read8();
			if(ch == 0) {
				break;
			}
			s += String.fromCodePoint(ch);
		}
		return s;
	}
	,readChars: function(len) {
		var s = "";
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			s += this.readChar();
		}
		return s;
	}
	,readChar: function() {
		var code = this.read8();
		return String.fromCodePoint(code);
	}
	,readPointer: function() {
		if(this.pointerSize == 4) {
			var x = this.read32();
			var this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
			return this1;
		} else {
			return this.read64();
		}
	}
	,__class__: arm_format_BlendParser
};
var arm_format_Block = function() {
};
$hxClasses["arm.format.Block"] = arm_format_Block;
arm_format_Block.__name__ = "arm.format.Block";
arm_format_Block.prototype = {
	__class__: arm_format_Block
};
var arm_format_Dna = function() {
	this.structs = [];
	this.typesLength = [];
	this.types = [];
	this.names = [];
};
$hxClasses["arm.format.Dna"] = arm_format_Dna;
arm_format_Dna.__name__ = "arm.format.Dna";
arm_format_Dna.prototype = {
	__class__: arm_format_Dna
};
var arm_format_DnaStruct = function() {
};
$hxClasses["arm.format.DnaStruct"] = arm_format_DnaStruct;
arm_format_DnaStruct.__name__ = "arm.format.DnaStruct";
arm_format_DnaStruct.prototype = {
	__class__: arm_format_DnaStruct
};
var arm_format_Handle = function() {
	this.offset = 0;
};
$hxClasses["arm.format.Handle"] = arm_format_Handle;
arm_format_Handle.__name__ = "arm.format.Handle";
arm_format_Handle.prototype = {
	getSize: function(index) {
		var nameIndex = this.ds.fieldNames[index];
		var typeIndex = this.ds.fieldTypes[index];
		var dna = this.ds.dna;
		var n = dna.names[nameIndex];
		var size = 0;
		if(n.indexOf("*") >= 0) {
			size = this.block.blend.pointerSize;
		} else {
			size = dna.typesLength[typeIndex];
		}
		if(n.indexOf("[") > 0) {
			size *= this.getArrayLen(n);
		}
		return size;
	}
	,baseName: function(s) {
		while(s.charAt(0) == "*") s = s.substring(1,s.length);
		if(s.charAt(s.length - 1) == "]") {
			s = s.substring(0,s.indexOf("["));
		}
		return s;
	}
	,getArrayLen: function(s) {
		return Std.parseInt(s.substring(s.indexOf("[") + 1,s.indexOf("]")));
	}
	,get: function(name,index,asType,arrayLen) {
		if(arrayLen == null) {
			arrayLen = 0;
		}
		if(index == null) {
			index = 0;
		}
		var dna = this.ds.dna;
		var _g = 0;
		var _g1 = this.ds.fieldNames.length;
		while(_g < _g1) {
			var i = _g++;
			var nameIndex = this.ds.fieldNames[i];
			var dnaName = dna.names[nameIndex];
			if(name == this.baseName(dnaName)) {
				var typeIndex = this.ds.fieldTypes[i];
				var type = dna.types[typeIndex];
				var newOffset = this.offset;
				var _g2 = 0;
				var _g11 = i;
				while(_g2 < _g11) {
					var j = _g2++;
					newOffset += this.getSize(j);
				}
				if(asType != null) {
					var _g21 = 0;
					var _g3 = dna.types.length;
					while(_g21 < _g3) {
						var i1 = _g21++;
						if(dna.types[i1] == asType) {
							typeIndex = i1;
							break;
						}
					}
				}
				if(typeIndex < 12) {
					var blend = this.block.blend;
					blend.pos = this.block.pos + newOffset;
					var isArray = dnaName.charAt(dnaName.length - 1) == "]";
					var len = isArray ? arrayLen > 0 ? arrayLen : this.getArrayLen(dnaName) : 1;
					switch(type) {
					case "char":
						if(isArray) {
							return blend.readString();
						} else {
							return blend.read8();
						}
						break;
					case "double":
						return 0;
					case "float":
						if(isArray) {
							return blend.readf32array(len);
						} else {
							return blend.readf32();
						}
						break;
					case "int":
						if(isArray) {
							return blend.read32array(len);
						} else {
							return blend.read32();
						}
						break;
					case "int64_t":
						return blend.read64();
					case "long":
						if(isArray) {
							return blend.read32array(len);
						} else {
							return blend.read32();
						}
						break;
					case "short":
						if(isArray) {
							return blend.read16array(len);
						} else {
							return blend.read16();
						}
						break;
					case "uchar":
						if(isArray) {
							return blend.read8array(len);
						} else {
							return blend.read8();
						}
						break;
					case "uint64_t":
						return blend.read64();
					case "ulong":
						if(isArray) {
							return blend.read32array(len);
						} else {
							return blend.read32();
						}
						break;
					case "ushort":
						if(isArray) {
							return blend.read16array(len);
						} else {
							return blend.read16();
						}
						break;
					case "void":
						return 0;
					}
				}
				var h = new arm_format_Handle();
				h.ds = arm_format_BlendParser.getStruct(dna,typeIndex);
				var isPointer = dnaName.charAt(0) == "*";
				if(isPointer) {
					this.block.blend.pos = this.block.pos + newOffset;
					var addr = this.block.blend.readPointer();
					if(this.block.blend.map.h.hasOwnProperty(addr.high)) {
						h.block = this.block.blend.map.h[addr.high].h[addr.low];
					} else {
						h.block = this.block;
					}
					h.offset = 0;
				} else {
					h.block = this.block;
					h.offset = newOffset;
				}
				h.offset += dna.typesLength[typeIndex] * index;
				return h;
			}
		}
		return null;
	}
	,__class__: arm_format_Handle
};
var arm_format_ExrWriter = function(out,width,height,src,bits,type,off) {
	if(off == null) {
		off = 0;
	}
	if(type == null) {
		type = 1;
	}
	if(bits == null) {
		bits = 16;
	}
	out.writeByte(118);
	out.writeByte(47);
	out.writeByte(49);
	out.writeByte(1);
	out.writeByte(2);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeString("channels");
	out.writeByte(0);
	out.writeString("chlist");
	out.writeByte(0);
	out.writeByte(55);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	var attrib = bits == 16 ? 1 : 2;
	out.writeByte(66);
	out.writeByte(0);
	out.writeByte(attrib);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(1);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(1);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(71);
	out.writeByte(0);
	out.writeByte(attrib);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(1);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(1);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(82);
	out.writeByte(0);
	out.writeByte(attrib);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(1);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(1);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeString("compression");
	out.writeByte(0);
	out.writeString("compression");
	out.writeByte(0);
	out.writeByte(1);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeString("dataWindow");
	out.writeByte(0);
	out.writeString("box2i");
	out.writeByte(0);
	out.writeByte(16);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	var ww = width - 1;
	var hh = height - 1;
	out.writeByte(ww & 255);
	out.writeByte(ww >> 8 & 255);
	out.writeByte(ww >> 16 & 255);
	out.writeByte(ww >> 24 & 255);
	out.writeByte(hh & 255);
	out.writeByte(hh >> 8 & 255);
	out.writeByte(hh >> 16 & 255);
	out.writeByte(hh >> 24 & 255);
	out.writeString("displayWindow");
	out.writeByte(0);
	out.writeString("box2i");
	out.writeByte(0);
	out.writeByte(16);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(ww & 255);
	out.writeByte(ww >> 8 & 255);
	out.writeByte(ww >> 16 & 255);
	out.writeByte(ww >> 24 & 255);
	out.writeByte(hh & 255);
	out.writeByte(hh >> 8 & 255);
	out.writeByte(hh >> 16 & 255);
	out.writeByte(hh >> 24 & 255);
	out.writeString("lineOrder");
	out.writeByte(0);
	out.writeString("lineOrder");
	out.writeByte(0);
	out.writeByte(1);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeString("pixelAspectRatio");
	out.writeByte(0);
	out.writeString("float");
	out.writeByte(0);
	out.writeByte(4);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(128);
	out.writeByte(63);
	out.writeString("screenWindowCenter");
	out.writeByte(0);
	out.writeString("v2f");
	out.writeByte(0);
	out.writeByte(8);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeString("screenWindowWidth");
	out.writeByte(0);
	out.writeString("float");
	out.writeByte(0);
	out.writeByte(4);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(0);
	out.writeByte(128);
	out.writeByte(63);
	out.writeByte(0);
	var channels = 4;
	var byteSize = bits == 16 ? 2 : 4;
	var kHeaderSize = out.b.pos;
	var kScanlineTableSize = 8 * height;
	var pixelRowSize = width * 3 * byteSize;
	var fullRowSize = pixelRowSize + 8;
	var ofs = kHeaderSize + kScanlineTableSize;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		out.writeByte(ofs & 255);
		out.writeByte(ofs >> 8 & 255);
		out.writeByte(ofs >> 16 & 255);
		out.writeByte(ofs >> 24 & 255);
		out.writeByte(0);
		out.writeByte(0);
		out.writeByte(0);
		out.writeByte(0);
		ofs += fullRowSize;
	}
	var stride = channels * byteSize;
	var pos = 0;
	var writeLine16 = function(bytePos) {
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			out.writeByte(src.b[bytePos]);
			out.writeByte(src.b[bytePos + 1]);
			bytePos += stride;
		}
	};
	var writeLine32 = function(bytePos1) {
		var _g21 = 0;
		var _g31 = width;
		while(_g21 < _g31) {
			var x1 = _g21++;
			out.writeByte(src.b[bytePos1]);
			out.writeByte(src.b[bytePos1 + 1]);
			out.writeByte(src.b[bytePos1 + 2]);
			out.writeByte(src.b[bytePos1 + 3]);
			bytePos1 += stride;
		}
	};
	var writeLine = bits == 16 ? writeLine16 : writeLine32;
	var writeBGR = function(off1) {
		writeLine(pos + byteSize * 2);
		writeLine(pos + byteSize);
		writeLine(pos);
	};
	var writeSingle = function(off2) {
		writeLine(pos + off2 * byteSize);
		writeLine(pos + off2 * byteSize);
		writeLine(pos + off2 * byteSize);
	};
	var writeData = type == 1 ? writeBGR : writeSingle;
	var _g22 = 0;
	var _g32 = height;
	while(_g22 < _g32) {
		var y1 = _g22++;
		out.writeByte(y1 & 255);
		out.writeByte(y1 >> 8 & 255);
		out.writeByte(y1 >> 16 & 255);
		out.writeByte(y1 >> 24 & 255);
		out.writeByte(pixelRowSize & 255);
		out.writeByte(pixelRowSize >> 8 & 255);
		out.writeByte(pixelRowSize >> 16 & 255);
		out.writeByte(pixelRowSize >> 24 & 255);
		writeData(off);
		pos += width * stride;
	}
};
$hxClasses["arm.format.ExrWriter"] = arm_format_ExrWriter;
arm_format_ExrWriter.__name__ = "arm.format.ExrWriter";
arm_format_ExrWriter.prototype = {
	__class__: arm_format_ExrWriter
};
var arm_format_FbxBinaryParser = function(blob) {
	this.blob = blob;
	this.pos = 0;
	var magic = "Kaydara FBX Binary  \x00\x1A\x00";
	var valid = this.readChars(magic.length) == magic;
	if(!valid) {
		return;
	}
	var version = this.read32();
	this.root = { name : "Root", props : [arm_format_FbxProp.PInt(0),arm_format_FbxProp.PString("Root"),arm_format_FbxProp.PString("Root")], childs : this.parseNodes()};
};
$hxClasses["arm.format.FbxBinaryParser"] = arm_format_FbxBinaryParser;
arm_format_FbxBinaryParser.__name__ = "arm.format.FbxBinaryParser";
arm_format_FbxBinaryParser.parse = function(blob) {
	return new arm_format_FbxBinaryParser(blob).root;
};
arm_format_FbxBinaryParser.prototype = {
	parseArray: function(readVal,isFloat) {
		if(isFloat == null) {
			isFloat = false;
		}
		var len = this.read32();
		var encoding = this.read32();
		var compressedLen = this.read32();
		var endPos = this.pos + compressedLen;
		var _blob = this.blob;
		if(encoding != 0) {
			this.pos += 2;
			var input = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(this.blob.sub(this.pos,compressedLen).toBytes());
			var output = arm_format_pako_Pako.inflate(input,{ raw : true});
			this.blob = kha_Blob.fromBytes(haxe_io_Bytes.ofData(output.buffer));
			this.pos = 0;
		}
		var res = isFloat ? this.parseArrayf(readVal,len) : this.parseArrayi(readVal,len);
		if(encoding != 0) {
			this.pos = endPos;
			this.blob = _blob;
		}
		return res;
	}
	,parseArrayf: function(readVal,len) {
		var res = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			res.push(readVal());
		}
		return arm_format_FbxProp.PFloats(res);
	}
	,parseArrayi: function(readVal,len) {
		var res = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			res.push(readVal());
		}
		return arm_format_FbxProp.PInts(res);
	}
	,parseProp: function() {
		switch(this.readChar()) {
		case "C":
			return arm_format_FbxProp.PString(this.readChar());
		case "D":
			return arm_format_FbxProp.PFloat(this.readf64());
		case "F":
			return arm_format_FbxProp.PFloat(this.readf32());
		case "I":
			return arm_format_FbxProp.PInt(this.read32());
		case "L":
			return arm_format_FbxProp.PInt(this.read64());
		case "R":
			var b = this.readBytes(this.read32());
			return null;
		case "S":
			var len = this.read32();
			return arm_format_FbxProp.PString(this.readChars(len));
		case "Y":
			return arm_format_FbxProp.PInt(this.read16());
		case "b":
			return this.parseArray($bind(this,this.readBool));
		case "d":
			return this.parseArray($bind(this,this.readf64),true);
		case "f":
			return this.parseArray($bind(this,this.readf32),true);
		case "i":
			return this.parseArray($bind(this,this.read32));
		case "l":
			return this.parseArray($bind(this,this.read64));
		default:
			return null;
		}
	}
	,parseNode: function() {
		var endPos = this.read32();
		var numProps = this.read32();
		var propListLen = this.read32();
		var nameLen = this.read8();
		var name = nameLen == 0 ? "" : this.readChars(nameLen);
		if(endPos == 0) {
			return null;
		}
		var props = null;
		if(numProps > 0) {
			props = [];
		}
		var _g = 0;
		var _g1 = numProps;
		while(_g < _g1) {
			var i = _g++;
			props.push(this.parseProp());
		}
		var childs = null;
		var listLen = endPos - this.pos;
		if(listLen > 0) {
			childs = [];
			while(true) {
				var nested = this.parseNode();
				if(nested == null) {
					break;
				} else {
					childs.push(nested);
				}
			}
		}
		return { name : name, props : props, childs : childs};
	}
	,parseNodes: function() {
		var nodes = [];
		while(true) {
			var n = this.parseNode();
			if(n == null) {
				break;
			} else {
				nodes.push(n);
			}
		}
		return nodes;
	}
	,read8: function() {
		var i = this.blob.readU8(this.pos);
		this.pos += 1;
		return i;
	}
	,read16: function() {
		var i = this.blob.readS16LE(this.pos);
		this.pos += 2;
		return i;
	}
	,read32: function() {
		var i = this.blob.bytes.getInt32(this.pos);
		this.pos += 4;
		return i;
	}
	,read64: function() {
		var i1 = this.read32();
		var i2 = this.read32();
		return i1;
	}
	,readf32: function() {
		var f = this.blob.readF32LE(this.pos);
		this.pos += 4;
		return f;
	}
	,readf64: function() {
		var i1 = this.read32();
		var i2 = this.read32();
		return haxe_io_FPHelper.i64ToDouble(i1,i2);
	}
	,readChars: function(len) {
		var s = "";
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			s += this.readChar();
		}
		return s;
	}
	,readChar: function() {
		var code = this.read8();
		return String.fromCodePoint(code);
	}
	,readBool: function() {
		return this.read8();
	}
	,readBytes: function(len) {
		var b = this.blob.sub(this.pos,len);
		this.pos += len;
		return b;
	}
	,__class__: arm_format_FbxBinaryParser
};
var arm_format_FbxProp = $hxEnums["arm.format.FbxProp"] = { __ename__ : true, __constructs__ : ["PInt","PFloat","PString","PIdent","PInts","PFloats"]
	,PInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"arm.format.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PFloat: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"arm.format.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PString: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"arm.format.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PIdent: ($_=function(i) { return {_hx_index:3,i:i,__enum__:"arm.format.FbxProp",toString:$estr}; },$_.__params__ = ["i"],$_)
	,PInts: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"arm.format.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PFloats: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"arm.format.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var arm_format_FbxTools = function() { };
$hxClasses["arm.format.FbxTools"] = arm_format_FbxTools;
arm_format_FbxTools.__name__ = "arm.format.FbxTools";
arm_format_FbxTools.get = function(n,path,opt) {
	if(opt == null) {
		opt = false;
	}
	var parts = path.split(".");
	var cur = n;
	var _g = 0;
	while(_g < parts.length) {
		var p = parts[_g];
		++_g;
		var found = false;
		var _g1 = 0;
		var _g11 = cur.childs;
		while(_g1 < _g11.length) {
			var c = _g11[_g1];
			++_g1;
			if(c.name == p) {
				cur = c;
				found = true;
				break;
			}
		}
		if(!found) {
			if(opt) {
				return null;
			}
			throw new js__$Boot_HaxeError(n.name + " does not have " + path + " (" + p + " not found)");
		}
	}
	return cur;
};
arm_format_FbxTools.getAll = function(n,path) {
	var parts = path.split(".");
	var cur = [n];
	var _g = 0;
	while(_g < parts.length) {
		var p = parts[_g];
		++_g;
		var out = [];
		var _g1 = 0;
		while(_g1 < cur.length) {
			var n1 = cur[_g1];
			++_g1;
			var _g2 = 0;
			var _g11 = n1.childs;
			while(_g2 < _g11.length) {
				var c = _g11[_g2];
				++_g2;
				if(c.name == p) {
					out.push(c);
				}
			}
		}
		cur = out;
		if(cur.length == 0) {
			return cur;
		}
	}
	return cur;
};
arm_format_FbxTools.getInts = function(n) {
	if(n.props.length != 1) {
		throw new js__$Boot_HaxeError(n.name + " has " + Std.string(n.props) + " props");
	}
	var _g = n.props[0];
	if(_g._hx_index == 4) {
		var v = _g.v;
		return v;
	} else {
		throw new js__$Boot_HaxeError(n.name + " has " + Std.string(n.props) + " props");
	}
};
arm_format_FbxTools.getFloats = function(n) {
	if(n.props.length != 1) {
		throw new js__$Boot_HaxeError(n.name + " has " + Std.string(n.props) + " props");
	}
	var _g = n.props[0];
	switch(_g._hx_index) {
	case 4:
		var i = _g.v;
		var fl = [];
		var _g1 = 0;
		while(_g1 < i.length) {
			var x = i[_g1];
			++_g1;
			fl.push(x);
		}
		n.props[0] = arm_format_FbxProp.PFloats(fl);
		return fl;
	case 5:
		var v = _g.v;
		return v;
	default:
		throw new js__$Boot_HaxeError(n.name + " has " + Std.string(n.props) + " props");
	}
};
arm_format_FbxTools.toInt = function(n) {
	if(n == null) {
		throw new js__$Boot_HaxeError("null prop");
	}
	switch(n._hx_index) {
	case 0:
		var v = n.v;
		return v;
	case 1:
		var f = n.v;
		return f | 0;
	default:
		throw new js__$Boot_HaxeError("Invalid prop " + Std.string(n));
	}
};
arm_format_FbxTools.toFloat = function(n) {
	if(n == null) {
		throw new js__$Boot_HaxeError("null prop");
	}
	switch(n._hx_index) {
	case 0:
		var v = n.v;
		return v * 1.0;
	case 1:
		var v1 = n.v;
		return v1;
	default:
		throw new js__$Boot_HaxeError("Invalid prop " + Std.string(n));
	}
};
arm_format_FbxTools.toString = function(n) {
	if(n == null) {
		throw new js__$Boot_HaxeError("null prop");
	}
	if(n._hx_index == 2) {
		var v = n.v;
		return v;
	} else {
		throw new js__$Boot_HaxeError("Invalid prop " + Std.string(n));
	}
};
arm_format_FbxTools.getId = function(n) {
	if(n.props.length != 3) {
		throw new js__$Boot_HaxeError(n.name + " is not an object");
	}
	var _g = n.props[0];
	switch(_g._hx_index) {
	case 0:
		var id = _g.v;
		return id;
	case 1:
		var id1 = _g.v;
		return id1 | 0;
	default:
		throw new js__$Boot_HaxeError(n.name + " is not an object " + Std.string(n.props));
	}
};
arm_format_FbxTools.getName = function(n) {
	if(n.props.length != 3) {
		throw new js__$Boot_HaxeError(n.name + " is not an object");
	}
	var _g = n.props[1];
	if(_g._hx_index == 2) {
		var n1 = _g.v;
		return n1.split("::").pop();
	} else {
		throw new js__$Boot_HaxeError(n.name + " is not an object");
	}
};
var arm_format__$FbxLibrary_Token = $hxEnums["arm.format._FbxLibrary.Token"] = { __ename__ : true, __constructs__ : ["TIdent","TNode","TInt","TFloat","TString","TLength","TBraceOpen","TBraceClose","TColon","TEof"]
	,TIdent: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TNode: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TInt: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TFloat: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TString: ($_=function(s) { return {_hx_index:4,s:s,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TLength: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TBraceOpen: {_hx_index:6,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}
	,TBraceClose: {_hx_index:7,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}
	,TColon: {_hx_index:8,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}
	,TEof: {_hx_index:9,__enum__:"arm.format._FbxLibrary.Token",toString:$estr}
};
var arm_format_Parser = function() {
};
$hxClasses["arm.format.Parser"] = arm_format_Parser;
arm_format_Parser.__name__ = "arm.format.Parser";
arm_format_Parser.parse = function(text) {
	return new arm_format_Parser().parseText(text);
};
arm_format_Parser.prototype = {
	parseText: function(str) {
		this.buf = str;
		this.pos = 0;
		this.line = 1;
		this.token = null;
		return { name : "Root", props : [arm_format_FbxProp.PInt(0),arm_format_FbxProp.PString("Root"),arm_format_FbxProp.PString("Root")], childs : this.parseNodes()};
	}
	,parseNodes: function() {
		var nodes = [];
		while(true) {
			var _g = this.peek();
			if(_g != null) {
				switch(_g._hx_index) {
				case 7:case 9:
					return nodes;
				default:
				}
			}
			nodes.push(this.parseNode());
		}
	}
	,parseNode: function() {
		var t = this.next();
		var name;
		if(t._hx_index == 1) {
			var n = t.s;
			name = n;
		} else {
			name = this.unexpected(t);
		}
		var props = [];
		var childs = null;
		_hx_loop1: while(true) {
			t = this.next();
			switch(t._hx_index) {
			case 0:
				var s = t.s;
				props.push(arm_format_FbxProp.PIdent(s));
				break;
			case 1:
				var _g2 = t.s;
				this.token = t;
				break;
			case 2:
				var s1 = t.s;
				props.push(arm_format_FbxProp.PInt(Std.parseInt(s1)));
				break;
			case 3:
				var s2 = t.s;
				props.push(arm_format_FbxProp.PFloat(parseFloat(s2)));
				break;
			case 4:
				var s3 = t.s;
				props.push(arm_format_FbxProp.PString(s3));
				break;
			case 5:
				var v = t.v;
				this.except(arm_format__$FbxLibrary_Token.TBraceOpen);
				this.except(arm_format__$FbxLibrary_Token.TNode("a"));
				var ints = [];
				var floats = null;
				var i = 0;
				while(i < v) {
					t = this.next();
					switch(t._hx_index) {
					case 2:
						var s4 = t.s;
						++i;
						if(floats == null) {
							ints.push(Std.parseInt(s4));
						} else {
							floats.push(Std.parseInt(s4));
						}
						break;
					case 3:
						var s5 = t.s;
						++i;
						if(floats == null) {
							floats = [];
							var _g1 = 0;
							while(_g1 < ints.length) {
								var i1 = ints[_g1];
								++_g1;
								floats.push(i1);
							}
							ints = null;
						}
						floats.push(parseFloat(s5));
						break;
					case 8:
						continue;
					default:
						this.unexpected(t);
					}
				}
				props.push(floats == null ? arm_format_FbxProp.PInts(ints) : arm_format_FbxProp.PFloats(floats));
				this.except(arm_format__$FbxLibrary_Token.TBraceClose);
				break _hx_loop1;
			case 6:case 7:
				this.token = t;
				break;
			default:
				this.unexpected(t);
			}
			t = this.next();
			switch(t._hx_index) {
			case 1:
				var _g7 = t.s;
				this.token = t;
				break _hx_loop1;
			case 6:
				childs = this.parseNodes();
				this.except(arm_format__$FbxLibrary_Token.TBraceClose);
				break _hx_loop1;
			case 7:
				this.token = t;
				break _hx_loop1;
			case 8:
				break;
			default:
				this.unexpected(t);
			}
		}
		if(childs == null) {
			childs = [];
		}
		return { name : name, props : props, childs : childs};
	}
	,except: function(except) {
		var t = this.next();
		if(!Type.enumEq(t,except)) {
			this.error("Unexpected '" + this.tokenStr(t) + "' (" + this.tokenStr(except) + " expected)");
		}
	}
	,peek: function() {
		if(this.token == null) {
			this.token = this.nextToken();
		}
		return this.token;
	}
	,next: function() {
		if(this.token == null) {
			return this.nextToken();
		}
		var tmp = this.token;
		this.token = null;
		return tmp;
	}
	,error: function(msg) {
		throw new js__$Boot_HaxeError(msg + " (line " + this.line + ")");
	}
	,unexpected: function(t) {
		return this.error("Unexpected " + this.tokenStr(t));
	}
	,tokenStr: function(t) {
		switch(t._hx_index) {
		case 0:
			var i = t.s;
			return i;
		case 1:
			var i1 = t.s;
			return i1 + ":";
		case 2:
			var i2 = t.s;
			return i2;
		case 3:
			var f = t.s;
			return f;
		case 4:
			var s = t.s;
			return "\"" + s + "\"";
		case 5:
			var l = t.v;
			return "*" + l;
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ",";
		case 9:
			return "<eof>";
		}
	}
	,nextToken: function() {
		var start = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos++);
			switch(c) {
			case 10:
				this.line++;
				++start;
				break;
			case 9:case 13:case 32:
				++start;
				break;
			case 34:
				start = this.pos;
				while(true) {
					c = this.buf.charCodeAt(this.pos++);
					if(c == 34) {
						break;
					}
					if(c != c || c == 10) {
						this.error("Unclosed string");
					}
				}
				return arm_format__$FbxLibrary_Token.TString(HxOverrides.substr(this.buf,start,this.pos - start - 1));
			case 42:
				start = this.pos;
				while(true) {
					c = this.buf.charCodeAt(this.pos++);
					if(!(c >= 48 && c <= 57)) {
						break;
					}
				}
				this.pos--;
				return arm_format__$FbxLibrary_Token.TLength(Std.parseInt(HxOverrides.substr(this.buf,start,this.pos - start)));
			case 44:
				return arm_format__$FbxLibrary_Token.TColon;
			case 59:
				while(true) {
					var c1 = this.buf.charCodeAt(this.pos++);
					if(c1 != c1 || c1 == 10) {
						this.pos--;
						break;
					}
				}
				start = this.pos;
				break;
			case 123:
				return arm_format__$FbxLibrary_Token.TBraceOpen;
			case 125:
				return arm_format__$FbxLibrary_Token.TBraceClose;
			default:
				if(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95) {
					while(true) {
						c = this.buf.charCodeAt(this.pos++);
						if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 95 || c == 45)) {
							break;
						}
					}
					if(c == 58) {
						return arm_format__$FbxLibrary_Token.TNode(HxOverrides.substr(this.buf,start,this.pos - start - 1));
					}
					this.pos--;
					return arm_format__$FbxLibrary_Token.TIdent(HxOverrides.substr(this.buf,start,this.pos - start));
				}
				if(c >= 48 && c <= 57 || c == 45) {
					while(true) {
						c = this.buf.charCodeAt(this.pos++);
						if(!(c >= 48 && c <= 57)) {
							break;
						}
					}
					if(c != 46 && c != 69 && c != 101 && this.pos - start < 10) {
						this.pos--;
						return arm_format__$FbxLibrary_Token.TInt(HxOverrides.substr(this.buf,start,this.pos - start));
					}
					if(c == 46) {
						while(true) {
							c = this.buf.charCodeAt(this.pos++);
							if(!(c >= 48 && c <= 57)) {
								break;
							}
						}
					}
					if(c == 101 || c == 69) {
						c = this.buf.charCodeAt(this.pos++);
						if(c != 45 && c != 43) {
							this.pos--;
						}
						while(true) {
							c = this.buf.charCodeAt(this.pos++);
							if(!(c >= 48 && c <= 57)) {
								break;
							}
						}
					}
					this.pos--;
					return arm_format__$FbxLibrary_Token.TFloat(HxOverrides.substr(this.buf,start,this.pos - start));
				}
				if(c != c) {
					this.pos--;
					return arm_format__$FbxLibrary_Token.TEof;
				}
				this.error("Unexpected char '" + String.fromCodePoint(c) + "'");
			}
		}
	}
	,__class__: arm_format_Parser
};
var arm_format_FbxLibrary = function() {
	this.version = 0.;
	this.root = { name : "Root", props : [], childs : []};
	this.reset();
};
$hxClasses["arm.format.FbxLibrary"] = arm_format_FbxLibrary;
arm_format_FbxLibrary.__name__ = "arm.format.FbxLibrary";
arm_format_FbxLibrary.prototype = {
	reset: function() {
		this.ids = new haxe_ds_IntMap();
		this.connect = new haxe_ds_IntMap();
		this.namedConnect = new haxe_ds_IntMap();
		this.invConnect = new haxe_ds_IntMap();
	}
	,load: function(root) {
		this.reset();
		this.root = root;
		this.version = arm_format_FbxTools.toInt(arm_format_FbxTools.get(root,"FBXHeaderExtension.FBXVersion").props[0]) / 1000;
		if((this.version | 0) != 7) {
			throw new js__$Boot_HaxeError("FBX Version 7.x required : use FBX 2010 export");
		}
		var _g = 0;
		var _g1 = root.childs;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			this.init(c);
		}
	}
	,init: function(n) {
		switch(n.name) {
		case "Connections":
			var _g = 0;
			var _g1 = n.childs;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(c.name != "C") {
					continue;
				}
				var child = arm_format_FbxTools.toInt(c.props[1]);
				var parent = arm_format_FbxTools.toInt(c.props[2]);
				if(this.ids.h[child] == null || this.ids.h[parent] == null) {
					continue;
				}
				var name = c.props[3];
				if(name != null) {
					var name1 = arm_format_FbxTools.toString(name);
					var nc = this.namedConnect.h[parent];
					if(nc == null) {
						nc = new haxe_ds_StringMap();
						this.namedConnect.h[parent] = nc;
					}
					if(__map_reserved[name1] != null) {
						nc.setReserved(name1,child);
					} else {
						nc.h[name1] = child;
					}
					if(name1 == "LookAtProperty") {
						continue;
					}
				}
				var c1 = this.connect.h[parent];
				if(c1 == null) {
					c1 = [];
					this.connect.h[parent] = c1;
				}
				c1.push(child);
				if(parent == 0) {
					continue;
				}
				var c2 = this.invConnect.h[child];
				if(c2 == null) {
					c2 = [];
					this.invConnect.h[child] = c2;
				}
				c2.push(parent);
			}
			break;
		case "Objects":
			var _g2 = 0;
			var _g11 = n.childs;
			while(_g2 < _g11.length) {
				var c3 = _g11[_g2];
				++_g2;
				var this1 = this.ids;
				var key = arm_format_FbxTools.getId(c3);
				this1.h[key] = c3;
			}
			break;
		default:
		}
	}
	,getAllGeometries: function() {
		var geoms = arm_format_FbxTools.getAll(this.root,"Objects.Geometry");
		var res = [];
		var _g = 0;
		while(_g < geoms.length) {
			var g = geoms[_g];
			++_g;
			res.push(new arm_format_Geometry(this,g));
		}
		return res;
	}
	,__class__: arm_format_FbxLibrary
};
var arm_format_Geometry = function(l,root) {
	this.lib = l;
	this.root = root;
};
$hxClasses["arm.format.Geometry"] = arm_format_Geometry;
arm_format_Geometry.__name__ = "arm.format.Geometry";
arm_format_Geometry.prototype = {
	getRoot: function() {
		return this.root;
	}
	,getVertices: function() {
		return arm_format_FbxTools.getFloats(arm_format_FbxTools.get(this.root,"Vertices"));
	}
	,getPolygons: function() {
		return arm_format_FbxTools.getInts(arm_format_FbxTools.get(this.root,"PolygonVertexIndex"));
	}
	,getNormals: function() {
		return this.processVectors("LayerElementNormal","Normals");
	}
	,processVectors: function(layer,name,opt) {
		if(opt == null) {
			opt = false;
		}
		var vect = arm_format_FbxTools.get(this.root,layer + "." + name,opt);
		if(vect == null) {
			return null;
		}
		var nrm = arm_format_FbxTools.getFloats(vect);
		if(arm_format_FbxTools.toString(arm_format_FbxTools.get(this.root,layer + ".MappingInformationType").props[0]) == "ByVertice") {
			var nout = [];
			var _g = 0;
			var _g1 = this.getPolygons();
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var vid = i;
				if(vid < 0) {
					vid = -vid - 1;
				}
				nout.push(nrm[vid * 3]);
				nout.push(nrm[vid * 3 + 1]);
				nout.push(nrm[vid * 3 + 2]);
			}
			nrm = nout;
		}
		return nrm;
	}
	,getColors: function() {
		var color = arm_format_FbxTools.get(this.root,"LayerElementColor",true);
		if(color == null) {
			return null;
		} else {
			return { values : arm_format_FbxTools.getFloats(arm_format_FbxTools.get(color,"Colors")), index : arm_format_FbxTools.getInts(arm_format_FbxTools.get(color,"ColorIndex"))};
		}
	}
	,getUVs: function() {
		var uvs = [];
		var _g = 0;
		var _g1 = arm_format_FbxTools.getAll(this.root,"LayerElementUV");
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var index = arm_format_FbxTools.get(v,"UVIndex",true);
			var values = arm_format_FbxTools.getFloats(arm_format_FbxTools.get(v,"UV"));
			var index1;
			if(index == null) {
				var _g2 = [];
				var _g11 = 0;
				var _g21 = this.getPolygons();
				while(_g11 < _g21.length) {
					var i = _g21[_g11];
					++_g11;
					_g2.push(i < 0 ? -i - 1 : i);
				}
				index1 = _g2;
			} else {
				index1 = arm_format_FbxTools.getInts(index);
			}
			uvs.push({ values : values, index : index1});
		}
		return uvs;
	}
	,getBuffers: function(binary,p) {
		var pbuf = this.getVertices();
		var nbuf = this.getNormals();
		var tbuf = this.getUVs()[0];
		var cbuf = arm_format_FbxParser.parseVCols ? this.getColors() : null;
		var polys = this.getPolygons();
		if(arm_format_FbxParser.parseTransform) {
			var _g = 0;
			var _g1 = pbuf.length / 3 | 0;
			while(_g < _g1) {
				var i = _g++;
				pbuf[i * 3] *= p.sx;
				pbuf[i * 3] += p.tx;
				pbuf[i * 3 + 1] *= p.sy;
				pbuf[i * 3 + 1] += p.ty;
				pbuf[i * 3 + 2] *= p.sz;
				pbuf[i * 3 + 2] += p.tz;
			}
		}
		var scalePos = 0.0;
		var _g2 = 0;
		while(_g2 < pbuf.length) {
			var p1 = pbuf[_g2];
			++_g2;
			var f = Math.abs(p1);
			if(scalePos < f) {
				scalePos = f;
			}
		}
		var inv = 32767 * (1 / scalePos);
		var pos = 0;
		var count = 0;
		var vlen = 0;
		var ilen = 0;
		var _g11 = 0;
		while(_g11 < polys.length) {
			var i1 = polys[_g11];
			++_g11;
			++count;
			if(i1 < 0) {
				var _g12 = 0;
				var _g21 = count;
				while(_g12 < _g21) {
					var n = _g12++;
					++vlen;
				}
				var _g3 = 0;
				var _g4 = count - 2;
				while(_g3 < _g4) {
					var n1 = _g3++;
					ilen += 3;
				}
				count = 0;
			}
			++pos;
		}
		var this1 = new Int16Array(vlen * 4);
		var posa = this1;
		var this2 = new Int16Array(vlen * 2);
		var nora = this2;
		var texa;
		if(tbuf != null) {
			var this3 = new Int16Array(vlen * 2);
			texa = this3;
		} else {
			texa = null;
		}
		var cola;
		if(cbuf != null) {
			var this4 = new Int16Array(vlen * 4);
			cola = this4;
		} else {
			cola = null;
		}
		var this5 = new Uint32Array(ilen);
		var inda = this5;
		pos = 0;
		count = 0;
		vlen = 0;
		ilen = 0;
		var _g22 = 0;
		while(_g22 < polys.length) {
			var i2 = polys[_g22];
			++_g22;
			++count;
			if(i2 < 0) {
				polys[pos] = -i2 - 1;
				var start = pos - count + 1;
				var _g23 = 0;
				var _g31 = count;
				while(_g23 < _g31) {
					var n2 = _g23++;
					var k = n2 + start;
					var vidx = polys[k];
					posa[vlen * 4] = pbuf[vidx * 3] * inv | 0;
					posa[vlen * 4 + 1] = pbuf[vidx * 3 + 1] * inv | 0;
					posa[vlen * 4 + 2] = pbuf[vidx * 3 + 2] * inv | 0;
					posa[vlen * 4 + 3] = nbuf[k * 3 + 2] * 32767 | 0;
					nora[vlen * 2] = nbuf[k * 3] * 32767 | 0;
					nora[vlen * 2 + 1] = nbuf[k * 3 + 1] * 32767 | 0;
					if(tbuf != null) {
						var iuv = tbuf.index[k];
						texa[vlen * 2] = tbuf.values[iuv * 2] * 32767 | 0;
						texa[vlen * 2 + 1] = (1.0 - tbuf.values[iuv * 2 + 1]) * 32767 | 0;
					}
					if(cbuf != null) {
						var icol = cbuf.index[k];
						cola[vlen * 3] = cbuf.values[icol * 4] * 32767 | 0;
						cola[vlen * 3 + 1] = cbuf.values[icol * 4 + 1] * 32767 | 0;
						cola[vlen * 3 + 2] = cbuf.values[icol * 4 + 2] * 32767 | 0;
					}
					++vlen;
				}
				var _g41 = 0;
				var _g5 = count - 2;
				while(_g41 < _g5) {
					var n3 = _g41++;
					inda[ilen + 2] = start + n3;
					inda[ilen + 1] = start + count - 1;
					inda[ilen] = start + n3 + 1;
					ilen += 3;
				}
				polys[pos] = i2;
				count = 0;
			}
			++pos;
		}
		return { posa : posa, nora : nora, texa : texa, cola : cola, inda : inda, scalePos : scalePos};
	}
	,__class__: arm_format_Geometry
};
var arm_format_FbxParser = function(blob) {
	this.binary = true;
	this.current = 0;
	this.sz = 1.0;
	this.sy = 1.0;
	this.sx = 1.0;
	this.rz = 0.0;
	this.ry = 0.0;
	this.rx = 0.0;
	this.tz = 0.0;
	this.ty = 0.0;
	this.tx = 0.0;
	this.name = "";
	this.scalePos = 1.0;
	this.inda = null;
	this.cola = null;
	this.texa = null;
	this.nora = null;
	this.posa = null;
	var magic = "Kaydara FBX Binary  \x00\x1A\x00";
	var s = "";
	var _g = 0;
	var _g1 = magic.length;
	while(_g < _g1) {
		var i = _g++;
		var code = blob.readU8(i);
		s += String.fromCodePoint(code);
	}
	this.binary = s == magic;
	var fbx = this.binary ? arm_format_FbxBinaryParser.parse(blob) : arm_format_Parser.parse(blob.toString());
	var lib = new arm_format_FbxLibrary();
	try {
		lib.load(fbx);
	} catch( e ) {
		haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "arm/format/FbxParser.hx", lineNumber : 45, className : "arm.format.FbxParser", methodName : "new"});
	}
	this.geoms = lib.getAllGeometries();
	this.next();
};
$hxClasses["arm.format.FbxParser"] = arm_format_FbxParser;
arm_format_FbxParser.__name__ = "arm.format.FbxParser";
arm_format_FbxParser.prototype = {
	next: function() {
		if(this.current >= this.geoms.length) {
			return false;
		}
		var geom = this.geoms[this.current];
		var lib = geom.lib;
		this.tx = this.ty = this.tz = 0;
		this.rx = this.ry = this.rz = 0;
		this.sx = this.sy = this.sz = 1;
		if(arm_format_FbxParser.parseTransform) {
			var this1 = lib.invConnect;
			var key = arm_format_FbxTools.getId(geom.getRoot());
			var connects = this1.h[key];
			var _g = 0;
			while(_g < connects.length) {
				var c = connects[_g];
				++_g;
				var node = lib.ids.h[c];
				var _g1 = 0;
				var _g11 = arm_format_FbxTools.getAll(node,"Properties70.P");
				while(_g1 < _g11.length) {
					var p = _g11[_g1];
					++_g1;
					switch(arm_format_FbxTools.toString(p.props[0])) {
					case "Lcl Rotation":
						this.rx = arm_format_FbxTools.toFloat(p.props[4]) * Math.PI / 180;
						this.ry = arm_format_FbxTools.toFloat(p.props[5]) * Math.PI / 180;
						this.rz = arm_format_FbxTools.toFloat(p.props[6]) * Math.PI / 180;
						break;
					case "Lcl Scaling":
						this.sx = arm_format_FbxTools.toFloat(p.props[4]) / 100;
						this.sy = arm_format_FbxTools.toFloat(p.props[5]) / 100;
						this.sz = arm_format_FbxTools.toFloat(p.props[6]) / 100;
						break;
					case "Lcl Translation":
						this.tx = arm_format_FbxTools.toFloat(p.props[4]) / 100;
						this.ty = arm_format_FbxTools.toFloat(p.props[5]) / 100;
						this.tz = arm_format_FbxTools.toFloat(p.props[6]) / 100;
						break;
					default:
					}
				}
			}
		}
		var res = geom.getBuffers(this.binary,this);
		this.scalePos = res.scalePos;
		this.posa = res.posa;
		this.nora = res.nora;
		this.texa = res.texa;
		this.cola = res.cola;
		this.inda = res.inda;
		this.name = arm_format_FbxTools.getName(geom.getRoot());
		if(HxOverrides.cca(this.name,0) == 0) {
			this.name = this.name.substring(1);
		}
		if(HxOverrides.cca(this.name,0) == 1) {
			this.name = this.name.substring(1);
		}
		if(this.name == "Geometry") {
			this.name = "Object -Geometry";
		}
		this.name = this.name.substring(0,this.name.length - 10);
		this.current++;
		return true;
	}
	,__class__: arm_format_FbxParser
};
var arm_format_JpgWriter = function(out) {
	this.YTable = [];
	this.UVTable = [];
	this.fdtbl_Y = [];
	this.fdtbl_UV = [];
	var _g = 0;
	while(_g < 64) {
		var i = _g++;
		this.YTable.push(0);
		this.UVTable.push(0);
		this.fdtbl_Y.push(0.0);
		this.fdtbl_UV.push(0.0);
	}
	this.bitcode = new haxe_ds_IntMap();
	this.category = new haxe_ds_IntMap();
	this.byteout = out;
	this.bytenew = 0;
	this.bytepos = 7;
	this.YDC_HT = new haxe_ds_IntMap();
	this.UVDC_HT = new haxe_ds_IntMap();
	this.YAC_HT = new haxe_ds_IntMap();
	this.UVAC_HT = new haxe_ds_IntMap();
	this.YDU = [];
	this.UDU = [];
	this.VDU = [];
	this.DU = [];
	var _g1 = 0;
	while(_g1 < 64) {
		var i1 = _g1++;
		this.YDU.push(0.0);
		this.UDU.push(0.0);
		this.VDU.push(0.0);
		this.DU.push(0.0);
	}
	this.initZigZag();
	this.initLuminance();
	this.initChrominance();
	this.initHuffmanTbl();
	this.initCategoryNumber();
};
$hxClasses["arm.format.JpgWriter"] = arm_format_JpgWriter;
arm_format_JpgWriter.__name__ = "arm.format.JpgWriter";
arm_format_JpgWriter.prototype = {
	initZigZag: function() {
		this.ZigZag = [0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63];
	}
	,initQuantTables: function(sf) {
		var YQT = [16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99];
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			var t = Math.floor((YQT[i] * sf + 50) / 100);
			if(t < 1) {
				t = 1;
			} else if(t > 255) {
				t = 255;
			}
			this.YTable[this.ZigZag[i]] = t;
		}
		var UVQT = [17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99];
		var _g1 = 0;
		while(_g1 < 64) {
			var j = _g1++;
			var u = Math.floor((UVQT[j] * sf + 50) / 100);
			if(u < 1) {
				u = 1;
			} else if(u > 255) {
				u = 255;
			}
			this.UVTable[this.ZigZag[j]] = u;
		}
		var aasf = [1.0,1.387039845,1.306562965,1.175875602,1.0,0.785694958,0.541196100,0.275899379];
		var k = 0;
		var _g2 = 0;
		while(_g2 < 8) {
			var row = _g2++;
			var _g21 = 0;
			while(_g21 < 8) {
				var col = _g21++;
				this.fdtbl_Y[k] = 1.0 / (this.YTable[this.ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
				this.fdtbl_UV[k] = 1.0 / (this.UVTable[this.ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
				++k;
			}
		}
	}
	,initLuminance: function() {
		this.std_dc_luminance_nrcodes = [0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];
		this.std_dc_luminance_values = this.strIntsToBytes("0,1,2,3,4,5,6,7,8,9,10,11");
		this.std_ac_luminance_nrcodes = [0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125];
		this.std_ac_luminance_values = this.strIntsToBytes("0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12," + "0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07," + "0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08," + "0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0," + "0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16," + "0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28," + "0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39," + "0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49," + "0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59," + "0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69," + "0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79," + "0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89," + "0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98," + "0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7," + "0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6," + "0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5," + "0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4," + "0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2," + "0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea," + "0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8," + "0xf9,0xfa");
	}
	,strIntsToBytes: function(s) {
		var len = s.length;
		var b = new haxe_io_BytesBuffer();
		var val = 0;
		var i = 0;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var j = _g++;
			if(s.charAt(j) == ",") {
				val = Std.parseInt(HxOverrides.substr(s,i,j - i));
				b.addByte(val);
				i = j + 1;
			}
		}
		if(i < len) {
			val = Std.parseInt(HxOverrides.substr(s,i,null));
			b.addByte(val);
		}
		return b.getBytes();
	}
	,initChrominance: function() {
		this.std_dc_chrominance_nrcodes = [0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];
		this.std_dc_chrominance_values = this.strIntsToBytes("0,1,2,3,4,5,6,7,8,9,10,11");
		this.std_ac_chrominance_nrcodes = [0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119];
		this.std_ac_chrominance_values = this.strIntsToBytes("0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21," + "0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71," + "0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91," + "0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0," + "0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34," + "0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26," + "0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38," + "0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48," + "0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58," + "0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68," + "0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78," + "0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87," + "0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96," + "0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5," + "0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4," + "0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3," + "0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2," + "0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda," + "0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9," + "0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8," + "0xf9,0xfa");
	}
	,initHuffmanTbl: function() {
		this.YDC_HT = this.computeHuffmanTbl(this.std_dc_luminance_nrcodes,this.std_dc_luminance_values);
		this.UVDC_HT = this.computeHuffmanTbl(this.std_dc_chrominance_nrcodes,this.std_dc_chrominance_values);
		this.YAC_HT = this.computeHuffmanTbl(this.std_ac_luminance_nrcodes,this.std_ac_luminance_values);
		this.UVAC_HT = this.computeHuffmanTbl(this.std_ac_chrominance_nrcodes,this.std_ac_chrominance_values);
	}
	,computeHuffmanTbl: function(nrcodes,std_table) {
		var codevalue = 0;
		var pos_in_table = 0;
		var HT = new haxe_ds_IntMap();
		var _g = 1;
		while(_g < 17) {
			var k = _g++;
			var end = nrcodes[k];
			var _g1 = 0;
			var _g11 = end;
			while(_g1 < _g11) {
				var j = _g1++;
				var idx = std_table.b[pos_in_table];
				var value = new arm_format_BitString(k,codevalue);
				HT.h[idx] = value;
				++pos_in_table;
				++codevalue;
			}
			codevalue *= 2;
		}
		return HT;
	}
	,initCategoryNumber: function() {
		var nrlower = 1;
		var nrupper = 2;
		var idx;
		var _g = 1;
		while(_g < 16) {
			var cat = _g++;
			var _g1 = nrlower;
			var _g11 = nrupper;
			while(_g1 < _g11) {
				var nr = _g1++;
				idx = 32767 + nr;
				this.category.h[idx] = cat;
				var this1 = this.bitcode;
				var value = new arm_format_BitString(cat,nr);
				this1.h[idx] = value;
			}
			var nrneg = -(nrupper - 1);
			while(nrneg <= -nrlower) {
				idx = 32767 + nrneg;
				this.category.h[idx] = cat;
				var this2 = this.bitcode;
				var value1 = new arm_format_BitString(cat,nrupper - 1 + nrneg);
				this2.h[idx] = value1;
				++nrneg;
			}
			nrlower <<= 1;
			nrupper <<= 1;
		}
	}
	,writeBits: function(bs) {
		var value = bs.val;
		var posval = bs.len - 1;
		while(posval >= 0) {
			if((value & 1 << posval) != 0) {
				this.bytenew |= 1 << this.bytepos;
			}
			--posval;
			this.bytepos--;
			if(this.bytepos < 0) {
				if(this.bytenew == 255) {
					this.byteout.writeByte(255);
					this.byteout.writeByte(0);
				} else {
					this.byteout.writeByte(this.bytenew);
				}
				this.bytepos = 7;
				this.bytenew = 0;
			}
		}
	}
	,writeWord: function(val) {
		this.byteout.writeByte(val >> 8 & 255);
		this.byteout.writeByte(val & 255);
	}
	,fDCTQuant: function(data,fdtbl) {
		var dataOff = 0;
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			var tmp0 = data[dataOff] + data[dataOff + 7];
			var tmp7 = data[dataOff] - data[dataOff + 7];
			var tmp1 = data[dataOff + 1] + data[dataOff + 6];
			var tmp6 = data[dataOff + 1] - data[dataOff + 6];
			var tmp2 = data[dataOff + 2] + data[dataOff + 5];
			var tmp5 = data[dataOff + 2] - data[dataOff + 5];
			var tmp3 = data[dataOff + 3] + data[dataOff + 4];
			var tmp4 = data[dataOff + 3] - data[dataOff + 4];
			var tmp10 = tmp0 + tmp3;
			var tmp13 = tmp0 - tmp3;
			var tmp11 = tmp1 + tmp2;
			var tmp12 = tmp1 - tmp2;
			data[dataOff] = tmp10 + tmp11;
			data[dataOff + 4] = tmp10 - tmp11;
			var z1 = (tmp12 + tmp13) * 0.707106781;
			data[dataOff + 2] = tmp13 + z1;
			data[dataOff + 6] = tmp13 - z1;
			tmp10 = tmp4 + tmp5;
			tmp11 = tmp5 + tmp6;
			tmp12 = tmp6 + tmp7;
			var z5 = (tmp10 - tmp12) * 0.382683433;
			var z2 = 0.541196100 * tmp10 + z5;
			var z4 = 1.306562965 * tmp12 + z5;
			var z3 = tmp11 * 0.707106781;
			var z11 = tmp7 + z3;
			var z13 = tmp7 - z3;
			data[dataOff + 5] = z13 + z2;
			data[dataOff + 3] = z13 - z2;
			data[dataOff + 1] = z11 + z4;
			data[dataOff + 7] = z11 - z4;
			dataOff += 8;
		}
		dataOff = 0;
		var _g1 = 0;
		while(_g1 < 8) {
			var j = _g1++;
			var tmp0p2 = data[dataOff] + data[dataOff + 56];
			var tmp7p2 = data[dataOff] - data[dataOff + 56];
			var tmp1p2 = data[dataOff + 8] + data[dataOff + 48];
			var tmp6p2 = data[dataOff + 8] - data[dataOff + 48];
			var tmp2p2 = data[dataOff + 16] + data[dataOff + 40];
			var tmp5p2 = data[dataOff + 16] - data[dataOff + 40];
			var tmp3p2 = data[dataOff + 24] + data[dataOff + 32];
			var tmp4p2 = data[dataOff + 24] - data[dataOff + 32];
			var tmp10p2 = tmp0p2 + tmp3p2;
			var tmp13p2 = tmp0p2 - tmp3p2;
			var tmp11p2 = tmp1p2 + tmp2p2;
			var tmp12p2 = tmp1p2 - tmp2p2;
			data[dataOff] = tmp10p2 + tmp11p2;
			data[dataOff + 32] = tmp10p2 - tmp11p2;
			var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;
			data[dataOff + 16] = tmp13p2 + z1p2;
			data[dataOff + 48] = tmp13p2 - z1p2;
			tmp10p2 = tmp4p2 + tmp5p2;
			tmp11p2 = tmp5p2 + tmp6p2;
			tmp12p2 = tmp6p2 + tmp7p2;
			var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
			var z2p2 = 0.541196100 * tmp10p2 + z5p2;
			var z4p2 = 1.306562965 * tmp12p2 + z5p2;
			var z3p2 = tmp11p2 * 0.707106781;
			var z11p2 = tmp7p2 + z3p2;
			var z13p2 = tmp7p2 - z3p2;
			data[dataOff + 40] = z13p2 + z2p2;
			data[dataOff + 24] = z13p2 - z2p2;
			data[dataOff + 8] = z11p2 + z4p2;
			data[dataOff + 56] = z11p2 - z4p2;
			++dataOff;
		}
		var _g2 = 0;
		while(_g2 < 64) {
			var k = _g2++;
			data[k] = Math.round(data[k] * fdtbl[k]);
		}
		return data;
	}
	,writeAPP0: function() {
		this.byteout.writeByte(255);
		this.byteout.writeByte(224);
		this.byteout.writeByte(0);
		this.byteout.writeByte(16);
		this.byteout.writeByte(74);
		this.byteout.writeByte(70);
		this.byteout.writeByte(73);
		this.byteout.writeByte(70);
		this.byteout.writeByte(0);
		this.byteout.writeByte(1);
		this.byteout.writeByte(1);
		this.byteout.writeByte(0);
		this.byteout.writeByte(0);
		this.byteout.writeByte(1);
		this.byteout.writeByte(0);
		this.byteout.writeByte(1);
		this.byteout.writeByte(0);
		this.byteout.writeByte(0);
	}
	,writeDQT: function() {
		this.byteout.writeByte(255);
		this.byteout.writeByte(219);
		this.byteout.writeByte(0);
		this.byteout.writeByte(132);
		this.byteout.writeByte(0);
		var _g = 0;
		while(_g < 64) {
			var j = _g++;
			this.byteout.writeByte(this.YTable[j]);
		}
		this.byteout.writeByte(1);
		var _g1 = 0;
		while(_g1 < 64) {
			var j1 = _g1++;
			this.byteout.writeByte(this.UVTable[j1]);
		}
	}
	,writeSOF0: function(width,height) {
		this.byteout.writeByte(255);
		this.byteout.writeByte(192);
		this.byteout.writeByte(0);
		this.byteout.writeByte(17);
		this.byteout.writeByte(8);
		this.byteout.writeByte(height >> 8 & 255);
		this.byteout.writeByte(height & 255);
		this.byteout.writeByte(width >> 8 & 255);
		this.byteout.writeByte(width & 255);
		this.byteout.writeByte(3);
		this.byteout.writeByte(1);
		this.byteout.writeByte(17);
		this.byteout.writeByte(0);
		this.byteout.writeByte(2);
		this.byteout.writeByte(17);
		this.byteout.writeByte(1);
		this.byteout.writeByte(3);
		this.byteout.writeByte(17);
		this.byteout.writeByte(1);
	}
	,writeDHT: function() {
		this.byteout.writeByte(255);
		this.byteout.writeByte(196);
		this.byteout.writeByte(1);
		this.byteout.writeByte(162);
		this.byteout.writeByte(0);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[1]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[2]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[3]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[4]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[5]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[6]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[7]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[8]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[9]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[10]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[11]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[12]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[13]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[14]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[15]);
		this.byteout.writeByte(this.std_dc_luminance_nrcodes[16]);
		this.byteout.write(this.std_dc_luminance_values);
		this.byteout.writeByte(16);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[1]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[2]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[3]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[4]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[5]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[6]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[7]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[8]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[9]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[10]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[11]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[12]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[13]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[14]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[15]);
		this.byteout.writeByte(this.std_ac_luminance_nrcodes[16]);
		this.byteout.write(this.std_ac_luminance_values);
		this.byteout.writeByte(1);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[1]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[2]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[3]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[4]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[5]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[6]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[7]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[8]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[9]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[10]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[11]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[12]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[13]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[14]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[15]);
		this.byteout.writeByte(this.std_dc_chrominance_nrcodes[16]);
		this.byteout.write(this.std_dc_chrominance_values);
		this.byteout.writeByte(17);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[1]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[2]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[3]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[4]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[5]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[6]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[7]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[8]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[9]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[10]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[11]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[12]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[13]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[14]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[15]);
		this.byteout.writeByte(this.std_ac_chrominance_nrcodes[16]);
		this.byteout.write(this.std_ac_chrominance_values);
	}
	,writeSOS: function() {
		this.byteout.writeByte(255);
		this.byteout.writeByte(218);
		this.byteout.writeByte(0);
		this.byteout.writeByte(12);
		this.byteout.writeByte(3);
		this.byteout.writeByte(1);
		this.byteout.writeByte(0);
		this.byteout.writeByte(2);
		this.byteout.writeByte(17);
		this.byteout.writeByte(3);
		this.byteout.writeByte(17);
		this.byteout.writeByte(0);
		this.byteout.writeByte(63);
		this.byteout.writeByte(0);
	}
	,processDU: function(CDU,fdtbl,DC,HTDC,HTAC) {
		var EOB = HTAC.h[0];
		var M16zeroes = HTAC.h[240];
		var DU_DCT = this.fDCTQuant(CDU,fdtbl);
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.DU[this.ZigZag[i]] = DU_DCT[i];
		}
		var idx;
		var Diff = this.DU[0] - DC | 0;
		DC = this.DU[0];
		if(Diff == 0) {
			this.writeBits(HTDC.h[0]);
		} else {
			idx = 32767 + Diff;
			this.writeBits(HTDC.h[this.category.h[idx]]);
			this.writeBits(this.bitcode.h[idx]);
		}
		var end0pos = 63;
		while(end0pos > 0 && this.DU[end0pos] == 0.0) --end0pos;
		if(end0pos == 0) {
			this.writeBits(EOB);
			return DC;
		}
		var i1 = 1;
		while(i1 <= end0pos) {
			var startpos = i1;
			while(this.DU[i1] == 0.0 && i1 <= end0pos) ++i1;
			var nrzeroes = i1 - startpos;
			if(nrzeroes >= 16) {
				var _g1 = 0;
				var _g2 = nrzeroes >> 4;
				while(_g1 < _g2) {
					var nrmarker = _g1++;
					this.writeBits(M16zeroes);
				}
				nrzeroes &= 15;
			}
			idx = 32767 + (this.DU[i1] | 0);
			this.writeBits(HTAC.h[nrzeroes * 16 + this.category.h[idx]]);
			this.writeBits(this.bitcode.h[idx]);
			++i1;
		}
		if(end0pos != 63) {
			this.writeBits(EOB);
		}
		return DC;
	}
	,RGB2YUV: function(img,width,xpos,ypos) {
		var pos = 0;
		var _g = 0;
		while(_g < 8) {
			var y = _g++;
			var offset = (y + ypos) * width + xpos << 2;
			var _g1 = 0;
			while(_g1 < 8) {
				var x = _g1++;
				++offset;
				var R = img.b[offset++];
				var G = img.b[offset++];
				var B = img.b[offset++];
				this.YDU[pos] = 0.29900 * R + 0.58700 * G + 0.11400 * B - 128;
				this.UDU[pos] = -0.16874 * R + -0.33126 * G + 0.50000 * B;
				this.VDU[pos] = 0.50000 * R + -0.41869 * G + -0.08131 * B;
				++pos;
			}
		}
	}
	,write: function(image,type,off) {
		if(off == null) {
			off = 0;
		}
		if(type == null) {
			type = 0;
		}
		var quality = image.quality;
		if(quality <= 0) {
			quality = 1;
		}
		if(quality > 100) {
			quality = 100;
		}
		var sf = quality < 50 ? 5000 / quality | 0 : 200 - quality * 2 | 0;
		this.initQuantTables(sf);
		this.bytenew = 0;
		this.bytepos = 7;
		var width = image.width;
		var height = image.height;
		this.writeWord(65496);
		this.writeAPP0();
		this.writeDQT();
		this.writeSOF0(width,height);
		this.writeDHT();
		this.writeSOS();
		var DCY = 0.0;
		var DCU = 0.0;
		var DCV = 0.0;
		this.bytenew = 0;
		this.bytepos = 7;
		var ypos = 0;
		if(type == 0) {
			while(ypos < height) {
				var xpos = 0;
				while(xpos < width) {
					this.RGB2YUV(image.pixels,width,xpos,ypos);
					DCY = this.processDU(this.YDU,this.fdtbl_Y,DCY,this.YDC_HT,this.YAC_HT);
					DCU = this.processDU(this.UDU,this.fdtbl_UV,DCU,this.UVDC_HT,this.UVAC_HT);
					DCV = this.processDU(this.VDU,this.fdtbl_UV,DCV,this.UVDC_HT,this.UVAC_HT);
					xpos += 8;
				}
				ypos += 8;
			}
		} else if(type == 1) {
			while(ypos < height) {
				var xpos1 = 0;
				while(xpos1 < width) {
					this.BGRA2YUV(image.pixels,width,xpos1,ypos);
					DCY = this.processDU(this.YDU,this.fdtbl_Y,DCY,this.YDC_HT,this.YAC_HT);
					DCU = this.processDU(this.UDU,this.fdtbl_UV,DCU,this.UVDC_HT,this.UVAC_HT);
					DCV = this.processDU(this.VDU,this.fdtbl_UV,DCV,this.UVDC_HT,this.UVAC_HT);
					xpos1 += 8;
				}
				ypos += 8;
			}
		} else if(type == 2) {
			while(ypos < height) {
				var xpos2 = 0;
				while(xpos2 < width) {
					this.BGRA2YUV_(image.pixels,width,xpos2,ypos,off);
					DCY = this.processDU(this.YDU,this.fdtbl_Y,DCY,this.YDC_HT,this.YAC_HT);
					DCU = this.processDU(this.UDU,this.fdtbl_UV,DCU,this.UVDC_HT,this.UVAC_HT);
					DCV = this.processDU(this.VDU,this.fdtbl_UV,DCV,this.UVDC_HT,this.UVAC_HT);
					xpos2 += 8;
				}
				ypos += 8;
			}
		}
		if(this.bytepos >= 0) {
			var fillbits = new arm_format_BitString(this.bytepos + 1,(1 << this.bytepos + 1) - 1);
			this.writeBits(fillbits);
		}
		this.writeWord(65497);
	}
	,BGRA2YUV: function(img,width,xpos,ypos) {
		var pos = 0;
		var _g = 0;
		while(_g < 8) {
			var y = _g++;
			var offset = (y + ypos) * width + xpos << 2;
			var _g1 = 0;
			while(_g1 < 8) {
				var x = _g1++;
				var R = img.b[offset++];
				var G = img.b[offset++];
				var B = img.b[offset++];
				++offset;
				this.YDU[pos] = 0.29900 * R + 0.58700 * G + 0.11400 * B - 128;
				this.UDU[pos] = -0.16874 * R + -0.33126 * G + 0.50000 * B;
				this.VDU[pos] = 0.50000 * R + -0.41869 * G + -0.08131 * B;
				++pos;
			}
		}
	}
	,BGRA2YUV_: function(img,width,xpos,ypos,off) {
		var pos = 0;
		var _g = 0;
		while(_g < 8) {
			var y = _g++;
			var offset = (y + ypos) * width + xpos << 2;
			var _g1 = 0;
			while(_g1 < 8) {
				var x = _g1++;
				var R = img.b[offset + off];
				offset += 4;
				this.YDU[pos] = 0.29900 * R + 0.58700 * R + 0.11400 * R - 128;
				this.UDU[pos] = -0.16874 * R + -0.33126 * R + 0.50000 * R;
				this.VDU[pos] = 0.50000 * R + -0.41869 * R + -0.08131 * R;
				++pos;
			}
		}
	}
	,__class__: arm_format_JpgWriter
};
var arm_format_BitString = function(l,v) {
	this.len = l;
	this.val = v;
};
$hxClasses["arm.format.BitString"] = arm_format_BitString;
arm_format_BitString.__name__ = "arm.format.BitString";
arm_format_BitString.prototype = {
	__class__: arm_format_BitString
};
var arm_format_Lz4 = function() { };
$hxClasses["arm.format.Lz4"] = arm_format_Lz4;
arm_format_Lz4.__name__ = "arm.format.Lz4";
arm_format_Lz4.encode = function(b) {
	var iBuf = new Uint8Array(b.b.bufferValue);
	var iLen = iBuf.byteLength;
	if(iLen >= 2113929216) {
		haxe_Log.trace("LZ4 range error",{ fileName : "arm/format/Lz4.hx", lineNumber : 39, className : "arm.format.Lz4", methodName : "encode"});
		return null;
	}
	var lastMatchPos = iLen - 12;
	var lastLiteralPos = iLen - 5;
	if(arm_format_Lz4.hashTable == null) {
		arm_format_Lz4.hashTable = new Int32Array(65536);
	}
	arm_format_Lz4.hashTable.fill(-65536);
	var oLen = iLen > 2113929216 ? 0 : iLen + (iLen / 255 | 0) + 16;
	var oBuf = new Uint8Array(oLen);
	var iPos = 0;
	var oPos = 0;
	var anchorPos = 0;
	while(true) {
		var refPos = 0;
		var mOffset = 0;
		var sequence = iBuf[iPos] << 8 | iBuf[iPos + 1] << 16 | iBuf[iPos + 2] << 24;
		while(iPos <= lastMatchPos) {
			sequence = sequence >>> 8 | iBuf[iPos + 3] << 24;
			var hash = (sequence * 40503 & 65535) + (sequence * 31153 >>> 16) & 65535;
			refPos = arm_format_Lz4.hashTable[hash];
			arm_format_Lz4.hashTable[hash] = iPos;
			mOffset = iPos - refPos;
			if(mOffset < 65536 && iBuf[refPos] == (sequence & 255) && iBuf[refPos + 1] == (sequence >>> 8 & 255) && iBuf[refPos + 2] == (sequence >>> 16 & 255) && iBuf[refPos + 3] == (sequence >>> 24 & 255)) {
				break;
			}
			++iPos;
		}
		if(iPos > lastMatchPos) {
			break;
		}
		var lLen = iPos - anchorPos;
		var mLen = iPos;
		iPos += 4;
		refPos += 4;
		while(iPos < lastLiteralPos && iBuf[iPos] == iBuf[refPos]) {
			++iPos;
			++refPos;
		}
		mLen = iPos - mLen;
		var token = mLen < 19 ? mLen - 4 : 15;
		if(lLen >= 15) {
			oBuf[oPos++] = 240 | token;
			var l = lLen - 15;
			while(l >= 255) {
				oBuf[oPos++] = 255;
				l -= 255;
			}
			oBuf[oPos++] = l;
		} else {
			oBuf[oPos++] = lLen << 4 | token;
		}
		while(lLen-- > 0) oBuf[oPos++] = iBuf[anchorPos++];
		if(mLen == 0) {
			break;
		}
		oBuf[oPos] = mOffset;
		oBuf[oPos + 1] = mOffset >>> 8;
		oPos += 2;
		if(mLen >= 19) {
			var l1 = mLen - 19;
			while(l1 >= 255) {
				oBuf[oPos++] = 255;
				l1 -= 255;
			}
			oBuf[oPos++] = l1;
		}
		anchorPos = iPos;
	}
	var lLen1 = iLen - anchorPos;
	if(lLen1 >= 15) {
		oBuf[oPos++] = 240;
		var l2 = lLen1 - 15;
		while(l2 >= 255) {
			oBuf[oPos++] = 255;
			l2 -= 255;
		}
		oBuf[oPos++] = l2;
	} else {
		oBuf[oPos++] = lLen1 << 4;
	}
	while(lLen1-- > 0) oBuf[oPos++] = iBuf[anchorPos++];
	return haxe_io_Bytes.ofData(new Uint8Array(oBuf.buffer,0,oPos));
};
arm_format_Lz4.decode = function(b,oLen) {
	var iBuf = new Uint8Array(b.b.bufferValue);
	var iLen = iBuf.byteLength;
	var oBuf = new Uint8Array(oLen);
	var iPos = 0;
	var oPos = 0;
	while(iPos < iLen) {
		var token = iBuf[iPos++];
		var clen = token >>> 4;
		if(clen != 0) {
			if(clen == 15) {
				var l = 0;
				while(true) {
					l = iBuf[iPos++];
					if(l != 255) {
						break;
					}
					clen += 255;
				}
				clen += l;
			}
			var end = iPos + clen;
			while(iPos < end) oBuf[oPos++] = iBuf[iPos++];
			if(iPos == iLen) {
				break;
			}
		}
		var mOffset = iBuf[iPos] | iBuf[iPos + 1] << 8;
		if(mOffset == 0 || mOffset > oPos) {
			return null;
		}
		iPos += 2;
		clen = (token & 15) + 4;
		if(clen == 19) {
			var l1 = 0;
			while(true) {
				l1 = iBuf[iPos++];
				if(l1 != 255) {
					break;
				}
				clen += 255;
			}
			clen += l1;
		}
		var mPos = oPos - mOffset;
		var end1 = oPos + clen;
		while(oPos < end1) oBuf[oPos++] = oBuf[mPos++];
	}
	return haxe_io_Bytes.ofData(oBuf.buffer);
};
var arm_format_ObjParser = function(blob,startPos,udim) {
	if(udim == null) {
		udim = false;
	}
	if(startPos == null) {
		startPos = 0;
	}
	this.buf = null;
	this.ni = 0;
	this.ui = 0;
	this.vi = 0;
	this.pos = 0;
	this.hasNext = false;
	this.name = "";
	this.scalePos = 1.0;
	this.udimsU = 1;
	this.udims = null;
	this.inda = null;
	this.texa = null;
	this.nora = null;
	this.posa = null;
	var _gthis = this;
	this.pos = startPos;
	var posIndices = [];
	var uvIndices = [];
	var norIndices = [];
	var readingFaces = false;
	var readingObject = false;
	var fullAttrib = false;
	arm_format_ObjParser.bytes = blob.bytes;
	this.posTemp = [];
	this.uvTemp = [];
	this.norTemp = [];
	var this1 = new Uint32Array(60);
	this.va = this1;
	var this2 = new Uint32Array(60);
	this.ua = this2;
	var this3 = new Uint32Array(60);
	this.na = this3;
	var this4 = new Uint8Array(64);
	this.buf = this4;
	if(arm_format_ObjParser.splitCode == 117 && startPos > 0) {
		this.posTemp = arm_format_ObjParser.posFirst;
		this.norTemp = arm_format_ObjParser.norFirst;
		this.uvTemp = arm_format_ObjParser.uvFirst;
	}
	while(this.pos < arm_format_ObjParser.bytes.length) {
		var c0 = arm_format_ObjParser.bytes.b[this.pos++];
		if(readingObject && readingFaces && (c0 == 118 || c0 == arm_format_ObjParser.splitCode)) {
			this.pos--;
			this.hasNext = true;
			break;
		}
		if(c0 == 118) {
			var c1 = arm_format_ObjParser.bytes.b[this.pos++];
			if(c1 == 32) {
				if(arm_format_ObjParser.bytes.b[this.pos] == 32) {
					this.pos++;
				}
				this.posTemp.push(this.readFloat());
				this.pos++;
				this.posTemp.push(this.readFloat());
				this.pos++;
				this.posTemp.push(this.readFloat());
			} else if(c1 == 116) {
				this.pos++;
				this.uvTemp.push(this.readFloat());
				this.pos++;
				this.uvTemp.push(this.readFloat());
				if(this.norTemp.length > 0) {
					fullAttrib = true;
				}
			} else if(c1 == 110) {
				this.pos++;
				this.norTemp.push(this.readFloat());
				this.pos++;
				this.norTemp.push(this.readFloat());
				this.pos++;
				this.norTemp.push(this.readFloat());
				if(this.uvTemp.length > 0) {
					fullAttrib = true;
				}
			}
		} else if(c0 == 102) {
			this.pos++;
			readingFaces = true;
			this.vi = 0;
			this.ui = 0;
			this.ni = 0;
			if(fullAttrib) {
				this.readFaceFast();
			} else {
				this.readFace();
			}
			posIndices.push(this.va[0]);
			posIndices.push(this.va[1]);
			posIndices.push(this.va[2]);
			var _g = 3;
			var _g1 = this.vi;
			while(_g < _g1) {
				var i = _g++;
				posIndices.push(this.va[0]);
				posIndices.push(this.va[i - 1]);
				posIndices.push(this.va[i]);
			}
			if(this.uvTemp.length > 0) {
				uvIndices.push(this.ua[0]);
				uvIndices.push(this.ua[1]);
				uvIndices.push(this.ua[2]);
				var _g2 = 3;
				var _g3 = this.ui;
				while(_g2 < _g3) {
					var i1 = _g2++;
					uvIndices.push(this.ua[0]);
					uvIndices.push(this.ua[i1 - 1]);
					uvIndices.push(this.ua[i1]);
				}
			}
			if(this.norTemp.length > 0) {
				norIndices.push(this.na[0]);
				norIndices.push(this.na[1]);
				norIndices.push(this.na[2]);
				var _g21 = 3;
				var _g31 = this.ni;
				while(_g21 < _g31) {
					var i2 = _g21++;
					norIndices.push(this.na[0]);
					norIndices.push(this.na[i2 - 1]);
					norIndices.push(this.na[i2]);
				}
			}
		} else if(c0 == arm_format_ObjParser.splitCode) {
			if(arm_format_ObjParser.splitCode == 117) {
				this.pos += 5;
			}
			this.pos++;
			if(!udim) {
				readingObject = true;
			}
			this.name = this.readString();
		}
		this.nextLine();
	}
	if(startPos > 0) {
		if(arm_format_ObjParser.splitCode != 117) {
			var _g4 = 0;
			var _g11 = posIndices.length;
			while(_g4 < _g11) {
				var i3 = _g4++;
				posIndices[i3] -= arm_format_ObjParser.vindOff;
			}
			var _g22 = 0;
			var _g32 = uvIndices.length;
			while(_g22 < _g32) {
				var i4 = _g22++;
				uvIndices[i4] -= arm_format_ObjParser.tindOff;
			}
			var _g41 = 0;
			var _g5 = norIndices.length;
			while(_g41 < _g5) {
				var i5 = _g41++;
				norIndices[i5] -= arm_format_ObjParser.nindOff;
			}
		}
	} else {
		arm_format_ObjParser.vindOff = arm_format_ObjParser.tindOff = arm_format_ObjParser.nindOff = 0;
		if(arm_format_ObjParser.splitCode == 117) {
			arm_format_ObjParser.posFirst = this.posTemp;
			arm_format_ObjParser.norFirst = this.norTemp;
			arm_format_ObjParser.uvFirst = this.uvTemp;
		}
	}
	arm_format_ObjParser.vindOff += this.posTemp.length / 3 | 0;
	arm_format_ObjParser.tindOff += this.uvTemp.length / 2 | 0;
	arm_format_ObjParser.nindOff += this.norTemp.length / 3 | 0;
	this.scalePos = 0.0;
	var _g6 = 0;
	var _g12 = this.posTemp.length;
	while(_g6 < _g12) {
		var i6 = _g6++;
		var f = Math.abs(this.posTemp[i6]);
		if(this.scalePos < f) {
			this.scalePos = f;
		}
	}
	var inv = 32767 * (1 / this.scalePos);
	var this5 = new Int16Array(posIndices.length * 4);
	this.posa = this5;
	var this6 = new Uint32Array(posIndices.length);
	this.inda = this6;
	var _g23 = 0;
	var _g33 = posIndices.length;
	while(_g23 < _g33) {
		var i7 = _g23++;
		this.posa[i7 * 4] = this.posTemp[posIndices[i7] * 3] * inv | 0;
		this.posa[i7 * 4 + 1] = -this.posTemp[posIndices[i7] * 3 + 2] * inv | 0;
		this.posa[i7 * 4 + 2] = this.posTemp[posIndices[i7] * 3 + 1] * inv | 0;
		this.inda[i7] = i7;
	}
	if(norIndices.length > 0) {
		var this7 = new Int16Array(norIndices.length * 2);
		this.nora = this7;
		var _g42 = 0;
		var _g51 = posIndices.length;
		while(_g42 < _g51) {
			var i8 = _g42++;
			this.nora[i8 * 2] = this.norTemp[norIndices[i8] * 3] * 32767 | 0;
			this.nora[i8 * 2 + 1] = -this.norTemp[norIndices[i8] * 3 + 2] * 32767 | 0;
			this.posa[i8 * 4 + 3] = this.norTemp[norIndices[i8] * 3 + 1] * 32767 | 0;
		}
	} else {
		var this8 = new Int16Array(this.inda.length * 2);
		this.nora = this8;
		var va_x = 0.0;
		var va_y = 0.0;
		var va_z = 0.0;
		var va_w = 1.0;
		var vb_x = 0.0;
		var vb_y = 0.0;
		var vb_z = 0.0;
		var vb_w = 1.0;
		var vc_x = 0.0;
		var vc_y = 0.0;
		var vc_z = 0.0;
		var vc_w = 1.0;
		var cb_x = 0.0;
		var cb_y = 0.0;
		var cb_z = 0.0;
		var cb_w = 1.0;
		var ab_x = 0.0;
		var ab_y = 0.0;
		var ab_z = 0.0;
		var ab_w = 1.0;
		var _g43 = 0;
		var _g52 = this.inda.length / 3 | 0;
		while(_g43 < _g52) {
			var i9 = _g43++;
			var i11 = this.inda[i9 * 3];
			var i21 = this.inda[i9 * 3 + 1];
			var i31 = this.inda[i9 * 3 + 2];
			va_x = this.posa[i11 * 4];
			va_y = this.posa[i11 * 4 + 1];
			va_z = this.posa[i11 * 4 + 2];
			va_w = 1.0;
			vb_x = this.posa[i21 * 4];
			vb_y = this.posa[i21 * 4 + 1];
			vb_z = this.posa[i21 * 4 + 2];
			vb_w = 1.0;
			vc_x = this.posa[i31 * 4];
			vc_y = this.posa[i31 * 4 + 1];
			vc_z = this.posa[i31 * 4 + 2];
			vc_w = 1.0;
			cb_x = vc_x - vb_x;
			cb_y = vc_y - vb_y;
			cb_z = vc_z - vb_z;
			ab_x = va_x - vb_x;
			ab_y = va_y - vb_y;
			ab_z = va_z - vb_z;
			var ax = cb_x;
			var ay = cb_y;
			var az = cb_z;
			var vx = ab_x;
			var vy = ab_y;
			var vz = ab_z;
			cb_x = ay * vz - az * vy;
			cb_y = az * vx - ax * vz;
			cb_z = ax * vy - ay * vx;
			var n = Math.sqrt(cb_x * cb_x + cb_y * cb_y + cb_z * cb_z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				cb_x *= invN;
				cb_y *= invN;
				cb_z *= invN;
			}
			this.nora[i11 * 2] = cb_x * 32767 | 0;
			this.nora[i11 * 2 + 1] = cb_y * 32767 | 0;
			this.posa[i11 * 4 + 3] = cb_z * 32767 | 0;
			this.nora[i21 * 2] = cb_x * 32767 | 0;
			this.nora[i21 * 2 + 1] = cb_y * 32767 | 0;
			this.posa[i21 * 4 + 3] = cb_z * 32767 | 0;
			this.nora[i31 * 2] = cb_x * 32767 | 0;
			this.nora[i31 * 2 + 1] = cb_y * 32767 | 0;
			this.posa[i31 * 4 + 3] = cb_z * 32767 | 0;
		}
	}
	if(uvIndices.length > 0) {
		if(udim) {
			var tilesU = 1;
			var tilesV = 1;
			var _g44 = 0;
			var _g53 = this.uvTemp.length / 2 | 0;
			while(_g44 < _g53) {
				var i10 = _g44++;
				while(this.uvTemp[i10 * 2] > tilesU) tilesU += 1;
				while(this.uvTemp[i10 * 2 + 1] > tilesV) ++tilesV;
			}
			var getTile = function(i12,i22,i32) {
				var u1 = _gthis.uvTemp[uvIndices[i12] * 2];
				var v1 = _gthis.uvTemp[uvIndices[i12] * 2 + 1];
				var u2 = _gthis.uvTemp[uvIndices[i22] * 2];
				var v2 = _gthis.uvTemp[uvIndices[i22] * 2 + 1];
				var u3 = _gthis.uvTemp[uvIndices[i32] * 2];
				var v3 = _gthis.uvTemp[uvIndices[i32] * 2 + 1];
				var tileU = (u1 + u2 + u3) / 3 | 0;
				var tileV = (v1 + v2 + v3) / 3 | 0;
				return tileU + tileV * tilesU;
			};
			var this9 = new Uint32Array(tilesU * tilesV);
			var num = this9;
			var _g61 = 0;
			var _g7 = this.inda.length / 3 | 0;
			while(_g61 < _g7) {
				var i13 = _g61++;
				var tile = getTile(this.inda[i13 * 3],this.inda[i13 * 3 + 1],this.inda[i13 * 3 + 2]);
				num[tile] += 3;
			}
			this.udims = [];
			this.udimsU = tilesU;
			var _g8 = 0;
			var _g9 = tilesU * tilesV;
			while(_g8 < _g9) {
				var i14 = _g8++;
				var this10 = new Uint32Array(num[i14]);
				this.udims.push(this10);
				num[i14] = 0;
			}
			var _g10 = 0;
			var _g111 = this.inda.length / 3 | 0;
			while(_g10 < _g111) {
				var i15 = _g10++;
				var i16 = this.inda[i15 * 3];
				var i23 = this.inda[i15 * 3 + 1];
				var i33 = this.inda[i15 * 3 + 2];
				var tile1 = getTile(i16,i23,i33);
				var this11 = this.udims[tile1];
				var tmp = tile1;
				var tmp1 = num[tmp];
				num[tmp] = tmp1 + 1;
				this11[tmp1] = i16;
				var this12 = this.udims[tile1];
				var tmp2 = tile1;
				var tmp3 = num[tmp2];
				num[tmp2] = tmp3 + 1;
				this12[tmp3] = i23;
				var this13 = this.udims[tile1];
				var tmp4 = tile1;
				var tmp5 = num[tmp4];
				num[tmp4] = tmp5 + 1;
				this13[tmp5] = i33;
			}
			var this14 = new Int16Array(this.uvTemp.length);
			var uvtiles = this14;
			var _g121 = 0;
			var _g13 = this.inda.length / 3 | 0;
			while(_g121 < _g13) {
				var i17 = _g121++;
				var i18 = this.inda[i17 * 3];
				var i24 = this.inda[i17 * 3 + 1];
				var i34 = this.inda[i17 * 3 + 2];
				var tile2 = getTile(i18,i24,i34);
				var tileU1 = tile2 % tilesU;
				var tileV1 = tile2 / tilesU | 0;
				uvtiles[uvIndices[i18] * 2] = tileU1;
				uvtiles[uvIndices[i18] * 2 + 1] = tileV1;
				uvtiles[uvIndices[i24] * 2] = tileU1;
				uvtiles[uvIndices[i24] * 2 + 1] = tileV1;
				uvtiles[uvIndices[i34] * 2] = tileU1;
				uvtiles[uvIndices[i34] * 2 + 1] = tileV1;
			}
			var _g14 = 0;
			var _g15 = uvtiles.length;
			while(_g14 < _g15) {
				var i19 = _g14++;
				this.uvTemp[i19] -= uvtiles[i19];
			}
		}
		var this15 = new Int16Array(uvIndices.length * 2);
		this.texa = this15;
		var _g45 = 0;
		var _g54 = posIndices.length;
		while(_g45 < _g54) {
			var i20 = _g45++;
			this.texa[i20 * 2] = this.uvTemp[uvIndices[i20] * 2] * 32767 | 0;
			this.texa[i20 * 2 + 1] = (1.0 - this.uvTemp[uvIndices[i20] * 2 + 1]) * 32767 | 0;
		}
	}
	arm_format_ObjParser.bytes = null;
	if(!this.hasNext) {
		arm_format_ObjParser.posFirst = arm_format_ObjParser.norFirst = arm_format_ObjParser.uvFirst = null;
	}
};
$hxClasses["arm.format.ObjParser"] = arm_format_ObjParser;
arm_format_ObjParser.__name__ = "arm.format.ObjParser";
arm_format_ObjParser.prototype = {
	readFaceFast: function() {
		while(true) {
			this.va[this.vi++] = this.readInt() - 1;
			this.pos++;
			this.ua[this.ui++] = this.readInt() - 1;
			this.pos++;
			this.na[this.ni++] = this.readInt() - 1;
			if(arm_format_ObjParser.bytes.b[this.pos] == 10 || arm_format_ObjParser.bytes.b[this.pos] == 13) {
				break;
			}
			this.pos++;
			if(this.vi >= 3 && (arm_format_ObjParser.bytes.b[this.pos] == 10 || arm_format_ObjParser.bytes.b[this.pos] == 13)) {
				break;
			}
		}
	}
	,readFace: function() {
		while(true) {
			this.va[this.vi++] = this.readInt() - 1;
			if(this.uvTemp.length > 0 || this.norTemp.length > 0) {
				this.pos++;
			}
			if(this.uvTemp.length > 0) {
				this.ua[this.ui++] = this.readInt() - 1;
			}
			if(this.norTemp.length > 0) {
				this.pos++;
				this.na[this.ni++] = this.readInt() - 1;
			}
			if(arm_format_ObjParser.bytes.b[this.pos] == 10 || arm_format_ObjParser.bytes.b[this.pos] == 13) {
				break;
			}
			this.pos++;
			if(this.vi >= 3 && (arm_format_ObjParser.bytes.b[this.pos] == 10 || arm_format_ObjParser.bytes.b[this.pos] == 13)) {
				break;
			}
		}
	}
	,readFloat: function() {
		var bi = 0;
		while(true) {
			var c = arm_format_ObjParser.bytes.b[this.pos];
			if(c == 32 || c == 10 || c == 13) {
				break;
			}
			if(c == 69 || c == 101) {
				while(true) {
					this.pos++;
					c = arm_format_ObjParser.bytes.b[this.pos];
					if(c == 32 || c == 10 || c == 13) {
						break;
					}
				}
				return 0.0;
			}
			this.pos++;
			this.buf[bi++] = c;
		}
		var res = 0.0;
		var dot = 1;
		var dec = 1;
		var off = this.buf[0] == 45 ? 1 : 0;
		var len = bi - 1;
		var _g = 0;
		var _g1 = bi - off;
		while(_g < _g1) {
			var i = _g++;
			var c1 = this.buf[len - i];
			if(c1 == 46) {
				dot = dec;
				continue;
			}
			res += (c1 - 48) * dec;
			dec *= 10;
		}
		if(off > 0) {
			res /= -dot;
		} else {
			res /= dot;
		}
		return res;
	}
	,readInt: function() {
		var bi = 0;
		while(true) {
			var c = arm_format_ObjParser.bytes.b[this.pos];
			if(c == 47 || c == 10 || c == 13 || c == 32) {
				break;
			}
			this.pos++;
			this.buf[bi++] = c;
		}
		var res = 0;
		var dec = 1;
		var off = this.buf[0] == 45 ? 1 : 0;
		var len = bi - 1;
		var _g = 0;
		var _g1 = bi - off;
		while(_g < _g1) {
			var i = _g++;
			res += (this.buf[len - i] - 48) * dec;
			dec *= 10;
		}
		if(off > 0) {
			res *= -1;
		}
		return res;
	}
	,readString: function() {
		var s = "";
		while(true) {
			var c = arm_format_ObjParser.bytes.b[this.pos];
			if(c == 10 || c == 13 || c == 32) {
				break;
			}
			this.pos++;
			s += String.fromCodePoint(c);
		}
		return s;
	}
	,nextLine: function() {
		while(true) {
			var c = arm_format_ObjParser.bytes.b[this.pos++];
			if(c == 10 || this.pos >= arm_format_ObjParser.bytes.length) {
				break;
			}
		}
	}
	,__class__: arm_format_ObjParser
};
var arm_format_Color = $hxEnums["arm.format.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"]
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"arm.format.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"arm.format.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_index:2,__enum__:"arm.format.Color",toString:$estr}
};
var arm_format_Chunk = $hxEnums["arm.format.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"]
	,CEnd: {_hx_index:0,__enum__:"arm.format.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"arm.format.Chunk",toString:$estr}; },$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"arm.format.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"arm.format.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"arm.format.Chunk",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
var arm_format_PngTools = function() { };
$hxClasses["arm.format.PngTools"] = arm_format_PngTools;
arm_format_PngTools.__name__ = "arm.format.PngTools";
arm_format_PngTools.build32RGBA = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var x = _g2++;
			rgba.b[w++] = data.b[r];
			rgba.b[w++] = data.b[r + 1];
			rgba.b[w++] = data.b[r + 2];
			rgba.b[w++] = data.b[r + 3];
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(arm_format_Chunk.CHeader({ width : width, height : height, colbits : 8, color : arm_format_Color.ColTrue(true), interlaced : false}));
	l.add(arm_format_Chunk.CData(arm_format_PngTools.deflate(rgba,level)));
	l.add(arm_format_Chunk.CEnd);
	return l;
};
arm_format_PngTools.build32RGB1 = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var x = _g2++;
			rgba.b[w++] = data.b[r];
			rgba.b[w++] = data.b[r + 1];
			rgba.b[w++] = data.b[r + 2];
			rgba.b[w++] = 255;
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(arm_format_Chunk.CHeader({ width : width, height : height, colbits : 8, color : arm_format_Color.ColTrue(true), interlaced : false}));
	l.add(arm_format_Chunk.CData(arm_format_PngTools.deflate(rgba,level)));
	l.add(arm_format_Chunk.CEnd);
	return l;
};
arm_format_PngTools.build32RRR1 = function(width,height,data,off,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var x = _g2++;
			rgba.b[w++] = data.b[r + off];
			rgba.b[w++] = data.b[r + off];
			rgba.b[w++] = data.b[r + off];
			rgba.b[w++] = 255;
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(arm_format_Chunk.CHeader({ width : width, height : height, colbits : 8, color : arm_format_Color.ColTrue(true), interlaced : false}));
	l.add(arm_format_Chunk.CData(arm_format_PngTools.deflate(rgba,level)));
	l.add(arm_format_Chunk.CEnd);
	return l;
};
arm_format_PngTools.deflate = function(b,level) {
	if(level == null) {
		level = 9;
	}
	var input = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(b);
	var output = arm_format_pako_Pako.deflate(input);
	return haxe_io_Bytes.ofData(output.buffer);
};
var arm_format_PngWriter = function(o) {
	this.o = o;
	o.set_bigEndian(true);
};
$hxClasses["arm.format.PngWriter"] = arm_format_PngWriter;
arm_format_PngWriter.__name__ = "arm.format.PngWriter";
arm_format_PngWriter.prototype = {
	write: function(png) {
		var b = 137;
		this.o.writeByte(b);
		var b1 = 80;
		this.o.writeByte(b1);
		var b2 = 78;
		this.o.writeByte(b2);
		var b3 = 71;
		this.o.writeByte(b3);
		var b4 = 13;
		this.o.writeByte(b4);
		var b5 = 10;
		this.o.writeByte(b5);
		var b6 = 26;
		this.o.writeByte(b6);
		var b7 = 10;
		this.o.writeByte(b7);
		var _g_head = png.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			switch(c._hx_index) {
			case 0:
				this.writeChunk("IEND",new haxe_io_Bytes(new ArrayBuffer(0)));
				break;
			case 1:
				var h = c.h;
				var b8 = new haxe_io_BytesOutput();
				b8.set_bigEndian(true);
				b8.writeInt32(h.width);
				b8.writeInt32(h.height);
				b8.writeByte(h.colbits);
				var _g = h.color;
				var tmp;
				switch(_g._hx_index) {
				case 0:
					var alpha = _g.alpha;
					tmp = alpha ? 4 : 0;
					break;
				case 1:
					var alpha1 = _g.alpha;
					tmp = alpha1 ? 6 : 2;
					break;
				case 2:
					tmp = 3;
					break;
				}
				b8.writeByte(tmp);
				b8.writeByte(0);
				b8.writeByte(0);
				b8.writeByte(h.interlaced ? 1 : 0);
				this.writeChunk("IHDR",b8.getBytes());
				break;
			case 2:
				var d = c.b;
				this.writeChunk("IDAT",d);
				break;
			case 3:
				var b9 = c.b;
				this.writeChunk("PLTE",b9);
				break;
			case 4:
				var data = c.data;
				var id = c.id;
				this.writeChunk(id,data);
				break;
			}
		}
	}
	,writeChunk: function(id,data) {
		this.o.writeInt32(data.length);
		this.o.writeString(id);
		this.o.write(data);
		var crc_crc = -1;
		var tmp = (crc_crc ^ HxOverrides.cca(id,0)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var tmp1 = (crc_crc ^ HxOverrides.cca(id,1)) & 255;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp1;
		var tmp2 = (crc_crc ^ HxOverrides.cca(id,2)) & 255;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp2;
		var tmp3 = (crc_crc ^ HxOverrides.cca(id,3)) & 255;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp3;
		var b = data.b.bufferValue;
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			var tmp4 = (crc_crc ^ b.bytes[i]) & 255;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			crc_crc = crc_crc >>> 8 ^ tmp4;
		}
		this.o.writeInt32(crc_crc ^ -1);
	}
	,__class__: arm_format_PngWriter
};
var arm_format_pako_Deflate = function(options) {
	this.result = null;
	this.strm = new arm_format_pako_zlib_ZStream();
	this.chunks = [];
	this.ended = false;
	this.msg = "";
	this.err = 0;
	this.options = null;
	this.options = { };
	this.options.level = options != null && options.level != null ? options.level : arm_format_pako_Deflate.DEFAULT_OPTIONS.level;
	this.options.method = options != null && options.method != null ? options.method : arm_format_pako_Deflate.DEFAULT_OPTIONS.method;
	this.options.chunkSize = options != null && options.chunkSize != null ? options.chunkSize : arm_format_pako_Deflate.DEFAULT_OPTIONS.chunkSize;
	this.options.windowBits = options != null && options.windowBits != null ? options.windowBits : arm_format_pako_Deflate.DEFAULT_OPTIONS.windowBits;
	this.options.memLevel = options != null && options.memLevel != null ? options.memLevel : arm_format_pako_Deflate.DEFAULT_OPTIONS.memLevel;
	this.options.strategy = options != null && options.strategy != null ? options.strategy : arm_format_pako_Deflate.DEFAULT_OPTIONS.strategy;
	this.options.raw = options != null && options.raw != null ? options.raw : arm_format_pako_Deflate.DEFAULT_OPTIONS.raw;
	this.options.gzip = options != null && options.gzip != null ? options.gzip : arm_format_pako_Deflate.DEFAULT_OPTIONS.gzip;
	this.options.header = options != null && options.header != null ? options.header : arm_format_pako_Deflate.DEFAULT_OPTIONS.header;
	this.options.dictionary = options != null && options.dictionary != null ? options.dictionary : arm_format_pako_Deflate.DEFAULT_OPTIONS.dictionary;
	if(this.options.raw && this.options.windowBits > 0) {
		this.options.windowBits = -this.options.windowBits;
	} else if(this.options.gzip && this.options.windowBits > 0 && this.options.windowBits < 16) {
		this.options.windowBits += 16;
	}
	this.onData = $bind(this,this._onData);
	this.onEnd = $bind(this,this._onEnd);
	this.strm.avail_out = 0;
	var status = arm_format_pako_zlib_Deflate.deflateInit2(this.strm,this.options.level,this.options.method,this.options.windowBits,this.options.memLevel,this.options.strategy);
	if(status != 0) {
		throw new js__$Boot_HaxeError(arm_format_pako_zlib_Messages.get(status));
	}
	if(this.options.header != null) {
		arm_format_pako_zlib_Deflate.deflateSetHeader(this.strm,this.options.header);
	}
	if(this.options.dictionary != null) {
		status = arm_format_pako_zlib_Deflate.deflateSetDictionary(this.strm,this.options.dictionary);
	}
	if(status != 0) {
		throw new js__$Boot_HaxeError(arm_format_pako_zlib_Messages.get(status));
	}
};
$hxClasses["arm.format.pako.Deflate"] = arm_format_pako_Deflate;
arm_format_pako_Deflate.__name__ = "arm.format.pako.Deflate";
arm_format_pako_Deflate.prototype = {
	push: function(data,mode) {
		if(mode == null) {
			mode = false;
		}
		var strm = this.strm;
		var chunkSize = this.options.chunkSize;
		var status;
		var _mode;
		if(this.ended) {
			return false;
		}
		if(typeof(mode) == "number" && ((mode | 0) === mode)) {
			_mode = mode;
		} else if(typeof(mode) == "boolean") {
			_mode = mode ? 4 : 0;
		} else {
			throw new js__$Boot_HaxeError("Invalid mode.");
		}
		strm.input = data;
		strm.next_in = 0;
		strm.avail_in = strm.input.length;
		while(true) {
			if(strm.avail_out == 0) {
				var this1 = new Uint8Array(chunkSize);
				strm.output = this1;
				strm.next_out = 0;
				strm.avail_out = chunkSize;
			}
			status = arm_format_pako_zlib_Deflate.deflate(strm,_mode);
			if(status != 1 && status != 0) {
				this.onEnd(status);
				this.ended = true;
				return false;
			}
			if(strm.avail_out == 0 || strm.avail_in == 0 && (_mode == 4 || _mode == 2)) {
				var buf = strm.output;
				var size = strm.next_out;
				if(buf.length != size) {
					buf = buf.subarray(0,size);
				}
				this.onData(buf);
			}
			if(!((strm.avail_in > 0 || strm.avail_out == 0) && status != 1)) {
				break;
			}
		}
		if(_mode == 4) {
			status = arm_format_pako_zlib_Deflate.deflateEnd(this.strm);
			this.onEnd(status);
			this.ended = true;
			return status == 0;
		}
		if(_mode == 2) {
			this.onEnd(0);
			strm.avail_out = 0;
			return true;
		}
		return true;
	}
	,_onData: function(chunk) {
		this.chunks.push(chunk);
	}
	,_onEnd: function(status) {
		if(status == 0) {
			this.result = arm_format_pako_utils_Common.flattenChunks(this.chunks);
		}
		this.chunks = [];
		this.err = status;
		this.msg = this.strm.msg;
	}
	,__class__: arm_format_pako_Deflate
};
var arm_format_pako_Inflate = function(options) {
	this.result = null;
	this.header = new arm_format_pako_zlib_GZHeader();
	this.strm = new arm_format_pako_zlib_ZStream();
	this.chunks = [];
	this.ended = false;
	this.msg = "";
	this.err = 0;
	this.options = null;
	this.options = { };
	this.options.chunkSize = options != null && options.chunkSize != null ? options.chunkSize : arm_format_pako_Inflate.DEFAULT_OPTIONS.chunkSize;
	this.options.windowBits = options != null && options.windowBits != null ? options.windowBits : arm_format_pako_Inflate.DEFAULT_OPTIONS.windowBits;
	this.options.raw = options != null && options.raw != null ? options.raw : arm_format_pako_Inflate.DEFAULT_OPTIONS.raw;
	this.options.dictionary = options != null && options.dictionary != null ? options.dictionary : arm_format_pako_Inflate.DEFAULT_OPTIONS.dictionary;
	if(this.options.raw && this.options.windowBits >= 0 && this.options.windowBits < 16) {
		this.options.windowBits = -this.options.windowBits;
		if(this.options.windowBits == 0) {
			this.options.windowBits = -15;
		}
	}
	if(this.options.windowBits >= 0 && this.options.windowBits < 16 && (options == null || options.windowBits == null)) {
		this.options.windowBits += 32;
	}
	if(this.options.windowBits > 15 && this.options.windowBits < 48) {
		if((this.options.windowBits & 15) == 0) {
			this.options.windowBits |= 15;
		}
	}
	this.onData = $bind(this,this._onData);
	this.onEnd = $bind(this,this._onEnd);
	this.strm.avail_out = 0;
	var status = arm_format_pako_zlib_Inflate.inflateInit2(this.strm,this.options.windowBits);
	if(status != 0) {
		throw new js__$Boot_HaxeError(arm_format_pako_zlib_Messages.get(status));
	}
	arm_format_pako_zlib_Inflate.inflateGetHeader(this.strm,this.header);
};
$hxClasses["arm.format.pako.Inflate"] = arm_format_pako_Inflate;
arm_format_pako_Inflate.__name__ = "arm.format.pako.Inflate";
arm_format_pako_Inflate.prototype = {
	push: function(data,mode) {
		if(mode == null) {
			mode = false;
		}
		var strm = this.strm;
		var chunkSize = this.options.chunkSize;
		var dictionary = this.options.dictionary;
		var status;
		var _mode;
		var next_out_utf8;
		var tail;
		var utf8str;
		var allowBufError = false;
		if(this.ended) {
			return false;
		}
		if(typeof(mode) == "number" && ((mode | 0) === mode)) {
			_mode = mode;
		} else if(typeof(mode) == "boolean") {
			_mode = mode ? 4 : 0;
		} else {
			throw new js__$Boot_HaxeError("Invalid mode.");
		}
		strm.input = data;
		strm.next_in = 0;
		strm.avail_in = strm.input.length;
		while(true) {
			if(strm.avail_out == 0) {
				var this1 = new Uint8Array(chunkSize);
				strm.output = this1;
				strm.next_out = 0;
				strm.avail_out = chunkSize;
			}
			status = arm_format_pako_zlib_Inflate.inflate(strm,0);
			if(status == 2 && dictionary != null) {
				status = arm_format_pako_zlib_Inflate.inflateSetDictionary(this.strm,dictionary);
			}
			if(status == -5 && allowBufError) {
				status = 0;
				allowBufError = false;
			}
			if(status != 1 && status != 0) {
				this.onEnd(status);
				this.ended = true;
				return false;
			}
			if(strm.next_out != 0) {
				if(strm.avail_out == 0 || status == 1 || strm.avail_in == 0 && (_mode == 4 || _mode == 2)) {
					var buf = strm.output;
					var size = strm.next_out;
					if(buf.length != size) {
						buf = buf.subarray(0,size);
					}
					this.onData(buf);
				}
			}
			if(strm.avail_in == 0 && strm.avail_out == 0) {
				allowBufError = true;
			}
			if(!((strm.avail_in > 0 || strm.avail_out == 0) && status != 1)) {
				break;
			}
		}
		if(status == 1) {
			_mode = 4;
		}
		if(_mode == 4) {
			status = arm_format_pako_zlib_Inflate.inflateEnd(this.strm);
			this.onEnd(status);
			this.ended = true;
			return status == 0;
		}
		if(_mode == 2) {
			this.onEnd(0);
			strm.avail_out = 0;
			return true;
		}
		return true;
	}
	,_onData: function(chunk) {
		this.chunks.push(chunk);
	}
	,_onEnd: function(status) {
		if(status == 0) {
			this.result = arm_format_pako_utils_Common.flattenChunks(this.chunks);
		}
		this.chunks = [];
		this.err = status;
		this.msg = this.strm.msg;
	}
	,__class__: arm_format_pako_Inflate
};
var arm_format_pako_Pako = function() { };
$hxClasses["arm.format.pako.Pako"] = arm_format_pako_Pako;
arm_format_pako_Pako.__name__ = "arm.format.pako.Pako";
arm_format_pako_Pako.deflate = function(input,options) {
	var deflator = new arm_format_pako_Deflate(options);
	deflator.push(input,4);
	if(deflator.err != 0) {
		throw new js__$Boot_HaxeError(deflator.msg != "" ? deflator.msg : arm_format_pako_zlib_Messages.get(deflator.err));
	}
	return deflator.result;
};
arm_format_pako_Pako.inflate = function(input,options) {
	var inflator = new arm_format_pako_Inflate(options);
	inflator.push(input,true);
	if(inflator.err != 0) {
		throw new js__$Boot_HaxeError(inflator.msg != "" ? inflator.msg : arm_format_pako_zlib_Messages.get(inflator.err));
	}
	return inflator.result;
};
var arm_format_pako_utils_Common = function() { };
$hxClasses["arm.format.pako.utils.Common"] = arm_format_pako_utils_Common;
arm_format_pako_utils_Common.__name__ = "arm.format.pako.utils.Common";
arm_format_pako_utils_Common.flattenChunks = function(chunks) {
	var i;
	var chunk;
	var len = 0;
	var l = chunks.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i1 = _g++;
		len += chunks[i1].length;
	}
	var this1 = new Uint8Array(len);
	var result = this1;
	var pos = 0;
	var _g2 = 0;
	var _g3 = l;
	while(_g2 < _g3) {
		var i2 = _g2++;
		chunk = chunks[i2];
		haxe_io_Bytes.ofData(result.buffer).blit(pos,haxe_io_Bytes.ofData(chunk.buffer),0,chunk.length);
		pos += chunk.length;
	}
	return result;
};
var arm_format_pako_zlib_Adler32 = function() { };
$hxClasses["arm.format.pako.zlib.Adler32"] = arm_format_pako_zlib_Adler32;
arm_format_pako_zlib_Adler32.__name__ = "arm.format.pako.zlib.Adler32";
arm_format_pako_zlib_Adler32.adler32 = function(adler,buf,len,pos) {
	var s1 = adler & 65535 | 0;
	var s2 = adler >>> 16 & 65535 | 0;
	var n = 0;
	while(len != 0) {
		n = len > 2000 ? 2000 : len;
		len -= n;
		while(true) {
			s1 = s1 + buf[pos++] | 0;
			s2 = s2 + s1 | 0;
			if(!(--n != 0)) {
				break;
			}
		}
		s1 %= 65521;
		s2 %= 65521;
	}
	return s1 | s2 << 16 | 0;
};
var arm_format_pako_zlib_CRC32 = function() { };
$hxClasses["arm.format.pako.zlib.CRC32"] = arm_format_pako_zlib_CRC32;
arm_format_pako_zlib_CRC32.__name__ = "arm.format.pako.zlib.CRC32";
arm_format_pako_zlib_CRC32.makeTable = function() {
	var c;
	var this1 = new Array(256);
	var table = this1;
	var _g = 0;
	while(_g < 256) {
		var n = _g++;
		c = n;
		if((c & 1) == 1) {
			c = -306674912 ^ c >>> 1;
		} else {
			c >>>= 1;
		}
		if((c & 1) == 1) {
			c = -306674912 ^ c >>> 1;
		} else {
			c >>>= 1;
		}
		if((c & 1) == 1) {
			c = -306674912 ^ c >>> 1;
		} else {
			c >>>= 1;
		}
		if((c & 1) == 1) {
			c = -306674912 ^ c >>> 1;
		} else {
			c >>>= 1;
		}
		if((c & 1) == 1) {
			c = -306674912 ^ c >>> 1;
		} else {
			c >>>= 1;
		}
		if((c & 1) == 1) {
			c = -306674912 ^ c >>> 1;
		} else {
			c >>>= 1;
		}
		if((c & 1) == 1) {
			c = -306674912 ^ c >>> 1;
		} else {
			c >>>= 1;
		}
		if((c & 1) == 1) {
			c = -306674912 ^ c >>> 1;
		} else {
			c >>>= 1;
		}
		table[n] = c;
	}
	return table;
};
arm_format_pako_zlib_CRC32.crc32 = function(crc,buf,len,pos) {
	var t = arm_format_pako_zlib_CRC32.crcTable;
	var end = pos + len;
	crc ^= -1;
	var _g = pos;
	var _g1 = end;
	while(_g < _g1) {
		var i = _g++;
		crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
	}
	return crc ^ -1;
};
var haxe_io__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["haxe.io._UInt16Array.UInt16Array_Impl_"] = haxe_io__$UInt16Array_UInt16Array_$Impl_$;
haxe_io__$UInt16Array_UInt16Array_$Impl_$.__name__ = "haxe.io._UInt16Array.UInt16Array_Impl_";
haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray = function(a,pos,length) {
	if(pos == null) {
		pos = 0;
	}
	if(length == null) {
		length = a.length - pos;
	}
	if(pos < 0 || length < 0 || pos + length > a.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	if(pos == 0 && length == a.length) {
		return new Uint16Array(a);
	}
	var this1 = new Uint16Array(a.length);
	var i = this1;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var idx = _g++;
		i[idx] = a[idx + pos];
	}
	return i;
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var arm_format_pako_zlib_Trees = function() { };
$hxClasses["arm.format.pako.zlib.Trees"] = arm_format_pako_zlib_Trees;
arm_format_pako_zlib_Trees.__name__ = "arm.format.pako.zlib.Trees";
arm_format_pako_zlib_Trees.send_bits = function(s,value,length) {
	if(s.bi_valid > 16 - length) {
		s.bi_buf |= value << s.bi_valid & 65535;
		var w = s.bi_buf;
		s.pending_buf[s.pending++] = w & 255;
		s.pending_buf[s.pending++] = w >>> 8 & 255;
		s.bi_buf = value >> 16 - s.bi_valid;
		s.bi_valid += length - 16;
	} else {
		s.bi_buf |= value << s.bi_valid & 65535;
		s.bi_valid += length;
	}
};
arm_format_pako_zlib_Trees.bi_reverse = function(code,len) {
	var res = 0;
	while(true) {
		res |= code & 1;
		code >>>= 1;
		res <<= 1;
		if(!(--len > 0)) {
			break;
		}
	}
	return res >>> 1;
};
arm_format_pako_zlib_Trees.bi_flush = function(s) {
	if(s.bi_valid == 16) {
		var w = s.bi_buf;
		s.pending_buf[s.pending++] = w & 255;
		s.pending_buf[s.pending++] = w >>> 8 & 255;
		s.bi_buf = 0;
		s.bi_valid = 0;
	} else if(s.bi_valid >= 8) {
		s.pending_buf[s.pending++] = s.bi_buf & 255;
		s.bi_buf >>= 8;
		s.bi_valid -= 8;
	}
};
arm_format_pako_zlib_Trees.gen_bitlen = function(s,desc) {
	var tree = desc.dyn_tree;
	var max_code = desc.max_code;
	var stree = desc.stat_desc.static_tree;
	var has_stree = desc.stat_desc.has_stree;
	var extra = desc.stat_desc.extra_bits;
	var base = desc.stat_desc.extra_base;
	var max_length = desc.stat_desc.max_length;
	var n;
	var m;
	var bits;
	var xbits;
	var f;
	var overflow = 0;
	var _g = 0;
	var _g1 = 16;
	while(_g < _g1) {
		var bits1 = _g++;
		s.bl_count[bits1] = 0;
	}
	tree[s.heap[s.heap_max] * 2 + 1] = 0;
	var _g2 = s.heap_max + 1;
	var _g3 = 573;
	while(_g2 < _g3) {
		var h = _g2++;
		n = s.heap[h];
		bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
		if(bits > max_length) {
			bits = max_length;
			++overflow;
		}
		tree[n * 2 + 1] = bits;
		if(n > max_code) {
			continue;
		}
		s.bl_count[bits] += 1;
		xbits = 0;
		if(n >= base) {
			xbits = extra[n - base];
		}
		f = tree[n * 2];
		s.opt_len += f * (bits + xbits);
		if(has_stree) {
			s.static_len += f * (stree[n * 2 + 1] + xbits);
		}
	}
	if(overflow == 0) {
		return;
	}
	var h1 = 573;
	while(true) {
		bits = max_length - 1;
		while(s.bl_count[bits] == 0) --bits;
		s.bl_count[bits] -= 1;
		s.bl_count[bits + 1] += 2;
		s.bl_count[max_length] -= 1;
		overflow -= 2;
		if(!(overflow > 0)) {
			break;
		}
	}
	bits = max_length;
	while(bits != 0) {
		n = s.bl_count[bits];
		while(n != 0) {
			m = s.heap[--h1];
			if(m > max_code) {
				continue;
			}
			if(tree[m * 2 + 1] != bits) {
				s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
				tree[m * 2 + 1] = bits;
			}
			--n;
		}
		--bits;
	}
};
arm_format_pako_zlib_Trees.gen_codes = function(tree,max_code,bl_count) {
	var this1 = new Array(16);
	var next_code = this1;
	var code = 0;
	var bits;
	var n;
	var _g = 1;
	var _g1 = 16;
	while(_g < _g1) {
		var bits1 = _g++;
		code = code + bl_count[bits1 - 1] << 1;
		next_code[bits1] = code;
	}
	var _g2 = 0;
	var _g3 = max_code + 1;
	while(_g2 < _g3) {
		var n1 = _g2++;
		var len = tree[n1 * 2 + 1];
		if(len == 0) {
			continue;
		}
		tree[n1 * 2] = arm_format_pako_zlib_Trees.bi_reverse(next_code[len],len);
		var _g21 = len;
		var _g31 = next_code;
		_g31[_g21] = _g31[_g21] + 1;
	}
};
arm_format_pako_zlib_Trees.tr_static_init = function() {
	var bits;
	var this1 = new Uint16Array(16);
	var bl_count = this1;
	var length = 0;
	var _g = 0;
	var _g1 = 28;
	while(_g < _g1) {
		var code = _g++;
		arm_format_pako_zlib_Trees.base_length[code] = length;
		var _g2 = 0;
		var _g11 = 1 << arm_format_pako_zlib_Trees.extra_lbits[code];
		while(_g2 < _g11) {
			var n = _g2++;
			arm_format_pako_zlib_Trees._length_code[length++] = code;
		}
	}
	var code1 = 28;
	arm_format_pako_zlib_Trees._length_code[length - 1] = code1;
	var dist = 0;
	var _g21 = 0;
	while(_g21 < 16) {
		var code2 = _g21++;
		arm_format_pako_zlib_Trees.base_dist[code2] = dist;
		var _g22 = 0;
		var _g3 = 1 << arm_format_pako_zlib_Trees.extra_dbits[code2];
		while(_g22 < _g3) {
			var n1 = _g22++;
			arm_format_pako_zlib_Trees._dist_code[dist++] = code2;
		}
	}
	dist >>= 7;
	var _g31 = 16;
	while(_g31 < 30) {
		var code3 = _g31++;
		arm_format_pako_zlib_Trees.base_dist[code3] = dist << 7;
		var _g32 = 0;
		var _g4 = 1 << arm_format_pako_zlib_Trees.extra_dbits[code3] - 7;
		while(_g32 < _g4) {
			var n2 = _g32++;
			arm_format_pako_zlib_Trees._dist_code[256 + dist++] = code3;
		}
	}
	var _g41 = 0;
	var _g5 = 16;
	while(_g41 < _g5) {
		var bits1 = _g41++;
		bl_count[bits1] = 0;
	}
	var n3 = 0;
	while(n3 <= 143) {
		arm_format_pako_zlib_Trees.static_ltree[n3 * 2 + 1] = 8;
		++n3;
		bl_count[8] += 1;
	}
	while(n3 <= 255) {
		arm_format_pako_zlib_Trees.static_ltree[n3 * 2 + 1] = 9;
		++n3;
		bl_count[9] += 1;
	}
	while(n3 <= 279) {
		arm_format_pako_zlib_Trees.static_ltree[n3 * 2 + 1] = 7;
		++n3;
		bl_count[7] += 1;
	}
	while(n3 <= 287) {
		arm_format_pako_zlib_Trees.static_ltree[n3 * 2 + 1] = 8;
		++n3;
		bl_count[8] += 1;
	}
	arm_format_pako_zlib_Trees.gen_codes(arm_format_pako_zlib_Trees.static_ltree,287,bl_count);
	var _g6 = 0;
	while(_g6 < 30) {
		var n4 = _g6++;
		arm_format_pako_zlib_Trees.static_dtree[n4 * 2 + 1] = 5;
		arm_format_pako_zlib_Trees.static_dtree[n4 * 2] = arm_format_pako_zlib_Trees.bi_reverse(n4,5);
	}
	arm_format_pako_zlib_Trees.static_l_desc = new arm_format_pako_zlib_StaticTreeDesc(arm_format_pako_zlib_Trees.static_ltree,arm_format_pako_zlib_Trees.extra_lbits,257,286,15);
	arm_format_pako_zlib_Trees.static_d_desc = new arm_format_pako_zlib_StaticTreeDesc(arm_format_pako_zlib_Trees.static_dtree,arm_format_pako_zlib_Trees.extra_dbits,0,30,15);
	var this2 = new Uint16Array(0);
	arm_format_pako_zlib_Trees.static_bl_desc = new arm_format_pako_zlib_StaticTreeDesc(this2,arm_format_pako_zlib_Trees.extra_blbits,0,19,7);
};
arm_format_pako_zlib_Trees.init_block = function(s) {
	var n;
	var _g = 0;
	while(_g < 286) {
		var n1 = _g++;
		s.dyn_ltree[n1 * 2] = 0;
	}
	var _g1 = 0;
	while(_g1 < 30) {
		var n2 = _g1++;
		s.dyn_dtree[n2 * 2] = 0;
	}
	s.bl_tree[0] = 0;
	s.bl_tree[2] = 0;
	s.bl_tree[4] = 0;
	s.bl_tree[6] = 0;
	s.bl_tree[8] = 0;
	s.bl_tree[10] = 0;
	s.bl_tree[12] = 0;
	s.bl_tree[14] = 0;
	s.bl_tree[16] = 0;
	s.bl_tree[18] = 0;
	s.bl_tree[20] = 0;
	s.bl_tree[22] = 0;
	s.bl_tree[24] = 0;
	s.bl_tree[26] = 0;
	s.bl_tree[28] = 0;
	s.bl_tree[30] = 0;
	s.bl_tree[32] = 0;
	s.bl_tree[34] = 0;
	s.bl_tree[36] = 0;
	s.dyn_ltree[512] = 1;
	s.opt_len = s.static_len = 0;
	s.last_lit = s.matches = 0;
};
arm_format_pako_zlib_Trees.bi_windup = function(s) {
	if(s.bi_valid > 8) {
		var w = s.bi_buf;
		s.pending_buf[s.pending++] = w & 255;
		s.pending_buf[s.pending++] = w >>> 8 & 255;
	} else if(s.bi_valid > 0) {
		s.pending_buf[s.pending++] = s.bi_buf;
	}
	s.bi_buf = 0;
	s.bi_valid = 0;
};
arm_format_pako_zlib_Trees.pqdownheap = function(s,tree,k) {
	var v = s.heap[k];
	var j = k << 1;
	while(j <= s.heap_len) {
		var tmp;
		if(j < s.heap_len) {
			var n = s.heap[j + 1];
			var m = s.heap[j];
			var depth = s.depth;
			var _n2 = n * 2;
			var _m2 = m * 2;
			tmp = tree[_n2] < tree[_m2] || tree[_n2] == tree[_m2] && depth[n] <= depth[m];
		} else {
			tmp = false;
		}
		if(tmp) {
			++j;
		}
		var m1 = s.heap[j];
		var depth1 = s.depth;
		var _n21 = v * 2;
		var _m21 = m1 * 2;
		if(tree[_n21] < tree[_m21] || tree[_n21] == tree[_m21] && depth1[v] <= depth1[m1]) {
			break;
		}
		s.heap[k] = s.heap[j];
		k = j;
		j <<= 1;
	}
	s.heap[k] = v;
};
arm_format_pako_zlib_Trees.compress_block = function(s,ltree,dtree) {
	var dist;
	var lc;
	var lx = 0;
	var code;
	var extra;
	if(s.last_lit != 0) {
		while(true) {
			dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
			lc = s.pending_buf[s.l_buf + lx];
			++lx;
			if(dist == 0) {
				arm_format_pako_zlib_Trees.send_bits(s,ltree[lc * 2],ltree[lc * 2 + 1]);
			} else {
				code = arm_format_pako_zlib_Trees._length_code[lc];
				var c = code + 256 + 1;
				arm_format_pako_zlib_Trees.send_bits(s,ltree[c * 2],ltree[c * 2 + 1]);
				extra = arm_format_pako_zlib_Trees.extra_lbits[code];
				if(extra != 0) {
					lc -= arm_format_pako_zlib_Trees.base_length[code];
					arm_format_pako_zlib_Trees.send_bits(s,lc,extra);
				}
				--dist;
				code = dist < 256 ? arm_format_pako_zlib_Trees._dist_code[dist] : arm_format_pako_zlib_Trees._dist_code[256 + (dist >>> 7)];
				arm_format_pako_zlib_Trees.send_bits(s,dtree[code * 2],dtree[code * 2 + 1]);
				extra = arm_format_pako_zlib_Trees.extra_dbits[code];
				if(extra != 0) {
					dist -= arm_format_pako_zlib_Trees.base_dist[code];
					arm_format_pako_zlib_Trees.send_bits(s,dist,extra);
				}
			}
			if(!(lx < s.last_lit)) {
				break;
			}
		}
	}
	arm_format_pako_zlib_Trees.send_bits(s,ltree[512],ltree[513]);
};
arm_format_pako_zlib_Trees.build_tree = function(s,desc) {
	var tree = desc.dyn_tree;
	var stree = desc.stat_desc.static_tree;
	var has_stree = desc.stat_desc.has_stree;
	var elems = desc.stat_desc.elems;
	var n;
	var m;
	var max_code = -1;
	var node;
	s.heap_len = 0;
	s.heap_max = 573;
	var _g = 0;
	var _g1 = elems;
	while(_g < _g1) {
		var n1 = _g++;
		if(tree[n1 * 2] != 0) {
			max_code = n1;
			s.heap[++s.heap_len] = max_code;
			s.depth[n1] = 0;
		} else {
			tree[n1 * 2 + 1] = 0;
		}
	}
	while(s.heap_len < 2) {
		var index = ++s.heap_len;
		var value;
		if(max_code < 2) {
			++max_code;
			value = max_code;
		} else {
			value = 0;
		}
		node = s.heap[index] = value;
		tree[node * 2] = 1;
		s.depth[node] = 0;
		s.opt_len--;
		if(has_stree) {
			s.static_len -= stree[node * 2 + 1];
		}
	}
	desc.max_code = max_code;
	var n2 = s.heap_len >> 1;
	while(n2 >= 1) {
		arm_format_pako_zlib_Trees.pqdownheap(s,tree,n2);
		--n2;
	}
	node = elems;
	while(true) {
		n2 = s.heap[1];
		s.heap[1] = s.heap[s.heap_len--];
		arm_format_pako_zlib_Trees.pqdownheap(s,tree,1);
		m = s.heap[1];
		s.heap[--s.heap_max] = n2;
		s.heap[--s.heap_max] = m;
		tree[node * 2] = tree[n2 * 2] + tree[m * 2];
		s.depth[node] = (s.depth[n2] >= s.depth[m] ? s.depth[n2] : s.depth[m]) + 1;
		tree[n2 * 2 + 1] = tree[m * 2 + 1] = node;
		s.heap[1] = node++;
		arm_format_pako_zlib_Trees.pqdownheap(s,tree,1);
		if(!(s.heap_len >= 2)) {
			break;
		}
	}
	var value1 = s.heap[1];
	s.heap[--s.heap_max] = value1;
	arm_format_pako_zlib_Trees.gen_bitlen(s,desc);
	arm_format_pako_zlib_Trees.gen_codes(tree,max_code,s.bl_count);
};
arm_format_pako_zlib_Trees.scan_tree = function(s,tree,max_code) {
	var n;
	var prevlen = -1;
	var curlen;
	var nextlen = tree[1];
	var count = 0;
	var max_count = 7;
	var min_count = 4;
	if(nextlen == 0) {
		max_count = 138;
		min_count = 3;
	}
	tree[(max_code + 1) * 2 + 1] = 65535;
	var _g = 0;
	var _g1 = max_code + 1;
	while(_g < _g1) {
		var n1 = _g++;
		curlen = nextlen;
		nextlen = tree[(n1 + 1) * 2 + 1];
		if(++count < max_count && curlen == nextlen) {
			continue;
		} else if(count < min_count) {
			s.bl_tree[curlen * 2] += count;
		} else if(curlen != 0) {
			if(curlen != prevlen) {
				s.bl_tree[curlen * 2] += 1;
			}
			s.bl_tree[32] += 1;
		} else if(count <= 10) {
			s.bl_tree[34] += 1;
		} else {
			s.bl_tree[36] += 1;
		}
		count = 0;
		prevlen = curlen;
		if(nextlen == 0) {
			max_count = 138;
			min_count = 3;
		} else if(curlen == nextlen) {
			max_count = 6;
			min_count = 3;
		} else {
			max_count = 7;
			min_count = 4;
		}
	}
};
arm_format_pako_zlib_Trees.send_tree = function(s,tree,max_code) {
	var n;
	var prevlen = -1;
	var curlen;
	var nextlen = tree[1];
	var count = 0;
	var max_count = 7;
	var min_count = 4;
	if(nextlen == 0) {
		max_count = 138;
		min_count = 3;
	}
	var _g = 0;
	var _g1 = max_code + 1;
	while(_g < _g1) {
		var n1 = _g++;
		curlen = nextlen;
		nextlen = tree[(n1 + 1) * 2 + 1];
		if(++count < max_count && curlen == nextlen) {
			continue;
		} else if(count < min_count) {
			while(true) {
				var tree1 = s.bl_tree;
				arm_format_pako_zlib_Trees.send_bits(s,tree1[curlen * 2],tree1[curlen * 2 + 1]);
				if(!(--count != 0)) {
					break;
				}
			}
		} else if(curlen != 0) {
			if(curlen != prevlen) {
				var tree2 = s.bl_tree;
				arm_format_pako_zlib_Trees.send_bits(s,tree2[curlen * 2],tree2[curlen * 2 + 1]);
				--count;
			}
			var tree3 = s.bl_tree;
			arm_format_pako_zlib_Trees.send_bits(s,tree3[32],tree3[33]);
			arm_format_pako_zlib_Trees.send_bits(s,count - 3,2);
		} else if(count <= 10) {
			var tree4 = s.bl_tree;
			arm_format_pako_zlib_Trees.send_bits(s,tree4[34],tree4[35]);
			arm_format_pako_zlib_Trees.send_bits(s,count - 3,3);
		} else {
			var tree5 = s.bl_tree;
			arm_format_pako_zlib_Trees.send_bits(s,tree5[36],tree5[37]);
			arm_format_pako_zlib_Trees.send_bits(s,count - 11,7);
		}
		count = 0;
		prevlen = curlen;
		if(nextlen == 0) {
			max_count = 138;
			min_count = 3;
		} else if(curlen == nextlen) {
			max_count = 6;
			min_count = 3;
		} else {
			max_count = 7;
			min_count = 4;
		}
	}
};
arm_format_pako_zlib_Trees.build_bl_tree = function(s) {
	var max_blindex;
	arm_format_pako_zlib_Trees.scan_tree(s,s.dyn_ltree,s.l_desc.max_code);
	arm_format_pako_zlib_Trees.scan_tree(s,s.dyn_dtree,s.d_desc.max_code);
	arm_format_pako_zlib_Trees.build_tree(s,s.bl_desc);
	var max_blindex1 = 18;
	while(max_blindex1 >= 3) {
		if(s.bl_tree[arm_format_pako_zlib_Trees.bl_order[max_blindex1] * 2 + 1] != 0) {
			break;
		}
		--max_blindex1;
	}
	s.opt_len += 3 * (max_blindex1 + 1) + 5 + 5 + 4;
	return max_blindex1;
};
arm_format_pako_zlib_Trees.send_all_trees = function(s,lcodes,dcodes,blcodes) {
	var rank;
	arm_format_pako_zlib_Trees.send_bits(s,lcodes - 257,5);
	arm_format_pako_zlib_Trees.send_bits(s,dcodes - 1,5);
	arm_format_pako_zlib_Trees.send_bits(s,blcodes - 4,4);
	var _g = 0;
	var _g1 = blcodes;
	while(_g < _g1) {
		var rank1 = _g++;
		arm_format_pako_zlib_Trees.send_bits(s,s.bl_tree[arm_format_pako_zlib_Trees.bl_order[rank1] * 2 + 1],3);
	}
	arm_format_pako_zlib_Trees.send_tree(s,s.dyn_ltree,lcodes - 1);
	arm_format_pako_zlib_Trees.send_tree(s,s.dyn_dtree,dcodes - 1);
};
arm_format_pako_zlib_Trees.detect_data_type = function(s) {
	var black_mask = -201342849;
	var n = 0;
	while(n <= 31) {
		if((black_mask & 1) == 1 && s.dyn_ltree[n * 2] != 0) {
			return 0;
		}
		++n;
		black_mask >>>= 1;
	}
	if(s.dyn_ltree[18] != 0 || s.dyn_ltree[20] != 0 || s.dyn_ltree[26] != 0) {
		return 1;
	}
	var _g = 32;
	while(_g < 256) {
		var n1 = _g++;
		if(s.dyn_ltree[n1 * 2] != 0) {
			return 1;
		}
	}
	return 0;
};
arm_format_pako_zlib_Trees._tr_init = function(s) {
	if(!arm_format_pako_zlib_Trees.static_init_done) {
		arm_format_pako_zlib_Trees.tr_static_init();
		arm_format_pako_zlib_Trees.static_init_done = true;
	}
	s.l_desc = new arm_format_pako_zlib_TreeDesc(s.dyn_ltree,arm_format_pako_zlib_Trees.static_l_desc);
	s.d_desc = new arm_format_pako_zlib_TreeDesc(s.dyn_dtree,arm_format_pako_zlib_Trees.static_d_desc);
	s.bl_desc = new arm_format_pako_zlib_TreeDesc(s.bl_tree,arm_format_pako_zlib_Trees.static_bl_desc);
	s.bi_buf = 0;
	s.bi_valid = 0;
	arm_format_pako_zlib_Trees.init_block(s);
};
arm_format_pako_zlib_Trees._tr_flush_block = function(s,buf,stored_len,last) {
	var opt_lenb;
	var static_lenb;
	var max_blindex = 0;
	if(s.level > 0) {
		if(s.strm.data_type == 2) {
			s.strm.data_type = arm_format_pako_zlib_Trees.detect_data_type(s);
		}
		arm_format_pako_zlib_Trees.build_tree(s,s.l_desc);
		arm_format_pako_zlib_Trees.build_tree(s,s.d_desc);
		max_blindex = arm_format_pako_zlib_Trees.build_bl_tree(s);
		opt_lenb = s.opt_len + 3 + 7 >>> 3;
		static_lenb = s.static_len + 3 + 7 >>> 3;
		if(static_lenb <= opt_lenb) {
			opt_lenb = static_lenb;
		}
	} else {
		static_lenb = stored_len + 5;
		opt_lenb = static_lenb;
	}
	if(stored_len + 4 <= opt_lenb && buf != -1) {
		arm_format_pako_zlib_Trees.send_bits(s,last ? 1 : 0,3);
		arm_format_pako_zlib_Trees.bi_windup(s);
		s.pending_buf[s.pending++] = stored_len & 255;
		s.pending_buf[s.pending++] = stored_len >>> 8 & 255;
		var w = ~stored_len;
		s.pending_buf[s.pending++] = w & 255;
		s.pending_buf[s.pending++] = w >>> 8 & 255;
		var dest = s.pending_buf;
		var src = s.window;
		var dest_offs = s.pending;
		haxe_io_Bytes.ofData(dest.buffer).blit(dest.byteOffset + dest_offs,haxe_io_Bytes.ofData(src.buffer),src.byteOffset + buf,stored_len);
		s.pending += stored_len;
	} else if(s.strategy == 4 || static_lenb == opt_lenb) {
		arm_format_pako_zlib_Trees.send_bits(s,2 + (last ? 1 : 0),3);
		arm_format_pako_zlib_Trees.compress_block(s,arm_format_pako_zlib_Trees.static_ltree,arm_format_pako_zlib_Trees.static_dtree);
	} else {
		arm_format_pako_zlib_Trees.send_bits(s,4 + (last ? 1 : 0),3);
		arm_format_pako_zlib_Trees.send_all_trees(s,s.l_desc.max_code + 1,s.d_desc.max_code + 1,max_blindex + 1);
		arm_format_pako_zlib_Trees.compress_block(s,s.dyn_ltree,s.dyn_dtree);
	}
	arm_format_pako_zlib_Trees.init_block(s);
	if(last) {
		arm_format_pako_zlib_Trees.bi_windup(s);
	}
};
var arm_format_pako_zlib_Config = function(good_length,max_lazy,nice_length,max_chain,func) {
	this.good_length = good_length;
	this.max_lazy = max_lazy;
	this.nice_length = nice_length;
	this.max_chain = max_chain;
	this.func = func;
};
$hxClasses["arm.format.pako.zlib.Config"] = arm_format_pako_zlib_Config;
arm_format_pako_zlib_Config.__name__ = "arm.format.pako.zlib.Config";
arm_format_pako_zlib_Config.prototype = {
	__class__: arm_format_pako_zlib_Config
};
var arm_format_pako_zlib_Deflate = function() { };
$hxClasses["arm.format.pako.zlib.Deflate"] = arm_format_pako_zlib_Deflate;
arm_format_pako_zlib_Deflate.__name__ = "arm.format.pako.zlib.Deflate";
arm_format_pako_zlib_Deflate.flush_pending = function(strm) {
	var s = strm.deflateState;
	var len = s.pending;
	if(len > strm.avail_out) {
		len = strm.avail_out;
	}
	if(len == 0) {
		return;
	}
	var dest = strm.output;
	var src = s.pending_buf;
	var src_offs = s.pending_out;
	var dest_offs = strm.next_out;
	haxe_io_Bytes.ofData(dest.buffer).blit(dest.byteOffset + dest_offs,haxe_io_Bytes.ofData(src.buffer),src.byteOffset + src_offs,len);
	strm.next_out += len;
	s.pending_out += len;
	strm.total_out += len;
	strm.avail_out -= len;
	s.pending -= len;
	if(s.pending == 0) {
		s.pending_out = 0;
	}
};
arm_format_pako_zlib_Deflate.read_buf = function(strm,buf,start,size) {
	var len = strm.avail_in;
	if(len > size) {
		len = size;
	}
	if(len == 0) {
		return 0;
	}
	strm.avail_in -= len;
	var dest = buf;
	var src = strm.input;
	var src_offs = strm.next_in;
	haxe_io_Bytes.ofData(dest.buffer).blit(dest.byteOffset + start,haxe_io_Bytes.ofData(src.buffer),src.byteOffset + src_offs,len);
	if(strm.deflateState.wrap == 1) {
		strm.adler = arm_format_pako_zlib_Adler32.adler32(strm.adler,buf,len,start);
	} else if(strm.deflateState.wrap == 2) {
		strm.adler = arm_format_pako_zlib_CRC32.crc32(strm.adler,buf,len,start);
	}
	strm.next_in += len;
	strm.total_in += len;
	return len;
};
arm_format_pako_zlib_Deflate.longest_match = function(s,cur_match) {
	var chain_length = s.max_chain_length;
	var scan = s.strstart;
	var match;
	var len;
	var best_len = s.prev_length;
	var nice_match = s.nice_match;
	var limit = s.strstart > s.w_size - 262 ? s.strstart - (s.w_size - 262) : 0;
	var _win = s.window;
	var wmask = s.w_mask;
	var prev = s.prev;
	var strend = s.strstart + 258;
	var scan_end1 = _win[scan + best_len - 1];
	var scan_end = _win[scan + best_len];
	if(s.prev_length >= s.good_match) {
		chain_length >>= 2;
	}
	if(nice_match > s.lookahead) {
		nice_match = s.lookahead;
	}
	while(true) {
		match = cur_match;
		if(_win[match + best_len] != scan_end || _win[match + best_len - 1] != scan_end1 || _win[match] != _win[scan] || _win[++match] != _win[scan + 1]) {
			cur_match = prev[cur_match & wmask];
			if(!(cur_match > limit && --chain_length != 0)) {
				break;
			} else {
				continue;
			}
		}
		scan += 2;
		++match;
		while(_win[++scan] == _win[++match] && _win[++scan] == _win[++match] && _win[++scan] == _win[++match] && _win[++scan] == _win[++match] && _win[++scan] == _win[++match] && _win[++scan] == _win[++match] && _win[++scan] == _win[++match] && _win[++scan] == _win[++match] && scan < strend) {
		}
		len = 258 - (strend - scan);
		scan = strend - 258;
		if(len > best_len) {
			s.match_start = cur_match;
			best_len = len;
			if(len >= nice_match) {
				break;
			}
			scan_end1 = _win[scan + best_len - 1];
			scan_end = _win[scan + best_len];
		}
		cur_match = prev[cur_match & wmask];
		if(!(cur_match > limit && --chain_length != 0)) {
			break;
		}
	}
	if(best_len <= s.lookahead) {
		return best_len;
	}
	return s.lookahead;
};
arm_format_pako_zlib_Deflate.fill_window = function(s) {
	var _w_size = s.w_size;
	var p;
	var n;
	var m;
	var more;
	var str;
	while(true) {
		more = s.window_size - s.lookahead - s.strstart;
		if(s.strstart >= _w_size + (_w_size - 262)) {
			var dest = s.window;
			var src = s.window;
			haxe_io_Bytes.ofData(dest.buffer).blit(dest.byteOffset,haxe_io_Bytes.ofData(src.buffer),src.byteOffset + _w_size,_w_size);
			s.match_start -= _w_size;
			s.strstart -= _w_size;
			s.block_start -= _w_size;
			n = s.hash_size;
			p = n;
			while(true) {
				m = s.head[--p];
				s.head[p] = m >= _w_size ? m - _w_size : 0;
				if(!(--n != 0)) {
					break;
				}
			}
			n = _w_size;
			p = n;
			while(true) {
				m = s.prev[--p];
				s.prev[p] = m >= _w_size ? m - _w_size : 0;
				if(!(--n != 0)) {
					break;
				}
			}
			more += _w_size;
		}
		if(s.strm.avail_in == 0) {
			break;
		}
		n = arm_format_pako_zlib_Deflate.read_buf(s.strm,s.window,s.strstart + s.lookahead,more);
		s.lookahead += n;
		if(s.lookahead + s.insert >= 3) {
			str = s.strstart - s.insert;
			s.ins_h = s.window[str];
			s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
			while(s.insert != 0) {
				s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 3 - 1]) & s.hash_mask;
				s.prev[str & s.w_mask] = s.head[s.ins_h];
				s.head[s.ins_h] = str;
				++str;
				s.insert--;
				if(s.lookahead + s.insert < 3) {
					break;
				}
			}
		}
		if(!(s.lookahead < 262 && s.strm.avail_in != 0)) {
			break;
		}
	}
};
arm_format_pako_zlib_Deflate.deflate_stored = function(s,flush) {
	var max_block_size = 65535;
	if(max_block_size > s.pending_buf_size - 5) {
		max_block_size = s.pending_buf_size - 5;
	}
	while(true) {
		if(s.lookahead <= 1) {
			arm_format_pako_zlib_Deflate.fill_window(s);
			if(s.lookahead == 0 && flush == 0) {
				return 1;
			}
			if(s.lookahead == 0) {
				break;
			}
		}
		s.strstart += s.lookahead;
		s.lookahead = 0;
		var max_start = s.block_start + max_block_size;
		if(s.strstart == 0 || s.strstart >= max_start) {
			s.lookahead = s.strstart - max_start;
			s.strstart = max_start;
			arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
			s.block_start = s.strstart;
			arm_format_pako_zlib_Deflate.flush_pending(s.strm);
			if(s.strm.avail_out == 0) {
				return 1;
			}
		}
		if(s.strstart - s.block_start >= s.w_size - 262) {
			arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
			s.block_start = s.strstart;
			arm_format_pako_zlib_Deflate.flush_pending(s.strm);
			if(s.strm.avail_out == 0) {
				return 1;
			}
		}
	}
	s.insert = 0;
	if(flush == 4) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,true);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 3;
		}
		return 4;
	}
	if(s.strstart > s.block_start) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 1;
		}
	}
	return 1;
};
arm_format_pako_zlib_Deflate.deflate_fast = function(s,flush) {
	var hash_head;
	var bflush;
	while(true) {
		if(s.lookahead < 262) {
			arm_format_pako_zlib_Deflate.fill_window(s);
			if(s.lookahead < 262 && flush == 0) {
				return 1;
			}
			if(s.lookahead == 0) {
				break;
			}
		}
		hash_head = 0;
		if(s.lookahead >= 3) {
			s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 3 - 1]) & s.hash_mask;
			hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
			s.head[s.ins_h] = s.strstart;
		}
		if(hash_head != 0 && s.strstart - hash_head <= s.w_size - 262) {
			s.match_length = arm_format_pako_zlib_Deflate.longest_match(s,hash_head);
		}
		if(s.match_length >= 3) {
			var dist = s.strstart - s.match_start;
			var lc = s.match_length - 3;
			s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
			s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
			s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
			s.last_lit++;
			if(dist == 0) {
				s.dyn_ltree[lc * 2] += 1;
			} else {
				s.matches++;
				--dist;
				s.dyn_ltree[(arm_format_pako_zlib_Trees._length_code[lc] + 256 + 1) * 2] += 1;
				s.dyn_dtree[(dist < 256 ? arm_format_pako_zlib_Trees._dist_code[dist] : arm_format_pako_zlib_Trees._dist_code[256 + (dist >>> 7)]) * 2] += 1;
			}
			bflush = s.last_lit == s.lit_bufsize - 1;
			s.lookahead -= s.match_length;
			if(s.match_length <= s.max_lazy_match && s.lookahead >= 3) {
				s.match_length--;
				while(true) {
					s.strstart++;
					s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 3 - 1]) & s.hash_mask;
					hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
					s.head[s.ins_h] = s.strstart;
					if(!(--s.match_length != 0)) {
						break;
					}
				}
				s.strstart++;
			} else {
				s.strstart += s.match_length;
				s.match_length = 0;
				s.ins_h = s.window[s.strstart];
				s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
			}
		} else {
			var dist1 = 0;
			var lc1 = s.window[s.strstart];
			s.pending_buf[s.d_buf + s.last_lit * 2] = dist1 >>> 8 & 255;
			s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist1 & 255;
			s.pending_buf[s.l_buf + s.last_lit] = lc1 & 255;
			s.last_lit++;
			if(dist1 == 0) {
				s.dyn_ltree[lc1 * 2] += 1;
			} else {
				s.matches++;
				--dist1;
				s.dyn_ltree[(arm_format_pako_zlib_Trees._length_code[lc1] + 256 + 1) * 2] += 1;
				s.dyn_dtree[(dist1 < 256 ? arm_format_pako_zlib_Trees._dist_code[dist1] : arm_format_pako_zlib_Trees._dist_code[256 + (dist1 >>> 7)]) * 2] += 1;
			}
			bflush = s.last_lit == s.lit_bufsize - 1;
			s.lookahead--;
			s.strstart++;
		}
		if(bflush) {
			arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
			s.block_start = s.strstart;
			arm_format_pako_zlib_Deflate.flush_pending(s.strm);
			if(s.strm.avail_out == 0) {
				return 1;
			}
		}
	}
	s.insert = s.strstart < 2 ? s.strstart : 2;
	if(flush == 4) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,true);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 3;
		}
		return 4;
	}
	if(s.last_lit != 0) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 1;
		}
	}
	return 2;
};
arm_format_pako_zlib_Deflate.deflate_slow = function(s,flush) {
	var hash_head;
	var bflush;
	var max_insert;
	while(true) {
		if(s.lookahead < 262) {
			arm_format_pako_zlib_Deflate.fill_window(s);
			if(s.lookahead < 262 && flush == 0) {
				return 1;
			}
			if(s.lookahead == 0) {
				break;
			}
		}
		hash_head = 0;
		if(s.lookahead >= 3) {
			s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 3 - 1]) & s.hash_mask;
			hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
			s.head[s.ins_h] = s.strstart;
		}
		s.prev_length = s.match_length;
		s.prev_match = s.match_start;
		s.match_length = 2;
		if(hash_head != 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - 262) {
			s.match_length = arm_format_pako_zlib_Deflate.longest_match(s,hash_head);
			if(s.match_length <= 5 && (s.strategy == 1 || s.match_length == 3 && s.strstart - s.match_start > 4096)) {
				s.match_length = 2;
			}
		}
		if(s.prev_length >= 3 && s.match_length <= s.prev_length) {
			max_insert = s.strstart + s.lookahead - 3;
			var dist = s.strstart - 1 - s.prev_match;
			var lc = s.prev_length - 3;
			s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
			s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
			s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
			s.last_lit++;
			if(dist == 0) {
				s.dyn_ltree[lc * 2] += 1;
			} else {
				s.matches++;
				--dist;
				s.dyn_ltree[(arm_format_pako_zlib_Trees._length_code[lc] + 256 + 1) * 2] += 1;
				s.dyn_dtree[(dist < 256 ? arm_format_pako_zlib_Trees._dist_code[dist] : arm_format_pako_zlib_Trees._dist_code[256 + (dist >>> 7)]) * 2] += 1;
			}
			bflush = s.last_lit == s.lit_bufsize - 1;
			s.lookahead -= s.prev_length - 1;
			s.prev_length -= 2;
			while(true) {
				if(++s.strstart <= max_insert) {
					s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 3 - 1]) & s.hash_mask;
					hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
					s.head[s.ins_h] = s.strstart;
				}
				if(!(--s.prev_length != 0)) {
					break;
				}
			}
			s.match_available = false;
			s.match_length = 2;
			s.strstart++;
			if(bflush) {
				arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
				s.block_start = s.strstart;
				arm_format_pako_zlib_Deflate.flush_pending(s.strm);
				if(s.strm.avail_out == 0) {
					return 1;
				}
			}
		} else if(s.match_available) {
			var dist1 = 0;
			var lc1 = s.window[s.strstart - 1];
			s.pending_buf[s.d_buf + s.last_lit * 2] = dist1 >>> 8 & 255;
			s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist1 & 255;
			s.pending_buf[s.l_buf + s.last_lit] = lc1 & 255;
			s.last_lit++;
			if(dist1 == 0) {
				s.dyn_ltree[lc1 * 2] += 1;
			} else {
				s.matches++;
				--dist1;
				s.dyn_ltree[(arm_format_pako_zlib_Trees._length_code[lc1] + 256 + 1) * 2] += 1;
				s.dyn_dtree[(dist1 < 256 ? arm_format_pako_zlib_Trees._dist_code[dist1] : arm_format_pako_zlib_Trees._dist_code[256 + (dist1 >>> 7)]) * 2] += 1;
			}
			bflush = s.last_lit == s.lit_bufsize - 1;
			if(bflush) {
				arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
				s.block_start = s.strstart;
				arm_format_pako_zlib_Deflate.flush_pending(s.strm);
			}
			s.strstart++;
			s.lookahead--;
			if(s.strm.avail_out == 0) {
				return 1;
			}
		} else {
			s.match_available = true;
			s.strstart++;
			s.lookahead--;
		}
	}
	if(s.match_available) {
		var dist2 = 0;
		var lc2 = s.window[s.strstart - 1];
		s.pending_buf[s.d_buf + s.last_lit * 2] = dist2 >>> 8 & 255;
		s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist2 & 255;
		s.pending_buf[s.l_buf + s.last_lit] = lc2 & 255;
		s.last_lit++;
		if(dist2 == 0) {
			s.dyn_ltree[lc2 * 2] += 1;
		} else {
			s.matches++;
			--dist2;
			s.dyn_ltree[(arm_format_pako_zlib_Trees._length_code[lc2] + 256 + 1) * 2] += 1;
			s.dyn_dtree[(dist2 < 256 ? arm_format_pako_zlib_Trees._dist_code[dist2] : arm_format_pako_zlib_Trees._dist_code[256 + (dist2 >>> 7)]) * 2] += 1;
		}
		bflush = s.last_lit == s.lit_bufsize - 1;
		s.match_available = false;
	}
	s.insert = s.strstart < 2 ? s.strstart : 2;
	if(flush == 4) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,true);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 3;
		}
		return 4;
	}
	if(s.last_lit != 0) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 1;
		}
	}
	return 2;
};
arm_format_pako_zlib_Deflate.deflate_rle = function(s,flush) {
	var bflush;
	var prev;
	var scan;
	var strend;
	var _win = s.window;
	while(true) {
		if(s.lookahead <= 258) {
			arm_format_pako_zlib_Deflate.fill_window(s);
			if(s.lookahead <= 258 && flush == 0) {
				return 1;
			}
			if(s.lookahead == 0) {
				break;
			}
		}
		s.match_length = 0;
		if(s.lookahead >= 3 && s.strstart > 0) {
			scan = s.strstart - 1;
			prev = _win[scan];
			if(prev == _win[++scan] && prev == _win[++scan] && prev == _win[++scan]) {
				strend = s.strstart + 258;
				while(prev == _win[++scan] && prev == _win[++scan] && prev == _win[++scan] && prev == _win[++scan] && prev == _win[++scan] && prev == _win[++scan] && prev == _win[++scan] && prev == _win[++scan] && scan < strend) {
				}
				s.match_length = 258 - (strend - scan);
				if(s.match_length > s.lookahead) {
					s.match_length = s.lookahead;
				}
			}
		}
		if(s.match_length >= 3) {
			var dist = 1;
			var lc = s.match_length - 3;
			s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
			s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
			s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
			s.last_lit++;
			if(dist == 0) {
				s.dyn_ltree[lc * 2] += 1;
			} else {
				s.matches++;
				--dist;
				s.dyn_ltree[(arm_format_pako_zlib_Trees._length_code[lc] + 256 + 1) * 2] += 1;
				s.dyn_dtree[(dist < 256 ? arm_format_pako_zlib_Trees._dist_code[dist] : arm_format_pako_zlib_Trees._dist_code[256 + (dist >>> 7)]) * 2] += 1;
			}
			bflush = s.last_lit == s.lit_bufsize - 1;
			s.lookahead -= s.match_length;
			s.strstart += s.match_length;
			s.match_length = 0;
		} else {
			var dist1 = 0;
			var lc1 = s.window[s.strstart];
			s.pending_buf[s.d_buf + s.last_lit * 2] = dist1 >>> 8 & 255;
			s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist1 & 255;
			s.pending_buf[s.l_buf + s.last_lit] = lc1 & 255;
			s.last_lit++;
			if(dist1 == 0) {
				s.dyn_ltree[lc1 * 2] += 1;
			} else {
				s.matches++;
				--dist1;
				s.dyn_ltree[(arm_format_pako_zlib_Trees._length_code[lc1] + 256 + 1) * 2] += 1;
				s.dyn_dtree[(dist1 < 256 ? arm_format_pako_zlib_Trees._dist_code[dist1] : arm_format_pako_zlib_Trees._dist_code[256 + (dist1 >>> 7)]) * 2] += 1;
			}
			bflush = s.last_lit == s.lit_bufsize - 1;
			s.lookahead--;
			s.strstart++;
		}
		if(bflush) {
			arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
			s.block_start = s.strstart;
			arm_format_pako_zlib_Deflate.flush_pending(s.strm);
			if(s.strm.avail_out == 0) {
				return 1;
			}
		}
	}
	s.insert = 0;
	if(flush == 4) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,true);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 3;
		}
		return 4;
	}
	if(s.last_lit != 0) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 1;
		}
	}
	return 2;
};
arm_format_pako_zlib_Deflate.deflate_huff = function(s,flush) {
	var bflush;
	while(true) {
		if(s.lookahead == 0) {
			arm_format_pako_zlib_Deflate.fill_window(s);
			if(s.lookahead == 0) {
				if(flush == 0) {
					return 1;
				}
				break;
			}
		}
		s.match_length = 0;
		var dist = 0;
		var lc = s.window[s.strstart];
		s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
		s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
		s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
		s.last_lit++;
		if(dist == 0) {
			s.dyn_ltree[lc * 2] += 1;
		} else {
			s.matches++;
			--dist;
			s.dyn_ltree[(arm_format_pako_zlib_Trees._length_code[lc] + 256 + 1) * 2] += 1;
			s.dyn_dtree[(dist < 256 ? arm_format_pako_zlib_Trees._dist_code[dist] : arm_format_pako_zlib_Trees._dist_code[256 + (dist >>> 7)]) * 2] += 1;
		}
		bflush = s.last_lit == s.lit_bufsize - 1;
		s.lookahead--;
		s.strstart++;
		if(bflush) {
			arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
			s.block_start = s.strstart;
			arm_format_pako_zlib_Deflate.flush_pending(s.strm);
			if(s.strm.avail_out == 0) {
				return 1;
			}
		}
	}
	s.insert = 0;
	if(flush == 4) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,true);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 3;
		}
		return 4;
	}
	if(s.last_lit != 0) {
		arm_format_pako_zlib_Trees._tr_flush_block(s,s.block_start >= 0 ? s.block_start : -1,s.strstart - s.block_start,false);
		s.block_start = s.strstart;
		arm_format_pako_zlib_Deflate.flush_pending(s.strm);
		if(s.strm.avail_out == 0) {
			return 1;
		}
	}
	return 2;
};
arm_format_pako_zlib_Deflate.lm_init = function(s) {
	s.window_size = 2 * s.w_size;
	var buf = s.head;
	var start = buf.byteOffset;
	var len = buf.byteLength;
	haxe_io_Bytes.ofData(buf.buffer).fill(start,len,0);
	s.max_lazy_match = arm_format_pako_zlib_Deflate.configuration_table[s.level].max_lazy;
	s.good_match = arm_format_pako_zlib_Deflate.configuration_table[s.level].good_length;
	s.nice_match = arm_format_pako_zlib_Deflate.configuration_table[s.level].nice_length;
	s.max_chain_length = arm_format_pako_zlib_Deflate.configuration_table[s.level].max_chain;
	s.strstart = 0;
	s.block_start = 0;
	s.lookahead = 0;
	s.insert = 0;
	s.match_length = s.prev_length = 2;
	s.match_available = false;
	s.ins_h = 0;
};
arm_format_pako_zlib_Deflate.deflateResetKeep = function(strm) {
	if(strm == null || strm.deflateState == null) {
		strm.msg = arm_format_pako_zlib_Messages.get(-2);
		return -2;
	}
	strm.total_in = strm.total_out = 0;
	strm.data_type = 2;
	var s = strm.deflateState;
	s.pending = 0;
	s.pending_out = 0;
	if(s.wrap < 0) {
		s.wrap = -s.wrap;
	}
	s.status = s.wrap != 0 ? 42 : 113;
	strm.adler = s.wrap == 2 ? 0 : 1;
	s.last_flush = 0;
	arm_format_pako_zlib_Trees._tr_init(s);
	return 0;
};
arm_format_pako_zlib_Deflate.deflateReset = function(strm) {
	var ret = arm_format_pako_zlib_Deflate.deflateResetKeep(strm);
	if(ret == 0) {
		arm_format_pako_zlib_Deflate.lm_init(strm.deflateState);
	}
	return ret;
};
arm_format_pako_zlib_Deflate.deflateSetHeader = function(strm,head) {
	if(strm == null || strm.deflateState == null) {
		return -2;
	}
	if(strm.deflateState.wrap != 2) {
		return -2;
	}
	strm.deflateState.gzhead = head;
	return 0;
};
arm_format_pako_zlib_Deflate.deflateInit2 = function(strm,level,method,windowBits,memLevel,strategy) {
	if(strm == null) {
		return -2;
	}
	var wrap = 1;
	if(level == -1) {
		level = 6;
	}
	if(windowBits < 0) {
		wrap = 0;
		windowBits = -windowBits;
	} else if(windowBits > 15) {
		wrap = 2;
		windowBits -= 16;
	}
	if(memLevel < 1 || memLevel > 9 || method != 8 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > 4) {
		strm.msg = arm_format_pako_zlib_Messages.get(-2);
		return -2;
	}
	if(windowBits == 8) {
		windowBits = 9;
	}
	var s = new arm_format_pako_zlib_DeflateState();
	strm.deflateState = s;
	s.strm = strm;
	s.wrap = wrap;
	s.gzhead = null;
	s.w_bits = windowBits;
	s.w_size = 1 << s.w_bits;
	s.w_mask = s.w_size - 1;
	s.hash_bits = memLevel + 7;
	s.hash_size = 1 << s.hash_bits;
	s.hash_mask = s.hash_size - 1;
	s.hash_shift = ~(~((s.hash_bits + 3 - 1) / 3 | 0));
	var this1 = new Uint8Array(s.w_size * 2);
	s.window = this1;
	var this2 = new Uint16Array(s.hash_size);
	s.head = this2;
	var this3 = new Uint16Array(s.w_size);
	s.prev = this3;
	s.lit_bufsize = 1 << memLevel + 6;
	s.pending_buf_size = s.lit_bufsize * 4;
	var this4 = new Uint8Array(s.pending_buf_size);
	s.pending_buf = this4;
	s.d_buf = s.lit_bufsize;
	s.l_buf = 3 * s.lit_bufsize;
	s.level = level;
	s.strategy = strategy;
	s.method = method;
	return arm_format_pako_zlib_Deflate.deflateReset(strm);
};
arm_format_pako_zlib_Deflate.deflate = function(strm,flush) {
	var beg;
	var val;
	if(strm == null || strm.deflateState == null || flush > 5 || flush < 0) {
		if(strm != null) {
			strm.msg = arm_format_pako_zlib_Messages.get(-2);
			return -2;
		} else {
			return -2;
		}
	}
	var s = strm.deflateState;
	if(strm.output == null || strm.input == null && strm.avail_in != 0 || s.status == 666 && flush != 4) {
		var errorCode = strm.avail_out == 0 ? -5 : -2;
		strm.msg = arm_format_pako_zlib_Messages.get(errorCode);
		return errorCode;
	}
	s.strm = strm;
	var old_flush = s.last_flush;
	s.last_flush = flush;
	if(s.status == 42) {
		if(s.wrap == 2) {
			strm.adler = 0;
			s.pending_buf[s.pending++] = 31;
			s.pending_buf[s.pending++] = 139;
			s.pending_buf[s.pending++] = 8;
			if(s.gzhead == null) {
				s.pending_buf[s.pending++] = 0;
				s.pending_buf[s.pending++] = 0;
				s.pending_buf[s.pending++] = 0;
				s.pending_buf[s.pending++] = 0;
				s.pending_buf[s.pending++] = 0;
				s.pending_buf[s.pending++] = s.level == 9 ? 2 : s.strategy >= 2 || s.level < 2 ? 4 : 0;
				s.pending_buf[s.pending++] = 3;
				s.status = 113;
			} else {
				s.pending_buf[s.pending++] = (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc != 0 ? 2 : 0) + (s.gzhead.extra == null ? 0 : 4) + (s.gzhead.name == null || s.gzhead.name == "" ? 0 : 8) + (s.gzhead.comment == null || s.gzhead.comment == "" ? 0 : 16);
				s.pending_buf[s.pending++] = s.gzhead.time & 255;
				s.pending_buf[s.pending++] = s.gzhead.time >> 8 & 255;
				s.pending_buf[s.pending++] = s.gzhead.time >> 16 & 255;
				s.pending_buf[s.pending++] = s.gzhead.time >> 24 & 255;
				s.pending_buf[s.pending++] = s.level == 9 ? 2 : s.strategy >= 2 || s.level < 2 ? 4 : 0;
				s.pending_buf[s.pending++] = s.gzhead.os & 255;
				if(s.gzhead.extra != null && s.gzhead.extra.length > 0) {
					s.pending_buf[s.pending++] = s.gzhead.extra.length & 255;
					s.pending_buf[s.pending++] = s.gzhead.extra.length >> 8 & 255;
				}
				if(s.gzhead.hcrc != 0) {
					strm.adler = arm_format_pako_zlib_CRC32.crc32(strm.adler,s.pending_buf,s.pending,0);
				}
				s.gzindex = 0;
				s.status = 69;
			}
		} else {
			var header = 8 + (s.w_bits - 8 << 4) << 8;
			var level_flags = -1;
			if(s.strategy >= 2 || s.level < 2) {
				level_flags = 0;
			} else if(s.level < 6) {
				level_flags = 1;
			} else if(s.level == 6) {
				level_flags = 2;
			} else {
				level_flags = 3;
			}
			header |= level_flags << 6;
			if(s.strstart != 0) {
				header |= 32;
			}
			header += 31 - header % 31;
			s.status = 113;
			s.pending_buf[s.pending++] = header >>> 8 & 255;
			s.pending_buf[s.pending++] = header & 255;
			if(s.strstart != 0) {
				var b = strm.adler >>> 16;
				s.pending_buf[s.pending++] = b >>> 8 & 255;
				s.pending_buf[s.pending++] = b & 255;
				var b1 = strm.adler & 65535;
				s.pending_buf[s.pending++] = b1 >>> 8 & 255;
				s.pending_buf[s.pending++] = b1 & 255;
			}
			strm.adler = 1;
		}
	}
	if(s.status == 69) {
		if(s.gzhead.extra != null) {
			beg = s.pending;
			while(s.gzindex < (s.gzhead.extra.length & 65535)) {
				if(s.pending == s.pending_buf_size) {
					if(s.gzhead.hcrc != 0 && s.pending > beg) {
						strm.adler = arm_format_pako_zlib_CRC32.crc32(strm.adler,s.pending_buf,s.pending - beg,beg);
					}
					arm_format_pako_zlib_Deflate.flush_pending(strm);
					beg = s.pending;
					if(s.pending == s.pending_buf_size) {
						break;
					}
				}
				var b2 = s.gzhead.extra[s.gzindex] & 255;
				s.pending_buf[s.pending++] = b2;
				s.gzindex++;
			}
			if(s.gzhead.hcrc != 0 && s.pending > beg) {
				strm.adler = arm_format_pako_zlib_CRC32.crc32(strm.adler,s.pending_buf,s.pending - beg,beg);
			}
			if(s.gzindex == s.gzhead.extra.length) {
				s.gzindex = 0;
				s.status = 73;
			}
		} else {
			s.status = 73;
		}
	}
	if(s.status == 73) {
		if(s.gzhead.name != null && s.gzhead.name != "") {
			beg = s.pending;
			while(true) {
				if(s.pending == s.pending_buf_size) {
					if(s.gzhead.hcrc != 0 && s.pending > beg) {
						strm.adler = arm_format_pako_zlib_CRC32.crc32(strm.adler,s.pending_buf,s.pending - beg,beg);
					}
					arm_format_pako_zlib_Deflate.flush_pending(strm);
					beg = s.pending;
					if(s.pending == s.pending_buf_size) {
						val = 1;
						break;
					}
				}
				if(s.gzindex < s.gzhead.name.length) {
					val = HxOverrides.cca(s.gzhead.name,s.gzindex++) & 255;
				} else {
					val = 0;
				}
				s.pending_buf[s.pending++] = val;
				if(!(val != 0)) {
					break;
				}
			}
			if(s.gzhead.hcrc != 0 && s.pending > beg) {
				strm.adler = arm_format_pako_zlib_CRC32.crc32(strm.adler,s.pending_buf,s.pending - beg,beg);
			}
			if(val == 0) {
				s.gzindex = 0;
				s.status = 91;
			}
		} else {
			s.status = 91;
		}
	}
	if(s.status == 91) {
		if(s.gzhead.comment != null && s.gzhead.comment != "") {
			beg = s.pending;
			while(true) {
				if(s.pending == s.pending_buf_size) {
					if(s.gzhead.hcrc != 0 && s.pending > beg) {
						strm.adler = arm_format_pako_zlib_CRC32.crc32(strm.adler,s.pending_buf,s.pending - beg,beg);
					}
					arm_format_pako_zlib_Deflate.flush_pending(strm);
					beg = s.pending;
					if(s.pending == s.pending_buf_size) {
						val = 1;
						break;
					}
				}
				if(s.gzindex < s.gzhead.comment.length) {
					val = HxOverrides.cca(s.gzhead.comment,s.gzindex++) & 255;
				} else {
					val = 0;
				}
				s.pending_buf[s.pending++] = val;
				if(!(val != 0)) {
					break;
				}
			}
			if(s.gzhead.hcrc != 0 && s.pending > beg) {
				strm.adler = arm_format_pako_zlib_CRC32.crc32(strm.adler,s.pending_buf,s.pending - beg,beg);
			}
			if(val == 0) {
				s.status = 103;
			}
		} else {
			s.status = 103;
		}
	}
	if(s.status == 103) {
		if(s.gzhead.hcrc != 0) {
			if(s.pending + 2 > s.pending_buf_size) {
				arm_format_pako_zlib_Deflate.flush_pending(strm);
			}
			if(s.pending + 2 <= s.pending_buf_size) {
				s.pending_buf[s.pending++] = strm.adler & 255;
				s.pending_buf[s.pending++] = strm.adler >> 8 & 255;
				strm.adler = 0;
				s.status = 113;
			}
		} else {
			s.status = 113;
		}
	}
	if(s.pending != 0) {
		arm_format_pako_zlib_Deflate.flush_pending(strm);
		if(strm.avail_out == 0) {
			s.last_flush = -1;
			return 0;
		}
	} else if(strm.avail_in == 0 && (flush << 1) - (flush > 4 ? 9 : 0) <= (old_flush << 1) - (old_flush > 4 ? 9 : 0) && flush != 4) {
		strm.msg = arm_format_pako_zlib_Messages.get(-5);
		return -5;
	}
	if(s.status == 666 && strm.avail_in != 0) {
		strm.msg = arm_format_pako_zlib_Messages.get(-5);
		return -5;
	}
	if(strm.avail_in != 0 || s.lookahead != 0 || flush != 0 && s.status != 666) {
		var bstate = s.strategy == 2 ? arm_format_pako_zlib_Deflate.deflate_huff(s,flush) : s.strategy == 3 ? arm_format_pako_zlib_Deflate.deflate_rle(s,flush) : arm_format_pako_zlib_Deflate.configuration_table[s.level].func(s,flush);
		if(bstate == 3 || bstate == 4) {
			s.status = 666;
		}
		if(bstate == 1 || bstate == 3) {
			if(strm.avail_out == 0) {
				s.last_flush = -1;
			}
			return 0;
		}
		if(bstate == 2) {
			if(flush == 1) {
				arm_format_pako_zlib_Trees.send_bits(s,2,3);
				var tree = arm_format_pako_zlib_Trees.static_ltree;
				arm_format_pako_zlib_Trees.send_bits(s,tree[512],tree[513]);
				arm_format_pako_zlib_Trees.bi_flush(s);
			} else if(flush != 5) {
				arm_format_pako_zlib_Trees.send_bits(s,0,3);
				arm_format_pako_zlib_Trees.bi_windup(s);
				s.pending_buf[s.pending++] = 0;
				s.pending_buf[s.pending++] = 0;
				var w = -1;
				s.pending_buf[s.pending++] = w & 255;
				s.pending_buf[s.pending++] = w >>> 8 & 255;
				var dest = s.pending_buf;
				var src = s.window;
				var dest_offs = s.pending;
				haxe_io_Bytes.ofData(dest.buffer).blit(dest.byteOffset + dest_offs,haxe_io_Bytes.ofData(src.buffer),src.byteOffset,0);
				s.pending += 0;
				if(flush == 3) {
					var buf = s.head;
					var start = buf.byteOffset;
					var len = buf.byteLength;
					haxe_io_Bytes.ofData(buf.buffer).fill(start,len,0);
					if(s.lookahead == 0) {
						s.strstart = 0;
						s.block_start = 0;
						s.insert = 0;
					}
				}
			}
			arm_format_pako_zlib_Deflate.flush_pending(strm);
			if(strm.avail_out == 0) {
				s.last_flush = -1;
				return 0;
			}
		}
	}
	if(flush != 4) {
		return 0;
	}
	if(s.wrap <= 0) {
		return 1;
	}
	if(s.wrap == 2) {
		s.pending_buf[s.pending++] = strm.adler & 255;
		s.pending_buf[s.pending++] = strm.adler >> 8 & 255;
		s.pending_buf[s.pending++] = strm.adler >> 16 & 255;
		s.pending_buf[s.pending++] = strm.adler >> 24 & 255;
		s.pending_buf[s.pending++] = strm.total_in & 255;
		s.pending_buf[s.pending++] = strm.total_in >> 8 & 255;
		s.pending_buf[s.pending++] = strm.total_in >> 16 & 255;
		s.pending_buf[s.pending++] = strm.total_in >> 24 & 255;
	} else {
		var b3 = strm.adler >>> 16;
		s.pending_buf[s.pending++] = b3 >>> 8 & 255;
		s.pending_buf[s.pending++] = b3 & 255;
		var b4 = strm.adler & 65535;
		s.pending_buf[s.pending++] = b4 >>> 8 & 255;
		s.pending_buf[s.pending++] = b4 & 255;
	}
	arm_format_pako_zlib_Deflate.flush_pending(strm);
	if(s.wrap > 0) {
		s.wrap = -s.wrap;
	}
	if(s.pending != 0) {
		return 0;
	} else {
		return 1;
	}
};
arm_format_pako_zlib_Deflate.deflateEnd = function(strm) {
	if(strm == null || strm.deflateState == null) {
		return -2;
	}
	var status = strm.deflateState.status;
	if(status != 42 && status != 69 && status != 73 && status != 91 && status != 103 && status != 113 && status != 666) {
		strm.msg = arm_format_pako_zlib_Messages.get(-2);
		return -2;
	}
	strm.deflateState = null;
	if(status == 113) {
		strm.msg = arm_format_pako_zlib_Messages.get(-3);
		return -3;
	} else {
		return 0;
	}
};
arm_format_pako_zlib_Deflate.deflateSetDictionary = function(strm,dictionary) {
	var dictLength = dictionary.length;
	var str;
	var n;
	var tmpDict;
	if(strm == null || strm.deflateState == null) {
		return -2;
	}
	var s = strm.deflateState;
	var wrap = s.wrap;
	if(wrap == 2 || wrap == 1 && s.status != 42 || s.lookahead > 0) {
		return -2;
	}
	if(wrap == 1) {
		strm.adler = arm_format_pako_zlib_Adler32.adler32(strm.adler,dictionary,dictLength,0);
	}
	s.wrap = 0;
	if(dictLength >= s.w_size) {
		if(wrap == 0) {
			var buf = s.head;
			var start = buf.byteOffset;
			var len = buf.byteLength;
			haxe_io_Bytes.ofData(buf.buffer).fill(start,len,0);
			s.strstart = 0;
			s.block_start = 0;
			s.insert = 0;
		}
		var this1 = new Uint8Array(s.w_size);
		tmpDict = this1;
		var dest = tmpDict;
		var src = dictionary;
		var src_offs = dictLength - s.w_size;
		var len1 = s.w_size;
		haxe_io_Bytes.ofData(dest.buffer).blit(dest.byteOffset,haxe_io_Bytes.ofData(src.buffer),src.byteOffset + src_offs,len1);
		dictionary = tmpDict;
		dictLength = s.w_size;
	}
	var avail = strm.avail_in;
	var next = strm.next_in;
	var input = strm.input;
	strm.avail_in = dictLength;
	strm.next_in = 0;
	strm.input = dictionary;
	arm_format_pako_zlib_Deflate.fill_window(s);
	while(s.lookahead >= 3) {
		str = s.strstart;
		n = s.lookahead - 2;
		while(true) {
			s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 3 - 1]) & s.hash_mask;
			s.prev[str & s.w_mask] = s.head[s.ins_h];
			s.head[s.ins_h] = str;
			++str;
			if(!(--n != 0)) {
				break;
			}
		}
		s.strstart = str;
		s.lookahead = 2;
		arm_format_pako_zlib_Deflate.fill_window(s);
	}
	s.strstart += s.lookahead;
	s.block_start = s.strstart;
	s.insert = s.lookahead;
	s.lookahead = 0;
	s.match_length = s.prev_length = 2;
	s.match_available = false;
	strm.next_in = next;
	strm.input = input;
	strm.avail_in = avail;
	s.wrap = wrap;
	return 0;
};
var arm_format_pako_zlib_DeflateState = function() {
	this.bi_valid = 0;
	this.bi_buf = 0;
	this.insert = 0;
	this.matches = 0;
	this.static_len = 0;
	this.opt_len = 0;
	this.d_buf = 0;
	this.last_lit = 0;
	this.lit_bufsize = 0;
	this.l_buf = 0;
	this.depth = new Uint16Array(573);
	this.heap_max = 0;
	this.heap_len = 0;
	this.heap = new Uint16Array(573);
	this.bl_count = new Uint16Array(16);
	this.bl_desc = null;
	this.d_desc = null;
	this.l_desc = null;
	this.bl_tree = new Uint16Array(78);
	this.dyn_dtree = new Uint16Array(122);
	this.dyn_ltree = new Uint16Array(1146);
	this.nice_match = 0;
	this.good_match = 0;
	this.strategy = 0;
	this.level = 0;
	this.max_lazy_match = 0;
	this.max_chain_length = 0;
	this.prev_length = 0;
	this.lookahead = 0;
	this.match_start = 0;
	this.strstart = 0;
	this.match_available = false;
	this.prev_match = 0;
	this.match_length = 0;
	this.block_start = 0;
	this.hash_shift = 0;
	this.hash_mask = 0;
	this.hash_bits = 0;
	this.hash_size = 0;
	this.ins_h = 0;
	this.head = null;
	this.prev = null;
	this.window_size = 0;
	this.window = null;
	this.w_mask = 0;
	this.w_bits = 0;
	this.w_size = 0;
	this.last_flush = -1;
	this.method = 8;
	this.gzindex = 0;
	this.gzhead = null;
	this.wrap = 0;
	this.pending = 0;
	this.pending_out = 0;
	this.pending_buf_size = 0;
	this.pending_buf = null;
	this.status = 0;
	this.strm = null;
	var buf = this.dyn_ltree;
	var start = buf.byteOffset;
	var len = buf.byteLength;
	haxe_io_Bytes.ofData(buf.buffer).fill(start,len,0);
	var buf1 = this.dyn_dtree;
	var start1 = buf1.byteOffset;
	var len1 = buf1.byteLength;
	haxe_io_Bytes.ofData(buf1.buffer).fill(start1,len1,0);
	var buf2 = this.bl_tree;
	var start2 = buf2.byteOffset;
	var len2 = buf2.byteLength;
	haxe_io_Bytes.ofData(buf2.buffer).fill(start2,len2,0);
	var buf3 = this.heap;
	var start3 = buf3.byteOffset;
	var len3 = buf3.byteLength;
	haxe_io_Bytes.ofData(buf3.buffer).fill(start3,len3,0);
	var buf4 = this.depth;
	var start4 = buf4.byteOffset;
	var len4 = buf4.byteLength;
	haxe_io_Bytes.ofData(buf4.buffer).fill(start4,len4,0);
};
$hxClasses["arm.format.pako.zlib.DeflateState"] = arm_format_pako_zlib_DeflateState;
arm_format_pako_zlib_DeflateState.__name__ = "arm.format.pako.zlib.DeflateState";
arm_format_pako_zlib_DeflateState.prototype = {
	__class__: arm_format_pako_zlib_DeflateState
};
var arm_format_pako_zlib_GZHeader = function() {
	this.done = false;
	this.hcrc = 0;
	this.comment = "";
	this.name = "";
	this.extra_len = 0;
	this.extra = null;
	this.os = 0;
	this.xflags = 0;
	this.time = 0;
	this.text = false;
};
$hxClasses["arm.format.pako.zlib.GZHeader"] = arm_format_pako_zlib_GZHeader;
arm_format_pako_zlib_GZHeader.__name__ = "arm.format.pako.zlib.GZHeader";
arm_format_pako_zlib_GZHeader.prototype = {
	__class__: arm_format_pako_zlib_GZHeader
};
var arm_format_pako_zlib_InfFast = function() { };
$hxClasses["arm.format.pako.zlib.InfFast"] = arm_format_pako_zlib_InfFast;
arm_format_pako_zlib_InfFast.__name__ = "arm.format.pako.zlib.InfFast";
arm_format_pako_zlib_InfFast.inflate_fast = function(strm,start) {
	var here;
	var op;
	var len;
	var dist;
	var from;
	var from_source;
	var state = strm.inflateState;
	var _in = strm.next_in;
	var input = strm.input;
	var last = _in + (strm.avail_in - 5);
	var _out = strm.next_out;
	var output = strm.output;
	var beg = _out - (start - strm.avail_out);
	var end = _out + (strm.avail_out - 257);
	var dmax = state.dmax;
	var wsize = state.wsize;
	var whave = state.whave;
	var wnext = state.wnext;
	var s_window = state.window;
	var hold = state.hold;
	var bits = state.bits;
	var lcode = state.lencode;
	var dcode = state.distcode;
	var lmask = (1 << state.lenbits) - 1;
	var dmask = (1 << state.distbits) - 1;
	var exit_top = false;
	while(!exit_top) {
		exit_top = false;
		if(bits < 15) {
			hold += input[_in++] << bits;
			bits += 8;
			hold += input[_in++] << bits;
			bits += 8;
		}
		here = lcode[hold & lmask];
		while(true) {
			op = here >>> 24;
			hold >>>= op;
			bits -= op;
			op = here >>> 16 & 255;
			if(op == 0) {
				output[_out++] = here & 65535;
			} else if((op & 16) != 0) {
				len = here & 65535;
				op &= 15;
				if(op != 0) {
					if(bits < op) {
						hold += input[_in++] << bits;
						bits += 8;
					}
					len += hold & (1 << op) - 1;
					hold >>>= op;
					bits -= op;
				}
				if(bits < 15) {
					hold += input[_in++] << bits;
					bits += 8;
					hold += input[_in++] << bits;
					bits += 8;
				}
				here = dcode[hold & dmask];
				while(true) {
					op = here >>> 24;
					hold >>>= op;
					bits -= op;
					op = here >>> 16 & 255;
					if((op & 16) != 0) {
						dist = here & 65535;
						op &= 15;
						if(bits < op) {
							hold += input[_in++] << bits;
							bits += 8;
							if(bits < op) {
								hold += input[_in++] << bits;
								bits += 8;
							}
						}
						dist += hold & (1 << op) - 1;
						if(dist > dmax) {
							strm.msg = "invalid distance too far back";
							state.mode = 30;
							exit_top = true;
							break;
						}
						hold >>>= op;
						bits -= op;
						op = _out - beg;
						if(dist > op) {
							op = dist - op;
							if(op > whave) {
								if(state.sane != 0) {
									strm.msg = "invalid distance too far back";
									state.mode = 30;
									exit_top = true;
									break;
								}
							}
							from = 0;
							from_source = s_window;
							if(wnext == 0) {
								from += wsize - op;
								if(op < len) {
									len -= op;
									while(true) {
										output[_out++] = s_window[from++];
										if(!(--op != 0)) {
											break;
										}
									}
									from = _out - dist;
									from_source = output;
								}
							} else if(wnext < op) {
								from += wsize + wnext - op;
								op -= wnext;
								if(op < len) {
									len -= op;
									while(true) {
										output[_out++] = s_window[from++];
										if(!(--op != 0)) {
											break;
										}
									}
									from = 0;
									if(wnext < len) {
										op = wnext;
										len -= op;
										while(true) {
											output[_out++] = s_window[from++];
											if(!(--op != 0)) {
												break;
											}
										}
										from = _out - dist;
										from_source = output;
									}
								}
							} else {
								from += wnext - op;
								if(op < len) {
									len -= op;
									while(true) {
										output[_out++] = s_window[from++];
										if(!(--op != 0)) {
											break;
										}
									}
									from = _out - dist;
									from_source = output;
								}
							}
							while(len > 2) {
								output[_out++] = from_source[from++];
								output[_out++] = from_source[from++];
								output[_out++] = from_source[from++];
								len -= 3;
							}
							if(len != 0) {
								output[_out++] = from_source[from++];
								if(len > 1) {
									output[_out++] = from_source[from++];
								}
							}
						} else {
							from = _out - dist;
							while(true) {
								output[_out++] = output[from++];
								output[_out++] = output[from++];
								output[_out++] = output[from++];
								len -= 3;
								if(!(len > 2)) {
									break;
								}
							}
							if(len != 0) {
								output[_out++] = output[from++];
								if(len > 1) {
									output[_out++] = output[from++];
								}
							}
						}
					} else if((op & 64) == 0) {
						here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
						continue;
					} else {
						strm.msg = "invalid distance code";
						state.mode = 30;
						exit_top = true;
						break;
					}
					break;
				}
				if(exit_top) {
					break;
				}
			} else if((op & 64) == 0) {
				here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
				continue;
			} else if((op & 32) != 0) {
				state.mode = 12;
				exit_top = true;
				break;
			} else {
				strm.msg = "invalid literal/length code";
				state.mode = 30;
				exit_top = true;
				break;
			}
			break;
		}
		if(exit_top) {
			if(!(_in < last && _out < end)) {
				break;
			} else {
				continue;
			}
		}
		if(!(_in < last && _out < end)) {
			break;
		}
	}
	len = bits >> 3;
	_in -= len;
	bits -= len << 3;
	hold &= (1 << bits) - 1;
	strm.next_in = _in;
	strm.next_out = _out;
	strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
	strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
	state.hold = hold;
	state.bits = bits;
	return;
};
var arm_format_pako_zlib_InfTrees = function() { };
$hxClasses["arm.format.pako.zlib.InfTrees"] = arm_format_pako_zlib_InfTrees;
arm_format_pako_zlib_InfTrees.__name__ = "arm.format.pako.zlib.InfTrees";
arm_format_pako_zlib_InfTrees.inflate_table = function(type,lens,lens_index,codes,table,table_index,work,opts) {
	var bits = 0;
	var len = 0;
	var sym = 0;
	var min = 0;
	var max = 0;
	var root = 0;
	var curr = 0;
	var drop = 0;
	var left = 0;
	var used = 0;
	var huff = 0;
	var incr = 0;
	var fill = 0;
	var low = 0;
	var mask = 0;
	var next = 0;
	var base = null;
	var base_index = 0;
	var end = 0;
	var this1 = new Uint16Array(arm_format_pako_zlib_InfTrees.MAXBITS + 1);
	var count = this1;
	var this2 = new Uint16Array(arm_format_pako_zlib_InfTrees.MAXBITS + 1);
	var offs = this2;
	var extra = null;
	var extra_index = 0;
	bits = opts.bits;
	var here_bits;
	var here_op;
	var here_val;
	len = 0;
	while(len <= arm_format_pako_zlib_InfTrees.MAXBITS) {
		count[len] = 0;
		++len;
	}
	sym = 0;
	while(sym < codes) {
		count[lens[lens_index + sym]] += 1;
		++sym;
	}
	root = bits;
	max = arm_format_pako_zlib_InfTrees.MAXBITS;
	while(max >= 1) {
		if(count[max] != 0) {
			break;
		}
		--max;
	}
	if(root > max) {
		root = max;
	}
	if(max == 0) {
		table[table_index++] = 20971520;
		table[table_index++] = 20971520;
		opts.bits = 1;
		return 0;
	}
	min = 1;
	while(min < max) {
		if(count[min] != 0) {
			break;
		}
		++min;
	}
	if(root < min) {
		root = min;
	}
	left = 1;
	len = 1;
	while(len <= arm_format_pako_zlib_InfTrees.MAXBITS) {
		left <<= 1;
		left -= count[len];
		if(left < 0) {
			return -1;
		}
		++len;
	}
	if(left > 0 && (type == arm_format_pako_zlib_InfTrees.CODES || max != 1)) {
		return -1;
	}
	offs[1] = 0;
	len = 1;
	while(len < arm_format_pako_zlib_InfTrees.MAXBITS) {
		offs[len + 1] = offs[len] + count[len];
		++len;
	}
	sym = 0;
	while(sym < codes) {
		if(lens[lens_index + sym] != 0) {
			work[offs[lens[lens_index + sym]]] = sym;
			offs[lens[lens_index + sym]] += 1;
		}
		++sym;
	}
	if(type == arm_format_pako_zlib_InfTrees.CODES) {
		extra = work;
		base = extra;
		end = 19;
	} else if(type == arm_format_pako_zlib_InfTrees.LENS) {
		base = arm_format_pako_zlib_InfTrees.lbase;
		base_index -= 257;
		extra = arm_format_pako_zlib_InfTrees.lext;
		extra_index -= 257;
		end = 256;
	} else {
		base = arm_format_pako_zlib_InfTrees.dbase;
		extra = arm_format_pako_zlib_InfTrees.dext;
		end = -1;
	}
	huff = 0;
	sym = 0;
	len = min;
	next = table_index;
	curr = root;
	drop = 0;
	low = -1;
	used = 1 << root;
	mask = used - 1;
	if(type == arm_format_pako_zlib_InfTrees.LENS && used > arm_format_pako_zlib_InfTrees.ENOUGH_LENS || type == arm_format_pako_zlib_InfTrees.DISTS && used > arm_format_pako_zlib_InfTrees.ENOUGH_DISTS) {
		return 1;
	}
	var i = 0;
	while(true) {
		++i;
		here_bits = len - drop;
		if(work[sym] < end) {
			here_op = 0;
			here_val = work[sym];
		} else if(work[sym] > end) {
			here_op = extra[extra_index + work[sym]];
			here_val = base[base_index + work[sym]];
		} else {
			here_op = 96;
			here_val = 0;
		}
		incr = 1 << len - drop;
		fill = 1 << curr;
		min = fill;
		while(true) {
			fill -= incr;
			table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
			if(!(fill != 0)) {
				break;
			}
		}
		incr = 1 << len - 1;
		while((huff & incr) != 0) incr >>= 1;
		if(incr != 0) {
			huff &= incr - 1;
			huff += incr;
		} else {
			huff = 0;
		}
		++sym;
		if((count[len] -= 1) == 0) {
			if(len == max) {
				break;
			}
			len = lens[lens_index + work[sym]];
		}
		if(len > root && (huff & mask) != low) {
			if(drop == 0) {
				drop = root;
			}
			next += min;
			curr = len - drop;
			left = 1 << curr;
			while(curr + drop < max) {
				left -= count[curr + drop];
				if(left <= 0) {
					break;
				}
				++curr;
				left <<= 1;
			}
			used += 1 << curr;
			if(type == arm_format_pako_zlib_InfTrees.LENS && used > arm_format_pako_zlib_InfTrees.ENOUGH_LENS || type == arm_format_pako_zlib_InfTrees.DISTS && used > arm_format_pako_zlib_InfTrees.ENOUGH_DISTS) {
				return 1;
			}
			low = huff & mask;
			table[low] = root << 24 | curr << 16 | next - table_index | 0;
		}
	}
	if(huff != 0) {
		table[next + huff] = len - drop << 24 | 4194304 | 0;
	}
	opts.bits = root;
	return 0;
};
var arm_format_pako_zlib_Inflate = function() { };
$hxClasses["arm.format.pako.zlib.Inflate"] = arm_format_pako_zlib_Inflate;
arm_format_pako_zlib_Inflate.__name__ = "arm.format.pako.zlib.Inflate";
arm_format_pako_zlib_Inflate.inflateResetKeep = function(strm) {
	if(strm == null || strm.inflateState == null) {
		return -2;
	}
	var state = strm.inflateState;
	strm.total_in = strm.total_out = state.total = 0;
	strm.msg = "";
	if(state.wrap != 0) {
		strm.adler = state.wrap & 1;
	}
	state.mode = 1;
	state.last = false;
	state.havedict = false;
	state.dmax = 32768;
	state.head = null;
	state.hold = 0;
	state.bits = 0;
	var this1 = new Int32Array(852);
	state.lencode = state.lendyn = this1;
	var this2 = new Int32Array(592);
	state.distcode = state.distdyn = this2;
	state.sane = 1;
	state.back = -1;
	return 0;
};
arm_format_pako_zlib_Inflate.inflateReset = function(strm) {
	if(strm == null || strm.inflateState == null) {
		return -2;
	}
	var state = strm.inflateState;
	state.wsize = 0;
	state.whave = 0;
	state.wnext = 0;
	return arm_format_pako_zlib_Inflate.inflateResetKeep(strm);
};
arm_format_pako_zlib_Inflate.inflateReset2 = function(strm,windowBits) {
	var wrap;
	if(strm == null || strm.inflateState == null) {
		return -2;
	}
	var state = strm.inflateState;
	if(windowBits < 0) {
		wrap = 0;
		windowBits = -windowBits;
	} else {
		wrap = (windowBits >> 4) + 1;
		if(windowBits < 48) {
			windowBits &= 15;
		}
	}
	if(windowBits != 0 && (windowBits < 8 || windowBits > 15)) {
		return -2;
	}
	if(state.window != null && state.wbits != windowBits) {
		state.window = null;
	}
	state.wrap = wrap;
	state.wbits = windowBits;
	return arm_format_pako_zlib_Inflate.inflateReset(strm);
};
arm_format_pako_zlib_Inflate.inflateInit2 = function(strm,windowBits) {
	if(strm == null) {
		return -2;
	}
	var state = new arm_format_pako_zlib_InflateState();
	strm.inflateState = state;
	state.window = null;
	var ret = arm_format_pako_zlib_Inflate.inflateReset2(strm,windowBits);
	if(ret != 0) {
		strm.inflateState = null;
	}
	return ret;
};
arm_format_pako_zlib_Inflate.fixedtables = function(state) {
	if(arm_format_pako_zlib_Inflate.virgin) {
		var this1 = new Int32Array(512);
		arm_format_pako_zlib_Inflate.lenfix = this1;
		var this2 = new Int32Array(32);
		arm_format_pako_zlib_Inflate.distfix = this2;
		var sym = 0;
		while(sym < 144) state.lens[sym++] = 8;
		while(sym < 256) state.lens[sym++] = 9;
		while(sym < 280) state.lens[sym++] = 7;
		while(sym < 288) state.lens[sym++] = 8;
		arm_format_pako_zlib_InfTrees.inflate_table(1,state.lens,0,288,arm_format_pako_zlib_Inflate.lenfix,0,state.work,{ bits : 9});
		sym = 0;
		while(sym < 32) state.lens[sym++] = 5;
		arm_format_pako_zlib_InfTrees.inflate_table(2,state.lens,0,32,arm_format_pako_zlib_Inflate.distfix,0,state.work,{ bits : 5});
		arm_format_pako_zlib_Inflate.virgin = false;
	}
	state.lencode = arm_format_pako_zlib_Inflate.lenfix;
	state.lenbits = 9;
	state.distcode = arm_format_pako_zlib_Inflate.distfix;
	state.distbits = 5;
};
arm_format_pako_zlib_Inflate.updatewindow = function(strm,src,end,copy) {
	var dist;
	var state = strm.inflateState;
	if(state.window == null) {
		state.wsize = 1 << state.wbits;
		state.wnext = 0;
		state.whave = 0;
		var this1 = new Uint8Array(state.wsize);
		state.window = this1;
	}
	if(copy >= state.wsize) {
		var dest = state.window;
		var src1 = src;
		var src_offs = end - state.wsize;
		var len = state.wsize;
		haxe_io_Bytes.ofData(dest.buffer).blit(dest.byteOffset,haxe_io_Bytes.ofData(src1.buffer),src1.byteOffset + src_offs,len);
		state.wnext = 0;
		state.whave = state.wsize;
	} else {
		dist = state.wsize - state.wnext;
		if(dist > copy) {
			dist = copy;
		}
		var dest1 = state.window;
		var src2 = src;
		var dest_offs = state.wnext;
		haxe_io_Bytes.ofData(dest1.buffer).blit(dest1.byteOffset + dest_offs,haxe_io_Bytes.ofData(src2.buffer),src2.byteOffset + (end - copy),dist);
		copy -= dist;
		if(copy != 0) {
			var dest2 = state.window;
			var src3 = src;
			haxe_io_Bytes.ofData(dest2.buffer).blit(dest2.byteOffset,haxe_io_Bytes.ofData(src3.buffer),src3.byteOffset + (end - copy),copy);
			state.wnext = copy;
			state.whave = state.wsize;
		} else {
			state.wnext += dist;
			if(state.wnext == state.wsize) {
				state.wnext = 0;
			}
			if(state.whave < state.wsize) {
				state.whave += dist;
			}
		}
	}
	return 0;
};
arm_format_pako_zlib_Inflate.inflate = function(strm,flush) {
	var hold = 0;
	var bits = 0;
	var copy = 0;
	var from;
	var from_source;
	var here = 0;
	var here_bits = 0;
	var here_op = 0;
	var here_val = 0;
	var last_bits;
	var last_op;
	var last_val;
	var len = 0;
	var this1 = new Uint8Array(4);
	var hbuf = this1;
	var opts;
	var n;
	var order = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	if(strm == null || strm.inflateState == null || strm.output == null || strm.input == null && strm.avail_in != 0) {
		return -2;
	}
	var state = strm.inflateState;
	if(state.mode == 12) {
		state.mode = 13;
	}
	var put = strm.next_out;
	var output = strm.output;
	var left = strm.avail_out;
	var next = strm.next_in;
	var input = strm.input;
	var have = strm.avail_in;
	hold = state.hold;
	bits = state.bits;
	var _in = have;
	var _out = left;
	var ret = 0;
	var inf_leave = false;
	_hx_loop1: while(!inf_leave) {
		inf_leave = false;
		switch(state.mode) {
		case 1:
			if(state.wrap == 0) {
				state.mode = 13;
				continue;
			}
			while(bits < 16) {
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			if((state.wrap & 2) != 0 && hold == 35615) {
				state.check = 0;
				hbuf[0] = hold & 255;
				hbuf[1] = hold >>> 8 & 255;
				state.check = arm_format_pako_zlib_CRC32.crc32(state.check,hbuf,2,0);
				hold = 0;
				bits = 0;
				state.mode = 2;
				continue;
			}
			state.flags = 0;
			if(state.head != null) {
				state.head.done = false;
			}
			if((state.wrap & 1) != 1 || (((hold & 255) << 8) + (hold >> 8)) % 31 != 0) {
				strm.msg = "incorrect header check";
				state.mode = 30;
				continue;
			}
			if((hold & 15) != 8) {
				strm.msg = "unknown compression method";
				state.mode = 30;
				continue;
			}
			hold >>>= 4;
			bits -= 4;
			len = (hold & 15) + 8;
			if(state.wbits == 0) {
				state.wbits = len;
			} else if(len > state.wbits) {
				strm.msg = "invalid window size";
				state.mode = 30;
				continue;
			}
			state.dmax = 1 << len;
			strm.adler = state.check = 1;
			state.mode = (hold & 512) != 0 ? 10 : 12;
			hold = 0;
			bits = 0;
			break;
		case 2:
			while(bits < 16) {
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			state.flags = hold;
			if((state.flags & 255) != 8) {
				strm.msg = "unknown compression method";
				state.mode = 30;
				continue;
			}
			if((state.flags & 57344) != 0) {
				strm.msg = "unknown header flags set";
				state.mode = 30;
				continue;
			}
			if(state.head != null) {
				state.head.text = (hold >> 8 & 1) == 1;
			}
			if((state.flags & 512) != 0) {
				hbuf[0] = hold & 255;
				hbuf[1] = hold >>> 8 & 255;
				state.check = arm_format_pako_zlib_CRC32.crc32(state.check,hbuf,2,0);
			}
			hold = 0;
			bits = 0;
			state.mode = 3;
			break;
		case 3:
			while(bits < 32) {
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			if(state.head != null) {
				state.head.time = hold;
			}
			if((state.flags & 512) != 0) {
				hbuf[0] = hold & 255;
				hbuf[1] = hold >>> 8 & 255;
				hbuf[2] = hold >>> 16 & 255;
				hbuf[3] = hold >>> 24 & 255;
				state.check = arm_format_pako_zlib_CRC32.crc32(state.check,hbuf,4,0);
			}
			hold = 0;
			bits = 0;
			state.mode = 4;
			break;
		case 4:
			while(bits < 16) {
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			if(state.head != null) {
				state.head.xflags = hold & 255;
				state.head.os = hold >> 8;
			}
			if((state.flags & 512) != 0) {
				hbuf[0] = hold & 255;
				hbuf[1] = hold >>> 8 & 255;
				state.check = arm_format_pako_zlib_CRC32.crc32(state.check,hbuf,2,0);
			}
			hold = 0;
			bits = 0;
			state.mode = 5;
			break;
		case 5:
			if((state.flags & 1024) != 0) {
				while(bits < 16) {
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					break _hx_loop1;
				}
				state.length = hold;
				if(state.head != null) {
					state.head.extra_len = hold;
				}
				if((state.flags & 512) != 0) {
					hbuf[0] = hold & 255;
					hbuf[1] = hold >>> 8 & 255;
					state.check = arm_format_pako_zlib_CRC32.crc32(state.check,hbuf,2,0);
				}
				hold = 0;
				bits = 0;
			} else if(state.head != null) {
				state.head.extra = null;
			}
			state.mode = 6;
			break;
		case 6:
			if((state.flags & 1024) != 0) {
				copy = state.length;
				if(copy > have) {
					copy = have;
				}
				if(copy != 0) {
					if(state.head != null) {
						len = state.head.extra_len - state.length;
						if(state.head.extra == null) {
							var this2 = new Uint8Array(state.head.extra_len);
							state.head.extra = this2;
						}
						var dest = state.head.extra;
						var src = input;
						haxe_io_Bytes.ofData(dest.buffer).blit(dest.byteOffset + len,haxe_io_Bytes.ofData(src.buffer),src.byteOffset + next,copy);
					}
					if((state.flags & 512) != 0) {
						state.check = arm_format_pako_zlib_CRC32.crc32(state.check,input,copy,next);
					}
					have -= copy;
					next += copy;
					state.length -= copy;
				}
				if(state.length != 0) {
					inf_leave = true;
					break _hx_loop1;
				}
			}
			state.length = 0;
			state.mode = 7;
			break;
		case 7:
			if((state.flags & 2048) != 0) {
				if(have == 0) {
					inf_leave = true;
					break _hx_loop1;
				}
				copy = 0;
				while(true) {
					len = input[next + copy++];
					if(state.head != null && len != 0 && state.length < 65536) {
						state.head.name += String.fromCodePoint(len);
					}
					if(!(len != 0 && copy < have)) {
						break;
					}
				}
				if((state.flags & 512) != 0) {
					state.check = arm_format_pako_zlib_CRC32.crc32(state.check,input,copy,next);
				}
				have -= copy;
				next += copy;
				if(len != 0) {
					inf_leave = true;
					break _hx_loop1;
				}
			} else if(state.head != null) {
				state.head.name = null;
			}
			state.length = 0;
			state.mode = 8;
			break;
		case 8:
			if((state.flags & 4096) != 0) {
				if(have == 0) {
					inf_leave = true;
					break _hx_loop1;
				}
				copy = 0;
				while(true) {
					len = input[next + copy++];
					if(state.head != null && len != 0 && state.length < 65536) {
						state.head.comment += String.fromCodePoint(len);
					}
					if(!(len != 0 && copy < have)) {
						break;
					}
				}
				if((state.flags & 512) != 0) {
					state.check = arm_format_pako_zlib_CRC32.crc32(state.check,input,copy,next);
				}
				have -= copy;
				next += copy;
				if(len != 0) {
					inf_leave = true;
					break _hx_loop1;
				}
			} else if(state.head != null) {
				state.head.comment = null;
			}
			state.mode = 9;
			break;
		case 9:
			if((state.flags & 512) != 0) {
				while(bits < 16) {
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					break _hx_loop1;
				}
				if(hold != (state.check & 65535)) {
					strm.msg = "header crc mismatch";
					state.mode = 30;
					continue;
				}
				hold = 0;
				bits = 0;
			}
			if(state.head != null) {
				state.head.hcrc = state.flags >> 9 & 1;
				state.head.done = true;
			}
			strm.adler = state.check = 0;
			state.mode = 12;
			break;
		case 10:
			while(bits < 32) {
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			strm.adler = state.check = (hold >>> 24 & 255) + (hold >>> 8 & 65280) + ((hold & 65280) << 8) + ((hold & 255) << 24);
			hold = 0;
			bits = 0;
			state.mode = 11;
			break;
		case 11:
			if(!state.havedict) {
				strm.next_out = put;
				strm.avail_out = left;
				strm.next_in = next;
				strm.avail_in = have;
				state.hold = hold;
				state.bits = bits;
				return 2;
			}
			strm.adler = state.check = 1;
			state.mode = 12;
			break;
		case 12:
			if(flush == 5 || flush == 6) {
				continue;
			}
			state.mode = 13;
			break;
		case 13:
			if(state.last) {
				hold >>>= bits & 7;
				bits -= bits & 7;
				state.mode = 27;
				continue;
			}
			while(bits < 3) {
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			state.last = (hold & 1) == 1;
			hold >>>= 1;
			--bits;
			switch(hold & 3) {
			case 0:
				state.mode = 14;
				break;
			case 1:
				arm_format_pako_zlib_Inflate.fixedtables(state);
				state.mode = 20;
				if(flush == 6) {
					hold >>>= 2;
					bits -= 2;
					inf_leave = true;
					break _hx_loop1;
				}
				break;
			case 2:
				state.mode = 17;
				break;
			case 3:
				strm.msg = "invalid block type";
				state.mode = 30;
				break;
			}
			hold >>>= 2;
			bits -= 2;
			break;
		case 14:
			hold >>>= bits & 7;
			bits -= bits & 7;
			while(bits < 32) {
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			if((hold & 65535) != (hold >>> 16 ^ 65535)) {
				strm.msg = "invalid stored block lengths";
				state.mode = 30;
				continue;
			}
			state.length = hold & 65535;
			hold = 0;
			bits = 0;
			state.mode = 15;
			if(flush == 6) {
				inf_leave = true;
				break _hx_loop1;
			}
			break;
		case 15:
			state.mode = 16;
			break;
		case 16:
			copy = state.length;
			if(copy != 0) {
				if(copy > have) {
					copy = have;
				}
				if(copy > left) {
					copy = left;
				}
				if(copy == 0) {
					inf_leave = true;
					break _hx_loop1;
				}
				var dest1 = output;
				var src1 = input;
				haxe_io_Bytes.ofData(dest1.buffer).blit(dest1.byteOffset + put,haxe_io_Bytes.ofData(src1.buffer),src1.byteOffset + next,copy);
				have -= copy;
				next += copy;
				left -= copy;
				put += copy;
				state.length -= copy;
				continue;
			}
			state.mode = 12;
			break;
		case 17:
			while(bits < 14) {
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			state.nlen = (hold & 31) + 257;
			hold >>>= 5;
			bits -= 5;
			state.ndist = (hold & 31) + 1;
			hold >>>= 5;
			bits -= 5;
			state.ncode = (hold & 15) + 4;
			hold >>>= 4;
			bits -= 4;
			if(state.nlen > 286 || state.ndist > 30) {
				strm.msg = "too many length or distance symbols";
				state.mode = 30;
				continue;
			}
			state.have = 0;
			state.mode = 18;
			break;
		case 18:
			while(state.have < state.ncode) {
				while(bits < 3) {
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					break;
				}
				state.lens[order[state.have++]] = hold & 7;
				hold >>>= 3;
				bits -= 3;
			}
			if(inf_leave) {
				break _hx_loop1;
			}
			while(state.have < 19) state.lens[order[state.have++]] = 0;
			state.lencode = state.lendyn;
			state.lenbits = 7;
			opts = { bits : state.lenbits};
			ret = arm_format_pako_zlib_InfTrees.inflate_table(0,state.lens,0,19,state.lencode,0,state.work,opts);
			state.lenbits = opts.bits;
			if(ret != 0) {
				strm.msg = "invalid code lengths set";
				state.mode = 30;
				continue;
			}
			state.have = 0;
			state.mode = 19;
			break;
		case 19:
			while(state.have < state.nlen + state.ndist) {
				while(true) {
					here = state.lencode[hold & (1 << state.lenbits) - 1];
					here_bits = here >>> 24;
					here_op = here >>> 16 & 255;
					here_val = here & 65535;
					if(here_bits <= bits) {
						break;
					}
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					break;
				}
				if(here_val < 16) {
					hold >>>= here_bits;
					bits -= here_bits;
					state.lens[state.have++] = here_val;
				} else {
					if(here_val == 16) {
						n = here_bits + 2;
						while(bits < n) {
							if(have == 0) {
								inf_leave = true;
								break;
							}
							--have;
							hold += input[next++] << bits;
							bits += 8;
						}
						if(inf_leave) {
							break;
						}
						hold >>>= here_bits;
						bits -= here_bits;
						if(state.have == 0) {
							strm.msg = "invalid bit length repeat";
							state.mode = 30;
							break;
						}
						len = state.lens[state.have - 1];
						copy = 3 + (hold & 3);
						hold >>>= 2;
						bits -= 2;
					} else if(here_val == 17) {
						n = here_bits + 3;
						while(bits < n) {
							if(have == 0) {
								inf_leave = true;
								break;
							}
							--have;
							hold += input[next++] << bits;
							bits += 8;
						}
						if(inf_leave) {
							break;
						}
						hold >>>= here_bits;
						bits -= here_bits;
						len = 0;
						copy = 3 + (hold & 7);
						hold >>>= 3;
						bits -= 3;
					} else {
						n = here_bits + 7;
						while(bits < n) {
							if(have == 0) {
								inf_leave = true;
								break;
							}
							--have;
							hold += input[next++] << bits;
							bits += 8;
						}
						if(inf_leave) {
							break;
						}
						hold >>>= here_bits;
						bits -= here_bits;
						len = 0;
						copy = 11 + (hold & 127);
						hold >>>= 7;
						bits -= 7;
					}
					if(state.have + copy > state.nlen + state.ndist) {
						strm.msg = "invalid bit length repeat";
						state.mode = 30;
						break;
					}
					while(copy-- != 0) state.lens[state.have++] = len;
				}
			}
			if(inf_leave || state.mode == 30) {
				continue;
			}
			if(state.lens[256] == 0) {
				strm.msg = "invalid code -- missing end-of-block";
				state.mode = 30;
				continue;
			}
			state.lenbits = 9;
			opts = { bits : state.lenbits};
			ret = arm_format_pako_zlib_InfTrees.inflate_table(1,state.lens,0,state.nlen,state.lencode,0,state.work,opts);
			state.lenbits = opts.bits;
			if(ret != 0) {
				strm.msg = "invalid literal/lengths set";
				state.mode = 30;
				continue;
			}
			state.distbits = 6;
			state.distcode = state.distdyn;
			opts = { bits : state.distbits};
			ret = arm_format_pako_zlib_InfTrees.inflate_table(2,state.lens,state.nlen,state.ndist,state.distcode,0,state.work,opts);
			state.distbits = opts.bits;
			if(ret != 0) {
				strm.msg = "invalid distances set";
				state.mode = 30;
				continue;
			}
			state.mode = 20;
			if(flush == 6) {
				inf_leave = true;
				continue;
			}
			break;
		case 20:
			state.mode = 21;
			break;
		case 21:
			if(have >= 6 && left >= 258) {
				strm.next_out = put;
				strm.avail_out = left;
				strm.next_in = next;
				strm.avail_in = have;
				state.hold = hold;
				state.bits = bits;
				arm_format_pako_zlib_InfFast.inflate_fast(strm,_out);
				put = strm.next_out;
				output = strm.output;
				left = strm.avail_out;
				next = strm.next_in;
				input = strm.input;
				have = strm.avail_in;
				hold = state.hold;
				bits = state.bits;
				if(state.mode == 12) {
					state.back = -1;
				}
				continue;
			}
			state.back = 0;
			while(true) {
				here = state.lencode[hold & (1 << state.lenbits) - 1];
				here_bits = here >>> 24;
				here_op = here >>> 16 & 255;
				here_val = here & 65535;
				if(here_bits <= bits) {
					break;
				}
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				continue;
			}
			if(here_op != 0 && (here_op & 240) == 0) {
				last_bits = here_bits;
				last_op = here_op;
				last_val = here_val;
				while(true) {
					here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
					here_bits = here >>> 24;
					here_op = here >>> 16 & 255;
					here_val = here & 65535;
					if(last_bits + here_bits <= bits) {
						break;
					}
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					continue;
				}
				hold >>>= last_bits;
				bits -= last_bits;
				state.back += last_bits;
			}
			hold >>>= here_bits;
			bits -= here_bits;
			state.back += here_bits;
			state.length = here_val;
			if(here_op == 0) {
				state.mode = 26;
				continue;
			}
			if((here_op & 32) != 0) {
				state.back = -1;
				state.mode = 12;
				continue;
			}
			if((here_op & 64) != 0) {
				strm.msg = "invalid literal/length code";
				state.mode = 30;
				continue;
			}
			state.extra = here_op & 15;
			state.mode = 22;
			break;
		case 22:
			if(state.extra != 0) {
				n = state.extra;
				while(bits < n) {
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					continue;
				}
				state.length += hold & (1 << state.extra) - 1;
				hold >>>= state.extra;
				bits -= state.extra;
				state.back += state.extra;
			}
			state.was = state.length;
			state.mode = 23;
			break;
		case 23:
			while(true) {
				here = state.distcode[hold & (1 << state.distbits) - 1];
				here_bits = here >>> 24;
				here_op = here >>> 16 & 255;
				here_val = here & 65535;
				if(here_bits <= bits) {
					break;
				}
				if(have == 0) {
					inf_leave = true;
					break;
				}
				--have;
				hold += input[next++] << bits;
				bits += 8;
			}
			if(inf_leave) {
				continue;
			}
			if((here_op & 240) == 0) {
				last_bits = here_bits;
				last_op = here_op;
				last_val = here_val;
				while(true) {
					here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
					here_bits = here >>> 24;
					here_op = here >>> 16 & 255;
					here_val = here & 65535;
					if(last_bits + here_bits <= bits) {
						break;
					}
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					continue;
				}
				hold >>>= last_bits;
				bits -= last_bits;
				state.back += last_bits;
			}
			hold >>>= here_bits;
			bits -= here_bits;
			state.back += here_bits;
			if((here_op & 64) != 0) {
				strm.msg = "invalid distance code";
				state.mode = 30;
				continue;
			}
			state.offset = here_val;
			state.extra = here_op & 15;
			state.mode = 24;
			break;
		case 24:
			if(state.extra != 0) {
				n = state.extra;
				while(bits < n) {
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					continue;
				}
				state.offset += hold & (1 << state.extra) - 1;
				hold >>>= state.extra;
				bits -= state.extra;
				state.back += state.extra;
			}
			if(state.offset > state.dmax) {
				strm.msg = "invalid distance too far back";
				state.mode = 30;
				continue;
			}
			state.mode = 25;
			break;
		case 25:
			if(left == 0) {
				inf_leave = true;
				continue;
			}
			copy = _out - left;
			if(state.offset > copy) {
				copy = state.offset - copy;
				if(copy > state.whave) {
					if(state.sane != 0) {
						strm.msg = "invalid distance too far back";
						state.mode = 30;
						continue;
					}
				}
				if(copy > state.wnext) {
					copy -= state.wnext;
					from = state.wsize - copy;
				} else {
					from = state.wnext - copy;
				}
				if(copy > state.length) {
					copy = state.length;
				}
				from_source = state.window;
			} else {
				from_source = output;
				from = put - state.offset;
				copy = state.length;
			}
			if(copy > left) {
				copy = left;
			}
			left -= copy;
			state.length -= copy;
			while(true) {
				output[put++] = from_source[from++];
				if(!(--copy != 0)) {
					break;
				}
			}
			if(state.length == 0) {
				state.mode = 21;
			}
			break;
		case 26:
			if(left == 0) {
				inf_leave = true;
				continue;
			}
			output[put++] = state.length;
			--left;
			state.mode = 21;
			break;
		case 27:
			if(state.wrap != 0) {
				while(bits < 32) {
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold |= input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					continue;
				}
				_out -= left;
				strm.total_out += _out;
				state.total += _out;
				if(_out != 0) {
					strm.adler = state.check = state.flags != 0 ? arm_format_pako_zlib_CRC32.crc32(state.check,output,_out,put - _out) : arm_format_pako_zlib_Adler32.adler32(state.check,output,_out,put - _out);
				}
				_out = left;
				hold |= 0;
				if((state.flags != 0 ? hold : (hold >>> 24 & 255) + (hold >>> 8 & 65280) + ((hold & 65280) << 8) + ((hold & 255) << 24)) != state.check) {
					strm.msg = "incorrect data check";
					state.mode = 30;
					continue;
				}
				hold = 0;
				bits = 0;
			}
			state.mode = 28;
			break;
		case 28:
			if(state.wrap != 0 && state.flags != 0) {
				while(bits < 32) {
					if(have == 0) {
						inf_leave = true;
						break;
					}
					--have;
					hold += input[next++] << bits;
					bits += 8;
				}
				if(inf_leave) {
					continue;
				}
				if(hold != (state.total & -1)) {
					strm.msg = "incorrect length check";
					state.mode = 30;
					continue;
				}
				hold = 0;
				bits = 0;
			}
			state.mode = 29;
			break;
		case 29:
			ret = 1;
			inf_leave = true;
			continue;
		case 30:
			ret = -3;
			inf_leave = true;
			continue;
		case 31:
			return -4;
		case 32:
			return -2;
		default:
			return -2;
		}
	}
	strm.next_out = put;
	strm.avail_out = left;
	strm.next_in = next;
	strm.avail_in = have;
	state.hold = hold;
	state.bits = bits;
	if(state.wsize != 0 || _out != strm.avail_out && state.mode < 30 && (state.mode < 27 || flush != 4)) {
		if(arm_format_pako_zlib_Inflate.updatewindow(strm,strm.output,strm.next_out,_out - strm.avail_out) != 0) {
			state.mode = 31;
			return -4;
		}
	}
	_in -= strm.avail_in;
	_out -= strm.avail_out;
	strm.total_in += _in;
	strm.total_out += _out;
	state.total += _out;
	if(state.wrap != 0 && _out != 0) {
		strm.adler = state.check = state.flags != 0 ? arm_format_pako_zlib_CRC32.crc32(state.check,output,_out,strm.next_out - _out) : arm_format_pako_zlib_Adler32.adler32(state.check,output,_out,strm.next_out - _out);
	}
	strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode == 12 ? 128 : 0) + (state.mode == 20 || state.mode == 15 ? 256 : 0);
	if((_in == 0 && _out == 0 || flush == 4) && ret == 0) {
		ret = -5;
	}
	return ret;
};
arm_format_pako_zlib_Inflate.inflateEnd = function(strm) {
	if(strm == null || strm.inflateState == null) {
		return -2;
	}
	var state = strm.inflateState;
	if(state.window != null) {
		state.window = null;
	}
	strm.inflateState = null;
	return 0;
};
arm_format_pako_zlib_Inflate.inflateGetHeader = function(strm,head) {
	if(strm == null || strm.inflateState == null) {
		return -2;
	}
	var state = strm.inflateState;
	if((state.wrap & 2) == 0) {
		return -2;
	}
	state.head = head;
	head.done = false;
	return 0;
};
arm_format_pako_zlib_Inflate.inflateSetDictionary = function(strm,dictionary) {
	var dictLength = dictionary.length;
	var dictid;
	if(strm == null || strm.inflateState == null) {
		return -2;
	}
	var state = strm.inflateState;
	if(state.wrap != 0 && state.mode != 11) {
		return -2;
	}
	if(state.mode == 11) {
		dictid = 1;
		dictid = arm_format_pako_zlib_Adler32.adler32(dictid,dictionary,dictLength,0);
		if(dictid != state.check) {
			return -3;
		}
	}
	var ret = arm_format_pako_zlib_Inflate.updatewindow(strm,dictionary,dictLength,dictLength);
	if(ret != 0) {
		state.mode = 31;
		return -4;
	}
	state.havedict = true;
	return 0;
};
var arm_format_pako_zlib_InflateState = function() {
	this.was = 0;
	this.back = 0;
	this.sane = 0;
	this.distdyn = null;
	this.lendyn = null;
	this.work = new Uint16Array(288);
	this.lens = new Uint16Array(320);
	this.have = 0;
	this.ndist = 0;
	this.nlen = 0;
	this.ncode = 0;
	this.distbits = 0;
	this.lenbits = 0;
	this.distcode = null;
	this.lencode = null;
	this.extra = 0;
	this.offset = 0;
	this.length = 0;
	this.bits = 0;
	this.hold = 0;
	this.window = null;
	this.wnext = 0;
	this.whave = 0;
	this.wsize = 0;
	this.wbits = 0;
	this.head = null;
	this.total = 0;
	this.check = 0;
	this.dmax = 0;
	this.flags = 0;
	this.havedict = false;
	this.wrap = 0;
	this.last = false;
	this.mode = 0;
};
$hxClasses["arm.format.pako.zlib.InflateState"] = arm_format_pako_zlib_InflateState;
arm_format_pako_zlib_InflateState.__name__ = "arm.format.pako.zlib.InflateState";
arm_format_pako_zlib_InflateState.prototype = {
	__class__: arm_format_pako_zlib_InflateState
};
var arm_format_pako_zlib_Messages = function() { };
$hxClasses["arm.format.pako.zlib.Messages"] = arm_format_pako_zlib_Messages;
arm_format_pako_zlib_Messages.__name__ = "arm.format.pako.zlib.Messages";
arm_format_pako_zlib_Messages.get = function(error) {
	return "ERROR: " + arm_format_pako_zlib_Messages.map.h[error];
};
var arm_format_pako_zlib_StaticTreeDesc = function(static_tree,extra_bits,extra_base,elems,max_length) {
	this.static_tree = static_tree;
	this.extra_bits = extra_bits;
	this.extra_base = extra_base;
	this.elems = elems;
	this.max_length = max_length;
	this.has_stree = static_tree != null && static_tree.length > 0;
};
$hxClasses["arm.format.pako.zlib.StaticTreeDesc"] = arm_format_pako_zlib_StaticTreeDesc;
arm_format_pako_zlib_StaticTreeDesc.__name__ = "arm.format.pako.zlib.StaticTreeDesc";
arm_format_pako_zlib_StaticTreeDesc.prototype = {
	__class__: arm_format_pako_zlib_StaticTreeDesc
};
var arm_format_pako_zlib_TreeDesc = function(dyn_tree,stat_desc) {
	this.dyn_tree = dyn_tree;
	this.max_code = 0;
	this.stat_desc = stat_desc;
};
$hxClasses["arm.format.pako.zlib.TreeDesc"] = arm_format_pako_zlib_TreeDesc;
arm_format_pako_zlib_TreeDesc.__name__ = "arm.format.pako.zlib.TreeDesc";
arm_format_pako_zlib_TreeDesc.prototype = {
	__class__: arm_format_pako_zlib_TreeDesc
};
var arm_format_pako_zlib_ZStream = function() {
	this.adler = 0;
	this.data_type = 2;
	this.inflateState = null;
	this.deflateState = null;
	this.msg = "";
	this.total_out = 0;
	this.avail_out = 0;
	this.next_out = 0;
	this.output = null;
	this.total_in = 0;
	this.avail_in = 0;
	this.next_in = 0;
	this.input = null;
};
$hxClasses["arm.format.pako.zlib.ZStream"] = arm_format_pako_zlib_ZStream;
arm_format_pako_zlib_ZStream.__name__ = "arm.format.pako.zlib.ZStream";
arm_format_pako_zlib_ZStream.prototype = {
	__class__: arm_format_pako_zlib_ZStream
};
var arm_format_proc_Plane = function(sizeX,sizeY,vertsX,vertsY) {
	if(vertsY == null) {
		vertsY = 2;
	}
	if(vertsX == null) {
		vertsX = 2;
	}
	if(sizeY == null) {
		sizeY = 1.0;
	}
	if(sizeX == null) {
		sizeX = 1.0;
	}
	this.scalePos = 1.0;
	this.inda = null;
	this.texa = null;
	this.nora = null;
	this.posa = null;
	var halfX = sizeX / 2;
	var halfY = sizeY / 2;
	this.scalePos = Math.max(halfX,halfY);
	var inv = 1 / this.scalePos * 32767;
	var this1 = new Int16Array(vertsX * vertsY * 4);
	this.posa = this1;
	var this2 = new Int16Array(vertsX * vertsY * 2);
	this.nora = this2;
	var this3 = new Int16Array(vertsX * vertsY * 2);
	this.texa = this3;
	var this4 = new Uint32Array((vertsX - 1) * (vertsY - 1) * 6);
	this.inda = this4;
	var stepX = sizeX / (vertsX - 1);
	var stepY = sizeY / (vertsY - 1);
	var _g = 0;
	var _g1 = vertsX * vertsY;
	while(_g < _g1) {
		var i = _g++;
		var x = i % vertsX * stepX - halfX;
		var y = (i / vertsX | 0) * stepY - halfY;
		this.posa[i * 4] = x * inv | 0;
		this.posa[i * 4 + 1] = y * inv | 0;
		this.posa[i * 4 + 2] = 0;
		this.nora[i * 2] = 0;
		this.nora[i * 2 + 1] = 0;
		this.posa[i * 4 + 3] = 32767;
		x = i % vertsX / vertsX;
		y = (i / vertsX | 0) / vertsY;
		this.texa[i * 2] = x * 32767 | 0;
		this.texa[i * 2 + 1] = y * 32767 | 0;
	}
	var _g2 = 0;
	var _g3 = (vertsX - 1) * (vertsY - 1);
	while(_g2 < _g3) {
		var i1 = _g2++;
		var x1 = i1 % (vertsX - 1);
		var y1 = i1 / (vertsY - 1) | 0;
		this.inda[i1 * 6] = y1 * vertsX + x1;
		this.inda[i1 * 6 + 1] = y1 * vertsX + x1 + 1;
		this.inda[i1 * 6 + 2] = (y1 + 1) * vertsX + x1;
		this.inda[i1 * 6 + 3] = y1 * vertsX + x1 + 1;
		this.inda[i1 * 6 + 4] = (y1 + 1) * vertsX + x1 + 1;
		this.inda[i1 * 6 + 5] = (y1 + 1) * vertsX + x1;
	}
};
$hxClasses["arm.format.proc.Plane"] = arm_format_proc_Plane;
arm_format_proc_Plane.__name__ = "arm.format.proc.Plane";
arm_format_proc_Plane.prototype = {
	__class__: arm_format_proc_Plane
};
var arm_format_proc_Sphere = function(radius,widthSegments,heightSegments) {
	if(heightSegments == null) {
		heightSegments = 16;
	}
	if(widthSegments == null) {
		widthSegments = 32;
	}
	if(radius == null) {
		radius = 1.0;
	}
	this.scalePos = 1.0;
	this.inda = null;
	this.texa = null;
	this.nora = null;
	this.posa = null;
	this.scalePos = radius;
	var inv = 1 / this.scalePos * 32767;
	var pi2 = Math.PI * 2;
	var widthVerts = widthSegments + 1;
	var heightVerts = heightSegments + 1;
	var this1 = new Int16Array(widthVerts * heightVerts * 4);
	this.posa = this1;
	var this2 = new Int16Array(widthVerts * heightVerts * 2);
	this.nora = this2;
	var this3 = new Int16Array(widthVerts * heightVerts * 2);
	this.texa = this3;
	var this4 = new Uint32Array(widthSegments * heightSegments * 6 - widthSegments * 6);
	this.inda = this4;
	var _this_x = 0.0;
	var _this_y = 0.0;
	var _this_z = 0.0;
	var _this_w = 1.0;
	var pos = 0;
	var _g = 0;
	var _g1 = heightVerts;
	while(_g < _g1) {
		var y = _g++;
		var v = y / heightSegments;
		var vFlip = 1.0 - v;
		var uOff = y == 0 ? 0.5 / widthSegments : y == heightSegments ? -0.5 / widthSegments : 0.0;
		var _g2 = 0;
		var _g11 = widthVerts;
		while(_g2 < _g11) {
			var x = _g2++;
			var u = x / widthSegments;
			var uPI2 = u * pi2;
			var vPI = v * Math.PI;
			var vPIsin = Math.sin(vPI);
			var vx = -radius * Math.cos(uPI2) * vPIsin;
			var vy = radius * Math.cos(vPI);
			var vz = radius * Math.sin(uPI2) * vPIsin;
			var i4 = pos * 4;
			var i2 = pos * 2;
			this.posa[i4] = vx * inv | 0;
			this.posa[i4 + 1] = vy * inv | 0;
			this.posa[i4 + 2] = vz * inv | 0;
			_this_x = vx;
			_this_y = vy;
			_this_z = vz;
			_this_w = 1.0;
			var n = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				_this_x *= invN;
				_this_y *= invN;
				_this_z *= invN;
			}
			this.posa[i4 + 3] = _this_z * 32767 | 0;
			this.nora[i2] = _this_x * 32767 | 0;
			this.nora[i2 + 1] = _this_y * 32767 | 0;
			this.texa[i2] = (u + uOff) * 32767 | 0;
			this.texa[i2 + 1] = vFlip * 32767 | 0;
			++pos;
		}
	}
	pos = 0;
	var heightSegments1 = heightSegments - 1;
	var _g21 = 0;
	var _g3 = heightSegments;
	while(_g21 < _g3) {
		var y1 = _g21++;
		var _g22 = 0;
		var _g31 = widthSegments;
		while(_g22 < _g31) {
			var x1 = _g22++;
			var x11 = x1 + 1;
			var y11 = y1 + 1;
			var a = y1 * widthVerts + x11;
			var b = y1 * widthVerts + x1;
			var c = y11 * widthVerts + x1;
			var d = y11 * widthVerts + x11;
			if(y1 > 0) {
				this.inda[pos++] = a;
				this.inda[pos++] = b;
				this.inda[pos++] = d;
			}
			if(y1 < heightSegments1) {
				this.inda[pos++] = b;
				this.inda[pos++] = c;
				this.inda[pos++] = d;
			}
		}
	}
};
$hxClasses["arm.format.proc.Sphere"] = arm_format_proc_Sphere;
arm_format_proc_Sphere.__name__ = "arm.format.proc.Sphere";
arm_format_proc_Sphere.prototype = {
	__class__: arm_format_proc_Sphere
};
var arm_io_ExportArm = function() { };
$hxClasses["arm.io.ExportArm"] = arm_io_ExportArm;
arm_io_ExportArm.__name__ = "arm.io.ExportArm";
arm_io_ExportArm.run = function(path) {
	var raw = { mesh_datas : [arm_Context.paintObject.data.raw]};
	var o = new haxe_io_BytesOutput();
	o.set_bigEndian(false);
	iron_system_ArmPack.write(o,raw);
	var b = o.getBytes();
	if(!StringTools.endsWith(path,".arm")) {
		path += ".arm";
	}
	Krom.fileSaveBytes(path,b.b.bufferValue);
};
arm_io_ExportArm.runProject = function() {
	var mnodes = [];
	var bnodes = [];
	var _g = 0;
	var _g1 = arm_Project.materials;
	while(_g < _g1.length) {
		var m = _g1[_g];
		++_g;
		var c = JSON.parse(JSON.stringify(m.canvas));
		var _g2 = 0;
		var _g11 = c.nodes;
		while(_g2 < _g11.length) {
			var n = _g11[_g2];
			++_g2;
			if(n.type == "TEX_IMAGE") {
				var tmp = arm_App.enumTexts(n.type);
				n.buttons[0].data = tmp[n.buttons[0].default_value];
			}
		}
		mnodes.push(c);
	}
	var _g21 = 0;
	var _g3 = arm_Project.brushes;
	while(_g21 < _g3.length) {
		var b = _g3[_g21];
		++_g21;
		bnodes.push(b.canvas);
	}
	var md = [];
	var _g4 = 0;
	var _g5 = arm_Project.paintObjects;
	while(_g4 < _g5.length) {
		var p = _g5[_g4];
		++_g4;
		md.push(p.data.raw);
	}
	var texture_files = arm_io_ExportArm.assetsToFiles(arm_Project.assets);
	var mesh_files = arm_io_ExportArm.meshesToFiles();
	var bitsPos = arm_App.bitsHandle.position;
	var bpp = bitsPos == 0 ? 8 : bitsPos == 1 ? 16 : 32;
	var ld = [];
	var _g6 = 0;
	var _g7 = arm_Project.layers;
	while(_g6 < _g7.length) {
		var l = _g7[_g6];
		++_g6;
		ld.push({ res : l.texpaint != null ? l.texpaint.get_width() : arm_Project.layers[0].texpaint.get_width(), bpp : bpp, texpaint : l.texpaint != null ? arm_format_Lz4.encode(l.texpaint.getPixels()) : null, texpaint_nor : l.texpaint_nor != null ? arm_format_Lz4.encode(l.texpaint_nor.getPixels()) : null, texpaint_pack : l.texpaint_pack != null ? arm_format_Lz4.encode(l.texpaint_pack.getPixels()) : null, texpaint_mask : l.texpaint_mask != null ? arm_format_Lz4.encode(l.texpaint_mask.getPixels()) : null, uv_scale : l.scale, uv_rot : l.angle, uv_type : l.uvType, opacity_mask : l.maskOpacity, material_mask : l.material_mask != null ? arm_Project.materials.indexOf(l.material_mask) : -1, object_mask : l.objectMask, blending : l.blending, parent : l.parent != null ? arm_Project.layers.indexOf(l.parent) : -1, visible : l.visible, paint_base : l.paintBase, paint_opac : l.paintOpac, paint_occ : l.paintOcc, paint_rough : l.paintRough, paint_met : l.paintMet, paint_nor : l.paintNor, paint_height : l.paintHeight, paint_emis : l.paintEmis, paint_subs : l.paintSubs});
	}
	arm_Project.raw = { version : Main.version, material_nodes : mnodes, brush_nodes : bnodes, mesh_datas : md, layer_datas : ld, assets : texture_files, mesh_assets : mesh_files};
	var d = arm_Project.raw;
	var o = new haxe_io_BytesOutput();
	o.set_bigEndian(false);
	iron_system_ArmPack.write(o,d);
	var bytes = o.getBytes();
	Krom.fileSaveBytes(arm_Project.filepath,bytes.b.bufferValue);
	arm_Log.info("Project saved.");
};
arm_io_ExportArm.runMaterial = function(path) {
	var mnodes = [];
	var m = arm_Context.material;
	var c = JSON.parse(JSON.stringify(m.canvas));
	var assets = [];
	var _g = 0;
	var _g1 = c.nodes;
	while(_g < _g1.length) {
		var n = _g1[_g];
		++_g;
		if(n.type == "TEX_IMAGE") {
			var index = n.buttons[0].default_value;
			var tmp = arm_App.enumTexts(n.type);
			n.buttons[0].data = tmp[index];
			var asset = arm_Project.assets[index];
			if(assets.indexOf(asset) == -1) {
				assets.push(asset);
			}
		}
	}
	mnodes.push(c);
	var texture_files = arm_io_ExportArm.assetsToFiles(assets);
	var raw = { version : Main.version, material_nodes : mnodes, material_icons : [arm_format_Lz4.encode(m.image.getPixels())], assets : texture_files};
	var o = new haxe_io_BytesOutput();
	o.set_bigEndian(false);
	iron_system_ArmPack.write(o,raw);
	var bytes = o.getBytes();
	if(!StringTools.endsWith(path,".arm")) {
		path += ".arm";
	}
	Krom.fileSaveBytes(path,bytes.b.bufferValue);
};
arm_io_ExportArm.runBrush = function(path) {
	var bnodes = [];
	var b = arm_Context.brush;
	var c = JSON.parse(JSON.stringify(b.canvas));
	var assets = [];
	var _g = 0;
	var _g1 = c.nodes;
	while(_g < _g1.length) {
		var n = _g1[_g];
		++_g;
		if(n.type == "TEX_IMAGE") {
			var index = n.buttons[0].default_value;
			var tmp = arm_App.enumTexts(n.type);
			n.buttons[0].data = tmp[index];
			var asset = arm_Project.assets[index];
			if(assets.indexOf(asset) == -1) {
				assets.push(asset);
			}
		}
	}
	bnodes.push(c);
	var texture_files = arm_io_ExportArm.assetsToFiles(assets);
	var raw = { version : Main.version, brush_nodes : bnodes, brush_icons : [arm_format_Lz4.encode(b.image.getPixels())], assets : texture_files};
	var o = new haxe_io_BytesOutput();
	o.set_bigEndian(false);
	iron_system_ArmPack.write(o,raw);
	var bytes = o.getBytes();
	if(!StringTools.endsWith(path,".arm")) {
		path += ".arm";
	}
	Krom.fileSaveBytes(path,bytes.b.bufferValue);
};
arm_io_ExportArm.assetsToFiles = function(assets) {
	var texture_files = [];
	var _g = 0;
	while(_g < assets.length) {
		var a = assets[_g];
		++_g;
		var sameDrive = arm_Project.filepath.charAt(0) == a.file.charAt(0);
		if(sameDrive) {
			texture_files.push(arm_sys_Path.toRelative(arm_Project.filepath,a.file));
		} else {
			texture_files.push(a.file);
		}
	}
	return texture_files;
};
arm_io_ExportArm.meshesToFiles = function() {
	var mesh_files = [];
	var _g = 0;
	var _g1 = arm_Project.meshAssets;
	while(_g < _g1.length) {
		var file = _g1[_g];
		++_g;
		var sameDrive = arm_Project.filepath.charAt(0) == file.charAt(0);
		if(sameDrive) {
			mesh_files.push(arm_sys_Path.toRelative(arm_Project.filepath,file));
		} else {
			mesh_files.push(file);
		}
	}
	return mesh_files;
};
var arm_io_ExportMesh = function() { };
$hxClasses["arm.io.ExportMesh"] = arm_io_ExportMesh;
arm_io_ExportMesh.__name__ = "arm.io.ExportMesh";
arm_io_ExportMesh.run = function(path,applyDisplacement) {
	if(applyDisplacement == null) {
		applyDisplacement = false;
	}
	if(arm_Context.exportMeshFormat == 0) {
		arm_io_ExportObj.run(path,applyDisplacement);
	} else {
		arm_io_ExportArm.run(path);
	}
};
var arm_io_ExportObj = function() { };
$hxClasses["arm.io.ExportObj"] = arm_io_ExportObj;
arm_io_ExportObj.__name__ = "arm.io.ExportObj";
arm_io_ExportObj.run = function(path,applyDisplacement) {
	if(applyDisplacement == null) {
		applyDisplacement = false;
	}
	var height = applyDisplacement ? arm_Project.layers[0].texpaint_pack.getPixels() : null;
	var res = arm_Project.layers[0].texpaint_pack.get_width();
	var o = new haxe_io_BytesOutput();
	o.set_bigEndian(false);
	var off = 0;
	var _g = 0;
	var _g1 = arm_Project.paintObjects;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		var mesh = p.data.raw;
		var inv = 3.0518509475997192e-005;
		var sc = p.data.scalePos * inv;
		var posa = mesh.vertex_arrays[0].values;
		var nora = mesh.vertex_arrays[1].values;
		var texa = mesh.vertex_arrays[2].values;
		var len = posa.length / 4 | 0;
		o.writeString("o " + p.name + "\n");
		var _g2 = 0;
		var _g11 = len;
		while(_g2 < _g11) {
			var i = _g2++;
			o.writeString("v ");
			o.writeString(posa[i * 4] * sc + "");
			o.writeString(" ");
			o.writeString(posa[i * 4 + 2] * sc + "");
			o.writeString(" ");
			o.writeString(-posa[i * 4 + 1] * sc + "");
			o.writeString("\n");
		}
		var _g21 = 0;
		var _g3 = len;
		while(_g21 < _g3) {
			var i1 = _g21++;
			o.writeString("vn ");
			o.writeString(nora[i1 * 2] * inv + "");
			o.writeString(" ");
			o.writeString(posa[i1 * 4 + 3] * inv + "");
			o.writeString(" ");
			o.writeString(-nora[i1 * 2 + 1] * inv + "");
			o.writeString("\n");
		}
		var _g4 = 0;
		var _g5 = len;
		while(_g4 < _g5) {
			var i2 = _g4++;
			o.writeString("vt ");
			o.writeString(texa[i2 * 2] * inv + "");
			o.writeString(" ");
			o.writeString(1.0 - texa[i2 * 2 + 1] * inv + "");
			o.writeString("\n");
		}
		var inda = mesh.index_arrays[0].values;
		var _g6 = 0;
		var _g7 = inda.length / 3 | 0;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var i11 = inda[i3 * 3] + 1 + off;
			var i21 = inda[i3 * 3 + 1] + 1 + off;
			var i31 = inda[i3 * 3 + 2] + 1 + off;
			o.writeString("f ");
			o.writeString(i11 + "");
			o.writeString("/");
			o.writeString(i11 + "");
			o.writeString("/");
			o.writeString(i11 + "");
			o.writeString(" ");
			o.writeString(i21 + "");
			o.writeString("/");
			o.writeString(i21 + "");
			o.writeString("/");
			o.writeString(i21 + "");
			o.writeString(" ");
			o.writeString(i31 + "");
			o.writeString("/");
			o.writeString(i31 + "");
			o.writeString("/");
			o.writeString(i31 + "");
			o.writeString("\n");
		}
		off += inda.length;
	}
	if(!StringTools.endsWith(path,".obj")) {
		path += ".obj";
	}
	Krom.fileSaveBytes(path,o.getBytes().b.bufferValue);
};
var arm_io_ExportTexture = function() { };
$hxClasses["arm.io.ExportTexture"] = arm_io_ExportTexture;
arm_io_ExportTexture.__name__ = "arm.io.ExportTexture";
arm_io_ExportTexture.run = function(path) {
	var udimTiles = [];
	var _g = 0;
	var _g1 = arm_Project.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.objectMask > 0) {
			var name = arm_Project.paintObjects[l.objectMask - 1].name;
			if(HxOverrides.substr(name,name.length - 5,2) == ".1") {
				udimTiles.push(HxOverrides.substr(name,name.length - 5,null));
			}
		}
	}
	if(udimTiles.length > 0 && arm_Context.layersExport == 0) {
		var _g2 = 0;
		while(_g2 < udimTiles.length) {
			var udimTile = udimTiles[_g2];
			++_g2;
			arm_io_ExportTexture.runLayers(path,udimTile);
		}
	} else {
		arm_io_ExportTexture.runLayers(path);
	}
	arm_Log.info("Textures exported.");
};
arm_io_ExportTexture.runLayers = function(path,udimTile) {
	if(udimTile == null) {
		udimTile = "";
	}
	var textureSize = arm_Config.getTextureRes();
	var formatQuality = arm_Context.formatQuality;
	var f = arm_ui_UIFiles.filename;
	if(f == "") {
		f = arm_Translator.tr("untitled");
	}
	var formatType = arm_Context.formatType;
	var bits = arm_App.bitsHandle.position == 0 ? 8 : 16;
	var ext = bits == 16 ? ".exr" : formatType == 0 ? ".png" : ".jpg";
	if(StringTools.endsWith(f,ext)) {
		f = HxOverrides.substr(f,0,f.length - 4);
	}
	ext = udimTile + ext;
	arm_Layers.makeTempImg();
	arm_Layers.makeExportImg();
	if(arm_Layers.pipeMerge == null) {
		arm_Layers.makePipe();
	}
	if(iron_data_ConstData.screenAlignedVB == null) {
		iron_data_ConstData.createScreenAlignedData();
	}
	var _this = iron_RenderPath.active.renderTargets;
	var empty = (__map_reserved["empty_white"] != null ? _this.getReserved("empty_white") : _this.h["empty_white"]).image;
	var exportAll = arm_Context.layersExport == 0;
	if(!exportAll && arm_Context.layer.objectMask > 0) {
		f += "_" + arm_Project.paintObjects[arm_Context.layer.objectMask].name;
	}
	arm_Layers.expa.get_g4().begin();
	arm_Layers.expa.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(0.0,0.0,0.0,0.0));
	arm_Layers.expa.get_g4().end();
	arm_Layers.expb.get_g4().begin();
	arm_Layers.expb.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(0.5,0.5,1.0,0.0));
	arm_Layers.expb.get_g4().end();
	arm_Layers.expc.get_g4().begin();
	arm_Layers.expc.get_g4().clear(kha__$Color_Color_$Impl_$.fromFloats(1.0,0.0,0.0,0.0));
	arm_Layers.expc.get_g4().end();
	var layers = exportAll ? arm_Project.layers : [arm_Context.layer];
	var _g = 0;
	while(_g < layers.length) {
		var l1 = layers[_g];
		++_g;
		if(exportAll && !l1.isVisible()) {
			continue;
		}
		if(udimTile != "" && l1.objectMask > 0) {
			if(!StringTools.endsWith(arm_Project.paintObjects[l1.objectMask - 1].name,udimTile)) {
				continue;
			}
		}
		var hasMask = l1.texpaint_mask != null;
		if(l1.paintBase) {
			arm_Layers.imga.get_g2().begin(false);
			arm_Layers.imga.get_g2().set_pipeline(arm_Layers.pipeCopy);
			arm_Layers.imga.get_g2().drawImage(arm_Layers.expa,0,0);
			arm_Layers.imga.get_g2().set_pipeline(null);
			arm_Layers.imga.get_g2().end();
			arm_Layers.expa.get_g4().begin();
			arm_Layers.expa.get_g4().setPipeline(arm_Layers.pipeMerge);
			arm_Layers.expa.get_g4().setTexture(arm_Layers.tex0,l1.texpaint);
			arm_Layers.expa.get_g4().setTexture(arm_Layers.tex1,empty);
			var tmp = hasMask ? l1.texpaint_mask : empty;
			arm_Layers.expa.get_g4().setTexture(arm_Layers.texmask,tmp);
			arm_Layers.expa.get_g4().setTexture(arm_Layers.texa,arm_Layers.imga);
			arm_Layers.expa.get_g4().setFloat(arm_Layers.opac,l1.maskOpacity);
			arm_Layers.expa.get_g4().setInt(arm_Layers.blending,l1.blending);
			arm_Layers.expa.get_g4().setVertexBuffer(iron_data_ConstData.screenAlignedVB);
			arm_Layers.expa.get_g4().setIndexBuffer(iron_data_ConstData.screenAlignedIB);
			arm_Layers.expa.get_g4().drawIndexedVertices();
			arm_Layers.expa.get_g4().end();
		}
		if(l1.paintNor) {
			arm_Layers.imga.get_g2().begin(false);
			arm_Layers.imga.get_g2().set_pipeline(arm_Layers.pipeCopy);
			arm_Layers.imga.get_g2().drawImage(arm_Layers.expb,0,0);
			arm_Layers.imga.get_g2().set_pipeline(null);
			arm_Layers.imga.get_g2().end();
			arm_Layers.expb.get_g4().begin();
			arm_Layers.expb.get_g4().setPipeline(arm_Layers.pipeMerge);
			arm_Layers.expb.get_g4().setTexture(arm_Layers.tex0,l1.texpaint);
			arm_Layers.expb.get_g4().setTexture(arm_Layers.tex1,l1.texpaint_nor);
			var tmp1 = hasMask ? l1.texpaint_mask : empty;
			arm_Layers.expb.get_g4().setTexture(arm_Layers.texmask,tmp1);
			arm_Layers.expb.get_g4().setTexture(arm_Layers.texa,arm_Layers.imga);
			arm_Layers.expb.get_g4().setFloat(arm_Layers.opac,l1.maskOpacity);
			arm_Layers.expb.get_g4().setInt(arm_Layers.blending,-1);
			arm_Layers.expb.get_g4().setVertexBuffer(iron_data_ConstData.screenAlignedVB);
			arm_Layers.expb.get_g4().setIndexBuffer(iron_data_ConstData.screenAlignedIB);
			arm_Layers.expb.get_g4().drawIndexedVertices();
			arm_Layers.expb.get_g4().end();
		}
		if(l1.paintOcc || l1.paintRough || l1.paintMet || l1.paintHeight) {
			arm_Layers.imga.get_g2().begin(false);
			arm_Layers.imga.get_g2().set_pipeline(arm_Layers.pipeCopy);
			arm_Layers.imga.get_g2().drawImage(arm_Layers.expc,0,0);
			arm_Layers.imga.get_g2().set_pipeline(null);
			arm_Layers.imga.get_g2().end();
			if(l1.paintOcc && l1.paintRough && l1.paintMet && l1.paintHeight) {
				arm_Layers.commandsMergePack(arm_Layers.pipeMerge,arm_Layers.expc,l1.texpaint,l1.texpaint_pack,l1.maskOpacity,hasMask ? l1.texpaint_mask : empty);
			} else {
				if(l1.paintOcc) {
					arm_Layers.commandsMergePack(arm_Layers.pipeMergeR,arm_Layers.expc,l1.texpaint,l1.texpaint_pack,l1.maskOpacity,hasMask ? l1.texpaint_mask : empty);
				}
				if(l1.paintRough) {
					arm_Layers.commandsMergePack(arm_Layers.pipeMergeG,arm_Layers.expc,l1.texpaint,l1.texpaint_pack,l1.maskOpacity,hasMask ? l1.texpaint_mask : empty);
				}
				if(l1.paintMet) {
					arm_Layers.commandsMergePack(arm_Layers.pipeMergeB,arm_Layers.expc,l1.texpaint,l1.texpaint_pack,l1.maskOpacity,hasMask ? l1.texpaint_mask : empty);
				}
			}
		}
	}
	var texpaint = arm_Layers.expa;
	var texpaint_nor = arm_Layers.expb;
	var texpaint_pack = arm_Layers.expc;
	var pixpaint = null;
	var pixpaint_nor = null;
	var pixpaint_pack = null;
	var preset = arm_ui_BoxExport.preset;
	var pix = null;
	var _g1 = 0;
	var _g2 = preset.textures;
	while(_g1 < _g2.length) {
		var t = _g2[_g1];
		++_g1;
		var _g11 = 0;
		var _g21 = t.channels;
		while(_g11 < _g21.length) {
			var c = _g21[_g11];
			++_g11;
			if((c == "base_r" || c == "base_g" || c == "base_b" || c == "opac") && pixpaint == null) {
				pixpaint = texpaint.getPixels();
			} else if((c == "nor_r" || c == "nor_g" || c == "nor_b" || c == "emis" || c == "subs") && pixpaint_nor == null) {
				pixpaint_nor = texpaint_nor.getPixels();
			} else if((c == "occ" || c == "rough" || c == "metal" || c == "height" || c == "smooth") && pixpaint_pack == null) {
				pixpaint_pack = texpaint_pack.getPixels();
			}
		}
	}
	var _g3 = 0;
	var _g4 = preset.textures;
	while(_g3 < _g4.length) {
		var t1 = _g4[_g3];
		++_g3;
		var c1 = t1.channels;
		var singleChannel = c1[0] == c1[1] && c1[1] == c1[2] && c1[3] == "1.0";
		if(c1[0] == "base_r" && c1[1] == "base_g" && c1[2] == "base_b" && c1[3] == "1.0") {
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pixpaint,1);
		} else if(c1[0] == "nor_r" && c1[1] == "nor_g" && c1[2] == "nor_b" && c1[3] == "1.0") {
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pixpaint_nor,1);
		} else if(c1[0] == "occ" && c1[1] == "rough" && c1[2] == "metal" && c1[3] == "1.0") {
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pixpaint_pack,1);
		} else if(singleChannel && c1[0] == "occ") {
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pixpaint_pack,2,0);
		} else if(singleChannel && c1[0] == "rough") {
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pixpaint_pack,2,1);
		} else if(singleChannel && c1[0] == "metal") {
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pixpaint_pack,2,2);
		} else if(singleChannel && c1[0] == "height") {
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pixpaint_pack,2,3);
		} else if(singleChannel && c1[0] == "opac") {
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pixpaint,2,3);
		} else {
			if(pix == null) {
				pix = new haxe_io_Bytes(new ArrayBuffer(textureSize * textureSize * 4 * (bits / 8 | 0)));
			}
			var _g31 = 0;
			while(_g31 < 4) {
				var i = _g31++;
				var c2 = t1.channels[i];
				if(c2 == "base_r") {
					arm_io_ExportTexture.copyChannel(pixpaint,0,pix,i);
				} else if(c2 == "base_g") {
					arm_io_ExportTexture.copyChannel(pixpaint,1,pix,i);
				} else if(c2 == "base_b") {
					arm_io_ExportTexture.copyChannel(pixpaint,2,pix,i);
				} else if(c2 == "height") {
					arm_io_ExportTexture.copyChannel(pixpaint_pack,3,pix,i);
				} else if(c2 == "metal") {
					arm_io_ExportTexture.copyChannel(pixpaint_pack,2,pix,i);
				} else if(c2 == "nor_r") {
					arm_io_ExportTexture.copyChannel(pixpaint_nor,0,pix,i);
				} else if(c2 == "nor_g") {
					arm_io_ExportTexture.copyChannel(pixpaint_nor,1,pix,i);
				} else if(c2 == "nor_b") {
					arm_io_ExportTexture.copyChannel(pixpaint_nor,2,pix,i);
				} else if(c2 == "occ") {
					arm_io_ExportTexture.copyChannel(pixpaint_pack,0,pix,i);
				} else if(c2 == "opac") {
					arm_io_ExportTexture.copyChannel(pixpaint,3,pix,i);
				} else if(c2 == "rough") {
					arm_io_ExportTexture.copyChannel(pixpaint_pack,1,pix,i);
				} else if(c2 == "smooth") {
					arm_io_ExportTexture.copyChannelInv(pixpaint_pack,1,pix,i);
				} else if(c2 == "emis") {
					arm_io_ExportTexture.extractChannel(pixpaint_nor,3,pix,i,255);
				} else if(c2 == "subs") {
					arm_io_ExportTexture.extractChannel(pixpaint_nor,3,pix,i,254);
				} else if(c2 == "0.0") {
					arm_io_ExportTexture.setChannel(0,pix,i);
				} else if(c2 == "1.0") {
					arm_io_ExportTexture.setChannel(255,pix,i);
				}
			}
			arm_io_ExportTexture.writeTexture(path + arm_sys_Path.sep + f + "_" + t1.name + ext,pix,3);
		}
	}
};
arm_io_ExportTexture.writeTexture = function(file,pixels,type,off) {
	if(off == null) {
		off = 0;
	}
	if(type == null) {
		type = 1;
	}
	var out = new haxe_io_BytesOutput();
	var res = arm_Config.getTextureRes();
	var bitsHandle = arm_App.bitsHandle.position;
	var bits = bitsHandle == 0 ? 8 : bitsHandle == 1 ? 16 : 32;
	if(bits > 8) {
		var writer = new arm_format_ExrWriter(out,res,res,pixels,bits,type,off);
	} else if(arm_Context.formatType == 0) {
		var writer1 = new arm_format_PngWriter(out);
		var data = type == 1 ? arm_format_PngTools.build32RGB1(res,res,pixels) : type == 2 ? arm_format_PngTools.build32RRR1(res,res,pixels,off) : arm_format_PngTools.build32RGBA(res,res,pixels);
		writer1.write(data);
	} else {
		var writer2 = new arm_format_JpgWriter(out);
		writer2.write({ width : res, height : res, quality : arm_Context.formatQuality, pixels : pixels},type,off);
	}
	Krom.fileSaveBytes(file,out.getBytes().b.bufferValue);
};
arm_io_ExportTexture.copyChannel = function(from,fromChannel,to,toChannel) {
	var _g = 0;
	var _g1 = to.length / 4 | 0;
	while(_g < _g1) {
		var i = _g++;
		to.b[i * 4 + toChannel] = from.b[i * 4 + fromChannel];
	}
};
arm_io_ExportTexture.copyChannelInv = function(from,fromChannel,to,toChannel) {
	var _g = 0;
	var _g1 = to.length / 4 | 0;
	while(_g < _g1) {
		var i = _g++;
		to.b[i * 4 + toChannel] = 255 - from.b[i * 4 + fromChannel];
	}
};
arm_io_ExportTexture.setChannel = function(value,to,toChannel) {
	var _g = 0;
	var _g1 = to.length / 4 | 0;
	while(_g < _g1) {
		var i = _g++;
		to.b[i * 4 + toChannel] = value;
	}
};
arm_io_ExportTexture.extractChannel = function(from,fromChannel,to,toChannel,mask) {
	var _g = 0;
	var _g1 = to.length / 4 | 0;
	while(_g < _g1) {
		var i = _g++;
		to.b[i * 4 + toChannel] = from.b[i * 4 + fromChannel] == mask ? 255 : 0;
	}
};
var arm_io_ImportArm = function() { };
$hxClasses["arm.io.ImportArm"] = arm_io_ImportArm;
arm_io_ImportArm.__name__ = "arm.io.ImportArm";
arm_io_ImportArm.runMesh = function(raw) {
	arm_Project.paintObjects = [];
	var _g = 0;
	var _g1 = raw.mesh_datas.length;
	while(_g < _g1) {
		var i = [_g++];
		new iron_data_MeshData(raw.mesh_datas[i[0]],(function(i1) {
			return function(md) {
				var object = null;
				if(i1[0] == 0) {
					arm_Context.paintObject.setData(md);
					object = arm_Context.paintObject;
				} else {
					object = iron_Scene.active.addMeshObject(md,arm_Context.paintObject.materials,arm_Context.paintObject);
					object.name = md.name;
					object.skip_context = "paint";
					md.handle = md.name;
					var key = md.handle;
					var _this = iron_data_Data.cachedMeshes;
					if(__map_reserved[key] != null) {
						_this.setReserved(key,md);
					} else {
						_this.h[key] = md;
					}
				}
				var _this1 = object.transform.scale;
				_this1.x = 1;
				_this1.y = 1;
				_this1.z = 1;
				_this1.w = 1.0;
				object.transform.buildMatrix();
				object.name = md.name;
				arm_Project.paintObjects.push(object);
			};
		})(i));
	}
	iron_App.notifyOnRender(arm_Layers.initLayers);
	arm_History.reset();
};
arm_io_ImportArm.runScene = function(raw,path) {
	var _dataPath = iron_data_Data.dataPath;
	iron_data_Data.dataPath = path.substring(0,path.lastIndexOf(arm_sys_Path.sep) + 1);
	raw.name += "_imported";
	var key = raw.name;
	var _this = iron_data_Data.cachedSceneRaws;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,raw);
	} else {
		_this.h[key] = raw;
	}
	iron_Scene.active.addScene(raw.name,null,function(sceneObject) {
		arm_io_ImportArm.traverseObjects(sceneObject.children);
	});
	iron_data_Data.dataPath = _dataPath;
};
arm_io_ImportArm.traverseObjects = function(objects) {
	if(objects == null) {
		return;
	}
	var _g = 0;
	while(_g < objects.length) {
		var o = objects[_g];
		++_g;
		if(((o) instanceof iron_object_MeshObject)) {
			var mo = js_Boot.__cast(o , iron_object_MeshObject);
			var count = mo.data.geom.indices.length;
			var this1 = new Array(count);
			mo.materials = this1;
			var _g1 = 0;
			var _g11 = count;
			while(_g1 < _g11) {
				var i = _g1++;
				mo.materials[i] = arm_Context.materialScene.data;
			}
		}
		arm_io_ImportArm.traverseObjects(o.children);
	}
};
arm_io_ImportArm.runProject = function(path) {
	iron_data_Data.getBlob(path,function(b) {
		var i = new haxe_io_BytesInput(b.toBytes());
		i.set_bigEndian(false);
		var project = iron_system_ArmPack.read(i);
		if(project.version == "0.8") {
			if(project.mesh_datas != null) {
				var _g = 0;
				var _g1 = project.mesh_datas;
				while(_g < _g1.length) {
					var md = _g1[_g];
					++_g;
					var _g2 = 0;
					var _g11 = md.vertex_arrays;
					while(_g2 < _g11.length) {
						var va = _g11[_g2];
						++_g2;
						if(va.data == null) {
							va.data = va.attrib == "pos" ? "short4norm" : "short2norm";
						}
					}
				}
			}
		}
		if(project.version != null && project.layer_datas == null) {
			arm_io_ImportArm.runMaterialFromProject(project,path);
			return;
		}
		arm_Context.layersPreviewDirty = true;
		arm_Project.projectNew(false);
		arm_Project.filepath = path;
		arm_ui_UIFiles.filename = path.substring(path.lastIndexOf(arm_sys_Path.sep) + 1,path.lastIndexOf("."));
		kha_Window.get(0).set_title(arm_ui_UIFiles.filename + " - ArmorPaint");
		if(project.version == null) {
			if(project.objects == null) {
				arm_io_ImportArm.runMesh(project);
			} else {
				arm_io_ImportArm.runScene(project,path);
			}
			return;
		}
		arm_Project.raw = project;
		var base = arm_sys_Path.baseDir(path);
		var _g3 = 0;
		var _g12 = project.assets;
		while(_g3 < _g12.length) {
			var file = _g12[_g3];
			++_g3;
			file = StringTools.replace(file,"/","\\");
			var abs = iron_data_Data.isAbsolute(file) ? file : base + file;
			if(!arm_sys_File.exists(abs)) {
				arm_io_ImportArm.makePink(abs);
			}
			arm_io_ImportTexture.run(abs);
		}
		var m0 = null;
		iron_data_Data.getMaterial("Scene","Material",function(m) {
			m0 = m;
		});
		arm_Project.materials = [];
		var _g21 = 0;
		var _g31 = project.material_nodes;
		while(_g21 < _g31.length) {
			var n = _g31[_g21];
			++_g21;
			arm_io_ImportArm.initNodes(n.nodes);
			arm_Context.material = new arm_data_MaterialSlot(m0,n);
			arm_Project.materials.push(arm_Context.material);
			arm_node_MaterialParser.parsePaintMaterial();
			arm_util_RenderUtil.makeMaterialPreview();
		}
		arm_Project.brushes = [];
		var _g4 = 0;
		var _g5 = project.brush_nodes;
		while(_g4 < _g5.length) {
			var n1 = _g5[_g4];
			++_g4;
			arm_io_ImportArm.initNodes(n1.nodes);
			arm_Context.brush = new arm_data_BrushSlot(n1);
			arm_Project.brushes.push(arm_Context.brush);
			arm_node_MaterialParser.parseBrush();
			arm_Context.parseBrushInputs();
			arm_util_RenderUtil.makeBrushPreview();
		}
		new iron_data_MeshData(project.mesh_datas[0],function(md1) {
			arm_Context.paintObject.setData(md1);
			var _this = arm_Context.paintObject.transform.scale;
			_this.x = 1;
			_this.y = 1;
			_this.z = 1;
			_this.w = 1.0;
			arm_Context.paintObject.transform.buildMatrix();
			arm_Context.paintObject.name = md1.name;
			arm_Project.paintObjects = [arm_Context.paintObject];
		});
		var _g6 = 1;
		var _g7 = project.mesh_datas.length;
		while(_g6 < _g7) {
			var i1 = _g6++;
			var raw = project.mesh_datas[i1];
			new iron_data_MeshData(raw,function(md2) {
				var object = iron_Scene.active.addMeshObject(md2,arm_Context.paintObject.materials,arm_Context.paintObject);
				object.name = md2.name;
				object.skip_context = "paint";
				arm_Project.paintObjects.push(object);
			});
		}
		if(project.mesh_assets != null && project.mesh_assets.length > 0) {
			var file1 = project.mesh_assets[0];
			var abs1 = iron_data_Data.isAbsolute(file1) ? file1 : base + file1;
			arm_Project.meshAssets = [abs1];
		}
		if(arm_Context.mergedObject == null) {
			arm_util_MeshUtil.mergeMesh();
		}
		arm_Context.selectPaintObject(arm_Context.mainObject());
		arm_util_ViewportUtil.scaleToBounds();
		arm_Context.paintObject.skip_context = "paint";
		arm_Context.mergedObject.visible = true;
		var l0 = project.layer_datas[0];
		arm_App.resHandle.position = arm_Config.getTextureResPos(l0.res);
		var bitsPos = l0.bpp == 8 ? 0 : l0.bpp == 16 ? 1 : 2;
		arm_App.bitsHandle.position = bitsPos;
		var bytesPerPixel = l0.bpp / 8 | 0;
		var format = l0.bpp == 8 ? 0 : l0.bpp == 16 ? 4 : 2;
		if(arm_Project.layers[0].texpaint.get_width() != arm_Config.getTextureRes()) {
			var _g8 = 0;
			var _g9 = arm_Project.layers;
			while(_g8 < _g9.length) {
				var l = _g9[_g8];
				++_g8;
				l.resizeAndSetBits();
			}
			if(arm_History.undoLayers != null) {
				var _g10 = 0;
				var _g111 = arm_History.undoLayers;
				while(_g10 < _g111.length) {
					var l1 = _g111[_g10];
					++_g10;
					l1.resizeAndSetBits();
				}
			}
			var rts = iron_RenderPath.active.renderTargets;
			(__map_reserved["texpaint_blend0"] != null ? rts.getReserved("texpaint_blend0") : rts.h["texpaint_blend0"]).image.unload();
			(__map_reserved["texpaint_blend0"] != null ? rts.getReserved("texpaint_blend0") : rts.h["texpaint_blend0"]).raw.width = arm_Config.getTextureRes();
			(__map_reserved["texpaint_blend0"] != null ? rts.getReserved("texpaint_blend0") : rts.h["texpaint_blend0"]).raw.height = arm_Config.getTextureRes();
			(__map_reserved["texpaint_blend0"] != null ? rts.getReserved("texpaint_blend0") : rts.h["texpaint_blend0"]).image = kha_Image.createRenderTarget(arm_Config.getTextureRes(),arm_Config.getTextureRes(),1,0);
			(__map_reserved["texpaint_blend1"] != null ? rts.getReserved("texpaint_blend1") : rts.h["texpaint_blend1"]).image.unload();
			(__map_reserved["texpaint_blend1"] != null ? rts.getReserved("texpaint_blend1") : rts.h["texpaint_blend1"]).raw.width = arm_Config.getTextureRes();
			(__map_reserved["texpaint_blend1"] != null ? rts.getReserved("texpaint_blend1") : rts.h["texpaint_blend1"]).raw.height = arm_Config.getTextureRes();
			(__map_reserved["texpaint_blend1"] != null ? rts.getReserved("texpaint_blend1") : rts.h["texpaint_blend1"]).image = kha_Image.createRenderTarget(arm_Config.getTextureRes(),arm_Config.getTextureRes(),1,0);
			arm_Context.brushBlendDirty = true;
		}
		arm_Project.layers = [];
		var _g81 = 0;
		var _g91 = project.layer_datas.length;
		while(_g81 < _g91) {
			var i2 = _g81++;
			var ld = project.layer_datas[i2];
			var isGroup = ld.texpaint == null;
			var l2 = new arm_data_LayerSlot("",isGroup);
			arm_Project.layers.push(l2);
			if(!isGroup) {
				if(arm_Layers.pipeMerge == null) {
					arm_Layers.makePipe();
				}
				var texpaint = kha_Image.fromBytes(arm_format_Lz4.decode(ld.texpaint,ld.res * ld.res * 4 * bytesPerPixel),ld.res,ld.res,format);
				l2.texpaint.get_g2().begin(false);
				l2.texpaint.get_g2().set_pipeline(arm_Layers.pipeCopy);
				l2.texpaint.get_g2().drawImage(texpaint,0,0);
				l2.texpaint.get_g2().set_pipeline(null);
				l2.texpaint.get_g2().end();
				var texpaint_nor = kha_Image.fromBytes(arm_format_Lz4.decode(ld.texpaint_nor,ld.res * ld.res * 4 * bytesPerPixel),ld.res,ld.res,format);
				l2.texpaint_nor.get_g2().begin(false);
				l2.texpaint_nor.get_g2().set_pipeline(arm_Layers.pipeCopy);
				l2.texpaint_nor.get_g2().drawImage(texpaint_nor,0,0);
				l2.texpaint_nor.get_g2().set_pipeline(null);
				l2.texpaint_nor.get_g2().end();
				var texpaint_pack = kha_Image.fromBytes(arm_format_Lz4.decode(ld.texpaint_pack,ld.res * ld.res * 4 * bytesPerPixel),ld.res,ld.res,format);
				l2.texpaint_pack.get_g2().begin(false);
				l2.texpaint_pack.get_g2().set_pipeline(arm_Layers.pipeCopy);
				l2.texpaint_pack.get_g2().drawImage(texpaint_pack,0,0);
				l2.texpaint_pack.get_g2().set_pipeline(null);
				l2.texpaint_pack.get_g2().end();
				var texpaint_mask = null;
				if(ld.texpaint_mask != null) {
					l2.createMask(0,false);
					texpaint_mask = kha_Image.fromBytes(arm_format_Lz4.decode(ld.texpaint_mask,ld.res * ld.res),ld.res,ld.res,1);
					l2.texpaint_mask.get_g2().begin(false);
					l2.texpaint_mask.get_g2().set_pipeline(arm_Layers.pipeCopy);
					l2.texpaint_mask.get_g2().drawImage(texpaint_mask,0,0);
					l2.texpaint_mask.get_g2().set_pipeline(null);
					l2.texpaint_mask.get_g2().end();
				}
				l2.scale = ld.uv_scale;
				l2.angle = ld.uv_rot;
				l2.uvType = ld.uv_type;
				l2.maskOpacity = ld.opacity_mask;
				l2.material_mask = ld.material_mask > -1 ? arm_Project.materials[ld.material_mask] : null;
				l2.objectMask = ld.object_mask;
				l2.blending = ld.blending;
				l2.visible = ld.visible;
				l2.paintBase = ld.paint_base;
				l2.paintOpac = ld.paint_opac;
				l2.paintOcc = ld.paint_occ;
				l2.paintRough = ld.paint_rough;
				l2.paintMet = ld.paint_met;
				l2.paintNor = ld.paint_nor;
				l2.paintHeight = ld.paint_height;
				l2.paintEmis = ld.paint_emis;
				l2.paintSubs = ld.paint_subs;
			}
		}
		var _g101 = 0;
		var _g112 = project.layer_datas.length;
		while(_g101 < _g112) {
			var i3 = _g101++;
			var ld1 = project.layer_datas[i3];
			if(ld1.parent >= 0) {
				arm_Project.layers[i3].parent = arm_Project.layers[ld1.parent];
			}
		}
		arm_Context.setLayer(arm_Project.layers[0]);
		arm_Context.ddirty = 4;
		arm_ui_UISidebar.inst.hwnd.redraws = 2;
		arm_ui_UISidebar.inst.hwnd1.redraws = 2;
		arm_ui_UISidebar.inst.hwnd2.redraws = 2;
		iron_data_Data.deleteBlob(path);
	});
};
arm_io_ImportArm.runMaterial = function(path) {
	iron_data_Data.getBlob(path,function(b) {
		var i = new haxe_io_BytesInput(b.toBytes());
		i.set_bigEndian(false);
		var project = iron_system_ArmPack.read(i);
		if(project.version == null) {
			iron_data_Data.deleteBlob(path);
			return;
		}
		arm_io_ImportArm.runMaterialFromProject(project,path);
	});
};
arm_io_ImportArm.runMaterialFromProject = function(project,path) {
	var base = arm_sys_Path.baseDir(path);
	var _g = 0;
	var _g1 = project.assets;
	while(_g < _g1.length) {
		var file = _g1[_g];
		++_g;
		file = StringTools.replace(file,"/","\\");
		var abs = iron_data_Data.isAbsolute(file) ? file : base + file;
		if(!arm_sys_File.exists(abs)) {
			arm_io_ImportArm.makePink(abs);
		}
		arm_io_ImportTexture.run(abs);
	}
	var m0 = null;
	iron_data_Data.getMaterial("Scene","Material",function(m) {
		m0 = m;
	});
	var imported = [];
	var _g2 = 0;
	var _g3 = project.material_nodes;
	while(_g2 < _g3.length) {
		var n = _g3[_g2];
		++_g2;
		arm_io_ImportArm.initNodes(n.nodes);
		arm_Context.material = new arm_data_MaterialSlot(m0,n);
		arm_Project.materials.push(arm_Context.material);
		imported.push(arm_Context.material);
	}
	var makeMaterialPreview = null;
	makeMaterialPreview = function(_) {
		var _g4 = 0;
		while(_g4 < imported.length) {
			var m1 = imported[_g4];
			++_g4;
			arm_Context.setMaterial(m1);
			arm_node_MaterialParser.parsePaintMaterial();
			arm_util_RenderUtil.makeMaterialPreview();
		}
		iron_App.removeRender(makeMaterialPreview);
	};
	iron_App.notifyOnRender(makeMaterialPreview);
	arm_ui_UISidebar.inst.hwnd1.redraws = 2;
	iron_data_Data.deleteBlob(path);
};
arm_io_ImportArm.runBrush = function(path) {
	iron_data_Data.getBlob(path,function(b) {
		var i = new haxe_io_BytesInput(b.toBytes());
		i.set_bigEndian(false);
		var project = iron_system_ArmPack.read(i);
		if(project.version == null) {
			iron_data_Data.deleteBlob(path);
			return;
		}
		arm_io_ImportArm.runBrushFromProject(project,path);
	});
};
arm_io_ImportArm.runBrushFromProject = function(project,path) {
	var base = arm_sys_Path.baseDir(path);
	var _g = 0;
	var _g1 = project.assets;
	while(_g < _g1.length) {
		var file = _g1[_g];
		++_g;
		file = StringTools.replace(file,"/","\\");
		var abs = iron_data_Data.isAbsolute(file) ? file : base + file;
		if(!arm_sys_File.exists(abs)) {
			arm_io_ImportArm.makePink(abs);
		}
		arm_io_ImportTexture.run(abs);
	}
	var imported = [];
	var _g2 = 0;
	var _g3 = project.brush_nodes;
	while(_g2 < _g3.length) {
		var n = _g3[_g2];
		++_g2;
		arm_io_ImportArm.initNodes(n.nodes);
		arm_Context.brush = new arm_data_BrushSlot(n);
		arm_Project.brushes.push(arm_Context.brush);
		imported.push(arm_Context.brush);
	}
	var makeBrushPreview = null;
	makeBrushPreview = function(_) {
		var _g4 = 0;
		while(_g4 < imported.length) {
			var b = imported[_g4];
			++_g4;
			arm_Context.setBrush(b);
			arm_util_RenderUtil.makeBrushPreview();
		}
		iron_App.removeRender(makeBrushPreview);
	};
	iron_App.notifyOnRender(makeBrushPreview);
	arm_ui_UISidebar.inst.hwnd1.redraws = 2;
	iron_data_Data.deleteBlob(path);
};
arm_io_ImportArm.makePink = function(abs) {
	arm_Log.error(arm_Strings.error2 + abs);
	var b = new haxe_io_Bytes(new ArrayBuffer(4));
	b.b[0] = 255;
	b.b[1] = 0;
	b.b[2] = 255;
	b.b[3] = 255;
	var pink = kha_Image.fromBytes(b,1,1);
	var _this = iron_data_Data.cachedImages;
	if(__map_reserved[abs] != null) {
		_this.setReserved(abs,pink);
	} else {
		_this.h[abs] = pink;
	}
};
arm_io_ImportArm.initNodes = function(nodes) {
	var _g = 0;
	while(_g < nodes.length) {
		var node = nodes[_g];
		++_g;
		if(node.type == "TEX_IMAGE") {
			node.buttons[0].default_value = arm_App.getAssetIndex(node.buttons[0].data);
		}
		var _g1 = 0;
		var _g11 = node.inputs;
		while(_g1 < _g11.length) {
			var inp = _g11[_g1];
			++_g1;
			if(inp.type == "VALUE") {
				inp.default_value = Math.round(inp.default_value * 100) / 100;
			}
		}
	}
};
var arm_io_ImportAsset = function() { };
$hxClasses["arm.io.ImportAsset"] = arm_io_ImportAsset;
arm_io_ImportAsset.__name__ = "arm.io.ImportAsset";
arm_io_ImportAsset.run = function(path,dropX,dropY,showBox) {
	if(showBox == null) {
		showBox = true;
	}
	if(dropY == null) {
		dropY = -1.0;
	}
	if(dropX == null) {
		dropX = -1.0;
	}
	if(arm_sys_Path.isMesh(path)) {
		if(showBox) {
			arm_Project.importMeshBox(path);
		} else {
			arm_io_ImportMesh.run(path);
		}
		if(dropX > 0) {
			arm_ui_UIBox.clickToHide = false;
		}
	} else if(arm_sys_Path.isTexture(path)) {
		arm_io_ImportTexture.run(path);
		var x0 = arm_ui_UINodes.inst.wx;
		var x1 = arm_ui_UINodes.inst.wx + arm_ui_UINodes.inst.ww;
		if(arm_ui_UINodes.inst.show && dropX > x0 && dropX < x1) {
			var assetIndex = 0;
			var _g = 0;
			var _g1 = arm_Project.assets.length;
			while(_g < _g1) {
				var i = _g++;
				if(arm_Project.assets[i].file == path) {
					assetIndex = i;
					break;
				}
			}
			arm_ui_UINodes.inst.acceptAssetDrag(assetIndex);
			arm_ui_UINodes.inst.getNodes().nodesDrag = false;
			arm_ui_UINodes.inst.hwnd.redraws = 2;
		}
	} else if(arm_sys_Path.isFont(path)) {
		arm_io_ImportFont.run(path);
	} else if(arm_sys_Path.isProject(path)) {
		arm_io_ImportArm.runProject(path);
	} else if(arm_sys_Path.isPlugin(path)) {
		arm_io_ImportPlugin.run(path);
	} else if(arm_sys_Path.isFolder(path)) {
		arm_io_ImportFolder.run(path);
	} else {
		arm_Log.error(arm_Strings.error1);
	}
};
var arm_io_ImportBlend = function() { };
$hxClasses["arm.io.ImportBlend"] = arm_io_ImportBlend;
arm_io_ImportBlend.__name__ = "arm.io.ImportBlend";
arm_io_ImportBlend.run = function(path) {
	iron_data_Data.getBlob(path,function(b) {
		var bl = new arm_format_BlendParser(b);
		if(bl.dna == null) {
			arm_Log.error(arm_Strings.error3);
			return;
		}
		var obs = bl.get("Object");
		if(obs == null || obs.length == 0) {
			arm_io_ImportMesh.makeMesh(null,path);
			return;
		}
		var first = true;
		var _g = 0;
		while(_g < obs.length) {
			var ob = obs[_g];
			++_g;
			if(ob.get("type") != 1) {
				continue;
			}
			var name = ob.get("id").get("name");
			name = name.substring(2,name.length);
			var m = ob.get("data",0,"Mesh");
			if(m == null) {
				continue;
			}
			var totpoly = m.get("totpoly");
			if(totpoly == 0) {
				continue;
			}
			var numtri = 0;
			var _g1 = 0;
			var _g11 = totpoly;
			while(_g1 < _g11) {
				var i = _g1++;
				var poly = m.get("mpoly",i);
				var totloop = poly.get("totloop");
				numtri += totloop - 2;
			}
			var this1 = new Uint32Array(numtri * 3);
			var inda = this1;
			var _g2 = 0;
			var _g3 = inda.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				inda[i1] = i1;
			}
			var this2 = new Float32Array(numtri * 3 * 4);
			var posa32 = this2;
			var this3 = new Int16Array(numtri * 3 * 4);
			var posa = this3;
			var this4 = new Int16Array(numtri * 3 * 2);
			var nora = this4;
			var hasuv = m.get("mloopuv") != null;
			var texa;
			if(hasuv) {
				var this5 = new Int16Array(numtri * 3 * 2);
				texa = this5;
			} else {
				texa = null;
			}
			var hascol = arm_Context.parseVCols && m.get("mloopcol") != null;
			var cola;
			if(hascol) {
				var this6 = new Int16Array(numtri * 3 * 3);
				cola = this6;
			} else {
				cola = null;
			}
			var tri = 0;
			var _this_x = 0.0;
			var _this_y = 0.0;
			var _this_z = 0.0;
			var _this_w = 1.0;
			var _this_x1 = 0.0;
			var _this_y1 = 0.0;
			var _this_z1 = 0.0;
			var _this_w1 = 1.0;
			var _this_x2 = 0.0;
			var _this_y2 = 0.0;
			var _this_z2 = 0.0;
			var _this_w2 = 1.0;
			var _g4 = 0;
			var _g5 = totpoly;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var poly1 = m.get("mpoly",i2);
				var loopstart = poly1.get("loopstart");
				var totloop1 = poly1.get("totloop");
				if(totloop1 == 3) {
					var v0 = m.get("mvert",m.get("mloop",loopstart).get("v"));
					var v1 = m.get("mvert",m.get("mloop",loopstart + 1).get("v"));
					var v2 = m.get("mvert",m.get("mloop",loopstart + 2).get("v"));
					var co0 = v0.get("co");
					var co1 = v1.get("co");
					var co2 = v2.get("co");
					var no0 = v0.get("no");
					var no1 = v1.get("no");
					var no2 = v2.get("no");
					_this_x = no0[0] / 32767;
					_this_y = no0[1] / 32767;
					_this_z = no0[2] / 32767;
					_this_w = 1.0;
					var n = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
					if(n > 0.0) {
						var invN = 1.0 / n;
						_this_x *= invN;
						_this_y *= invN;
						_this_z *= invN;
					}
					_this_x1 = no1[0] / 32767;
					_this_y1 = no1[1] / 32767;
					_this_z1 = no1[2] / 32767;
					_this_w1 = 1.0;
					var n1 = Math.sqrt(_this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1);
					if(n1 > 0.0) {
						var invN1 = 1.0 / n1;
						_this_x1 *= invN1;
						_this_y1 *= invN1;
						_this_z1 *= invN1;
					}
					_this_x2 = no2[0] / 32767;
					_this_y2 = no2[1] / 32767;
					_this_z2 = no2[2] / 32767;
					_this_w2 = 1.0;
					var n2 = Math.sqrt(_this_x2 * _this_x2 + _this_y2 * _this_y2 + _this_z2 * _this_z2);
					if(n2 > 0.0) {
						var invN2 = 1.0 / n2;
						_this_x2 *= invN2;
						_this_y2 *= invN2;
						_this_z2 *= invN2;
					}
					posa32[tri * 9] = co0[0];
					posa32[tri * 9 + 1] = co0[1];
					posa32[tri * 9 + 2] = co0[2];
					posa32[tri * 9 + 3] = co1[0];
					posa32[tri * 9 + 4] = co1[1];
					posa32[tri * 9 + 5] = co1[2];
					posa32[tri * 9 + 6] = co2[0];
					posa32[tri * 9 + 7] = co2[1];
					posa32[tri * 9 + 8] = co2[2];
					posa[tri * 12 + 3] = _this_z * 32767 | 0;
					posa[tri * 12 + 7] = _this_z1 * 32767 | 0;
					posa[tri * 12 + 11] = _this_z2 * 32767 | 0;
					nora[tri * 6] = _this_x * 32767 | 0;
					nora[tri * 6 + 1] = _this_y * 32767 | 0;
					nora[tri * 6 + 2] = _this_x1 * 32767 | 0;
					nora[tri * 6 + 3] = _this_y1 * 32767 | 0;
					nora[tri * 6 + 4] = _this_x2 * 32767 | 0;
					nora[tri * 6 + 5] = _this_y2 * 32767 | 0;
					if(hasuv) {
						var uv0 = m.get("mloopuv",loopstart).get("uv");
						var uv1 = m.get("mloopuv",loopstart + 1).get("uv");
						var uv2 = m.get("mloopuv",loopstart + 2).get("uv");
						texa[tri * 6] = uv0[0] * 32767 | 0;
						texa[tri * 6 + 1] = (1.0 - uv0[1]) * 32767 | 0;
						texa[tri * 6 + 2] = uv1[0] * 32767 | 0;
						texa[tri * 6 + 3] = (1.0 - uv1[1]) * 32767 | 0;
						texa[tri * 6 + 4] = uv2[0] * 32767 | 0;
						texa[tri * 6 + 5] = (1.0 - uv2[1]) * 32767 | 0;
					}
					if(hascol) {
						var loop = m.get("mloopcol",loopstart);
						var col0r = loop.get("r");
						var col0g = loop.get("g");
						var col0b = loop.get("b");
						loop = m.get("mloopcol",loopstart + 1);
						var col1r = loop.get("r");
						var col1g = loop.get("g");
						var col1b = loop.get("b");
						loop = m.get("mloopcol",loopstart + 2);
						var col2r = loop.get("r");
						var col2g = loop.get("g");
						var col2b = loop.get("b");
						cola[tri * 9] = col0r * 128;
						cola[tri * 9 + 1] = col0g * 128;
						cola[tri * 9 + 2] = col0b * 128;
						cola[tri * 9 + 3] = col1r * 128;
						cola[tri * 9 + 4] = col1g * 128;
						cola[tri * 9 + 5] = col1b * 128;
						cola[tri * 9 + 6] = col2r * 128;
						cola[tri * 9 + 7] = col2g * 128;
						cola[tri * 9 + 8] = col2b * 128;
					}
					++tri;
				} else {
					var v01 = m.get("mvert",m.get("mloop",loopstart + totloop1 - 1).get("v"));
					var v11 = m.get("mvert",m.get("mloop",loopstart).get("v"));
					var co01 = v01.get("co");
					var co11 = v11.get("co");
					var no01 = v01.get("no");
					var no11 = v11.get("no");
					_this_x = no01[0] / 32767;
					_this_y = no01[1] / 32767;
					_this_z = no01[2] / 32767;
					_this_w = 1.0;
					var n3 = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
					if(n3 > 0.0) {
						var invN3 = 1.0 / n3;
						_this_x *= invN3;
						_this_y *= invN3;
						_this_z *= invN3;
					}
					_this_x1 = no11[0] / 32767;
					_this_y1 = no11[1] / 32767;
					_this_z1 = no11[2] / 32767;
					_this_w1 = 1.0;
					var n4 = Math.sqrt(_this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1);
					if(n4 > 0.0) {
						var invN4 = 1.0 / n4;
						_this_x1 *= invN4;
						_this_y1 *= invN4;
						_this_z1 *= invN4;
					}
					var uv01 = null;
					var uv11 = null;
					var uv21 = null;
					if(hasuv) {
						uv01 = m.get("mloopuv",loopstart + totloop1 - 1).get("uv");
						uv11 = m.get("mloopuv",loopstart).get("uv");
					}
					var col0r1 = 0;
					var col0g1 = 0;
					var col0b1 = 0;
					var col1r1 = 0;
					var col1g1 = 0;
					var col1b1 = 0;
					var col2r1 = 0;
					var col2g1 = 0;
					var col2b1 = 0;
					if(hascol) {
						var loop1 = m.get("mloopcol",loopstart + totloop1 - 1);
						col0r1 = loop1.get("r");
						col0g1 = loop1.get("g");
						col0b1 = loop1.get("b");
						loop1 = m.get("mloopcol",loopstart);
						col1r1 = loop1.get("r");
						col1g1 = loop1.get("g");
						col1b1 = loop1.get("b");
					}
					var _g41 = 0;
					var _g51 = totloop1 - 2;
					while(_g41 < _g51) {
						var j = _g41++;
						var v21 = m.get("mvert",m.get("mloop",loopstart + j + 1).get("v"));
						var co21 = v21.get("co");
						var no21 = v21.get("no");
						_this_x2 = no21[0] / 32767;
						_this_y2 = no21[1] / 32767;
						_this_z2 = no21[2] / 32767;
						_this_w2 = 1.0;
						var n5 = Math.sqrt(_this_x2 * _this_x2 + _this_y2 * _this_y2 + _this_z2 * _this_z2);
						if(n5 > 0.0) {
							var invN5 = 1.0 / n5;
							_this_x2 *= invN5;
							_this_y2 *= invN5;
							_this_z2 *= invN5;
						}
						posa32[tri * 9] = co01[0];
						posa32[tri * 9 + 1] = co01[1];
						posa32[tri * 9 + 2] = co01[2];
						posa32[tri * 9 + 3] = co11[0];
						posa32[tri * 9 + 4] = co11[1];
						posa32[tri * 9 + 5] = co11[2];
						posa32[tri * 9 + 6] = co21[0];
						posa32[tri * 9 + 7] = co21[1];
						posa32[tri * 9 + 8] = co21[2];
						posa[tri * 12 + 3] = _this_z * 32767 | 0;
						posa[tri * 12 + 7] = _this_z1 * 32767 | 0;
						posa[tri * 12 + 11] = _this_z2 * 32767 | 0;
						nora[tri * 6] = _this_x * 32767 | 0;
						nora[tri * 6 + 1] = _this_y * 32767 | 0;
						nora[tri * 6 + 2] = _this_x1 * 32767 | 0;
						nora[tri * 6 + 3] = _this_y1 * 32767 | 0;
						nora[tri * 6 + 4] = _this_x2 * 32767 | 0;
						nora[tri * 6 + 5] = _this_y2 * 32767 | 0;
						co11 = co21;
						no11 = no21;
						_this_x1 = _this_x2;
						_this_y1 = _this_y2;
						_this_z1 = _this_z2;
						_this_w1 = _this_w2;
						if(hasuv) {
							uv21 = m.get("mloopuv",loopstart + j + 1).get("uv");
							texa[tri * 6] = uv01[0] * 32767 | 0;
							texa[tri * 6 + 1] = (1.0 - uv01[1]) * 32767 | 0;
							texa[tri * 6 + 2] = uv11[0] * 32767 | 0;
							texa[tri * 6 + 3] = (1.0 - uv11[1]) * 32767 | 0;
							texa[tri * 6 + 4] = uv21[0] * 32767 | 0;
							texa[tri * 6 + 5] = (1.0 - uv21[1]) * 32767 | 0;
							uv11 = uv21;
						}
						if(hascol) {
							var loop2 = m.get("mloopcol",loopstart + j + 1);
							col2r1 = loop2.get("r");
							col2g1 = loop2.get("g");
							col2b1 = loop2.get("b");
							cola[tri * 9] = col0r1 * 128;
							cola[tri * 9 + 1] = col0g1 * 128;
							cola[tri * 9 + 2] = col0b1 * 128;
							cola[tri * 9 + 3] = col1r1 * 128;
							cola[tri * 9 + 4] = col1g1 * 128;
							cola[tri * 9 + 5] = col1b1 * 128;
							cola[tri * 9 + 6] = col2r1 * 128;
							cola[tri * 9 + 7] = col2g1 * 128;
							cola[tri * 9 + 8] = col2b1 * 128;
							col1r1 = col2r1;
							col1g1 = col2g1;
							col1b1 = col2b1;
						}
						++tri;
					}
				}
			}
			var obmat = ob.get("obmat",0,"float",16);
			var _this = new iron_math_Mat4(obmat[0],obmat[1],obmat[2],obmat[3],obmat[4],obmat[5],obmat[6],obmat[7],obmat[8],obmat[9],obmat[10],obmat[11],obmat[12],obmat[13],obmat[14],obmat[15]);
			var f = _this.self._01;
			_this.self._01 = _this.self._10;
			_this.self._10 = f;
			f = _this.self._02;
			_this.self._02 = _this.self._20;
			_this.self._20 = f;
			f = _this.self._03;
			_this.self._03 = _this.self._30;
			_this.self._30 = f;
			f = _this.self._12;
			_this.self._12 = _this.self._21;
			_this.self._21 = f;
			f = _this.self._13;
			_this.self._13 = _this.self._31;
			_this.self._31 = f;
			f = _this.self._23;
			_this.self._23 = _this.self._32;
			_this.self._32 = f;
			var mat = _this;
			var v_x = 0.0;
			var v_y = 0.0;
			var v_z = 0.0;
			var v_w = 1.0;
			var _g6 = 0;
			var _g7 = posa32.length / 3 | 0;
			while(_g6 < _g7) {
				var i3 = _g6++;
				v_x = posa32[i3 * 3];
				v_y = posa32[i3 * 3 + 1];
				v_z = posa32[i3 * 3 + 2];
				v_w = 1.0;
				var x = v_x;
				var y = v_y;
				var z = v_z;
				var w = v_w;
				v_x = mat.self._00 * x + mat.self._10 * y + mat.self._20 * z + mat.self._30 * w;
				v_y = mat.self._01 * x + mat.self._11 * y + mat.self._21 * z + mat.self._31 * w;
				v_z = mat.self._02 * x + mat.self._12 * y + mat.self._22 * z + mat.self._32 * w;
				v_w = mat.self._03 * x + mat.self._13 * y + mat.self._23 * z + mat.self._33 * w;
				posa32[i3 * 3] = v_x;
				posa32[i3 * 3 + 1] = v_y;
				posa32[i3 * 3 + 2] = v_z;
			}
			var a00 = mat.self._00;
			var a01 = mat.self._01;
			var a02 = mat.self._02;
			var a03 = mat.self._03;
			var a10 = mat.self._10;
			var a11 = mat.self._11;
			var a12 = mat.self._12;
			var a13 = mat.self._13;
			var a20 = mat.self._20;
			var a21 = mat.self._21;
			var a22 = mat.self._22;
			var a23 = mat.self._23;
			var a30 = mat.self._30;
			var a31 = mat.self._31;
			var a32 = mat.self._32;
			var a33 = mat.self._33;
			var b00 = a00 * a11 - a01 * a10;
			var b01 = a00 * a12 - a02 * a10;
			var b02 = a00 * a13 - a03 * a10;
			var b03 = a01 * a12 - a02 * a11;
			var b04 = a01 * a13 - a03 * a11;
			var b05 = a02 * a13 - a03 * a12;
			var b06 = a20 * a31 - a21 * a30;
			var b07 = a20 * a32 - a22 * a30;
			var b08 = a20 * a33 - a23 * a30;
			var b09 = a21 * a32 - a22 * a31;
			var b10 = a21 * a33 - a23 * a31;
			var b11 = a22 * a33 - a23 * a32;
			var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
			if(det == 0.0) {
				mat.self._00 = 1.0;
				mat.self._01 = 0.0;
				mat.self._02 = 0.0;
				mat.self._03 = 0.0;
				mat.self._10 = 0.0;
				mat.self._11 = 1.0;
				mat.self._12 = 0.0;
				mat.self._13 = 0.0;
				mat.self._20 = 0.0;
				mat.self._21 = 0.0;
				mat.self._22 = 1.0;
				mat.self._23 = 0.0;
				mat.self._30 = 0.0;
				mat.self._31 = 0.0;
				mat.self._32 = 0.0;
				mat.self._33 = 1.0;
			} else {
				det = 1.0 / det;
				mat.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
				mat.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
				mat.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
				mat.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
				mat.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
				mat.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
				mat.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
				mat.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
				mat.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
				mat.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
				mat.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
				mat.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
				mat.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
				mat.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
				mat.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
				mat.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
			}
			var f1 = mat.self._01;
			mat.self._01 = mat.self._10;
			mat.self._10 = f1;
			f1 = mat.self._02;
			mat.self._02 = mat.self._20;
			mat.self._20 = f1;
			f1 = mat.self._12;
			mat.self._12 = mat.self._21;
			mat.self._21 = f1;
			var _g8 = 0;
			var _g9 = nora.length / 2 | 0;
			while(_g8 < _g9) {
				var i4 = _g8++;
				v_x = nora[i4 * 2] / 32767;
				v_y = nora[i4 * 2 + 1] / 32767;
				v_z = posa[i4 * 4 + 3] / 32767;
				v_w = 1.0;
				var x1 = v_x;
				var y1 = v_y;
				var z1 = v_z;
				v_x = mat.self._00 * x1 + mat.self._10 * y1 + mat.self._20 * z1 + mat.self._30;
				v_y = mat.self._01 * x1 + mat.self._11 * y1 + mat.self._21 * z1 + mat.self._31;
				v_z = mat.self._02 * x1 + mat.self._12 * y1 + mat.self._22 * z1 + mat.self._32;
				var n6 = Math.sqrt(v_x * v_x + v_y * v_y + v_z * v_z);
				if(n6 > 0.0) {
					var invN6 = 1.0 / n6;
					v_x *= invN6;
					v_y *= invN6;
					v_z *= invN6;
				}
				nora[i4 * 2] = v_x * 32767 | 0;
				nora[i4 * 2 + 1] = v_y * 32767 | 0;
				posa[i4 * 4 + 3] = v_z * 32767 | 0;
			}
			var scalePos = 0.0;
			var _g10 = 0;
			var _g111 = posa32.length;
			while(_g10 < _g111) {
				var i5 = _g10++;
				var f2 = Math.abs(posa32[i5]);
				if(scalePos < f2) {
					scalePos = f2;
				}
			}
			var inv = 1 / scalePos;
			var _g12 = 0;
			var _g13 = posa32.length / 3 | 0;
			while(_g12 < _g13) {
				var i6 = _g12++;
				posa[i6 * 4] = posa32[i6 * 3] * 32767 * inv | 0;
				posa[i6 * 4 + 1] = posa32[i6 * 3 + 1] * 32767 * inv | 0;
				posa[i6 * 4 + 2] = posa32[i6 * 3 + 2] * 32767 * inv | 0;
			}
			var obj = { posa : posa, nora : nora, texa : texa, cola : cola, inda : inda, name : name, scalePos : scalePos, scaleTes : 1.0};
			if(first) {
				arm_io_ImportMesh.makeMesh(obj,path);
			} else {
				arm_io_ImportMesh.addMesh(obj);
			}
			first = false;
		}
		iron_data_Data.deleteBlob(path);
	});
};
arm_io_ImportBlend.runMaterial = function(path) {
	iron_data_Data.getBlob(path,function(b) {
		var bl = new arm_format_BlendParser(b);
		if(bl.dna == null) {
			arm_Log.error(arm_Strings.error3);
			return;
		}
		var mats = bl.get("Material");
		if(mats.length == 0) {
			arm_Log.error("Error: No materials found");
			return;
		}
		var imported = [];
		var _g = 0;
		while(_g < mats.length) {
			var mat = mats[_g];
			++_g;
			arm_Context.material = new arm_data_MaterialSlot(arm_Project.materials[0].data);
			arm_Project.materials.push(arm_Context.material);
			imported.push(arm_Context.material);
			var nodes = arm_Context.material.nodes;
			var canvas = arm_Context.material.canvas;
			canvas.name = mat.get("id").get("name").substr(2);
			var nout = null;
			var _g1 = 0;
			var _g11 = canvas.nodes;
			while(_g1 < _g11.length) {
				var n = _g11[_g1];
				++_g1;
				if(n.type == "OUTPUT_MATERIAL_PBR") {
					nout = n;
					break;
				}
			}
			var _g2 = 0;
			var _g3 = canvas.nodes;
			while(_g2 < _g3.length) {
				var n1 = _g3[_g2];
				++_g2;
				if(n1.name == "RGB") {
					nodes.removeNode(n1,canvas);
					break;
				}
			}
			var nodetree = mat.get("nodetree");
			var blnodes = nodetree.get("nodes");
			var bllinks = nodetree.get("links");
			var node = blnodes.get("first",0,"bNode");
			var last = blnodes.get("last",0,"bNode");
			while(node.get("idname") != "ShaderNodeBsdfPrincipled") {
				if(node.get("name") == last.get("name")) {
					break;
				}
				node = node.get("next");
			}
			if(node.get("idname") != "ShaderNodeBsdfPrincipled") {
				arm_Log.error("Error: No Principled BSDF node found");
				continue;
			}
			nout.name = node.get("name");
			nout.x = node.get("locx") + 400;
			nout.y = -node.get("locy") + 400;
			var node1 = blnodes.get("first",0,"bNode");
			while(true) {
				var search = node1.get("idname").substr(10).toLowerCase();
				var base = null;
				var _g4 = 0;
				var _g5 = arm_node_NodesMaterial.list;
				while(_g4 < _g5.length) {
					var list = _g5[_g4];
					++_g4;
					var found = false;
					var _g41 = 0;
					while(_g41 < list.length) {
						var n2 = list[_g41];
						++_g41;
						var s = StringTools.replace(n2.type,"_","").toLowerCase();
						if(search == s) {
							base = n2;
							found = true;
							break;
						}
					}
					if(found) {
						break;
					}
				}
				if(base != null) {
					var n3 = arm_ui_UINodes.makeNode(base,nodes,canvas);
					n3.x = node1.get("locx") + 400;
					n3.y = -node1.get("locy") + 400;
					n3.name = node1.get("name");
					var inputs = node1.get("inputs");
					var sock = inputs.get("first",0,"bNodeSocket");
					var pos = 0;
					while(pos < n3.inputs.length) {
						n3.inputs[pos].default_value = arm_io_ImportBlend.readBlendSocket(sock);
						var last1 = sock;
						sock = sock.get("next");
						if(last1.block == sock.block) {
							break;
						}
						++pos;
					}
					if(search == "teximage") {
						var img = node1.get("id",0,"Image");
						var file = img.get("name").substr(2);
						file = arm_sys_Path.baseDir(path) + file;
						arm_io_ImportTexture.run(file);
						var ar = file.split(arm_sys_Path.sep);
						var filename = ar[ar.length - 1];
						n3.buttons[0].default_value = arm_App.getAssetIndex(filename);
					} else if(search == "valtorgb") {
						var ramp = node1.get("storage",0,"ColorBand");
						var tmp = ramp.get("ipotype") == 0 ? 0 : 1;
						n3.buttons[0].data = tmp;
						var elems = n3.buttons[0].default_value;
						var _g6 = 0;
						var _g7 = ramp.get("tot");
						while(_g6 < _g7) {
							var i = _g6++;
							if(i >= elems.length) {
								elems.push([1.0,1.0,1.0,1.0,0.0]);
							}
							var cbdata = ramp.get("data",i,"CBData");
							elems[i][0] = (cbdata.get("r") * 100 | 0) / 100;
							elems[i][1] = (cbdata.get("g") * 100 | 0) / 100;
							elems[i][2] = (cbdata.get("b") * 100 | 0) / 100;
							elems[i][3] = (cbdata.get("a") * 100 | 0) / 100;
							elems[i][4] = (cbdata.get("pos") * 100 | 0) / 100;
						}
					} else if(search == "mixrgb" || search == "math") {
						n3.buttons[0].default_value = node1.get("custom1");
						var tmp1 = node1.get("custom2");
						n3.buttons[1].default_value = tmp1 & 2;
					} else if(search == "mapping") {
						var storage = node1.get("storage",0,"TexMapping");
						n3.buttons[0].default_value = storage.get("loc");
						n3.buttons[1].default_value = storage.get("rot");
						n3.buttons[2].default_value = storage.get("size");
					}
					var outputs = node1.get("outputs");
					var sock1 = outputs.get("first",0,"bNodeSocket");
					var pos1 = 0;
					while(pos1 < n3.outputs.length) {
						n3.outputs[pos1].default_value = arm_io_ImportBlend.readBlendSocket(sock1);
						var last2 = sock1;
						sock1 = sock1.get("next");
						if(last2.block == sock1.block) {
							break;
						}
						++pos1;
					}
					canvas.nodes.push(n3);
				}
				if(node1.get("name") == last.get("name")) {
					break;
				}
				node1 = node1.get("next");
			}
			var link = bllinks.get("first",0,"bNodeLink");
			while(true) {
				var fromnode = link.get("fromnode").get("name");
				var tonode = link.get("tonode").get("name");
				var fromsock = link.get("fromsock");
				var tosock = link.get("tosock");
				var from_id = -1;
				var to_id = -1;
				var _g42 = 0;
				var _g51 = canvas.nodes;
				while(_g42 < _g51.length) {
					var n4 = _g51[_g42];
					++_g42;
					if(n4.name == fromnode) {
						from_id = n4.id;
						break;
					}
				}
				var _g61 = 0;
				var _g71 = canvas.nodes;
				while(_g61 < _g71.length) {
					var n5 = _g71[_g61];
					++_g61;
					if(n5.name == tonode) {
						to_id = n5.id;
						break;
					}
				}
				if(from_id >= 0 && to_id >= 0) {
					var from_socket = 0;
					var sock2 = fromsock;
					while(true) {
						var last3 = sock2;
						sock2 = sock2.get("prev");
						if(last3.block == sock2.block) {
							break;
						}
						++from_socket;
					}
					var to_socket = 0;
					var sock3 = tosock;
					while(true) {
						var last4 = sock3;
						sock3 = sock3.get("prev");
						if(last4.block == sock3.block) {
							break;
						}
						++to_socket;
					}
					var valid = true;
					if(tonode == nout.name) {
						if(to_socket == 0) {
							to_socket = 0;
						} else if(to_socket == 18) {
							to_socket = 1;
						} else if(to_socket == 7) {
							to_socket = 3;
						} else if(to_socket == 4) {
							to_socket = 4;
						} else if(to_socket == 19) {
							to_socket = 5;
						} else if(to_socket == 17) {
							to_socket = 6;
						} else if(to_socket == 1) {
							to_socket = 8;
						} else {
							valid = false;
						}
					}
					if(valid) {
						var raw = { id : nodes.getLinkId(canvas.links), from_id : from_id, from_socket : from_socket, to_id : to_id, to_socket : to_socket};
						canvas.links.push(raw);
					}
				}
				var last5 = link;
				link = link.get("next");
				if(last5.block == link.block) {
					break;
				}
			}
		}
		var makeMaterialPreview = null;
		makeMaterialPreview = function(_) {
			var _g12 = 0;
			while(_g12 < imported.length) {
				var m = imported[_g12];
				++_g12;
				arm_Context.setMaterial(m);
				arm_node_MaterialParser.parsePaintMaterial();
				arm_util_RenderUtil.makeMaterialPreview();
			}
			iron_App.removeRender(makeMaterialPreview);
		};
		iron_App.notifyOnRender(makeMaterialPreview);
		arm_ui_UISidebar.inst.hwnd1.redraws = 2;
		iron_data_Data.deleteBlob(path);
	});
};
arm_io_ImportBlend.readBlendSocket = function(sock) {
	var idname = sock.get("idname");
	if(idname.startsWith("NodeSocketVector")) {
		var v = sock.get("default_value",0,"bNodeSocketValueVector").get("value");
		v[0] = (v[0] * 100 | 0) / 100;
		v[1] = (v[1] * 100 | 0) / 100;
		v[2] = (v[2] * 100 | 0) / 100;
		return v;
	} else if(idname.startsWith("NodeSocketColor")) {
		var v1 = sock.get("default_value",0,"bNodeSocketValueRGBA").get("value");
		v1[0] = (v1[0] * 100 | 0) / 100;
		v1[1] = (v1[1] * 100 | 0) / 100;
		v1[2] = (v1[2] * 100 | 0) / 100;
		v1[3] = (v1[3] * 100 | 0) / 100;
		return v1;
	} else if(idname.startsWith("NodeSocketFloat")) {
		var v2 = sock.get("default_value",0,"bNodeSocketValueFloat").get("value");
		v2 = (v2 * 100 | 0) / 100;
		return v2;
	} else if(idname.startsWith("NodeSocketInt")) {
		return sock.get("default_value",0,"bNodeSocketValueInt").get("value");
	} else if(idname.startsWith("NodeSocketBoolean")) {
		return sock.get("default_value",0,"bNodeSocketValueBoolean").get("value");
	} else if(idname.startsWith("NodeSocketString")) {
		return sock.get("default_value",0,"bNodeSocketValueString").get("value");
	}
	return null;
};
var arm_io_ImportEnvmap = function() { };
$hxClasses["arm.io.ImportEnvmap"] = arm_io_ImportEnvmap;
arm_io_ImportEnvmap.__name__ = "arm.io.ImportEnvmap";
arm_io_ImportEnvmap.run = function(path,image) {
	var p = arm_sys_Path.data();
	var cmft = p + "cmft.exe";
	var tmp = Krom.getFilesLocation() + arm_sys_Path.sep + iron_data_Data.dataPath;
	var cmd = cmft;
	cmd += " --input \"" + path + "\"";
	cmd += " --filter shcoeffs";
	cmd += " --outputNum 1";
	cmd += " --output0 \"" + tmp + "tmp_irr\"";
	Krom.sysCommand(cmd);
	var faceSize = image.get_width() / 8 | 0;
	cmd = cmft;
	cmd += " --input \"" + path + "\"";
	cmd += " --filter radiance";
	cmd += " --dstFaceSize " + faceSize;
	cmd += " --srcFaceSize " + faceSize;
	cmd += " --excludeBase false";
	cmd += " --glossScale 8";
	cmd += " --glossBias 3";
	cmd += " --lightingModel blinnbrdf";
	cmd += " --edgeFixup none";
	cmd += " --numCpuProcessingThreads 4";
	cmd += " --useOpenCL true";
	cmd += " --clVendor anyGpuVendor";
	cmd += " --deviceType gpu";
	cmd += " --deviceIndex 0";
	cmd += " --generateMipChain true";
	cmd += " --inputGammaNumerator 1.0";
	cmd += " --inputGammaDenominator 2.2";
	cmd += " --outputGammaNumerator 1.0";
	cmd += " --outputGammaDenominator 1.0";
	cmd += " --outputNum 1";
	cmd += " --output0 \"" + tmp + "tmp_rad\"";
	cmd += " --output0params hdr,rgbe,latlong";
	Krom.sysCommand(cmd);
	iron_data_Data.getBlob("tmp_irr.c",function(blob) {
		var lines = blob.toString().split("\n");
		var band0 = lines[5];
		var band1 = lines[6];
		var band2 = lines[7];
		band0 = band0.substring(band0.indexOf("{"),band0.length);
		band1 = band1.substring(band1.indexOf("{"),band1.length);
		band2 = band2.substring(band2.indexOf("{"),band2.length);
		var band = band0 + band1 + band2;
		band = StringTools.replace(band,"{","");
		band = StringTools.replace(band,"}","");
		var ar = band.split(",");
		var this1 = new Float32Array(28);
		var buf = this1;
		var _g = 0;
		while(_g < 27) {
			var i = _g++;
			buf[i] = parseFloat(ar[i]);
		}
		iron_Scene.active.world.probe.irradiance = buf;
		arm_Context.ddirty = 2;
		iron_data_Data.deleteBlob("tmp_irr.c");
	});
	iron_Scene.active.world.probe.raw.strength = 1.0;
	iron_Scene.active.world.envmap = image;
	iron_Scene.active.world.raw.envmap = path;
	arm_Context.savedEnvmap = image;
	arm_Context.showEnvmapHandle.selected = arm_Context.showEnvmap = true;
	iron_data_Data.cachedImages.remove(path);
	iron_data_Data.loadingImages.remove(path);
	iron_data_Data.getImage(path,function(image1) {
		var mipsCount = 6 + (image1.get_width() / 1024 | 0);
		var mipsLoaded = 0;
		var mips = [];
		while(mips.length < mipsCount + 2) mips.push(null);
		var mw = image1.get_width() / 2 | 0;
		var mh = image1.get_width() / 4 | 0;
		var _g1 = 0;
		var _g11 = mipsCount;
		while(_g1 < _g11) {
			var i1 = [_g1++];
			iron_data_Data.getImage("tmp_rad_" + i1[0] + "_" + mw + "x" + mh + ".hdr",(function(i2) {
				return function(mip) {
					mips[i2[0]] = mip;
					mipsLoaded += 1;
					if(mipsLoaded == mipsCount) {
						var b2x1 = new haxe_io_Bytes(new ArrayBuffer(32));
						var b1x1 = new haxe_io_Bytes(new ArrayBuffer(16));
						var tmp1 = kha_Image.fromBytes(b2x1,2,1,2,1);
						mips[mipsCount] = tmp1;
						var tmp2 = mipsCount + 1;
						var tmp3 = kha_Image.fromBytes(b1x1,1,1,2,1);
						mips[tmp2] = tmp3;
						image1.setMipmaps(mips);
						iron_Scene.active.world.probe.radiance = image1;
						iron_Scene.active.world.probe.radianceMipmaps = mips;
						arm_Context.ddirty = 2;
					}
				};
			})(i1),true);
			mw = mw / 2 | 0;
			mh = mh / 2 | 0;
		}
	});
};
var arm_io_ImportFbx = function() { };
$hxClasses["arm.io.ImportFbx"] = arm_io_ImportFbx;
arm_io_ImportFbx.__name__ = "arm.io.ImportFbx";
arm_io_ImportFbx.run = function(path) {
	iron_data_Data.getBlob(path,function(b) {
		arm_format_FbxParser.parseTransform = arm_Context.parseTransform;
		arm_format_FbxParser.parseVCols = arm_Context.parseVCols;
		var obj = new arm_format_FbxParser(b);
		arm_io_ImportMesh.makeMesh(obj,path);
		while(obj.next()) arm_io_ImportMesh.addMesh(obj);
		iron_data_Data.deleteBlob(path);
	});
};
var arm_io_ImportFolder = function() { };
$hxClasses["arm.io.ImportFolder"] = arm_io_ImportFolder;
arm_io_ImportFolder.__name__ = "arm.io.ImportFolder";
arm_io_ImportFolder.run = function(path) {
	var files = arm_sys_File.readDirectory(path);
	var mapbase = "";
	var mapopac = "";
	var mapnor = "";
	var mapocc = "";
	var maprough = "";
	var mapmet = "";
	var mapheight = "";
	var _g = 0;
	while(_g < files.length) {
		var f = files[_g];
		++_g;
		if(!arm_sys_Path.isTexture(f)) {
			continue;
		}
		var base = HxOverrides.substr(f,0,f.lastIndexOf(".")).toLowerCase();
		var valid = false;
		if(mapbase == "" && arm_sys_Path.checkExt(base,arm_sys_Path.baseColorExt)) {
			mapbase = f;
			valid = true;
		}
		if(mapopac == "" && arm_sys_Path.checkExt(base,arm_sys_Path.opacityExt)) {
			mapopac = f;
			valid = true;
		}
		if(mapnor == "" && arm_sys_Path.checkExt(base,arm_sys_Path.normalMapExt)) {
			mapnor = f;
			valid = true;
		}
		if(mapocc == "" && arm_sys_Path.checkExt(base,arm_sys_Path.occlusionExt)) {
			mapocc = f;
			valid = true;
		}
		if(maprough == "" && arm_sys_Path.checkExt(base,arm_sys_Path.roughnessExt)) {
			maprough = f;
			valid = true;
		}
		if(mapmet == "" && arm_sys_Path.checkExt(base,arm_sys_Path.metallicExt)) {
			mapmet = f;
			valid = true;
		}
		if(mapheight == "" && arm_sys_Path.checkExt(base,arm_sys_Path.displacementExt)) {
			mapheight = f;
			valid = true;
		}
		if(valid) {
			arm_io_ImportTexture.run(path + arm_sys_Path.sep + f);
		}
	}
	var isScene = arm_ui_UIHeader.inst.worktab.position == 1;
	if(isScene) {
		arm_util_MaterialUtil.removeMaterialCache();
		iron_data_Data.getMaterial("Scene","Material2",function(md) {
			arm_Context.materialScene = new arm_data_MaterialSlot(md);
			arm_Project.materialsScene.push(arm_Context.materialScene);
		});
	} else {
		arm_Context.material = new arm_data_MaterialSlot(arm_Project.materials[0].data);
		arm_Project.materials.push(arm_Context.material);
	}
	var nodes = isScene ? arm_Context.materialScene.nodes : arm_Context.material.nodes;
	var canvas = isScene ? arm_Context.materialScene.canvas : arm_Context.material.canvas;
	var dirs = path.split(arm_sys_Path.sep);
	canvas.name = dirs[dirs.length - 1];
	var nout = null;
	var _g1 = 0;
	var _g2 = canvas.nodes;
	while(_g1 < _g2.length) {
		var n = _g2[_g1];
		++_g1;
		if(n.type == "OUTPUT_MATERIAL_PBR") {
			nout = n;
			break;
		}
	}
	var _g3 = 0;
	var _g4 = canvas.nodes;
	while(_g3 < _g4.length) {
		var n1 = _g4[_g3];
		++_g3;
		if(n1.name == "RGB") {
			nodes.removeNode(n1,canvas);
			break;
		}
	}
	var pos = 0;
	var startY = 100;
	var nodeH = 164;
	if(mapbase != "") {
		arm_io_ImportFolder.placeImageNode(nodes,canvas,mapbase,startY + nodeH * pos,nout.id,0);
		++pos;
	}
	if(mapopac != "") {
		arm_io_ImportFolder.placeImageNode(nodes,canvas,mapopac,startY + nodeH * pos,nout.id,1);
		++pos;
	}
	if(mapocc != "") {
		arm_io_ImportFolder.placeImageNode(nodes,canvas,mapocc,startY + nodeH * pos,nout.id,2);
		++pos;
	}
	if(maprough != "") {
		arm_io_ImportFolder.placeImageNode(nodes,canvas,maprough,startY + nodeH * pos,nout.id,3);
		++pos;
	}
	if(mapmet != "") {
		arm_io_ImportFolder.placeImageNode(nodes,canvas,mapmet,startY + nodeH * pos,nout.id,4);
		++pos;
	}
	if(mapnor != "") {
		arm_io_ImportFolder.placeImageNode(nodes,canvas,mapnor,startY + nodeH * pos,nout.id,5);
		++pos;
	}
	if(mapheight != "") {
		arm_io_ImportFolder.placeImageNode(nodes,canvas,mapheight,startY + nodeH * pos,nout.id,7);
		++pos;
	}
	arm_node_MaterialParser.parsePaintMaterial();
	arm_util_RenderUtil.makeMaterialPreview();
	arm_ui_UISidebar.inst.hwnd1.redraws = 2;
};
arm_io_ImportFolder.placeImageNode = function(nodes,canvas,asset,ny,to_id,to_socket) {
	var n = arm_node_NodesMaterial.createNode("TEX_IMAGE");
	n.buttons[0].default_value = arm_App.getAssetIndex(asset);
	n.x = 72;
	n.y = ny;
	var l = { id : nodes.getLinkId(canvas.links), from_id : n.id, from_socket : 0, to_id : to_id, to_socket : to_socket};
	canvas.links.push(l);
};
var arm_io_ImportFont = function() { };
$hxClasses["arm.io.ImportFont"] = arm_io_ImportFont;
arm_io_ImportFont.__name__ = "arm.io.ImportFont";
arm_io_ImportFont.run = function(path) {
	iron_data_Data.getFont(path,function(font) {
		var ar = path.split(arm_sys_Path.sep);
		var name = ar[ar.length - 1];
		arm_io_ImportFont.fontList.push(name);
		var _this = arm_io_ImportFont.fontMap;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,font);
		} else {
			_this.h[name] = font;
		}
	});
};
var arm_io_ImportKeymap = function() { };
$hxClasses["arm.io.ImportKeymap"] = arm_io_ImportKeymap;
arm_io_ImportKeymap.__name__ = "arm.io.ImportKeymap";
arm_io_ImportKeymap.run = function(path) {
	if(!arm_sys_Path.isJson(path)) {
		arm_Log.error(arm_Strings.error1);
		return;
	}
	var filename = HxOverrides.substr(path,path.lastIndexOf(arm_sys_Path.sep) + 1,null);
	var dstPath = arm_sys_Path.data() + arm_sys_Path.sep + "keymap_presets" + arm_sys_Path.sep + filename;
	arm_sys_File.copy(path,dstPath);
	arm_ui_BoxPreferences.fetchKeymaps();
	arm_ui_BoxPreferences.presetHandle.position = arm_ui_BoxPreferences.getPresetIndex();
	arm_Log.info("Keymap '" + filename + "' imported.");
};
var arm_io_ImportMesh = function() { };
$hxClasses["arm.io.ImportMesh"] = arm_io_ImportMesh;
arm_io_ImportMesh.__name__ = "arm.io.ImportMesh";
arm_io_ImportMesh.run = function(path,_clearLayers) {
	if(_clearLayers == null) {
		_clearLayers = true;
	}
	if(!arm_sys_Path.isMesh(path)) {
		arm_Log.error(arm_Strings.error1);
		return;
	}
	arm_io_ImportMesh.clearLayers = _clearLayers;
	var p = path.toLowerCase();
	if(StringTools.endsWith(p,".obj")) {
		arm_io_ImportObj.run(path);
	} else if(StringTools.endsWith(p,".fbx")) {
		arm_io_ImportFbx.run(path);
	} else if(StringTools.endsWith(p,".blend")) {
		arm_io_ImportBlend.run(path);
	} else {
		var ext = HxOverrides.substr(path,path.lastIndexOf(".") + 1,null);
		var _this = arm_sys_Path.meshImporters;
		var importer = __map_reserved[ext] != null ? _this.getReserved(ext) : _this.h[ext];
		importer(path,function(mesh) {
			arm_io_ImportMesh.makeMesh(mesh,path);
		});
	}
	if(arm_Context.mergedObject != null) {
		arm_Context.mergedObject.remove();
		iron_data_Data.deleteMesh(arm_Context.mergedObject.data.handle);
		arm_Context.mergedObject = null;
	}
	arm_Context.selectPaintObject(arm_Context.mainObject());
	if(arm_Project.paintObjects.length > 1) {
		arm_Project.paintObjects.sort(function(a,b) {
			if(a.name < b.name) {
				return -1;
			} else if(a.name > b.name) {
				return 1;
			}
			return 0;
		});
		if(arm_Context.mergedObject == null) {
			arm_util_MeshUtil.mergeMesh();
		}
		arm_Context.paintObject.skip_context = "paint";
		arm_Context.mergedObject.visible = true;
	}
	arm_Project.meshAssets = [path];
	if(arm_ui_UIHeader.inst.worktab.position == 0) {
		arm_util_ViewportUtil.scaleToBounds();
	}
	if(arm_Context.paintObject.name == "") {
		arm_Context.paintObject.name = "Object";
	}
	arm_node_MaterialParser.parsePaintMaterial();
	arm_node_MaterialParser.parseMeshMaterial();
	arm_ui_UIView2D.inst.hwnd.redraws = 2;
};
arm_io_ImportMesh.makeMesh = function(mesh,path) {
	if(mesh == null || mesh.posa == null || mesh.nora == null || mesh.inda == null) {
		arm_Log.error(arm_Strings.error3);
		return;
	}
	var raw = null;
	if(arm_ui_UIHeader.inst.worktab.position == 1) {
		raw = arm_io_ImportMesh.rawMesh(mesh);
		if(mesh.texa != null) {
			raw.vertex_arrays.push({ values : mesh.texa, attrib : "tex", data : "short2norm"});
		}
	} else {
		raw = arm_io_ImportMesh.rawMesh(mesh);
		if(mesh.texa == null) {
			arm_io_ImportMesh.equirectUnwrap(mesh);
		}
		raw.vertex_arrays.push({ values : mesh.texa, attrib : "tex", data : "short2norm"});
		if(mesh.cola != null) {
			raw.vertex_arrays.push({ values : mesh.cola, attrib : "col", data : "short4norm", padding : 1});
		}
	}
	new iron_data_MeshData(raw,function(md) {
		if(arm_ui_UIHeader.inst.worktab.position == 1) {
			var this1 = new Array(1);
			var mats = this1;
			mats[0] = arm_Context.materialScene.data;
			var object = iron_Scene.active.addMeshObject(md,mats,iron_Scene.active.getChild("Scene"));
			var ar = path.split(arm_sys_Path.sep);
			var s = ar[ar.length - 1];
			object.name = s.substring(0,s.length - 4);
			arm_Context.selectObject(object);
		} else {
			arm_Context.paintObject = arm_Context.mainObject();
			arm_Context.selectPaintObject(arm_Context.mainObject());
			var _g = 0;
			var _g1 = arm_Project.paintObjects.length;
			while(_g < _g1) {
				var i = _g++;
				var p = arm_Project.paintObjects[i];
				if(p == arm_Context.paintObject) {
					continue;
				}
				iron_data_Data.deleteMesh(p.data.handle);
				p.remove();
			}
			var handle = arm_Context.paintObject.data.handle;
			if(handle != "SceneSphere" && handle != "ScenePlane") {
				iron_data_Data.deleteMesh(handle);
			}
			if(arm_io_ImportMesh.clearLayers) {
				while(arm_Project.layers.length > 1) {
					var l = arm_Project.layers.pop();
					l.unload();
				}
				arm_Context.setLayer(arm_Project.layers[0]);
				iron_App.notifyOnRender(arm_Layers.initLayers);
				arm_History.reset();
			}
			arm_Context.paintObject.setData(md);
			arm_Context.paintObject.name = mesh.name;
			var g = arm_Context.paintObject.data.geom;
			var _this = g.vertexBufferMap;
			var posbuf = __map_reserved["pos"] != null ? _this.getReserved("pos") : _this.h["pos"];
			if(posbuf != null) {
				posbuf.delete();
				g.vertexBufferMap.remove("pos");
			}
			arm_Project.paintObjects = [arm_Context.paintObject];
		}
		md.handle = raw.name;
		var key = md.handle;
		var _this1 = iron_data_Data.cachedMeshes;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,md);
		} else {
			_this1.h[key] = md;
		}
		arm_Context.ddirty = 4;
		arm_ui_UISidebar.inst.hwnd.redraws = 2;
		arm_ui_UISidebar.inst.hwnd1.redraws = 2;
		arm_ui_UISidebar.inst.hwnd2.redraws = 2;
		arm_util_UVUtil.uvmapCached = false;
		arm_util_UVUtil.trianglemapCached = false;
	});
};
arm_io_ImportMesh.addMesh = function(mesh) {
	if(mesh.texa == null) {
		arm_io_ImportMesh.equirectUnwrap(mesh);
	}
	var raw = arm_io_ImportMesh.rawMesh(mesh);
	raw.vertex_arrays.push({ values : mesh.texa, attrib : "tex", data : "short2norm"});
	new iron_data_MeshData(raw,function(md) {
		var object = iron_Scene.active.addMeshObject(md,arm_Context.paintObject.materials,arm_Context.paintObject);
		object.name = mesh.name;
		object.skip_context = "paint";
		arm_Project.paintObjects.push(object);
		md.handle = raw.name;
		var key = md.handle;
		var _this = iron_data_Data.cachedMeshes;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,md);
		} else {
			_this.h[key] = md;
		}
		arm_Context.ddirty = 4;
		arm_ui_UISidebar.inst.hwnd.redraws = 2;
		arm_util_UVUtil.uvmapCached = false;
		arm_util_UVUtil.trianglemapCached = false;
	});
};
arm_io_ImportMesh.equirectUnwrap = function(mesh) {
	arm_Log.error(arm_Strings.error4);
	var verts = mesh.posa.length / 4 | 0;
	var this1 = new Int16Array(verts * 2);
	mesh.texa = this1;
	var _this_x = 0.0;
	var _this_y = 0.0;
	var _this_z = 0.0;
	var _this_w = 1.0;
	var _g = 0;
	var _g1 = verts;
	while(_g < _g1) {
		var i = _g++;
		_this_x = mesh.posa[i * 4] / 32767;
		_this_y = mesh.posa[i * 4 + 1] / 32767;
		_this_z = mesh.posa[i * 4 + 2] / 32767;
		_this_w = 1.0;
		var n = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
		if(n > 0.0) {
			var invN = 1.0 / n;
			_this_x *= invN;
			_this_y *= invN;
			_this_z *= invN;
		}
		mesh.texa[i * 2] = (Math.atan2(-_this_z,_this_x) + Math.PI) / (Math.PI * 2) * 32767 | 0;
		mesh.texa[i * 2 + 1] = Math.acos(_this_y) / Math.PI * 32767 | 0;
	}
};
arm_io_ImportMesh.rawMesh = function(mesh) {
	return { name : mesh.name, vertex_arrays : [{ values : mesh.posa, attrib : "pos", data : "short4norm"},{ values : mesh.nora, attrib : "nor", data : "short2norm"}], index_arrays : [{ values : mesh.inda, material : 0}], scale_pos : mesh.scalePos, scale_tex : mesh.scaleTex};
};
var arm_io_ImportObj = function() { };
$hxClasses["arm.io.ImportObj"] = arm_io_ImportObj;
arm_io_ImportObj.__name__ = "arm.io.ImportObj";
arm_io_ImportObj.run = function(path) {
	var i = arm_Context.splitBy;
	var isUdim = i == 3;
	arm_format_ObjParser.splitCode = i == 0 || isUdim ? 111 : i == 1 ? 103 : 117;
	iron_data_Data.getBlob(path,function(b) {
		if(isUdim) {
			var obj = new arm_format_ObjParser(b,0,isUdim);
			var name = obj.name;
			var _g = 0;
			var _g1 = obj.udims.length;
			while(_g < _g1) {
				var i1 = _g++;
				var u = i1 % obj.udimsU;
				var v = i1 / obj.udimsU | 0;
				obj.name = name + "." + (1000 + v * 10 + u + 1);
				obj.inda = obj.udims[i1];
				if(i1 == 0) {
					arm_io_ImportMesh.makeMesh(obj,path);
				} else {
					arm_io_ImportMesh.addMesh(obj);
				}
			}
		} else {
			var obj1 = new arm_format_ObjParser(b);
			arm_io_ImportMesh.makeMesh(obj1,path);
			while(obj1.hasNext) {
				obj1 = new arm_format_ObjParser(b,obj1.pos);
				arm_io_ImportMesh.addMesh(obj1);
			}
		}
		iron_data_Data.deleteBlob(path);
	});
};
var arm_io_ImportPlugin = function() { };
$hxClasses["arm.io.ImportPlugin"] = arm_io_ImportPlugin;
arm_io_ImportPlugin.__name__ = "arm.io.ImportPlugin";
arm_io_ImportPlugin.run = function(path) {
	if(!arm_sys_Path.isPlugin(path)) {
		arm_Log.error(arm_Strings.error1);
		return;
	}
	var filename = HxOverrides.substr(path,path.lastIndexOf(arm_sys_Path.sep) + 1,null);
	var dstPath = arm_sys_Path.data() + arm_sys_Path.sep + "plugins" + arm_sys_Path.sep + filename;
	arm_sys_File.copy(path,dstPath);
	arm_ui_BoxPreferences.filesPlugin = null;
	arm_Log.info("Plugin '" + filename + "' imported.");
};
var arm_io_ImportTexture = function() { };
$hxClasses["arm.io.ImportTexture"] = arm_io_ImportTexture;
arm_io_ImportTexture.__name__ = "arm.io.ImportTexture";
arm_io_ImportTexture.run = function(path) {
	if(!arm_sys_Path.isTexture(path)) {
		arm_Log.error(arm_Strings.error1);
		return;
	}
	var _g = 0;
	var _g1 = arm_Project.assets;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.file == path) {
			arm_Log.info(arm_Strings.info0);
			return;
		}
	}
	var ext = HxOverrides.substr(path,path.lastIndexOf(".") + 1,null);
	var _this = arm_sys_Path.textureImporters;
	var importer = __map_reserved[ext] != null ? _this.getReserved(ext) : _this.h[ext];
	if(importer == null) {
		importer = arm_io_ImportTexture.defaultImporter;
	}
	importer(path,function(image) {
		var _this1 = iron_data_Data.cachedImages;
		if(__map_reserved[path] != null) {
			_this1.setReserved(path,image);
		} else {
			_this1.h[path] = image;
		}
		var ar = path.split(arm_sys_Path.sep);
		var name = ar[ar.length - 1];
		var asset = { name : name, file : path, id : arm_Project.assetId++};
		arm_Project.assets.push(asset);
		if(arm_Context.texture == null) {
			arm_Context.texture = asset;
		}
		arm_Project.assetNames.push(name);
		arm_Project.assetMap.h[asset.id] = image;
		arm_ui_UISidebar.inst.hwnd2.redraws = 2;
		if(StringTools.endsWith(path.toLowerCase(),".hdr") && (image.get_width() == 1024 || image.get_width() == 2048 || image.get_width() == 4096)) {
			arm_io_ImportEnvmap.run(path,image);
		}
	});
};
arm_io_ImportTexture.defaultImporter = function(path,done) {
	iron_data_Data.getImage(path,done);
};
var arm_node_Logic = function() { };
$hxClasses["arm.node.Logic"] = arm_node_Logic;
arm_node_Logic.__name__ = "arm.node.Logic";
arm_node_Logic.getNode = function(id) {
	var _g = 0;
	var _g1 = arm_node_Logic.nodes;
	while(_g < _g1.length) {
		var n = _g1[_g];
		++_g;
		if(n.id == id) {
			return n;
		}
	}
	return null;
};
arm_node_Logic.getInputLink = function(inp) {
	var _g = 0;
	var _g1 = arm_node_Logic.links;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.to_id == inp.node_id) {
			var node = arm_node_Logic.getNode(inp.node_id);
			if(node.inputs.length <= l.to_socket) {
				return null;
			}
			if(node.inputs[l.to_socket] == inp) {
				return l;
			}
		}
	}
	return null;
};
arm_node_Logic.getOutputLinks = function(out) {
	var res = [];
	var _g = 0;
	var _g1 = arm_node_Logic.links;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.from_id == out.node_id) {
			var node = arm_node_Logic.getNode(out.node_id);
			if(node.outputs.length <= l.from_socket) {
				continue;
			}
			if(node.outputs[l.from_socket] == out) {
				res.push(l);
			}
		}
	}
	return res;
};
arm_node_Logic.safesrc = function(s) {
	return StringTools.replace(s," ","");
};
arm_node_Logic.node_name = function(node) {
	var s = arm_node_Logic.safesrc(node.name) + node.id;
	return s;
};
arm_node_Logic.parse = function(canvas,onAdd) {
	if(onAdd == null) {
		onAdd = true;
	}
	arm_node_Logic.nodes = canvas.nodes;
	arm_node_Logic.links = canvas.links;
	arm_node_Logic.parsed_nodes = [];
	arm_node_Logic.parsed_labels = new haxe_ds_StringMap();
	arm_node_Logic.nodeMap = new haxe_ds_StringMap();
	var root_nodes = arm_node_Logic.get_root_nodes(canvas);
	arm_node_Logic.tree = new arm_node_LogicTree();
	if(onAdd) {
		arm_node_Logic.tree.notifyOnAdd(function() {
			var _g = 0;
			while(_g < root_nodes.length) {
				var node = root_nodes[_g];
				++_g;
				arm_node_Logic.build_node(node);
			}
		});
	} else {
		var _g1 = 0;
		while(_g1 < root_nodes.length) {
			var node1 = root_nodes[_g1];
			++_g1;
			arm_node_Logic.build_node(node1);
		}
	}
	return arm_node_Logic.tree;
};
arm_node_Logic.build_node = function(node) {
	var name = arm_node_Logic.node_name(node);
	if(arm_node_Logic.parsed_nodes.indexOf(name) != -1) {
		return name;
	}
	arm_node_Logic.parsed_nodes.push(name);
	var v = arm_node_Logic.createClassInstance(node.type,[arm_node_Logic.tree]);
	var _this = arm_node_Logic.nodeMap;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,v);
	} else {
		_this.h[name] = v;
	}
	var _g = 0;
	var _g1 = node.buttons;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.type == "ENUM") {
			var arrayData = ((b.data) instanceof Array);
			var texts = arrayData ? b.data : zui_Nodes.enumTexts(node.type);
			Reflect.setProperty(v,b.name,texts[b.default_value]);
		} else {
			Reflect.setProperty(v,b.name,b.default_value);
		}
	}
	var inp_node = null;
	var inp_from = 0;
	var _g2 = 0;
	var _g3 = node.inputs.length;
	while(_g2 < _g3) {
		var i = _g2++;
		var inp = node.inputs[i];
		var l = arm_node_Logic.getInputLink(inp);
		if(l != null) {
			var n = arm_node_Logic.getNode(l.from_id);
			var socket = n.outputs[l.from_socket];
			var this1 = arm_node_Logic.nodeMap;
			var key = arm_node_Logic.build_node(n);
			var _this1 = this1;
			inp_node = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
			var _g21 = 0;
			var _g31 = n.outputs.length;
			while(_g21 < _g31) {
				var i1 = _g21++;
				if(n.outputs[i1] == socket) {
					inp_from = i1;
					break;
				}
			}
		} else {
			inp_node = arm_node_Logic.build_default_node(inp);
			inp_from = 0;
		}
		v.addInput(inp_node,inp_from);
	}
	var _g4 = 0;
	var _g5 = node.outputs;
	while(_g4 < _g5.length) {
		var out = _g5[_g4];
		++_g4;
		var outNodes = [];
		var ls = arm_node_Logic.getOutputLinks(out);
		if(ls != null && ls.length > 0) {
			var _g41 = 0;
			while(_g41 < ls.length) {
				var l1 = ls[_g41];
				++_g41;
				var n1 = arm_node_Logic.getNode(l1.to_id);
				var out_name = arm_node_Logic.build_node(n1);
				var _this2 = arm_node_Logic.nodeMap;
				outNodes.push(__map_reserved[out_name] != null ? _this2.getReserved(out_name) : _this2.h[out_name]);
			}
		} else {
			outNodes.push(arm_node_Logic.build_default_node(out));
		}
		v.addOutputs(outNodes);
	}
	return name;
};
arm_node_Logic.get_root_nodes = function(node_group) {
	var roots = [];
	var _g = 0;
	var _g1 = node_group.nodes;
	while(_g < _g1.length) {
		var node = _g1[_g];
		++_g;
		var linked = false;
		var _g2 = 0;
		var _g11 = node.outputs;
		while(_g2 < _g11.length) {
			var out = _g11[_g2];
			++_g2;
			var ls = arm_node_Logic.getOutputLinks(out);
			if(ls != null && ls.length > 0) {
				linked = true;
				break;
			}
		}
		if(!linked) {
			roots.push(node);
		}
	}
	return roots;
};
arm_node_Logic.build_default_node = function(inp) {
	var v = null;
	if(inp.type == "OBJECT") {
		v = arm_node_Logic.createClassInstance("ObjectNode",[arm_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "ANIMACTION") {
		v = arm_node_Logic.createClassInstance("StringNode",[arm_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "VECTOR") {
		if(inp.default_value == null) {
			inp.default_value = [0,0,0];
		}
		v = arm_node_Logic.createClassInstance("VectorNode",[arm_node_Logic.tree,inp.default_value[0],inp.default_value[1],inp.default_value[2]]);
	} else if(inp.type == "RGBA") {
		if(inp.default_value == null) {
			inp.default_value = [0,0,0];
		}
		v = arm_node_Logic.createClassInstance("ColorNode",[arm_node_Logic.tree,inp.default_value[0],inp.default_value[1],inp.default_value[2],inp.default_value[3]]);
	} else if(inp.type == "RGB") {
		if(inp.default_value == null) {
			inp.default_value = [0,0,0];
		}
		v = arm_node_Logic.createClassInstance("ColorNode",[arm_node_Logic.tree,inp.default_value[0],inp.default_value[1],inp.default_value[2]]);
	} else if(inp.type == "VALUE") {
		v = arm_node_Logic.createClassInstance("FloatNode",[arm_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "INT") {
		v = arm_node_Logic.createClassInstance("IntegerNode",[arm_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "BOOLEAN") {
		v = arm_node_Logic.createClassInstance("BooleanNode",[arm_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "STRING") {
		v = arm_node_Logic.createClassInstance("StringNode",[arm_node_Logic.tree,inp.default_value]);
	} else {
		v = arm_node_Logic.createClassInstance("NullNode",[arm_node_Logic.tree]);
	}
	return v;
};
arm_node_Logic.createClassInstance = function(className,args) {
	var name = arm_node_Logic.packageName + "." + className;
	var cname = $hxClasses[name];
	if(cname == null) {
		return null;
	}
	return Type.createInstance(cname,args);
};
var arm_node_LogicNode = function(tree) {
	this.outputs = [];
	this.inputs = [];
	this.tree = tree;
};
$hxClasses["arm.node.LogicNode"] = arm_node_LogicNode;
arm_node_LogicNode.__name__ = "arm.node.LogicNode";
arm_node_LogicNode.prototype = {
	addInput: function(node,from) {
		this.inputs.push(new arm_node_LogicNodeInput(node,from));
	}
	,addOutputs: function(nodes) {
		this.outputs.push(nodes);
	}
	,get: function(from) {
		return this;
	}
	,set: function(value) {
	}
	,__class__: arm_node_LogicNode
};
var arm_node_LogicNodeInput = function(node,from) {
	this.node = node;
	this.from = from;
};
$hxClasses["arm.node.LogicNodeInput"] = arm_node_LogicNodeInput;
arm_node_LogicNodeInput.__name__ = "arm.node.LogicNodeInput";
arm_node_LogicNodeInput.prototype = {
	get: function() {
		return this.node.get(this.from);
	}
	,set: function(value) {
		this.node.set(value);
	}
	,__class__: arm_node_LogicNodeInput
};
var iron_Trait = function() {
	this._render2D = null;
	this._render = null;
	this._lateUpdate = null;
	this._update = null;
	this._remove = null;
	this._init = null;
	this._add = null;
};
$hxClasses["iron.Trait"] = iron_Trait;
iron_Trait.__name__ = "iron.Trait";
iron_Trait.prototype = {
	remove: function() {
		this.object.removeTrait(this);
	}
	,notifyOnAdd: function(f) {
		if(this._add == null) {
			this._add = [];
		}
		this._add.push(f);
	}
	,notifyOnUpdate: function(f) {
		if(this._update == null) {
			this._update = [];
		}
		this._update.push(f);
		iron_App.notifyOnUpdate(f);
	}
	,__class__: iron_Trait
};
var arm_node_LogicTree = function() {
	iron_Trait.call(this);
};
$hxClasses["arm.node.LogicTree"] = arm_node_LogicTree;
arm_node_LogicTree.__name__ = "arm.node.LogicTree";
arm_node_LogicTree.__super__ = iron_Trait;
arm_node_LogicTree.prototype = $extend(iron_Trait.prototype,{
	__class__: arm_node_LogicTree
});
var arm_node_MakeBake = function() { };
$hxClasses["arm.node.MakeBake"] = arm_node_MakeBake;
arm_node_MakeBake.__name__ = "arm.node.MakeBake";
arm_node_MakeBake.run = function(con,vert,frag) {
	if(arm_Context.bakeType == 0) {
		frag.wposition = true;
		frag.n = true;
		frag.vVec = true;
		frag.add_function(arm_node_MaterialFunctions.str_cotangentFrame);
		frag.write("mat3 TBN = cotangentFrame(n, vVec, texCoord);");
		frag.write("n = nortan * 2.0 - 1.0;");
		frag.write("n.y = -n.y;");
		frag.write("n = normalize(mul(n, TBN));");
		var ext = arm_Context.vxaoExt;
		frag.write("const vec3 voxelgiHalfExtents = vec3(" + ext + ", " + ext + ", " + ext + ");");
		frag.write("vec3 voxpos = wposition / voxelgiHalfExtents;");
		frag.add_uniform("sampler3D voxels");
		frag.add_function(arm_node_MaterialFunctions.str_traceAO);
		frag.n = true;
		var strength = arm_Context.bakeAoStrength;
		var radius = arm_Context.bakeAoRadius;
		var offset = arm_Context.bakeAoOffset;
		frag.write("float ao = traceAO(voxpos, n, " + radius + ", " + offset + ") * " + strength + ";");
		if(arm_Context.bakeAxis != 0) {
			var axis = arm_node_MakeBake.axisString(arm_Context.bakeAxis);
			frag.write("ao *= dot(n, " + axis + ");");
		}
		frag.write("ao = 1.0 - ao;");
		frag.write("fragColor[0] = vec4(ao, ao, ao, 1.0);");
	} else if(arm_Context.bakeType == 1) {
		var strength1 = arm_Context.bakeCurvStrength * 2.0;
		var radius1 = 1.0 / arm_Context.bakeCurvRadius * 0.25;
		var offset1 = arm_Context.bakeCurvOffset / 10;
		frag.n = true;
		frag.write("vec3 dx = dFdx(n);");
		frag.write("vec3 dy = dFdy(n);");
		frag.write("float curvature = max(dot(dx, dx), dot(dy, dy));");
		frag.write("curvature = clamp(pow(curvature, " + radius1 + ") * " + strength1 + " + " + offset1 + ", 0.0, 1.0);");
		if(arm_Context.bakeAxis != 0) {
			var axis1 = arm_node_MakeBake.axisString(arm_Context.bakeAxis);
			frag.write("curvature *= dot(n, " + axis1 + ");");
		}
		frag.write("fragColor[0] = vec4(curvature, curvature, curvature, 1.0);");
	} else if(arm_Context.bakeType == 2) {
		frag.n = true;
		frag.add_uniform("sampler2D texpaint_undo","_texpaint_undo");
		frag.write("vec3 n0 = textureLod(texpaint_undo, texCoord, 0.0).rgb * vec3(2.0, 2.0, 2.0) - vec3(1.0, 1.0, 1.0);");
		frag.add_function(arm_node_MaterialFunctions.str_cotangentFrame);
		frag.write("mat3 invTBN = transpose(cotangentFrame(n, n, texCoord));");
		frag.write("vec3 res = normalize(mul(n0, invTBN)) * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);");
		frag.write("fragColor[0] = vec4(res, 1.0);");
	} else if(arm_Context.bakeType == 3) {
		frag.n = true;
		frag.write("fragColor[0] = vec4(n * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5), 1.0);");
		if(arm_Context.bakeUpAxis == 1) {
			frag.write("fragColor[0].rgb = vec3(fragColor[0].r, fragColor[0].b, 1.0 - fragColor[0].g);");
		}
	} else if(arm_Context.bakeType == 4) {
		frag.wposition = true;
		frag.add_uniform("sampler2D texpaint_undo","_texpaint_undo");
		frag.write("vec3 wpos0 = textureLod(texpaint_undo, texCoord, 0.0).rgb * vec3(2.0, 2.0, 2.0) - vec3(1.0, 1.0, 1.0);");
		frag.write("float res = distance(wpos0, wposition) * 10.0;");
		frag.write("fragColor[0] = vec4(res, res, res, 1.0);");
	} else if(arm_Context.bakeType == 5) {
		frag.add_uniform("sampler2D texpaint_undo","_texpaint_undo");
		frag.write("vec2 texDx = dFdx(texCoord);");
		frag.write("vec2 texDy = dFdy(texCoord);");
		frag.write("float h0 = textureLod(texpaint_undo, texCoord, 0.0).r * 100;");
		frag.write("float h1 = textureLod(texpaint_undo, texCoord + texDx, 0.0).r * 100;");
		frag.write("float h2 = textureLod(texpaint_undo, texCoord + texDy, 0.0).r * 100;");
		frag.write("fragColor[0] = vec4((h1 - h0) * 0.5 + 0.5, (h2 - h0) * 0.5 + 0.5, 0.0, 1.0);");
	} else if(arm_Context.bakeType == 6) {
		frag.wposition = true;
		frag.write("fragColor[0] = vec4(wposition * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5), 1.0);");
		if(arm_Context.bakeUpAxis == 1) {
			frag.write("fragColor[0].rgb = vec3(fragColor[0].r, fragColor[0].b, 1.0 - fragColor[0].g);");
		}
	} else if(arm_Context.bakeType == 7) {
		frag.write("fragColor[0] = vec4(texCoord.xy, 0.0, 1.0);");
	} else if(arm_Context.bakeType == 8) {
		frag.add_uniform("sampler2D texpaint_nor_undo","_texpaint_nor_undo");
		frag.write("float sample_matid = textureLod(texpaint_nor_undo, texCoord, 0.0).a + 1.0 / 255.0;");
		frag.write("float matid_r = fract(sin(dot(vec2(sample_matid, sample_matid * 20.0), vec2(12.9898, 78.233))) * 43758.5453);");
		frag.write("float matid_g = fract(sin(dot(vec2(sample_matid * 20.0, sample_matid), vec2(12.9898, 78.233))) * 43758.5453);");
		frag.write("float matid_b = fract(sin(dot(vec2(sample_matid, sample_matid * 40.0), vec2(12.9898, 78.233))) * 43758.5453);");
		frag.write("fragColor[0] = vec4(matid_r, matid_g, matid_b, 1.0);");
	} else if(arm_Context.bakeType == 9) {
		frag.add_uniform("float objectId","_objectId");
		frag.write("float obid = objectId + 1.0 / 255.0;");
		frag.write("float id_r = fract(sin(dot(vec2(obid, obid * 20.0), vec2(12.9898, 78.233))) * 43758.5453);");
		frag.write("float id_g = fract(sin(dot(vec2(obid * 20.0, obid), vec2(12.9898, 78.233))) * 43758.5453);");
		frag.write("float id_b = fract(sin(dot(vec2(obid, obid * 40.0), vec2(12.9898, 78.233))) * 43758.5453);");
		frag.write("fragColor[0] = vec4(id_r, id_g, id_b, 1.0);");
	} else if(arm_Context.bakeType == 10) {
		if(con.allow_vcols) {
			con.add_elem("col","short4norm");
			frag.write("fragColor[0] = vec4(vcolor.r, vcolor.g, vcolor.b, 1.0);");
		} else {
			frag.write("fragColor[0] = vec4(1.0, 1.0, 1.0, 1.0);");
		}
	}
};
arm_node_MakeBake.setColorWrites = function(con_paint) {
	con_paint.data.color_writes_red[1] = false;
	con_paint.data.color_writes_green[1] = false;
	con_paint.data.color_writes_blue[1] = false;
	con_paint.data.color_writes_alpha[1] = false;
	con_paint.data.color_writes_red[2] = false;
	con_paint.data.color_writes_green[2] = false;
	con_paint.data.color_writes_blue[2] = false;
	con_paint.data.color_writes_alpha[2] = false;
};
arm_node_MakeBake.axisString = function(i) {
	if(i == 1) {
		return "vec3(1,0,0)";
	} else if(i == 2) {
		return "vec3(0,1,0)";
	} else if(i == 3) {
		return "vec3(0,0,1)";
	} else if(i == 4) {
		return "vec3(-1,0,0)";
	} else if(i == 5) {
		return "vec3(0,-1,0)";
	} else {
		return "vec3(0,0,-1)";
	}
};
var arm_node_MakeBlur = function() { };
$hxClasses["arm.node.MakeBlur"] = arm_node_MakeBlur;
arm_node_MakeBlur.__name__ = "arm.node.MakeBlur";
arm_node_MakeBlur.run = function(vert,frag) {
	frag.write("vec2 texCoordInp = texelFetch(gbuffer2, ivec2(sp.x * gbufferSize.x, sp.y * gbufferSize.y), 0).ba;");
	frag.write("vec3 basecol = vec3(0.0, 0.0, 0.0);");
	frag.write("float roughness = 0.0;");
	frag.write("float metallic = 0.0;");
	frag.write("float occlusion = 0.0;");
	frag.write("vec3 nortan = vec3(0.0, 0.0, 0.0);");
	frag.write("float height = 0.0;");
	frag.write("float mat_opacity = 1.0;");
	frag.write("float opacity = 0.0;");
	if(arm_Context.material.paintEmis) {
		frag.write("float emis = 0.0;");
	}
	if(arm_Context.material.paintSubs) {
		frag.write("float subs = 0.0;");
	}
	frag.write("const float blur_weight[15] = {0.034619 / 2.0, 0.044859 / 2.0, 0.055857 / 2.0, 0.066833 / 2.0, 0.076841 / 2.0, 0.084894 / 2.0, 0.090126 / 2.0, 0.09194 / 2.0, 0.090126 / 2.0, 0.084894 / 2.0, 0.076841 / 2.0, 0.066833 / 2.0, 0.055857 / 2.0, 0.044859 / 2.0, 0.034619 / 2.0};");
	frag.add_uniform("float texpaintSize","_texpaintSize");
	frag.write("float blur_step = 1.0 / texpaintSize;");
	frag.write("for (int i = -7; i <= 7; ++i) {");
	frag.write("vec4 texpaint_sample = texture(texpaint_undo, texCoordInp + vec2(blur_step * float(i), 0.0));");
	frag.write("opacity += texpaint_sample.a * blur_weight[i + 7];");
	frag.write("basecol += texpaint_sample.rgb * blur_weight[i + 7];");
	frag.write("vec3 texpaint_pack_sample = texture(texpaint_pack_undo, texCoordInp + vec2(blur_step * float(i), 0.0)).rgb * blur_weight[i + 7];");
	frag.write("roughness += texpaint_pack_sample.g;");
	frag.write("metallic += texpaint_pack_sample.b;");
	frag.write("occlusion += texpaint_pack_sample.r;");
	frag.write("nortan += texture(texpaint_nor_undo, texCoordInp + vec2(blur_step * float(i), 0.0)).rgb * blur_weight[i + 7];");
	frag.write("}");
	frag.write("for (int j = -7; j <= 7; ++j) {");
	frag.write("vec4 texpaint_sample = texture(texpaint_undo, texCoordInp + vec2(0.0, blur_step * float(j)));");
	frag.write("opacity += texpaint_sample.a * blur_weight[j + 7];");
	frag.write("basecol += texpaint_sample.rgb * blur_weight[j + 7];");
	frag.write("vec3 texpaint_pack_sample = texture(texpaint_pack_undo, texCoordInp + vec2(0.0, blur_step * float(j))).rgb * blur_weight[j + 7];");
	frag.write("roughness += texpaint_pack_sample.g;");
	frag.write("metallic += texpaint_pack_sample.b;");
	frag.write("occlusion += texpaint_pack_sample.r;");
	frag.write("nortan += texture(texpaint_nor_undo, texCoordInp + vec2(0.0, blur_step * float(j))).rgb * blur_weight[j + 7];");
	frag.write("}");
	frag.write("opacity *= brushOpacity;");
};
var arm_node_MakeBrush = function() { };
$hxClasses["arm.node.MakeBrush"] = arm_node_MakeBrush;
arm_node_MakeBrush.__name__ = "arm.node.MakeBrush";
arm_node_MakeBrush.run = function(vert,frag) {
	if(arm_Context.tool == 3 || arm_Context.tool == 4 || arm_Context.tool == 7) {
		frag.write("float dist = 0.0;");
	} else if(arm_Config.raw.brush_3d) {
		frag.write("float depth = textureLod(gbufferD, inp.xy, 0.0).r;");
		frag.add_uniform("mat4 invVP","_inverseViewProjectionMatrix");
		frag.write("vec4 winp = vec4(vec2(inp.x, 1.0 - inp.y) * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);");
		frag.write("winp = mul(winp, invVP);");
		frag.write("winp.xyz /= winp.w;");
		frag.wposition = true;
		if(arm_Context.brushAngleReject || arm_Context.xray) {
			frag.add_function(arm_node_MaterialFunctions.str_octahedronWrap);
			frag.add_uniform("sampler2D gbuffer0");
			frag.write("vec2 g0 = textureLod(gbuffer0, inp.xy, 0.0).rg;");
			frag.write("vec3 wn;");
			frag.write("wn.z = 1.0 - abs(g0.x) - abs(g0.y);");
			frag.write("wn.xy = wn.z >= 0.0 ? g0.xy : octahedronWrap(g0.xy);");
			frag.write("wn = normalize(wn);");
			frag.write("float planeDist = dot(wn, winp.xyz - wposition);");
			if(arm_Context.brushAngleReject && !arm_Context.xray) {
				frag.write("if (planeDist < -0.01) discard;");
				frag.n = true;
				var angle = arm_Context.brushAngleRejectDot;
				frag.write("if (dot(wn, n) < " + angle + ") discard;");
			}
		}
		frag.write("float depthlast = textureLod(gbufferD, inplast.xy, 0.0).r;");
		frag.write("vec4 winplast = vec4(vec2(inplast.x, 1.0 - inplast.y) * 2.0 - 1.0, depthlast * 2.0 - 1.0, 1.0);");
		frag.write("winplast = mul(winplast, invVP);");
		frag.write("winplast.xyz /= winplast.w;");
		frag.write("vec3 pa = wposition - winp.xyz;");
		if(arm_Context.xray) {
			frag.write("pa += wn * vec3(planeDist, planeDist, planeDist);");
		}
		frag.write("vec3 ba = winplast.xyz - winp.xyz;");
		if(arm_Context.brushLazyRadius > 0 && arm_Context.brushLazyStep > 0) {
			frag.write("float dist = distance(wposition, winp.xyz);");
		} else {
			frag.write("float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);");
			frag.write("float dist = length(pa - ba * h);");
		}
		frag.write("if (dist > brushRadius) discard;");
	} else {
		frag.write("vec2 binp = inp.xy * 2.0 - 1.0;");
		frag.write("binp.x *= aspectRatio;");
		frag.write("binp = binp * 0.5 + 0.5;");
		frag.write("vec2 binplast = inplast.xy * 2.0 - 1.0;");
		frag.write("binplast.x *= aspectRatio;");
		frag.write("binplast = binplast * 0.5 + 0.5;");
		frag.write("vec2 pa = bsp.xy - binp.xy;");
		frag.write("vec2 ba = binplast.xy - binp.xy;");
		frag.write("float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);");
		frag.write("float dist = length(pa - ba * h);");
		frag.write("if (dist > brushRadius) discard;");
	}
};
var arm_node_MakeClone = function() { };
$hxClasses["arm.node.MakeClone"] = arm_node_MakeClone;
arm_node_MakeClone.__name__ = "arm.node.MakeClone";
arm_node_MakeClone.run = function(vert,frag) {
	frag.add_uniform("vec2 cloneDelta","_cloneDelta");
	frag.write("vec2 texCoordInp = texelFetch(gbuffer2, ivec2((sp.x + cloneDelta.x) * gbufferSize.x, (sp.y + cloneDelta.y) * gbufferSize.y), 0).ba;");
	frag.write("vec3 texpaint_pack_sample = textureLod(texpaint_pack_undo, texCoordInp, 0.0).rgb;");
	var base = "textureLod(texpaint_undo, texCoordInp, 0.0).rgb";
	var rough = "texpaint_pack_sample.g";
	var met = "texpaint_pack_sample.b";
	var occ = "texpaint_pack_sample.r";
	var nortan = "textureLod(texpaint_nor_undo, texCoordInp, 0.0).rgb";
	var height = "0.0";
	var opac = "1.0";
	frag.write("vec3 basecol = " + base + ";");
	frag.write("float roughness = " + rough + ";");
	frag.write("float metallic = " + met + ";");
	frag.write("float occlusion = " + occ + ";");
	frag.write("vec3 nortan = " + nortan + ";");
	frag.write("float height = " + height + ";");
	frag.write("float mat_opacity = " + opac + ";");
	frag.write("float opacity = mat_opacity * brushOpacity;");
	if(arm_Context.material.paintEmis) {
		frag.write("float emis = 0.0;");
	}
	if(arm_Context.material.paintSubs) {
		frag.write("float subs = 0.0;");
	}
};
var arm_node_MakeColorIdPicker = function() { };
$hxClasses["arm.node.MakeColorIdPicker"] = arm_node_MakeColorIdPicker;
arm_node_MakeColorIdPicker.__name__ = "arm.node.MakeColorIdPicker";
arm_node_MakeColorIdPicker.run = function(vert,frag) {
	vert.write("gl_Position = vec4(-1.0 + float((gl_VertexID & 1) << 2), -1.0 + float((gl_VertexID & 2) << 1), 0.0, 1.0);");
	frag.add_uniform("sampler2D gbuffer2");
	frag.add_uniform("vec2 gbufferSize","_gbufferSize");
	frag.add_uniform("vec4 inp","_inputBrush");
	frag.write("vec2 texCoordInp = texelFetch(gbuffer2, ivec2(inp.x * gbufferSize.x, inp.y * gbufferSize.y), 0).ba;");
	if(arm_Context.tool == 9) {
		frag.add_out("vec4 fragColor");
		frag.add_uniform("sampler2D texcolorid","_texcolorid");
		frag.write("vec3 idcol = textureLod(texcolorid, texCoordInp, 0.0).rgb;");
		frag.write("fragColor = vec4(idcol, 1.0);");
	} else if(arm_Context.tool == 10) {
		frag.add_out("vec4 fragColor[3]");
		frag.add_uniform("sampler2D texpaint");
		frag.add_uniform("sampler2D texpaint_nor");
		frag.add_uniform("sampler2D texpaint_pack");
		frag.write("fragColor[0] = textureLod(texpaint, texCoordInp, 0.0);");
		frag.write("fragColor[1] = textureLod(texpaint_nor, texCoordInp, 0.0);");
		frag.write("fragColor[2] = textureLod(texpaint_pack, texCoordInp, 0.0);");
		frag.write("fragColor[0].a = texCoordInp.x;");
		frag.write("fragColor[2].a = texCoordInp.y;");
	}
};
var arm_node_MakeDiscard = function() { };
$hxClasses["arm.node.MakeDiscard"] = arm_node_MakeDiscard;
arm_node_MakeDiscard.__name__ = "arm.node.MakeDiscard";
arm_node_MakeDiscard.colorId = function(vert,frag) {
	vert.add_out("vec2 texCoordPick");
	vert.write("texCoordPick = subtex;");
	frag.add_uniform("sampler2D texpaint_colorid");
	frag.add_uniform("sampler2D texcolorid","_texcolorid");
	frag.write("vec3 c1 = texelFetch(texpaint_colorid, ivec2(0, 0), 0).rgb;");
	frag.write("vec3 c2 = textureLod(texcolorid, texCoordPick, 0).rgb;");
	frag.write("if (any(c1 != c2)) discard;");
};
arm_node_MakeDiscard.face = function(vert,frag) {
	vert.add_out("vec2 texCoordPick");
	vert.write("texCoordPick = subtex;");
	frag.add_uniform("sampler2D gbuffer2");
	frag.add_uniform("sampler2D textrianglemap","_textrianglemap");
	frag.add_uniform("float textrianglemapSize","_texpaintSize");
	frag.add_uniform("vec2 gbufferSize","_gbufferSize");
	frag.write("vec2 texCoordInp = texelFetch(gbuffer2, ivec2(inp.x * gbufferSize.x, inp.y * gbufferSize.y), 0).ba;");
	frag.write("vec4 c1 = texelFetch(textrianglemap, ivec2(texCoordInp * textrianglemapSize), 0);");
	frag.write("vec4 c2 = textureLod(textrianglemap, texCoordPick, 0);");
	frag.write("if (any(c1 != c2)) discard;");
};
arm_node_MakeDiscard.materialId = function(vert,frag) {
	frag.wvpposition = true;
	frag.write("vec2 picker_sample_tc = vec2(wvpposition.x / wvpposition.w, wvpposition.y / wvpposition.w) * 0.5 + 0.5;");
	frag.write("picker_sample_tc.y = 1.0 - picker_sample_tc.y;");
	frag.add_uniform("sampler2D texpaint_nor_undo","_texpaint_nor_undo");
	var matid = arm_Context.materialIdPicked / 255;
	frag.write("if (" + matid + " != textureLod(texpaint_nor_undo, picker_sample_tc, 0.0).a) discard;");
};
var arm_node_MakeMesh = function() { };
$hxClasses["arm.node.MakeMesh"] = arm_node_MakeMesh;
arm_node_MakeMesh.__name__ = "arm.node.MakeMesh";
arm_node_MakeMesh.run = function(data) {
	var context_id = "mesh";
	var con_mesh = data.add_context({ name : context_id, depth_write : true, compare_mode : "less", cull_mode : arm_Context.cullBackfaces ? "clockwise" : "none", vertex_elements : [{ name : "pos", data : "short4norm"},{ name : "nor", data : "short2norm"},{ name : "tex", data : "short2norm"}]});
	var vert = con_mesh.make_vert();
	var frag = con_mesh.make_frag();
	frag.ins = vert.outs;
	vert.add_out("vec2 texCoord");
	frag.wvpposition = true;
	vert.add_out("vec4 prevwvpposition");
	vert.add_uniform("mat4 VP","_viewProjectionMatrix");
	vert.add_uniform("mat4 prevWVP","_prevWorldViewProjectionMatrix");
	vert.wposition = true;
	if(arm_node_MaterialBuilder.heightUsed) {
		var sc = arm_Context.mainObject().transform.scale.x;
		var displaceStrength = arm_Context.displaceStrength * 0.02 * sc;
		vert.n = true;
		vert.write("float height = 0.0;");
		var numLayers = 0;
		var _g = 0;
		var _g1 = arm_Project.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.isVisible() || !l.paintHeight || l.getChildren() != null) {
				continue;
			}
			if(numLayers > 16) {
				break;
			}
			++numLayers;
			vert.add_uniform("sampler2D texpaint_pack_vert" + l.id,"_texpaint_pack_vert" + l.id);
			vert.write("height += textureLod(texpaint_pack_vert" + l.id + ", tex, 0.0).a;");
			if(l.texpaint_mask != null) {
				vert.add_uniform("sampler2D texpaint_mask_vert" + l.id,"_texpaint_mask_vert" + l.id);
				vert.write("height *= textureLod(texpaint_mask_vert" + l.id + ", tex, 0.0).r;");
			}
		}
		vert.write("wposition += wnormal * vec3(height, height, height) * vec3(" + displaceStrength + ", " + displaceStrength + ", " + displaceStrength + ");");
	}
	vert.write("gl_Position = mul(vec4(wposition.xyz, 1.0), VP);");
	vert.write("texCoord = tex;");
	if(arm_node_MaterialBuilder.heightUsed) {
		vert.add_uniform("mat4 invW","_inverseWorldMatrix");
		vert.write("prevwvpposition = mul(mul(vec4(wposition, 1.0), invW), prevWVP);");
	} else {
		vert.write("prevwvpposition = mul(vec4(pos.xyz, 1.0), prevWVP);");
	}
	frag.add_out("vec4 fragColor[3]");
	frag.n = true;
	frag.add_function(arm_node_MaterialFunctions.str_packFloatInt16);
	frag.add_function(arm_node_MaterialFunctions.str_packFloat2);
	if(arm_Context.tool == 9) {
		frag.add_uniform("sampler2D texcolorid","_texcolorid");
		frag.write("fragColor[0] = vec4(n.xy, 1.0, packFloatInt16(0.0, uint(0)));");
		frag.write("vec3 idcol = pow(textureLod(texcolorid, texCoord, 0.0).rgb, vec3(2.2, 2.2, 2.2));");
		frag.write("fragColor[1] = vec4(idcol.rgb, packFloat2(1.0, 1.0));");
	} else {
		frag.add_function(arm_node_MaterialFunctions.str_octahedronWrap);
		frag.write("vec3 basecol;");
		frag.write("float roughness;");
		frag.write("float metallic;");
		frag.write("float occlusion;");
		frag.write("float opacity;");
		frag.write("float matid = 0.0;");
		frag.vVec = true;
		frag.add_function(arm_node_MaterialFunctions.str_cotangentFrame);
		frag.write("mat3 TBN = cotangentFrame(n, vVec, texCoord);");
		if(arm_Project.layers[0].isVisible()) {
			var l1 = arm_Project.layers[0];
			if(l1.objectMask > 0) {
				var uid = arm_Project.paintObjects[l1.objectMask - 1].uid;
				frag.add_uniform("int objectId","_uid");
				frag.write("if (" + uid + " == objectId) {");
			}
			if(l1.paintBase) {
				frag.add_shared_sampler("sampler2D texpaint");
				frag.write("vec4 texpaint_sample = textureLodShared(texpaint, texCoord, 0.0);");
			} else {
				frag.write("vec4 texpaint_sample = vec4(0.0, 0.0, 0.0, 1.0);");
			}
			frag.write("basecol = texpaint_sample.rgb * texpaint_sample.a;");
			if(l1.texpaint_mask != null) {
				frag.add_shared_sampler("sampler2D texpaint_mask");
				frag.write("float maskTexture = textureLodShared(texpaint_mask, texCoord, 0.0).r;");
			}
			if(l1.paintNor || arm_node_MaterialBuilder.emisUsed) {
				frag.add_shared_sampler("sampler2D texpaint_nor");
				frag.write("vec4 texpaint_nor_sample = textureLodShared(texpaint_nor, texCoord, 0.0);");
				if(arm_node_MaterialBuilder.emisUsed) {
					frag.write("matid = texpaint_nor_sample.a;");
				}
				if(l1.paintNor) {
					frag.write("vec3 ntex = texpaint_nor_sample.rgb;");
					frag.write("n = ntex * 2.0 - 1.0;");
					frag.write("n.y = -n.y;");
					if(l1.texpaint_mask != null) {
						frag.write("n.xy *= maskTexture;");
					}
					frag.write("n = normalize(mul(n, TBN));");
				}
			}
			if(l1.paintHeight && arm_node_MaterialBuilder.heightUsed || l1.paintOcc || l1.paintRough || l1.paintMet) {
				frag.add_shared_sampler("sampler2D texpaint_pack");
				frag.write("vec4 pack = textureLodShared(texpaint_pack, texCoord, 0.0);");
			}
			if(l1.paintHeight && arm_node_MaterialBuilder.heightUsed) {
				var sc1 = arm_Context.mainObject().transform.scale.x;
				var ds = arm_Context.displaceStrength * 0.02 * sc1 * 5;
				if(ds < 0.1) {
					ds = 0.1;
				} else if(ds > 2.0) {
					ds = 2.0;
				}
				frag.wposition = true;
				frag.write("vec3 dpdx = dFdx(wposition);");
				frag.write("vec3 dpdy = dFdy(wposition);");
				frag.write("float height_sample = pack.a;");
				if(l1.texpaint_mask != null) {
					frag.write("height_sample *= maskTexture;");
				}
				frag.write("float dhdx = dFdx(height_sample * " + ds + ");");
				frag.write("float dhdy = dFdy(height_sample * " + ds + ");");
				frag.write("vec3 cross_x = cross(n, dpdx);");
				frag.write("vec3 cross_y = cross(dpdy, n);");
				frag.write("vec3 ngrad = (cross_y * dhdx + cross_x * dhdy) / dot(dpdx, cross_y);");
				frag.write("n = normalize(n - ngrad);");
			}
			if(l1.paintOcc) {
				frag.write("occlusion = pack.r;");
			} else {
				frag.write("occlusion = 1.0;");
			}
			if(l1.paintRough) {
				frag.write("roughness = pack.g;");
			} else {
				frag.write("roughness = 1.0;");
			}
			if(l1.paintMet) {
				frag.write("metallic = pack.b;");
			} else {
				frag.write("metallic = 0.0;");
			}
			if(l1.texpaint_mask != null) {
				frag.write("basecol *= maskTexture;");
				frag.write("occlusion *= maskTexture;");
				frag.write("roughness *= maskTexture;");
				frag.write("metallic *= maskTexture;");
			}
			if(l1.maskOpacity < 1) {
				frag.write("basecol *= " + l1.maskOpacity + ";");
				frag.write("occlusion *= " + l1.maskOpacity + ";");
				frag.write("roughness *= " + l1.maskOpacity + ";");
				frag.write("metallic *= " + l1.maskOpacity + ";");
			}
			if(l1.objectMask > 0) {
				frag.write("}");
				frag.write("else {");
				frag.write("basecol = vec3(0.0, 0.0, 0.0);");
				frag.write("occlusion = 1.0;");
				frag.write("roughness = 0.0;");
				frag.write("metallic = 0.0;");
				frag.write("}");
			}
		} else {
			frag.write("basecol = vec3(0.0, 0.0, 0.0);");
			frag.write("occlusion = 1.0;");
			frag.write("roughness = 0.0;");
			frag.write("metallic = 0.0;");
		}
		if(arm_Project.layers.length > 1) {
			frag.write("float factor0;");
			frag.write("vec4 col_tex0;");
			frag.write("vec4 col_nor0;");
			frag.write("vec4 col_pack0;");
			frag.write("vec3 n0;");
			var len = arm_Project.layers.length;
			var start = len - 1;
			var maxLayers = arm_node_MakeMesh.getMaxVisibleLayers();
			var count = 1;
			var _g2 = 1;
			var _g11 = len;
			while(_g2 < _g11) {
				var i = _g2++;
				if(start == 1) {
					break;
				}
				--start;
				var l2 = arm_Project.layers[len - i];
				if(l2.isVisible() && l2.getChildren() == null) {
					++count;
					if(count >= maxLayers) {
						break;
					}
				}
			}
			var _g21 = start;
			var _g3 = len;
			while(_g21 < _g3) {
				var i1 = _g21++;
				var l3 = arm_Project.layers[i1];
				if(!l3.isVisible() || l3.getChildren() != null) {
					continue;
				}
				var id = l3.id;
				if(l3.objectMask > 0) {
					var uid1 = arm_Project.paintObjects[l3.objectMask - 1].uid;
					frag.add_uniform("int objectId","_uid");
					frag.write("if (" + uid1 + " == objectId) {");
				}
				frag.add_shared_sampler("sampler2D texpaint" + id);
				frag.write("col_tex0 = textureLodShared(texpaint" + id + ", texCoord, 0.0);");
				frag.write("factor0 = col_tex0.a;");
				if(l3.texpaint_mask != null) {
					frag.add_shared_sampler("sampler2D texpaint_mask" + id);
					frag.write("factor0 *= textureLodShared(texpaint_mask" + id + ", texCoord, 0.0).r;");
				}
				if(l3.maskOpacity < 1) {
					frag.write("factor0 *= " + l3.maskOpacity + ";");
				}
				if(l3.paintBase) {
					frag.write("basecol = " + arm_node_MaterialBuilder.blendMode(frag,l3.blending,"basecol","col_tex0.rgb","factor0") + ";");
				}
				if(arm_node_MaterialBuilder.emisUsed || l3.paintNor) {
					frag.add_shared_sampler("sampler2D texpaint_nor" + id);
					frag.write("col_nor0 = textureLodShared(texpaint_nor" + id + ", texCoord, 0.0);");
					if(arm_node_MaterialBuilder.emisUsed) {
						frag.write("matid = col_nor0.a;");
					}
					if(l3.paintNor) {
						frag.write("n0 = col_nor0.rgb * 2.0 - 1.0;");
						frag.write("n0.y = -n0.y;");
						frag.write("n0 = normalize(mul(n0, TBN));");
						frag.write("n = normalize(mix(n, n0, factor0));");
					}
				}
				if(l3.paintOcc || l3.paintRough || l3.paintMet) {
					frag.add_shared_sampler("sampler2D texpaint_pack" + id);
					frag.write("col_pack0 = textureLodShared(texpaint_pack" + id + ", texCoord, 0.0);");
					if(l3.paintOcc) {
						frag.write("occlusion = mix(occlusion, col_pack0.r, factor0);");
					}
					if(l3.paintRough) {
						frag.write("roughness = mix(roughness, col_pack0.g, factor0);");
					}
					if(l3.paintMet) {
						frag.write("metallic = mix(metallic, col_pack0.b, factor0);");
					}
				}
				if(l3.objectMask > 0) {
					frag.write("}");
				}
			}
		}
		if(arm_Context.drawTexels) {
			frag.add_uniform("float texpaintSize","_texpaintSize");
			frag.write("vec2 texel = texCoord * texpaintSize;");
			frag.write("basecol *= max(float(mod(int(texel.x), 2.0) == mod(int(texel.y), 2.0)), 0.9);");
		}
		if(arm_Context.drawWireframe) {
			frag.add_uniform("sampler2D texuvmap","_texuvmap");
			frag.write("basecol *= 1.0 - textureLod(texuvmap, texCoord, 0.0).r;");
		}
		frag.write("n /= (abs(n.x) + abs(n.y) + abs(n.z));");
		frag.write("n.xy = n.z >= 0.0 ? n.xy : octahedronWrap(n.xy);");
		frag.write("basecol = pow(basecol, vec3(2.2, 2.2, 2.2));");
		frag.write("fragColor[0] = vec4(n.xy, roughness, packFloatInt16(metallic, uint(matid)));");
		var deferred = arm_Context.viewportMode == 0 || arm_Context.viewportMode == 12;
		if(deferred) {
			if(arm_node_MaterialBuilder.emisUsed) {
				frag.write("if (matid == 1.0) basecol *= 10.0;");
			}
			frag.write("fragColor[1] = vec4(basecol, packFloat2(occlusion, 1.0));");
		} else if(arm_Context.viewportMode == 1) {
			frag.write("fragColor[1] = vec4(basecol, 1.0);");
		} else if(arm_Context.viewportMode == 2) {
			frag.write("fragColor[1] = vec4(ntex.rgb, 1.0);");
		} else if(arm_Context.viewportMode == 3) {
			frag.write("fragColor[1] = vec4(vec3(occlusion, occlusion, occlusion), 1.0);");
		} else if(arm_Context.viewportMode == 4) {
			frag.write("fragColor[1] = vec4(vec3(roughness, roughness, roughness), 1.0);");
		} else if(arm_Context.viewportMode == 5) {
			frag.write("fragColor[1] = vec4(vec3(metallic, metallic, metallic), 1.0);");
		} else if(arm_Context.viewportMode == 6) {
			frag.write("fragColor[1] = vec4(vec3(texpaint_sample.a, texpaint_sample.a, texpaint_sample.a), 1.0);");
		} else if(arm_Context.viewportMode == 7) {
			frag.write("fragColor[1] = vec4(texCoord, 0.0, 1.0);");
		} else if(arm_Context.viewportMode == 8) {
			frag.nAttr = true;
			frag.write("fragColor[1] = vec4(nAttr, 1.0);");
		} else if(arm_Context.viewportMode == 9) {
			frag.write("float sample_matid = textureLodShared(texpaint_nor, texCoord, 0.0).a + 1.0 / 255.0;");
			frag.write("float matid_r = fract(sin(dot(vec2(sample_matid, sample_matid * 20.0), vec2(12.9898, 78.233))) * 43758.5453);");
			frag.write("float matid_g = fract(sin(dot(vec2(sample_matid * 20.0, sample_matid), vec2(12.9898, 78.233))) * 43758.5453);");
			frag.write("float matid_b = fract(sin(dot(vec2(sample_matid, sample_matid * 40.0), vec2(12.9898, 78.233))) * 43758.5453);");
			frag.write("fragColor[1] = vec4(matid_r, matid_g, matid_b, 1.0);");
		} else if(arm_Context.viewportMode == 10) {
			frag.add_uniform("float objectId","_objectId");
			frag.write("float obid = objectId + 1.0 / 255.0;");
			frag.write("float id_r = fract(sin(dot(vec2(obid, obid * 20.0), vec2(12.9898, 78.233))) * 43758.5453);");
			frag.write("float id_g = fract(sin(dot(vec2(obid * 20.0, obid), vec2(12.9898, 78.233))) * 43758.5453);");
			frag.write("float id_b = fract(sin(dot(vec2(obid, obid * 40.0), vec2(12.9898, 78.233))) * 43758.5453);");
			frag.write("fragColor[1] = vec4(id_r, id_g, id_b, 1.0);");
		} else if(arm_Context.viewportMode == 11) {
			frag.write("float sample_mask = 1.0;");
			if(arm_Context.layer.texpaint_mask != null) {
				frag.add_uniform("sampler2D texpaint_mask_view","_texpaint_mask");
				frag.write("sample_mask = textureLod(texpaint_mask_view, texCoord, 0.0).r;");
			}
			frag.write("fragColor[1] = vec4(sample_mask, sample_mask, sample_mask, 1.0);");
		}
	}
	frag.write("vec2 posa = (wvpposition.xy / wvpposition.w) * 0.5 + 0.5;");
	frag.write("vec2 posb = (prevwvpposition.xy / prevwvpposition.w) * 0.5 + 0.5;");
	frag.write("fragColor[2] = vec4(posa - posb, texCoord.xy);");
	arm_node_Material.finalize(con_mesh);
	con_mesh.data.shader_from_source = true;
	con_mesh.data.vertex_shader = vert.get();
	con_mesh.data.fragment_shader = frag.get();
	return con_mesh;
};
arm_node_MakeMesh.getMaxVisibleLayers = function() {
	return 31;
};
var arm_node_MakeMeshPreview = function() { };
$hxClasses["arm.node.MakeMeshPreview"] = arm_node_MakeMeshPreview;
arm_node_MakeMeshPreview.__name__ = "arm.node.MakeMeshPreview";
arm_node_MakeMeshPreview.run = function(data,matcon) {
	var isScene = arm_ui_UIHeader.inst.worktab.position == 1;
	var context_id = "mesh";
	var con_mesh = data.add_context({ name : context_id, depth_write : true, compare_mode : "less", cull_mode : arm_Context.cullBackfaces || !isScene ? "clockwise" : "none", vertex_elements : [{ name : "pos", data : "short4norm"},{ name : "nor", data : "short2norm"},{ name : "tex", data : "short2norm"}]});
	var vert = con_mesh.make_vert();
	var frag = con_mesh.make_frag();
	frag.ins = vert.outs;
	var pos = "pos";
	vert.add_uniform("mat4 WVP","_worldViewProjectionMatrix");
	vert.write_attrib("gl_Position = mul(vec4(" + pos + ".xyz, 1.0), WVP);");
	vert.add_out("vec2 texCoord");
	vert.write_attrib("texCoord = tex;");
	if(arm_node_MaterialBuilder.heightUsed) {
		frag.bposition = true;
	}
	arm_node_Material.parse_height = arm_node_MaterialBuilder.heightUsed;
	var sout = arm_node_Material.parse(arm_ui_UINodes.inst.getCanvasMaterial(),con_mesh,vert,frag,null,null,null,matcon);
	arm_node_Material.parse_height = false;
	var base = sout.out_basecol;
	var rough = sout.out_roughness;
	var met = sout.out_metallic;
	var occ = sout.out_occlusion;
	var opac = sout.out_opacity;
	var nortan = arm_node_Material.out_normaltan;
	frag.write("vec3 basecol = pow(" + base + ", vec3(2.2, 2.2, 2.2));");
	frag.write("float roughness = " + rough + ";");
	frag.write("float metallic = " + met + ";");
	frag.write("float occlusion = " + occ + ";");
	frag.write("float opacity = " + opac + ";");
	frag.write("vec3 nortan = " + nortan + ";");
	var decal = arm_Context.decalPreview;
	if(decal) {
		if(arm_Context.tool == 4) {
			frag.add_uniform("sampler2D textexttool","_textexttool");
			frag.write("opacity *= textureLod(textexttool, texCoord, 0.0).r;");
		}
	}
	if(decal || isScene) {
		var opac1 = isScene ? arm_node_MakeMeshPreview.opacityDiscardScene : arm_node_MakeMeshPreview.opacityDiscardDecal;
		frag.write("if (opacity < " + opac1 + ") discard;");
	}
	frag.add_out("vec4 fragColor[3]");
	frag.n = true;
	frag.add_function(arm_node_MaterialFunctions.str_packFloatInt16);
	frag.add_function(arm_node_MaterialFunctions.str_packFloat2);
	frag.add_function(arm_node_MaterialFunctions.str_cotangentFrame);
	frag.add_function(arm_node_MaterialFunctions.str_octahedronWrap);
	if(!decal) {
		frag.vVec = true;
		frag.write("mat3 TBN = cotangentFrame(n, vVec, texCoord);");
		frag.write("n = nortan * 2.0 - 1.0;");
		frag.write("n.y = -n.y;");
		frag.write("n = normalize(mul(n, TBN));");
	}
	frag.write("n /= (abs(n.x) + abs(n.y) + abs(n.z));");
	frag.write("n.xy = n.z >= 0.0 ? n.xy : octahedronWrap(n.xy);");
	frag.write("fragColor[0] = vec4(n.x, n.y, roughness, packFloatInt16(metallic, uint(0)));");
	frag.write("fragColor[1] = vec4(basecol.r, basecol.g, basecol.b, packFloat2(occlusion, 1.0));");
	frag.write("fragColor[2] = vec4(0.0, 0.0, 0.0, 0.0);");
	arm_node_Material.finalize(con_mesh);
	con_mesh.data.shader_from_source = true;
	con_mesh.data.vertex_shader = vert.get();
	con_mesh.data.fragment_shader = frag.get();
	return con_mesh;
};
var arm_node_MakePaint = function() { };
$hxClasses["arm.node.MakePaint"] = arm_node_MakePaint;
arm_node_MakePaint.__name__ = "arm.node.MakePaint";
arm_node_MakePaint.run = function(data,matcon) {
	var layered = arm_Context.layer != arm_Project.layers[0];
	var eraser = arm_Context.tool == 1;
	var context_id = "paint";
	var con_paint = data.add_context({ name : context_id, depth_write : false, compare_mode : "always", cull_mode : "none", vertex_elements : [{ name : "pos", data : "short4norm"},{ name : "nor", data : "short2norm"},{ name : "tex", data : "short2norm"}]});
	con_paint.data.color_writes_red = [true,true,true,true];
	con_paint.data.color_writes_green = [true,true,true,true];
	con_paint.data.color_writes_blue = [true,true,true,true];
	con_paint.data.color_writes_alpha = [true,true,true,true];
	con_paint.allow_vcols = arm_Context.paintObject.data.geom.cols != null;
	var vert = con_paint.make_vert();
	var frag = con_paint.make_frag();
	frag.ins = vert.outs;
	if(arm_Context.tool == 8) {
		arm_node_MakeBake.setColorWrites(con_paint);
	}
	if(arm_Context.tool == 9 || arm_Context.tool == 10) {
		arm_node_MakeColorIdPicker.run(vert,frag);
		con_paint.data.shader_from_source = true;
		con_paint.data.vertex_shader = vert.get();
		con_paint.data.fragment_shader = frag.get();
		return con_paint;
	}
	var faceFill = arm_Context.tool == 2 && arm_Context.fillTypeHandle.position == 1;
	var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
	if(!faceFill && !decal) {
		vert.add_uniform("vec2 sub","_sub");
		vert.write("vec2 subtex = tex + sub;");
	} else {
		vert.write("vec2 subtex = tex;");
	}
	vert.write("vec2 tpos = vec2(subtex.x * 2.0 - 1.0, (1.0 - subtex.y) * 2.0 - 1.0);");
	vert.write("gl_Position = vec4(tpos, 0.0, 1.0);");
	vert.add_uniform("mat4 WVP","_worldViewProjectionMatrix");
	vert.add_out("vec4 ndc");
	vert.write_attrib("ndc = mul(vec4(pos.xyz, 1.0), WVP);");
	frag.write_attrib("vec3 sp = vec3((ndc.xyz / ndc.w) * 0.5 + 0.5);");
	frag.write_attrib("sp.y = 1.0 - sp.y;");
	frag.write_attrib("sp.z -= 0.0001;");
	var uvType = arm_Context.layer.material_mask != null ? arm_Context.layer.uvType : arm_Context.brushPaint;
	if(uvType == 2) {
		frag.ndcpos = true;
	}
	frag.add_uniform("vec4 inp","_inputBrush");
	frag.add_uniform("vec4 inplast","_inputBrushLast");
	frag.add_uniform("float aspectRatio","_aspectRatioWindowF");
	frag.write("vec2 bsp = sp.xy * 2.0 - 1.0;");
	frag.write("bsp.x *= aspectRatio;");
	frag.write("bsp = bsp * 0.5 + 0.5;");
	frag.add_uniform("sampler2D gbufferD");
	frag.add_out("vec4 fragColor[4]");
	frag.add_uniform("float brushRadius","_brushRadius");
	frag.add_uniform("float brushOpacity","_brushOpacity");
	frag.add_uniform("float brushHardness","_brushHardness");
	if(arm_Context.tool == 0 || arm_Context.tool == 1 || arm_Context.tool == 5 || arm_Context.tool == 6 || arm_Context.tool == 7 || decal) {
		var depthReject = !arm_Context.xray;
		if(arm_Config.raw.brush_3d && !arm_Context.brushDepthReject) {
			depthReject = false;
		}
		if(arm_Config.raw.brush_3d && !decal && arm_node_MaterialBuilder.heightUsed) {
			depthReject = false;
		}
		if(depthReject) {
			frag.write("if (sp.z > textureLod(gbufferD, sp.xy, 0.0).r) discard;");
		}
		arm_node_MakeBrush.run(vert,frag);
	} else {
		frag.write("float dist = 0.0;");
		var angleFill = arm_Context.tool == 2 && arm_Context.fillTypeHandle.position == 2;
		if(angleFill) {
			frag.add_function(arm_node_MaterialFunctions.str_octahedronWrap);
			frag.add_uniform("sampler2D gbuffer0");
			frag.write("vec2 g0 = textureLod(gbuffer0, inp.xy, 0.0).rg;");
			frag.write("vec3 wn;");
			frag.write("wn.z = 1.0 - abs(g0.x) - abs(g0.y);");
			frag.write("wn.xy = wn.z >= 0.0 ? g0.xy : octahedronWrap(g0.xy);");
			frag.write("wn = normalize(wn);");
			frag.n = true;
			var angle = arm_Context.brushAngleRejectDot;
			frag.write("if (dot(wn, n) < " + angle + ") discard;");
		}
	}
	if(arm_Context.colorIdPicked) {
		arm_node_MakeDiscard.colorId(vert,frag);
	} else if(faceFill) {
		arm_node_MakeDiscard.face(vert,frag);
	}
	if(arm_Context.pickerMaskHandle.position == 1) {
		arm_node_MakeDiscard.materialId(vert,frag);
	}
	arm_node_MakeTexcoord.run(vert,frag);
	if(arm_Context.tool == 5 || arm_Context.tool == 6) {
		frag.add_uniform("sampler2D gbuffer2");
		frag.add_uniform("vec2 gbufferSize","_gbufferSize");
		frag.add_uniform("sampler2D texpaint_undo","_texpaint_undo");
		frag.add_uniform("sampler2D texpaint_nor_undo","_texpaint_nor_undo");
		frag.add_uniform("sampler2D texpaint_pack_undo","_texpaint_pack_undo");
		if(arm_Context.tool == 5) {
			arm_node_MakeClone.run(vert,frag);
		} else {
			arm_node_MakeBlur.run(vert,frag);
		}
	} else {
		arm_node_Material.parse_emission = arm_Context.material.paintEmis;
		arm_node_Material.parse_subsurface = arm_Context.material.paintSubs;
		arm_node_Material.parse_height = arm_Context.material.paintHeight;
		arm_node_Material.parse_height_as_channel = true;
		var uvType1 = arm_Context.layer.material_mask != null ? arm_Context.layer.uvType : arm_Context.brushPaint;
		arm_node_Material.triplanar = uvType1 == 1 && !decal;
		var sout = arm_node_Material.parse(arm_ui_UINodes.inst.getCanvasMaterial(),con_paint,vert,frag,null,null,null,matcon);
		arm_node_Material.parse_emission = false;
		arm_node_Material.parse_subsurface = false;
		arm_node_Material.parse_height_as_channel = false;
		arm_node_Material.parse_height = false;
		var base = sout.out_basecol;
		var rough = sout.out_roughness;
		var met = sout.out_metallic;
		var occ = sout.out_occlusion;
		var nortan = arm_node_Material.out_normaltan;
		var height = sout.out_height;
		var opac = sout.out_opacity;
		var emis = sout.out_emission;
		var subs = sout.out_subsurface;
		frag.write("vec3 basecol = " + base + ";");
		frag.write("float roughness = " + rough + ";");
		frag.write("float metallic = " + met + ";");
		frag.write("float occlusion = " + occ + ";");
		frag.write("vec3 nortan = " + nortan + ";");
		frag.write("float height = " + height + ";");
		frag.write("float mat_opacity = " + opac + ";");
		frag.write("float opacity = mat_opacity;");
		if(arm_Context.layer.material_mask == null) {
			frag.write("opacity *= brushOpacity;");
		}
		if(arm_Context.material.paintEmis) {
			frag.write("float emis = " + emis + ";");
		}
		if(arm_Context.material.paintSubs) {
			frag.write("float subs = " + subs + ";");
		}
		if(height != "0" && !arm_node_MaterialBuilder.heightUsed) {
			arm_node_MaterialBuilder.heightUsed = true;
			return arm_node_MakePaint.run(data,matcon);
		}
		if(emis != "0") {
			arm_node_MaterialBuilder.emisUsed = true;
		}
		if(subs != "0") {
			arm_node_MaterialBuilder.subsUsed = true;
		}
	}
	if(arm_Context.brushMaskImage != null && arm_Context.tool == 3) {
		frag.add_uniform("sampler2D texbrushmask","_texbrushmask");
		frag.write("vec4 mask_sample = textureLod(texbrushmask, uvsp, 0.0);");
		frag.write("opacity *= mask_sample.r * mask_sample.a;");
	} else if(arm_Context.tool == 4) {
		frag.add_uniform("sampler2D textexttool","_textexttool");
		frag.write("opacity *= textureLod(textexttool, uvsp, 0.0).r;");
	}
	if(arm_Context.brushStencilImage != null && (arm_Context.tool == 0 || arm_Context.tool == 1 || arm_Context.tool == 2 || arm_Context.tool == 5 || arm_Context.tool == 6 || arm_Context.tool == 7 || decal)) {
		frag.add_uniform("sampler2D texbrushstencil","_texbrushstencil");
		frag.add_uniform("vec4 stencilTransform","_stencilTransform");
		frag.write("vec2 stencil_uv = vec2((sp.xy - stencilTransform.xy) / stencilTransform.z * vec2(aspectRatio, 1.0));");
		frag.write("stencil_uv -= vec2(0.5, 0.5);");
		frag.write("stencil_uv = vec2(stencil_uv.x * cos(stencilTransform.w) - stencil_uv.y * sin(stencilTransform.w), stencil_uv.x * sin(stencilTransform.w) + stencil_uv.y * cos(stencilTransform.w));");
		frag.write("stencil_uv += vec2(0.5, 0.5);");
		frag.write("if (stencil_uv.x < 0 || stencil_uv.x > 1 || stencil_uv.y < 0 || stencil_uv.y > 1) discard;");
		frag.write("vec4 texbrushstencil_sample = textureLod(texbrushstencil, stencil_uv, 0.0);");
		frag.write("opacity *= texbrushstencil_sample.r * texbrushstencil_sample.a;");
	}
	if(arm_Context.brushMaskImage != null && (arm_Context.tool == 0 || arm_Context.tool == 1)) {
		frag.add_uniform("sampler2D texbrushmask","_texbrushmask");
		frag.write("vec2 binp_mask = inp.xy * 2.0 - 1.0;");
		frag.write("binp_mask.x *= aspectRatio;");
		frag.write("binp_mask = binp_mask * 0.5 + 0.5;");
		frag.write("vec2 pa_mask = bsp.xy - binp_mask.xy;");
		if(arm_Context.brushDirectional) {
			frag.add_uniform("vec3 brushDirection","_brushDirection");
			frag.write("if (brushDirection.z == 0.0) discard;");
			frag.write("pa_mask = vec2(pa_mask.x * brushDirection.x - pa_mask.y * brushDirection.y, pa_mask.x * brushDirection.y + pa_mask.y * brushDirection.x);");
		}
		var angle1 = arm_Context.brushAngle + arm_Context.brushNodesAngle;
		if(angle1 != 0.0) {
			frag.add_uniform("vec2 brushAngle","_brushAngle");
			frag.write("pa_mask.xy = vec2(pa_mask.x * brushAngle.x - pa_mask.y * brushAngle.y, pa_mask.x * brushAngle.y + pa_mask.y * brushAngle.x);");
		}
		frag.write("pa_mask /= brushRadius;");
		if(arm_Config.raw.brush_3d) {
			frag.add_uniform("vec3 eye","_cameraPosition");
			frag.write("pa_mask *= distance(eye, winp.xyz) / 1.5;");
		}
		frag.write("pa_mask = pa_mask.xy * 0.5 + 0.5;");
		frag.write("vec4 mask_sample = textureLod(texbrushmask, pa_mask, 0.0);");
		frag.write("opacity *= mask_sample.r * mask_sample.a;");
	}
	if(arm_Context.tool == 7) {
		frag.add_uniform("sampler2D texparticle","_texparticle");
		frag.write("float str = textureLod(texparticle, sp.xy, 0.0).r;");
	} else {
		frag.write("float str = clamp((brushRadius - dist) * brushHardness * 400.0, 0.0, 1.0) * opacity;");
	}
	frag.wvpposition = true;
	frag.write("vec2 sample_tc = vec2(wvpposition.x / wvpposition.w, wvpposition.y / wvpposition.w) * 0.5 + 0.5;");
	frag.write("sample_tc.y = 1.0 - sample_tc.y;");
	frag.add_uniform("sampler2D paintmask");
	frag.write("float sample_mask = textureLod(paintmask, sample_tc, 0.0).r;");
	frag.write("str = max(str, sample_mask);");
	frag.add_uniform("sampler2D texpaint_undo","_texpaint_undo");
	frag.write("vec4 sample_undo = textureLod(texpaint_undo, sample_tc, 0.0);");
	var matid = arm_Context.material.id / 255;
	if(arm_Context.pickerMaskHandle.position == 1) {
		matid = arm_Context.materialIdPicked / 255;
	}
	var matidString = "" + matid;
	frag.write("float matid = " + matidString + ";");
	if(arm_Context.material.paintSubs) {
		frag.write("if (subs > 0.0) { matid = float(254) / float(255); }");
	}
	if(arm_Context.material.paintEmis) {
		frag.write("if (emis > 0.0) { matid = float(255) / float(255); }");
	}
	if(layered) {
		if(eraser) {
			frag.write("fragColor[0] = vec4(mix(sample_undo.rgb, vec3(0.0, 0.0, 0.0), str), sample_undo.a - str);");
			frag.write("nortan = vec3(0.5, 0.5, 1.0);");
			frag.write("occlusion = 1.0;");
			frag.write("roughness = 0.0;");
			frag.write("metallic = 0.0;");
			frag.write("matid = 0.0;");
		} else if(decal || arm_Context.brushMaskImage != null) {
			frag.write("fragColor[0] = vec4(" + arm_node_MaterialBuilder.blendMode(frag,arm_Context.brushBlending,"sample_undo.rgb","basecol","str") + ", max(str, sample_undo.a));");
		} else {
			frag.write("fragColor[0] = vec4(" + arm_node_MaterialBuilder.blendMode(frag,arm_Context.brushBlending,"sample_undo.rgb","basecol","opacity") + ", max(str, sample_undo.a));");
		}
		frag.write("fragColor[1] = vec4(nortan, matid);");
		var height1 = "0.0";
		if(arm_Context.material.paintHeight && arm_node_MaterialBuilder.heightUsed) {
			height1 = "height";
		}
		if(decal) {
			frag.add_uniform("sampler2D texpaint_pack_undo","_texpaint_pack_undo");
			frag.write("vec4 sample_pack_undo = textureLod(texpaint_pack_undo, sample_tc, 0.0);");
			frag.write("fragColor[2] = mix(sample_pack_undo, vec4(occlusion, roughness, metallic, " + height1 + "), str);");
		} else {
			frag.write("fragColor[2] = vec4(occlusion, roughness, metallic, " + height1 + ");");
		}
	} else if(eraser) {
		frag.write("fragColor[0] = vec4(mix(sample_undo.rgb, vec3(0.0, 0.0, 0.0), str), sample_undo.a - str);");
		frag.write("fragColor[1] = vec4(0.5, 0.5, 1.0, 0.0);");
		frag.write("fragColor[2] = vec4(1.0, 0.0, 0.0, 0.0);");
	} else {
		frag.add_uniform("sampler2D texpaint_nor_undo","_texpaint_nor_undo");
		frag.add_uniform("sampler2D texpaint_pack_undo","_texpaint_pack_undo");
		frag.write("vec4 sample_nor_undo = textureLod(texpaint_nor_undo, sample_tc, 0.0);");
		frag.write("vec4 sample_pack_undo = textureLod(texpaint_pack_undo, sample_tc, 0.0);");
		frag.write("fragColor[0] = vec4(" + arm_node_MaterialBuilder.blendMode(frag,arm_Context.brushBlending,"sample_undo.rgb","basecol","str") + ", max(str, sample_undo.a));");
		frag.write("fragColor[1] = vec4(mix(sample_nor_undo.rgb, nortan, str), matid);");
		if(arm_Context.material.paintHeight && arm_node_MaterialBuilder.heightUsed) {
			frag.write("fragColor[2] = mix(sample_pack_undo, vec4(occlusion, roughness, metallic, height), str);");
		} else {
			frag.write("fragColor[2] = vec4(mix(sample_pack_undo.rgb, vec3(occlusion, roughness, metallic), str), 0.0);");
		}
	}
	frag.write("fragColor[3] = vec4(str, 0.0, 0.0, 1.0);");
	if(!arm_Context.material.paintBase) {
		con_paint.data.color_writes_red[0] = false;
		con_paint.data.color_writes_green[0] = false;
		con_paint.data.color_writes_blue[0] = false;
	}
	if(!arm_Context.material.paintOpac) {
		con_paint.data.color_writes_alpha[0] = false;
	}
	if(!arm_Context.material.paintNor) {
		con_paint.data.color_writes_red[1] = false;
		con_paint.data.color_writes_green[1] = false;
		con_paint.data.color_writes_blue[1] = false;
	}
	if(!arm_Context.material.paintOcc) {
		con_paint.data.color_writes_red[2] = false;
	}
	if(!arm_Context.material.paintRough) {
		con_paint.data.color_writes_green[2] = false;
	}
	if(!arm_Context.material.paintMet) {
		con_paint.data.color_writes_blue[2] = false;
	}
	if(!arm_Context.material.paintHeight) {
		con_paint.data.color_writes_alpha[2] = false;
	}
	var isMask = arm_Context.layerIsMask;
	if(isMask) {
		con_paint.data.color_writes_red[1] = false;
		con_paint.data.color_writes_green[1] = false;
		con_paint.data.color_writes_blue[1] = false;
		con_paint.data.color_writes_red[2] = false;
		con_paint.data.color_writes_green[2] = false;
		con_paint.data.color_writes_blue[2] = false;
		con_paint.data.color_writes_alpha[2] = false;
	}
	if(arm_Context.tool == 8) {
		arm_node_MakeBake.run(con_paint,vert,frag);
	}
	arm_node_Material.finalize(con_paint);
	arm_node_Material.triplanar = false;
	con_paint.data.shader_from_source = true;
	con_paint.data.vertex_shader = vert.get();
	con_paint.data.fragment_shader = frag.get();
	return con_paint;
};
var arm_node_MakeParticle = function() { };
$hxClasses["arm.node.MakeParticle"] = arm_node_MakeParticle;
arm_node_MakeParticle.__name__ = "arm.node.MakeParticle";
arm_node_MakeParticle.run = function(data) {
	var context_id = "mesh";
	var con_part = data.add_context({ name : context_id, depth_write : false, compare_mode : "always", cull_mode : "clockwise", vertex_elements : [{ name : "pos", data : "short4norm"}]});
	var vert = con_part.make_vert();
	var frag = con_part.make_frag();
	frag.ins = vert.outs;
	vert.write_attrib("vec4 spos = vec4(pos.xyz, 1.0);");
	vert.add_uniform("float brushRadius","_brushRadius");
	vert.write_attrib("vec3 emitFrom = vec3(fhash(gl_InstanceID), fhash(gl_InstanceID * 2), fhash(gl_InstanceID * 3));");
	vert.write_attrib("emitFrom = emitFrom * brushRadius - brushRadius / 2.0;");
	vert.write_attrib("spos.xyz += emitFrom * vec3(256.0, 256.0, 256.0);");
	vert.add_uniform("mat4 pd","_particleData");
	var str_tex_hash = "float fhash(int n) { return fract(sin(float(n)) * 43758.5453); }\n";
	vert.add_function(str_tex_hash);
	vert.add_out("float p_age");
	vert.write("p_age = pd[3][3] - float(gl_InstanceID) * pd[0][1];");
	vert.write("p_age -= p_age * fhash(gl_InstanceID) * pd[2][3];");
	vert.write("if (pd[0][0] > 0.0 && p_age < 0.0) p_age += float(int(-p_age / pd[0][0]) + 1) * pd[0][0];");
	vert.add_out("float p_lifetime");
	vert.write("p_lifetime = pd[0][2];");
	vert.write("if (p_age < 0.0 || p_age > p_lifetime) {");
	vert.write("spos /= 0.0;");
	vert.write("}");
	vert.add_out("vec3 p_velocity");
	vert.write("p_velocity = vec3(pd[1][0], pd[1][1], pd[1][2]);");
	vert.write("p_velocity.x += fhash(gl_InstanceID)                     * pd[1][3] - pd[1][3] / 2.0;");
	vert.write("p_velocity.y += fhash(gl_InstanceID +     int(pd[0][3])) * pd[1][3] - pd[1][3] / 2.0;");
	vert.write("p_velocity.z += fhash(gl_InstanceID + 2 * int(pd[0][3])) * pd[1][3] - pd[1][3] / 2.0;");
	vert.write("p_velocity.x += (pd[2][0] * p_age) / 5.0;");
	vert.write("p_velocity.y += (pd[2][1] * p_age) / 5.0;");
	vert.write("p_velocity.z += (pd[2][2] * p_age) / 5.0;");
	vert.add_out("vec3 p_location");
	vert.write("p_location = p_velocity * p_age;");
	vert.write("spos.xyz += p_location;");
	vert.add_uniform("mat4 WVP","_worldViewProjectionMatrix");
	vert.write("gl_Position = mul(spos, WVP);");
	vert.add_uniform("vec4 inp","_inputBrush");
	vert.write("vec2 binp = vec2(inp.x, 1.0 - inp.y);");
	vert.write("binp = binp * 2.0 - 1.0;");
	vert.write("binp *= gl_Position.w;");
	vert.write("gl_Position.xy += binp;");
	vert.add_out("float p_fade");
	vert.write("p_fade = sin(min((p_age / 8.0) * 3.141592, 3.141592));");
	frag.add_out("float fragColor");
	frag.write("fragColor = p_fade;");
	con_part.data.shader_from_source = true;
	con_part.data.vertex_shader = vert.get();
	con_part.data.fragment_shader = frag.get();
	return con_part;
};
var arm_node_MakeTexcoord = function() { };
$hxClasses["arm.node.MakeTexcoord"] = arm_node_MakeTexcoord;
arm_node_MakeTexcoord.__name__ = "arm.node.MakeTexcoord";
arm_node_MakeTexcoord.run = function(vert,frag) {
	var uvType = arm_Context.layer.material_mask != null ? arm_Context.layer.uvType : arm_Context.brushPaint;
	var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
	if(uvType == 2 || decal) {
		frag.add_uniform("float brushScale","_brushScale");
		frag.write_attrib("vec2 uvsp = sp.xy;");
		if(decal) {
			frag.write_attrib("uvsp -= inp.xy;");
			frag.write_attrib("uvsp.x *= aspectRatio;");
			frag.write_attrib("uvsp *= 0.21 / (brushRadius * 0.9);");
			if(arm_Context.brushDirectional) {
				frag.add_uniform("vec3 brushDirection","_brushDirection");
				frag.write_attrib("if (brushDirection.z == 0.0) discard;");
				frag.write_attrib("uvsp = vec2(uvsp.x * brushDirection.x - uvsp.y * brushDirection.y, uvsp.x * brushDirection.y + uvsp.y * brushDirection.x);");
			}
			var angle = arm_Context.brushAngle + arm_Context.brushNodesAngle;
			var uvAngle = arm_Context.layer.material_mask != null ? arm_Context.layer.angle : angle;
			if(uvAngle != 0.0) {
				frag.add_uniform("vec2 brushAngle","_brushAngle");
				frag.write_attrib("uvsp = vec2(uvsp.x * brushAngle.x - uvsp.y * brushAngle.y, uvsp.x * brushAngle.y + uvsp.y * brushAngle.x);");
			}
			frag.add_uniform("float brushScaleX","_brushScaleX");
			frag.write_attrib("uvsp.x *= brushScaleX;");
			frag.write_attrib("uvsp += vec2(0.5, 0.5);");
			frag.write_attrib("if (uvsp.x < 0.0 || uvsp.y < 0.0 || uvsp.x > 1.0 || uvsp.y > 1.0) discard;");
		} else {
			frag.write_attrib("uvsp.x *= aspectRatio;");
		}
		frag.write_attrib("vec2 texCoord = uvsp * brushScale;");
	} else if(uvType == 0) {
		vert.add_uniform("float brushScale","_brushScale");
		vert.add_out("vec2 texCoord");
		vert.write("texCoord = subtex * brushScale;");
		var angle1 = arm_Context.brushAngle + arm_Context.brushNodesAngle;
		var uvAngle1 = arm_Context.layer.material_mask != null ? arm_Context.layer.angle : angle1;
		if(uvAngle1 > 0.0) {
			vert.add_uniform("vec2 brushAngle","_brushAngle");
			vert.write("texCoord = vec2(texCoord.x * brushAngle.x - texCoord.y * brushAngle.y, texCoord.x * brushAngle.y + texCoord.y * brushAngle.x);");
		}
	} else {
		frag.wposition = true;
		frag.n = true;
		frag.add_uniform("float brushScale","_brushScale");
		frag.write_attrib("vec3 triWeight = wnormal * wnormal;");
		frag.write_attrib("float triMax = max(triWeight.x, max(triWeight.y, triWeight.z));");
		frag.write_attrib("triWeight = max(triWeight - triMax * 0.75, 0.0);");
		frag.write_attrib("vec3 texCoordBlend = triWeight * (1.0 / (triWeight.x + triWeight.y + triWeight.z));");
		frag.write_attrib("vec2 texCoord = wposition.yz * brushScale * 0.5;");
		frag.write_attrib("vec2 texCoord1 = wposition.xz * brushScale * 0.5;");
		frag.write_attrib("vec2 texCoord2 = wposition.xy * brushScale * 0.5;");
	}
};
var arm_node_MakeVoxel = function() { };
$hxClasses["arm.node.MakeVoxel"] = arm_node_MakeVoxel;
arm_node_MakeVoxel.__name__ = "arm.node.MakeVoxel";
arm_node_MakeVoxel.run = function(data) {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",6);
	structure.add("nor",5);
	structure.add("tex",5);
	var pipeState = data.pipeState;
	pipeState.inputLayout = [structure];
	data.raw.vertex_elements = [{ name : "pos", data : "short4norm"},{ name : "nor", data : "short2norm"},{ name : "tex", data : "short2norm"}];
	var sc = arm_Context.mainObject().transform.scale.x;
	var ds = arm_Context.displaceStrength * 0.02 * sc;
	var ext = arm_Context.vxaoExt;
	pipeState.vertexShader = kha_graphics4_VertexShader.fromSource("#define vec3 float3\r\n\t\tuniform float4x4 W;\r\n\t\tuniform float3x3 N;\r\n\t\tTexture2D<float4> texpaint_pack;\r\n\t\tSamplerState _texpaint_pack_sampler;\r\n\t\tstruct SPIRV_Cross_Input { float4 pos : TEXCOORD1; float2 nor : TEXCOORD0; float2 tex : TEXCOORD2; };\r\n\t\tstruct SPIRV_Cross_Output { float4 svpos : SV_POSITION; };\r\n\t\tSPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {\r\n\t\t\tSPIRV_Cross_Output stage_output;\r\n\t\t\t" + ("const vec3 voxelgiHalfExtents = vec3(" + ext + ", " + ext + ", " + ext + ");") + "\r\n\t\t\tstage_output.svpos.xyz = mul(float4(stage_input.pos.xyz, 1.0), W).xyz / voxelgiHalfExtents.xxx;\r\n\t\t\tfloat3 wnormal = normalize(mul(float3(stage_input.nor.xy, stage_input.pos.w), N));\r\n\t\t\tfloat height = texpaint_pack.SampleLevel(_texpaint_pack_sampler, stage_input.tex, 0.0).a;\r\n\t\t\tstage_output.svpos.xyz += wnormal * height.xxx * float3(" + ds + "," + ds + "," + ds + ");\r\n\t\t\tstage_output.svpos.w = 1.0;\r\n\t\t\treturn stage_output;\r\n\t\t}");
	pipeState.compile();
	data.raw.constants = [{ name : "W", type : "mat4", link : "_worldMatrix"},{ name : "N", type : "mat3", link : "_normalMatrix"}];
	data.constants = [pipeState.getConstantLocation("W"),pipeState.getConstantLocation("N")];
	data.raw.texture_units = [{ name : "texpaint_pack"},{ name : "voxels", is_image : true}];
	data.textureUnits = [pipeState.getTextureUnit("texpaint_pack"),pipeState.getTextureUnit("voxels")];
};
var arm_node_MaterialBuilder = function() { };
$hxClasses["arm.node.MaterialBuilder"] = arm_node_MaterialBuilder;
arm_node_MaterialBuilder.__name__ = "arm.node.MaterialBuilder";
arm_node_MaterialBuilder.blendMode = function(frag,blending,cola,colb,opac) {
	if(blending == 0) {
		return "mix(" + cola + ", " + colb + ", " + opac + ")";
	} else if(blending == 1) {
		return "mix(" + cola + ", min(" + cola + ", " + colb + "), " + opac + ")";
	} else if(blending == 2) {
		return "mix(" + cola + ", " + cola + " * " + colb + ", " + opac + ")";
	} else if(blending == 3) {
		return "mix(" + cola + ", vec3(1.0, 1.0, 1.0) - (vec3(1.0, 1.0, 1.0) - " + cola + ") / " + colb + ", " + opac + ")";
	} else if(blending == 4) {
		return "max(" + cola + ", " + colb + " * " + opac + ")";
	} else if(blending == 5) {
		return "(vec3(1.0, 1.0, 1.0) - (vec3(1.0 - " + opac + ", 1.0 - " + opac + ", 1.0 - " + opac + ") + " + opac + " * (vec3(1.0, 1.0, 1.0) - " + colb + ")) * (vec3(1.0, 1.0, 1.0) - " + cola + "))";
	} else if(blending == 6) {
		return "mix(" + cola + ", " + cola + " / (vec3(1.0, 1.0, 1.0) - " + colb + "), " + opac + ")";
	} else if(blending == 7) {
		return "mix(" + cola + ", " + cola + " + " + colb + ", " + opac + ")";
	} else if(blending == 8) {
		return "mix(" + cola + ", (" + cola + " < vec3(0.5, 0.5, 0.5) ? vec3(2.0, 2.0, 2.0) * " + cola + " * " + colb + " : vec3(1.0, 1.0, 1.0) - vec3(2.0, 2.0, 2.0) * (vec3(1.0, 1.0, 1.0) - " + colb + ") * (vec3(1.0, 1.0, 1.0) - " + cola + ")), " + opac + ")";
	} else if(blending == 9) {
		return "((1.0 - " + opac + ") * " + cola + " + " + opac + " * ((vec3(1.0, 1.0, 1.0) - " + cola + ") * " + colb + " * " + cola + " + " + cola + " * (vec3(1.0, 1.0, 1.0) - (vec3(1.0, 1.0, 1.0) - " + colb + ") * (vec3(1.0, 1.0, 1.0) - " + cola + "))))";
	} else if(blending == 10) {
		return "(" + cola + " + " + opac + " * (vec3(2.0, 2.0, 2.0) * (" + colb + " - vec3(0.5, 0.5, 0.5))))";
	} else if(blending == 11) {
		return "mix(" + cola + ", abs(" + cola + " - " + colb + "), " + opac + ")";
	} else if(blending == 12) {
		return "mix(" + cola + ", " + cola + " - " + colb + ", " + opac + ")";
	} else if(blending == 13) {
		return "vec3(1.0 - " + opac + ", 1.0 - " + opac + ", 1.0 - " + opac + ") * " + cola + " + vec3(" + opac + ", " + opac + ", " + opac + ") * " + cola + " / " + colb;
	} else if(blending == 14) {
		frag.add_function(arm_node_MaterialFunctions.str_hue_sat);
		return "mix(" + cola + ", hsv_to_rgb(vec3(rgb_to_hsv(" + colb + ").r, rgb_to_hsv(" + cola + ").g, rgb_to_hsv(" + cola + ").b)), " + opac + ")";
	} else if(blending == 15) {
		frag.add_function(arm_node_MaterialFunctions.str_hue_sat);
		return "mix(" + cola + ", hsv_to_rgb(vec3(rgb_to_hsv(" + cola + ").r, rgb_to_hsv(" + colb + ").g, rgb_to_hsv(" + cola + ").b)), " + opac + ")";
	} else if(blending == 16) {
		frag.add_function(arm_node_MaterialFunctions.str_hue_sat);
		return "mix(" + cola + ", hsv_to_rgb(vec3(rgb_to_hsv(" + colb + ").r, rgb_to_hsv(" + colb + ").g, rgb_to_hsv(" + cola + ").b)), " + opac + ")";
	} else {
		frag.add_function(arm_node_MaterialFunctions.str_hue_sat);
		return "mix(" + cola + ", hsv_to_rgb(vec3(rgb_to_hsv(" + cola + ").r, rgb_to_hsv(" + cola + ").g, rgb_to_hsv(" + colb + ").b)), " + opac + ")";
	}
};
var arm_node_MaterialFunctions = function() { };
$hxClasses["arm.node.MaterialFunctions"] = arm_node_MaterialFunctions;
arm_node_MaterialFunctions.__name__ = "arm.node.MaterialFunctions";
var arm_node_MaterialParser = function() { };
$hxClasses["arm.node.MaterialParser"] = arm_node_MaterialParser;
arm_node_MaterialParser.__name__ = "arm.node.MaterialParser";
arm_node_MaterialParser.getMOut = function() {
	var _g = 0;
	var _g1 = arm_ui_UINodes.inst.getCanvasMaterial().nodes;
	while(_g < _g1.length) {
		var n = _g1[_g];
		++_g;
		if(n.type == "OUTPUT_MATERIAL_PBR") {
			return true;
		}
	}
	return false;
};
arm_node_MaterialParser.parseMeshMaterial = function() {
	if(arm_ui_UIHeader.inst.worktab.position == 1) {
		return;
	}
	var m = arm_Project.materials[0].data;
	var scon = null;
	var _g = 0;
	var _g1 = m.shader.contexts;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		if(c.raw.name == "mesh") {
			scon = c;
			break;
		}
	}
	if(scon != null) {
		HxOverrides.remove(m.shader.raw.contexts,scon.raw);
		HxOverrides.remove(m.shader.contexts,scon);
	}
	var con = arm_node_MakeMesh.run(new arm_node_MaterialShaderData({ name : "Material", canvas : null}));
	if(scon != null) {
		scon.delete();
	}
	scon = new iron_data_ShaderContext(con.data,function(scon1) {
	});
	scon.overrideContext = { };
	if(con.frag.sharedSamplers.length > 0) {
		var sampler = con.frag.sharedSamplers[0];
		scon.overrideContext.shared_sampler = HxOverrides.substr(sampler,sampler.lastIndexOf(" ") + 1,null);
	}
	if(!arm_Context.textureFilter) {
		scon.overrideContext.filter = "point";
	}
	m.shader.raw.contexts.push(scon.raw);
	m.shader.contexts.push(scon);
	arm_Context.ddirty = 2;
	arm_node_MaterialParser.makeVoxel(m);
};
arm_node_MaterialParser.parseParticleMaterial = function() {
	var m = arm_Context.particleMaterial;
	var sc = null;
	var _g = 0;
	var _g1 = m.shader.contexts;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		if(c.raw.name == "mesh") {
			sc = c;
			break;
		}
	}
	if(sc != null) {
		HxOverrides.remove(m.shader.raw.contexts,sc.raw);
		HxOverrides.remove(m.shader.contexts,sc);
	}
	var con = arm_node_MakeParticle.run(new arm_node_MaterialShaderData({ name : "MaterialParticle", canvas : null}));
	if(sc != null) {
		sc.delete();
	}
	sc = new iron_data_ShaderContext(con.data,function(sc1) {
	});
	m.shader.raw.contexts.push(sc.raw);
	m.shader.contexts.push(sc);
};
arm_node_MaterialParser.parseMeshPreviewMaterial = function() {
	if(!arm_node_MaterialParser.getMOut()) {
		return;
	}
	var m = arm_ui_UIHeader.inst.worktab.position == 1 ? arm_Context.materialScene.data : arm_Project.materials[0].data;
	var scon = null;
	var _g = 0;
	var _g1 = m.shader.contexts;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		if(c.raw.name == "mesh") {
			scon = c;
			break;
		}
	}
	HxOverrides.remove(m.shader.raw.contexts,scon.raw);
	HxOverrides.remove(m.shader.contexts,scon);
	var mcon = { name : "mesh", bind_textures : []};
	var sd = new arm_node_MaterialShaderData({ name : "Material", canvas : null});
	var con = arm_node_MakeMeshPreview.run(sd,mcon);
	var _g2 = 0;
	var _g3 = m.contexts.length;
	while(_g2 < _g3) {
		var i = _g2++;
		if(m.contexts[i].raw.name == "mesh") {
			m.contexts[i] = new iron_data_MaterialContext(mcon,function(self) {
			});
			break;
		}
	}
	if(scon != null) {
		scon.delete();
	}
	var compileError = false;
	scon = new iron_data_ShaderContext(con.data,function(scon1) {
		if(scon1 == null) {
			compileError = true;
		}
	});
	if(compileError) {
		return;
	}
	m.shader.raw.contexts.push(scon.raw);
	m.shader.contexts.push(scon);
	if(arm_ui_UIHeader.inst.worktab.position == 1) {
		arm_node_MaterialParser.makeVoxel(m);
	}
};
arm_node_MaterialParser.makeVoxel = function(m) {
	var rebuild = arm_node_MaterialBuilder.heightUsed;
	if(arm_Config.raw.rp_gi != false && rebuild) {
		var scon = null;
		var _g = 0;
		var _g1 = m.shader.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.raw.name == "voxel") {
				scon = c;
				break;
			}
		}
		if(scon != null) {
			arm_node_MakeVoxel.run(scon);
		}
	}
};
arm_node_MaterialParser.parsePaintMaterial = function() {
	if(!arm_node_MaterialParser.getMOut()) {
		return;
	}
	if(arm_ui_UIHeader.inst.worktab.position == 1) {
		arm_node_MaterialParser.parseMeshPreviewMaterial();
		return;
	}
	var m = arm_Project.materials[0].data;
	var scon = null;
	var mcon = null;
	var _g = 0;
	var _g1 = m.shader.contexts;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		if(c.raw.name == "paint") {
			HxOverrides.remove(m.shader.raw.contexts,c.raw);
			HxOverrides.remove(m.shader.contexts,c);
			if(c != arm_node_MaterialParser.defaultScon) {
				c.delete();
			}
			break;
		}
	}
	var _g2 = 0;
	var _g3 = m.contexts;
	while(_g2 < _g3.length) {
		var c1 = _g3[_g2];
		++_g2;
		if(c1.raw.name == "paint") {
			HxOverrides.remove(m.raw.contexts,c1.raw);
			HxOverrides.remove(m.contexts,c1);
			break;
		}
	}
	var sdata = new arm_node_MaterialShaderData({ name : "Material", canvas : arm_ui_UINodes.inst.getCanvasMaterial()});
	var mcon1 = { name : "paint", bind_textures : []};
	var con = arm_node_MakePaint.run(sdata,mcon1);
	var compileError = false;
	var scon1 = new iron_data_ShaderContext(con.data,function(scon2) {
		if(scon2 == null) {
			compileError = true;
		}
	});
	if(compileError) {
		return;
	}
	scon1.overrideContext = { };
	scon1.overrideContext.addressing = "repeat";
	var mcon2 = new iron_data_MaterialContext(mcon1,function(mcon3) {
	});
	m.shader.raw.contexts.push(scon1.raw);
	m.shader.contexts.push(scon1);
	m.raw.contexts.push(mcon2.raw);
	m.contexts.push(mcon2);
	if(arm_node_MaterialParser.defaultScon == null) {
		arm_node_MaterialParser.defaultScon = scon1;
	}
	if(arm_node_MaterialParser.defaultMcon == null) {
		arm_node_MaterialParser.defaultMcon = mcon2;
	}
};
arm_node_MaterialParser.parseBrush = function() {
	arm_node_Logic.packageName = "arm.node.brush";
	arm_node_Logic.parse(arm_Context.brush.canvas,false);
};
var arm_node_MaterialShaderData = function(material) {
	this.material = material;
};
$hxClasses["arm.node.MaterialShaderData"] = arm_node_MaterialShaderData;
arm_node_MaterialShaderData.__name__ = "arm.node.MaterialShaderData";
arm_node_MaterialShaderData.prototype = {
	add_context: function(props) {
		return new arm_node_MaterialShaderContext(this.material,props);
	}
	,__class__: arm_node_MaterialShaderData
};
var arm_node_MaterialShaderContext = function(material,props) {
	this.allow_vcols = false;
	this.material = material;
	this.data = { name : props.name, depth_write : props.depth_write, compare_mode : props.compare_mode, cull_mode : props.cull_mode, blend_source : props.blend_source, blend_destination : props.blend_destination, blend_operation : props.blend_operation, alpha_blend_source : props.alpha_blend_source, alpha_blend_destination : props.alpha_blend_destination, alpha_blend_operation : props.alpha_blend_operation, fragment_shader : "", vertex_shader : "", vertex_elements : Object.prototype.hasOwnProperty.call(props,"vertex_elements") ? props.vertex_elements : [{ name : "pos", data : "short4norm"},{ name : "nor", data : "short2norm"}]};
	if(props.color_writes_red != null) {
		this.data.color_writes_red = props.color_writes_red;
	}
	if(props.color_writes_green != null) {
		this.data.color_writes_green = props.color_writes_green;
	}
	if(props.color_writes_blue != null) {
		this.data.color_writes_blue = props.color_writes_blue;
	}
	if(props.color_writes_alpha != null) {
		this.data.color_writes_alpha = props.color_writes_alpha;
	}
	this.tunits = this.data.texture_units = [];
	this.constants = this.data.constants = [];
};
$hxClasses["arm.node.MaterialShaderContext"] = arm_node_MaterialShaderContext;
arm_node_MaterialShaderContext.__name__ = "arm.node.MaterialShaderContext";
arm_node_MaterialShaderContext.prototype = {
	add_elem: function(name,data_type) {
		var _g = 0;
		var _g1 = this.data.vertex_elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.name == name) {
				return;
			}
		}
		var elem = { name : name, data : data_type};
		this.data.vertex_elements.push(elem);
	}
	,is_elem: function(name) {
		var _g = 0;
		var _g1 = this.data.vertex_elements;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.name == name) {
				return true;
			}
		}
		return false;
	}
	,add_constant: function(ctype,name,link) {
		var _g = 0;
		var _g1 = this.constants;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == name) {
				return;
			}
		}
		var c1 = { name : name, type : ctype};
		if(link != null) {
			c1.link = link;
		}
		this.constants.push(c1);
	}
	,add_texture_unit: function(ctype,name,link,is_image) {
		if(is_image == null) {
			is_image = false;
		}
		var _g = 0;
		var _g1 = this.tunits;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == name) {
				return;
			}
		}
		var c1 = { name : name};
		if(link != null) {
			c1.link = link;
		}
		if(is_image) {
			c1.is_image = is_image;
		}
		this.tunits.push(c1);
	}
	,make_vert: function() {
		this.data.vertex_shader = this.material.name + "_" + this.data.name + ".vert";
		this.vert = new arm_node_MaterialShader(this,"vert");
		return this.vert;
	}
	,make_frag: function() {
		this.data.fragment_shader = this.material.name + "_" + this.data.name + ".frag";
		this.frag = new arm_node_MaterialShader(this,"frag");
		return this.frag;
	}
	,__class__: arm_node_MaterialShaderContext
};
var arm_node_MaterialShader = function(context,shader_type) {
	this.invTBN = false;
	this.dotNV = false;
	this.nAttr = false;
	this.n = false;
	this.vVecCam = false;
	this.vVec = false;
	this.wtangent = false;
	this.ndcpos = false;
	this.wvpposition = false;
	this.vposition = false;
	this.mposition = false;
	this.wposition = false;
	this.bposition = false;
	this.lock = false;
	this.vstruct_as_vsin = true;
	this.write_textures = 0;
	this.write_normal = 0;
	this.write_pre = false;
	this.header = "";
	this.main_attribs = "";
	this.main_textures = "";
	this.main_normal = "";
	this.main_end = "";
	this.main_init = "";
	this.main = "";
	this.functions = new haxe_ds_StringMap();
	this.uniforms = [];
	this.sharedSamplers = [];
	this.outs = [];
	this.ins = [];
	this.includes = [];
	this.shader_type = "";
	this.context = context;
	this.shader_type = shader_type;
};
$hxClasses["arm.node.MaterialShader"] = arm_node_MaterialShader;
arm_node_MaterialShader.__name__ = "arm.node.MaterialShader";
arm_node_MaterialShader.prototype = {
	add_in: function(s) {
		this.ins.push(s);
	}
	,add_out: function(s) {
		this.outs.push(s);
	}
	,add_uniform: function(s,link,included) {
		if(included == null) {
			included = false;
		}
		var ar = s.split(" ");
		var utype = ar[ar.length - 2];
		var uname = ar[ar.length - 1];
		if(StringTools.startsWith(utype,"sampler") || StringTools.startsWith(utype,"image") || StringTools.startsWith(utype,"uimage")) {
			var is_image = StringTools.startsWith(utype,"image") || StringTools.startsWith(utype,"uimage");
			this.context.add_texture_unit(utype,uname,link,is_image);
		} else {
			if(ar[0] == "float" && ar[1].indexOf("[") >= 0) {
				ar[0] = "floats";
				ar[1] = ar[1].split("[")[0];
			} else if(ar[0] == "vec4" && ar[1].indexOf("[") >= 0) {
				ar[0] = "floats";
				ar[1] = ar[1].split("[")[0];
			}
			this.context.add_constant(ar[0],ar[1],link);
		}
		if(included == false && this.uniforms.indexOf(s) == -1) {
			this.uniforms.push(s);
		}
	}
	,add_shared_sampler: function(s) {
		if(this.sharedSamplers.indexOf(s) == -1) {
			this.sharedSamplers.push(s);
			var ar = s.split(" ");
			var utype = ar[ar.length - 2];
			var uname = ar[ar.length - 1];
			this.context.add_texture_unit(utype,uname,null,false);
		}
	}
	,add_function: function(s) {
		var fname = s.split("(")[0];
		var _this = this.functions;
		if(__map_reserved[fname] != null ? _this.existsReserved(fname) : _this.h.hasOwnProperty(fname)) {
			return;
		}
		var _this1 = this.functions;
		if(__map_reserved[fname] != null) {
			_this1.setReserved(fname,s);
		} else {
			_this1.h[fname] = s;
		}
	}
	,write: function(s) {
		if(this.lock) {
			return;
		}
		if(this.write_textures > 0) {
			this.main_textures += s + "\n";
		} else if(this.write_normal > 0) {
			this.main_normal += s + "\n";
		} else if(this.write_pre) {
			this.main_init += s + "\n";
		} else {
			this.main += s + "\n";
		}
	}
	,write_end: function(s) {
		this.main_end += s + "\n";
	}
	,write_attrib: function(s) {
		this.main_attribs += s + "\n";
	}
	,dataSize: function(data) {
		if(data == "float1") {
			return "1";
		} else if(data == "float2") {
			return "2";
		} else if(data == "float3") {
			return "3";
		} else if(data == "float4") {
			return "4";
		} else if(data == "short2norm") {
			return "2";
		} else if(data == "short4norm") {
			return "4";
		} else {
			return "1";
		}
	}
	,vstruct_to_vsin: function() {
		var vs = this.context.data.vertex_elements;
		var _g = 0;
		while(_g < vs.length) {
			var e = vs[_g];
			++_g;
			this.add_in("vec" + this.dataSize(e.data) + " " + e.name);
		}
	}
	,get: function() {
		if(this.shader_type == "vert" && this.vstruct_as_vsin) {
			this.vstruct_to_vsin();
		}
		var sharedSampler = "shared_sampler";
		if(this.sharedSamplers.length > 0) {
			sharedSampler = this.sharedSamplers[0].split(" ")[1] + "_sampler";
		}
		var s = "#define HLSL\n";
		s += "#define sampler2D Texture2D\n";
		s += "#define sampler3D Texture3D\n";
		s += "#define texture(tex, coord) tex.Sample(tex ## _sampler, coord)\n";
		s += "#define textureShared(tex, coord) tex.Sample(" + sharedSampler + ", coord)\n";
		s += "#define textureLod(tex, coord, lod) tex.SampleLevel(tex ## _sampler, coord, lod)\n";
		s += "#define textureLodShared(tex, coord, lod) tex.SampleLevel(" + sharedSampler + ", coord, lod)\n";
		s += "#define texelFetch(tex, coord, lod) tex.Load(float3(coord.xy, lod))\n";
		s += "uint2 _GetDimensions(Texture2D tex, uint lod) { uint x, y; tex.GetDimensions(x, y); return uint2(x, y); }\n";
		s += "#define textureSize _GetDimensions\n";
		s += "#define mod(a, b) (a % b)\n";
		s += "#define vec2 float2\n";
		s += "#define vec3 float3\n";
		s += "#define vec4 float4\n";
		s += "#define ivec2 int2\n";
		s += "#define ivec3 int3\n";
		s += "#define ivec4 int4\n";
		s += "#define mat2 float2x2\n";
		s += "#define mat3 float3x3\n";
		s += "#define mat4 float4x4\n";
		s += "#define dFdx ddx\n";
		s += "#define dFdy ddy\n";
		s += "#define inversesqrt rsqrt\n";
		s += "#define fract frac\n";
		s += "#define mix lerp\n";
		s += this.header;
		var in_ext = "";
		var out_ext = "";
		var _g = 0;
		var _g1 = this.includes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			s += "#include \"" + a + "\"\n";
		}
		var index = 0;
		if(this.ins.length > 0) {
			s += "struct SPIRV_Cross_Input {\n";
			index = 0;
			this.ins.sort(function(a1,b) {
				if(a1.substring(4) >= b.substring(4)) {
					return 1;
				} else {
					return -1;
				}
			});
			var _g2 = 0;
			var _g3 = this.ins;
			while(_g2 < _g3.length) {
				var a2 = _g3[_g2];
				++_g2;
				s += "" + a2 + in_ext + " : TEXCOORD" + index + ";\n";
				++index;
			}
			if(this.shader_type == "vert" && this.main.indexOf("gl_VertexID") >= 0) {
				s += "uint gl_VertexID : SV_VertexID;\n";
				this.ins.push("uint gl_VertexID");
			}
			if(this.shader_type == "vert" && this.main.indexOf("gl_InstanceID") >= 0) {
				s += "uint gl_InstanceID : SV_InstanceID;\n";
				this.ins.push("uint gl_InstanceID");
			}
			s += "};\n";
		}
		var num = 0;
		if(this.outs.length > 0 || this.shader_type == "vert") {
			s += "struct SPIRV_Cross_Output {\n";
			this.outs.sort(function(a3,b1) {
				if(a3.substring(4) >= b1.substring(4)) {
					return 1;
				} else {
					return -1;
				}
			});
			index = 0;
			if(this.shader_type == "vert") {
				var _g21 = 0;
				var _g31 = this.outs;
				while(_g21 < _g31.length) {
					var a4 = _g31[_g21];
					++_g21;
					s += "" + a4 + out_ext + " : TEXCOORD" + index + ";\n";
					++index;
				}
				s += "float4 svpos : SV_POSITION;\n";
			} else {
				var out = this.outs[0];
				if(out.charAt(out.length - 1) == "]") {
					num = Std.parseInt(out.charAt(out.length - 2));
					s += "vec4 fragColor[" + num + "] : SV_TARGET0;\n";
				} else {
					s += "vec4 fragColor : SV_TARGET0;\n";
				}
			}
			s += "};\n";
		}
		var _g22 = 0;
		var _g32 = this.uniforms;
		while(_g22 < _g32.length) {
			var a5 = _g32[_g22];
			++_g22;
			s += "uniform " + a5 + ";\n";
			if(StringTools.startsWith(a5,"sampler")) {
				s += "SamplerState " + a5.split(" ")[1] + "_sampler;\n";
			}
		}
		if(this.sharedSamplers.length > 0) {
			var _g4 = 0;
			var _g5 = this.sharedSamplers;
			while(_g4 < _g5.length) {
				var a6 = _g5[_g4];
				++_g4;
				s += "uniform " + a6 + ";\n";
			}
			s += "SamplerState " + sharedSampler + ";\n";
		}
		var _this = this.functions;
		var f = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(f.hasNext()) {
			var f1 = f.next();
			s += f1 + "\n";
		}
		if(this.outs.length > 0 || this.shader_type == "vert") {
			if(this.ins.length > 0) {
				s += "SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {\n";
			} else {
				s += "SPIRV_Cross_Output main() {\n";
			}
		} else if(this.ins.length > 0) {
			s += "void main(SPIRV_Cross_Input stage_input) {\n";
		} else {
			s += "void main() {\n";
		}
		var _g41 = 0;
		var _g51 = this.ins;
		while(_g41 < _g51.length) {
			var a7 = _g51[_g41];
			++_g41;
			var b2 = a7.substring(5);
			s += "" + a7 + " = stage_input." + b2 + ";\n";
		}
		if(this.shader_type == "vert") {
			s += "vec4 gl_Position;\n";
			var _g6 = 0;
			var _g7 = this.outs;
			while(_g6 < _g7.length) {
				var a8 = _g7[_g6];
				++_g6;
				s += "" + a8 + ";\n";
			}
		} else if(this.outs.length > 0) {
			if(num > 0) {
				s += "vec4 fragColor[" + num + "];\n";
			} else {
				s += "vec4 fragColor;\n";
			}
		}
		s += this.main_attribs;
		s += this.main_textures;
		s += this.main_normal;
		s += this.main_init;
		s += this.main;
		s += this.main_end;
		if(this.shader_type == "vert") {
			s += "SPIRV_Cross_Output stage_output;\n";
			s += "gl_Position.z = (gl_Position.z + gl_Position.w) * 0.5;\n";
			s += "stage_output.svpos = gl_Position;\n";
			var _g61 = 0;
			var _g71 = this.outs;
			while(_g61 < _g71.length) {
				var a9 = _g71[_g61];
				++_g61;
				var b3 = a9.substring(5);
				s += "stage_output." + b3 + " = " + b3 + ";\n";
			}
			s += "return stage_output;\n";
		} else if(this.outs.length > 0) {
			s += "SPIRV_Cross_Output stage_output;\n";
			if(num > 0) {
				var _g62 = 0;
				var _g72 = num;
				while(_g62 < _g72) {
					var i = _g62++;
					s += "stage_output.fragColor[" + i + "] = fragColor[" + i + "];\n";
				}
			} else {
				s += "stage_output.fragColor = fragColor;\n";
			}
			s += "return stage_output;\n";
		}
		s += "}\n";
		return s;
	}
	,__class__: arm_node_MaterialShader
};
var arm_node_NodesBrush = function() { };
$hxClasses["arm.node.NodesBrush"] = arm_node_NodesBrush;
arm_node_NodesBrush.__name__ = "arm.node.NodesBrush";
arm_node_NodesBrush.createNode = function(nodeType) {
	var _g = 0;
	var _g1 = arm_node_NodesBrush.list;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		var _g2 = 0;
		while(_g2 < c.length) {
			var n = c[_g2];
			++_g2;
			if(n.type == nodeType) {
				var canvas = arm_Context.brush.canvas;
				var nodes = arm_Context.brush.nodes;
				var node = arm_ui_UINodes.makeNode(n,nodes,canvas);
				canvas.nodes.push(node);
				return node;
			}
		}
	}
	return null;
};
var arm_node_brush_BooleanNode = function(tree,value) {
	if(value == null) {
		value = false;
	}
	arm_node_LogicNode.call(this,tree);
	this.value = value;
};
$hxClasses["arm.node.brush.BooleanNode"] = arm_node_brush_BooleanNode;
arm_node_brush_BooleanNode.__name__ = "arm.node.brush.BooleanNode";
arm_node_brush_BooleanNode.__super__ = arm_node_LogicNode;
arm_node_brush_BooleanNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: arm_node_brush_BooleanNode
});
var arm_node_brush_BrushOutputNode = function(tree) {
	this.Directional = false;
	arm_node_LogicNode.call(this,tree);
	arm_Context.runBrush = $bind(this,this.run);
	arm_Context.parseBrushInputs = $bind(this,this.parseInputs);
};
$hxClasses["arm.node.brush.BrushOutputNode"] = arm_node_brush_BrushOutputNode;
arm_node_brush_BrushOutputNode.__name__ = "arm.node.brush.BrushOutputNode";
arm_node_brush_BrushOutputNode.__super__ = arm_node_LogicNode;
arm_node_brush_BrushOutputNode.prototype = $extend(arm_node_LogicNode.prototype,{
	parseInputs: function() {
		var lastMask = arm_Context.brushMaskImage;
		var lastStencil = arm_Context.brushStencilImage;
		arm_Context.paintVec = this.inputs[0].get();
		arm_Context.brushNodesRadius = this.inputs[1].get();
		arm_Context.brushNodesScale = this.inputs[2].get();
		arm_Context.brushNodesAngle = this.inputs[3].get();
		var opac = this.inputs[4].get();
		if(opac == null) {
			opac = 1.0;
		}
		if(typeof(opac) == "string") {
			arm_Context.brushNodesOpacity = 1.0;
			var index = arm_Project.assetNames.indexOf(opac);
			var asset = arm_Project.assets[index];
			arm_Context.brushMaskImage = arm_ui_UISidebar.inst.getImage(asset);
		} else {
			arm_Context.brushNodesOpacity = opac;
			arm_Context.brushMaskImage = null;
		}
		arm_Context.brushNodesHardness = this.inputs[5].get();
		var stencil = this.inputs[6].get();
		if(stencil == null) {
			stencil = 1.0;
		}
		if(typeof(stencil) == "string") {
			var index1 = arm_Project.assetNames.indexOf(stencil);
			var asset1 = arm_Project.assets[index1];
			arm_Context.brushStencilImage = arm_ui_UISidebar.inst.getImage(asset1);
		} else {
			arm_Context.brushStencilImage = null;
		}
		if(lastMask != arm_Context.brushMaskImage || lastStencil != arm_Context.brushStencilImage) {
			arm_node_MaterialParser.parsePaintMaterial();
		}
		arm_Context.brushDirectional = this.Directional;
	}
	,run: function(from) {
		this.parseInputs();
		var left = 0;
		var right = 1;
		if(arm_Context.paint2d) {
			left = 1;
			right = 2;
		}
		if(arm_Context.lastPaintX < 0 || arm_Context.lastPaintY < 0) {
			arm_Context.lastPaintVecX = arm_Context.paintVec.x;
			arm_Context.lastPaintVecY = arm_Context.paintVec.y;
		}
		var fillLayer = arm_Context.layer.material_mask != null && arm_Context.tool != 10 && !arm_Context.layerIsMask;
		var groupLayer = arm_Context.layer.getChildren() != null;
		if(arm_Context.paintVec.x < right && arm_Context.paintVec.x > left && arm_Context.paintVec.y < 1 && arm_Context.paintVec.y > 0 && !arm_ui_UISidebar.inst.ui.isHovered && !arm_ui_UISidebar.inst.ui.isScrolling && !fillLayer && !groupLayer && (arm_Context.layer.isVisible() || arm_Context.paint2d) && !arm_App.isDragging && !arm_App.isResizing && arm_ui_UISidebar.inst.ui.comboSelectedHandle == null && arm_ui_UIView2D.inst.ui.comboSelectedHandle == null) {
			var down = iron_system_Input.getMouse().down() || iron_system_Input.getPen().down();
			if(down && arm_Context.tool == 9 && arm_Project.assets.length > 0) {
				arm_Context.colorIdPicked = true;
			}
			if(down && arm_Context.paintVec.x == arm_Context.lastPaintX && arm_Context.paintVec.y == arm_Context.lastPaintY) {
				arm_Context.painted++;
			} else {
				arm_Context.painted = 0;
			}
			arm_Context.lastPaintX = arm_Context.paintVec.x;
			arm_Context.lastPaintY = arm_Context.paintVec.y;
			if(arm_Context.tool == 7) {
				arm_Context.painted = 0;
			}
			var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
			var paintFrames = decal ? 1 : 4;
			if(arm_Context.painted <= paintFrames) {
				arm_Context.pdirty = 1;
				arm_Context.rdirty = 2;
			}
		}
	}
	,__class__: arm_node_brush_BrushOutputNode
});
var arm_node_brush_ColorNode = function(tree,r,g,b,a) {
	if(a == null) {
		a = 1.0;
	}
	if(b == null) {
		b = 0.8;
	}
	if(g == null) {
		g = 0.8;
	}
	if(r == null) {
		r = 0.8;
	}
	this.value = new iron_math_Vec4();
	arm_node_LogicNode.call(this,tree);
	var _this = this.value;
	var w = a;
	if(w == null) {
		w = 1.0;
	}
	_this.x = r;
	_this.y = g;
	_this.z = b;
	_this.w = w;
};
$hxClasses["arm.node.brush.ColorNode"] = arm_node_brush_ColorNode;
arm_node_brush_ColorNode.__name__ = "arm.node.brush.ColorNode";
arm_node_brush_ColorNode.__super__ = arm_node_LogicNode;
arm_node_brush_ColorNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: arm_node_brush_ColorNode
});
var arm_node_brush_FloatNode = function(tree,value) {
	if(value == null) {
		value = 0.0;
	}
	arm_node_LogicNode.call(this,tree);
	this.value = value;
};
$hxClasses["arm.node.brush.FloatNode"] = arm_node_brush_FloatNode;
arm_node_brush_FloatNode.__name__ = "arm.node.brush.FloatNode";
arm_node_brush_FloatNode.__super__ = arm_node_LogicNode;
arm_node_brush_FloatNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: arm_node_brush_FloatNode
});
var arm_node_brush_InputNode = function(tree) {
	this.lockStartY = 0.0;
	this.lockStartX = 0.0;
	this.lockY = false;
	this.lockX = false;
	this.lockBegin = false;
	this.startY = 0.0;
	this.startX = 0.0;
	this.coords = new iron_math_Vec4();
	var _gthis = this;
	arm_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate(function() {
		if(arm_Context.splitView) {
			arm_Context.viewIndex = iron_system_Input.getMouse().x - arm_App.x() > arm_App.w() / 2 ? 1 : 0;
		}
		arm_Context.brushLazyRadius = _gthis.inputs[0].get();
		arm_Context.brushLazyStep = _gthis.inputs[1].get();
		var lazyPaint = arm_Context.brushLazyRadius > 0 && (arm_Operator.shortcut(arm_Config.keymap.action_paint) || arm_Operator.shortcut(Std.string(arm_Config.keymap.brush_ruler) + "+" + Std.string(arm_Config.keymap.action_paint)));
		var mouse = iron_system_Input.getMouse();
		var paintX = (mouse.x - arm_App.x()) / arm_App.w();
		var paintY = (mouse.y - arm_App.y()) / arm_App.h();
		if(mouse.started()) {
			var tmp = mouse.x - arm_App.x();
			var tmp1 = arm_App.w();
			_gthis.startX = tmp / tmp1;
			var tmp2 = mouse.y - arm_App.y();
			var tmp3 = arm_App.h();
			_gthis.startY = tmp2 / tmp3;
		}
		var pen = iron_system_Input.getPen();
		if(pen.down()) {
			paintX = (pen.x - arm_App.x()) / arm_App.w();
			paintY = (pen.y - arm_App.y()) / arm_App.h();
		}
		if(pen.started()) {
			var tmp4 = pen.x - arm_App.x();
			var tmp5 = arm_App.w();
			_gthis.startX = tmp4 / tmp5;
			var tmp6 = pen.y - arm_App.y();
			var tmp7 = arm_App.h();
			_gthis.startY = tmp6 / tmp7;
		}
		if(arm_Operator.shortcut(Std.string(arm_Config.keymap.brush_ruler) + "+" + Std.string(arm_Config.keymap.action_paint))) {
			if(_gthis.lockX) {
				paintX = _gthis.startX;
			}
			if(_gthis.lockY) {
				paintY = _gthis.startY;
			}
		}
		if(arm_Context.brushLazyRadius > 0) {
			arm_Context.brushLazyX = paintX;
			arm_Context.brushLazyY = paintY;
		}
		if(!lazyPaint) {
			_gthis.coords.x = paintX;
			_gthis.coords.y = paintY;
		}
		if(arm_Context.splitView) {
			arm_Context.viewIndex = -1;
		}
		if(_gthis.lockBegin) {
			var dx = Math.abs(_gthis.lockStartX - (mouse.x - arm_App.x()));
			var dy = Math.abs(_gthis.lockStartY - (mouse.y - arm_App.y()));
			if(dx > 1 || dy > 1) {
				_gthis.lockBegin = false;
				if(dx > dy) {
					_gthis.lockY = true;
				} else {
					_gthis.lockX = true;
				}
			}
		}
		var kb = iron_system_Input.getKeyboard();
		if(kb.started(arm_Config.keymap.brush_ruler)) {
			var mouse1 = mouse.x;
			var tmp8 = arm_App.x();
			_gthis.lockStartX = mouse1 - tmp8;
			var mouse2 = mouse.y;
			var tmp9 = arm_App.y();
			_gthis.lockStartY = mouse2 - tmp9;
			_gthis.lockBegin = true;
		} else if(kb.released(arm_Config.keymap.brush_ruler)) {
			_gthis.lockX = _gthis.lockY = _gthis.lockBegin = false;
		}
		if(arm_Context.brushLazyRadius > 0) {
			var x = arm_Context.brushLazyX * arm_App.w();
			var y = arm_Context.brushLazyY * arm_App.h();
			var z = 0.0;
			if(z == null) {
				z = 0.0;
			}
			if(y == null) {
				y = 0.0;
			}
			if(x == null) {
				x = 0.0;
			}
			var v1_x = x;
			var v1_y = y;
			var v1_z = z;
			var v1_w = 1.0;
			var x1 = _gthis.coords.x * arm_App.w();
			var y1 = _gthis.coords.y * arm_App.h();
			var z1 = 0.0;
			if(z1 == null) {
				z1 = 0.0;
			}
			if(y1 == null) {
				y1 = 0.0;
			}
			if(x1 == null) {
				x1 = 0.0;
			}
			var v2_x = x1;
			var v2_y = y1;
			var v2_z = z1;
			var v2_w = 1.0;
			var vx = v1_x - v2_x;
			var vy = v1_y - v2_y;
			var vz = v1_z - v2_z;
			var d = Math.sqrt(vx * vx + vy * vy + vz * vz);
			var r = arm_Context.brushLazyRadius * 85;
			if(d > r) {
				var v3_x = 0.0;
				var v3_y = 0.0;
				var v3_z = 0.0;
				var v3_w = 1.0;
				v3_x = v2_x - v1_x;
				v3_y = v2_y - v1_y;
				v3_z = v2_z - v1_z;
				var n = Math.sqrt(v3_x * v3_x + v3_y * v3_y + v3_z * v3_z);
				if(n > 0.0) {
					var invN = 1.0 / n;
					v3_x *= invN;
					v3_y *= invN;
					v3_z *= invN;
				}
				var f = 1.0 - arm_Context.brushLazyStep;
				v3_x *= f;
				v3_y *= f;
				v3_z *= f;
				v3_x *= r;
				v3_y *= r;
				v3_z *= r;
				v2_x = v1_x + v3_x;
				v2_y = v1_y + v3_y;
				v2_z = v1_z + v3_z;
				var tmp10 = arm_App.w();
				_gthis.coords.x = v2_x / tmp10;
				var tmp11 = arm_App.h();
				_gthis.coords.y = v2_y / tmp11;
			}
			arm_Context.lastPaintX = -1;
			arm_Context.lastPaintY = -1;
		}
	});
};
$hxClasses["arm.node.brush.InputNode"] = arm_node_brush_InputNode;
arm_node_brush_InputNode.__name__ = "arm.node.brush.InputNode";
arm_node_brush_InputNode.__super__ = arm_node_LogicNode;
arm_node_brush_InputNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		return this.coords;
	}
	,__class__: arm_node_brush_InputNode
});
var arm_node_brush_IntegerNode = function(tree,value) {
	if(value == null) {
		value = 0;
	}
	arm_node_LogicNode.call(this,tree);
	this.value = value;
};
$hxClasses["arm.node.brush.IntegerNode"] = arm_node_brush_IntegerNode;
arm_node_brush_IntegerNode.__name__ = "arm.node.brush.IntegerNode";
arm_node_brush_IntegerNode.__super__ = arm_node_LogicNode;
arm_node_brush_IntegerNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: arm_node_brush_IntegerNode
});
var arm_node_brush_MathNode = function(tree) {
	arm_node_LogicNode.call(this,tree);
};
$hxClasses["arm.node.brush.MathNode"] = arm_node_brush_MathNode;
arm_node_brush_MathNode.__name__ = "arm.node.brush.MathNode";
arm_node_brush_MathNode.__super__ = arm_node_LogicNode;
arm_node_brush_MathNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		var v1 = this.inputs[0].get();
		var v2 = this.inputs[1].get();
		var f = 0.0;
		switch(this.operation) {
		case "Abs":
			f = Math.abs(v1);
			break;
		case "Add":
			f = v1 + v2;
			break;
		case "Arccosine":
			f = Math.acos(v1);
			break;
		case "Arcsine":
			f = Math.asin(v1);
			break;
		case "Arctangent":
			f = Math.atan(v1);
			break;
		case "Cosine":
			f = Math.cos(v1);
			break;
		case "Divide":
			f = v1 / v2;
			break;
		case "Greater Than":
			f = v1 > v2 ? 1.0 : 0.0;
			break;
		case "Less Than":
			f = v1 < v2 ? 1.0 : 0.0;
			break;
		case "Logarithm":
			f = Math.log(v1);
			break;
		case "Max":
			f = Math.max(v1,v2);
			break;
		case "Min":
			f = Math.min(v1,v2);
			break;
		case "Modulo":
			f = v1 % v2;
			break;
		case "Multiply":
			f = v1 * v2;
			break;
		case "Power":
			f = Math.pow(v1,v2);
			break;
		case "Round":
			f = Math.round(v1);
			break;
		case "Sine":
			f = Math.sin(v1);
			break;
		case "Subtract":
			f = v1 - v2;
			break;
		case "Tangent":
			f = Math.tan(v1);
			break;
		}
		if(this.use_clamp) {
			f = f < 0.0 ? 0.0 : f > 1.0 ? 1.0 : f;
		}
		return f;
	}
	,__class__: arm_node_brush_MathNode
});
var arm_node_brush_NullNode = function(tree) {
	arm_node_LogicNode.call(this,tree);
};
$hxClasses["arm.node.brush.NullNode"] = arm_node_brush_NullNode;
arm_node_brush_NullNode.__name__ = "arm.node.brush.NullNode";
arm_node_brush_NullNode.__super__ = arm_node_LogicNode;
arm_node_brush_NullNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		return null;
	}
	,__class__: arm_node_brush_NullNode
});
var arm_node_brush_ObjectNode = function(tree,objectName) {
	if(objectName == null) {
		objectName = "";
	}
	this.objectName = objectName;
	arm_node_LogicNode.call(this,tree);
};
$hxClasses["arm.node.brush.ObjectNode"] = arm_node_brush_ObjectNode;
arm_node_brush_ObjectNode.__name__ = "arm.node.brush.ObjectNode";
arm_node_brush_ObjectNode.__super__ = arm_node_LogicNode;
arm_node_brush_ObjectNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		this.value = this.objectName != "" ? iron_Scene.active.getChild(this.objectName) : null;
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: arm_node_brush_ObjectNode
});
var arm_node_brush_RandomNode = function(tree) {
	arm_node_LogicNode.call(this,tree);
};
$hxClasses["arm.node.brush.RandomNode"] = arm_node_brush_RandomNode;
arm_node_brush_RandomNode.__name__ = "arm.node.brush.RandomNode";
arm_node_brush_RandomNode.__super__ = arm_node_LogicNode;
arm_node_brush_RandomNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		var min = this.inputs[0].get();
		var max = this.inputs[1].get();
		return min + Math.random() * (max - min);
	}
	,__class__: arm_node_brush_RandomNode
});
var arm_node_brush_SeparateVectorNode = function(tree) {
	arm_node_LogicNode.call(this,tree);
};
$hxClasses["arm.node.brush.SeparateVectorNode"] = arm_node_brush_SeparateVectorNode;
arm_node_brush_SeparateVectorNode.__name__ = "arm.node.brush.SeparateVectorNode";
arm_node_brush_SeparateVectorNode.__super__ = arm_node_LogicNode;
arm_node_brush_SeparateVectorNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		var vector = this.inputs[0].get();
		if(from == 0) {
			return vector.x;
		} else if(from == 1) {
			return vector.y;
		} else {
			return vector.z;
		}
	}
	,__class__: arm_node_brush_SeparateVectorNode
});
var arm_node_brush_StringNode = function(tree,value) {
	if(value == null) {
		value = "";
	}
	arm_node_LogicNode.call(this,tree);
	this.value = value;
};
$hxClasses["arm.node.brush.StringNode"] = arm_node_brush_StringNode;
arm_node_brush_StringNode.__name__ = "arm.node.brush.StringNode";
arm_node_brush_StringNode.__super__ = arm_node_LogicNode;
arm_node_brush_StringNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: arm_node_brush_StringNode
});
var arm_node_brush_TEX_$IMAGE = function(tree) {
	arm_node_LogicNode.call(this,tree);
};
$hxClasses["arm.node.brush.TEX_IMAGE"] = arm_node_brush_TEX_$IMAGE;
arm_node_brush_TEX_$IMAGE.__name__ = "arm.node.brush.TEX_IMAGE";
arm_node_brush_TEX_$IMAGE.__super__ = arm_node_LogicNode;
arm_node_brush_TEX_$IMAGE.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		return this.file;
	}
	,__class__: arm_node_brush_TEX_$IMAGE
});
var arm_node_brush_TimeNode = function(tree) {
	arm_node_LogicNode.call(this,tree);
};
$hxClasses["arm.node.brush.TimeNode"] = arm_node_brush_TimeNode;
arm_node_brush_TimeNode.__name__ = "arm.node.brush.TimeNode";
arm_node_brush_TimeNode.__super__ = arm_node_LogicNode;
arm_node_brush_TimeNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		if(from == 0) {
			return kha_Scheduler.time();
		} else if(from == 1) {
			return 0.016666666666666666 * iron_system_Time.scale;
		} else {
			return arm_Context.brushTime;
		}
	}
	,__class__: arm_node_brush_TimeNode
});
var arm_node_brush_VectorMathNode = function(tree) {
	this.v = new iron_math_Vec4();
	arm_node_LogicNode.call(this,tree);
};
$hxClasses["arm.node.brush.VectorMathNode"] = arm_node_brush_VectorMathNode;
arm_node_brush_VectorMathNode.__name__ = "arm.node.brush.VectorMathNode";
arm_node_brush_VectorMathNode.__super__ = arm_node_LogicNode;
arm_node_brush_VectorMathNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		var v1 = this.inputs[0].get();
		var v2 = this.inputs[1].get();
		var _this = this.v;
		_this.x = v1.x;
		_this.y = v1.y;
		_this.z = v1.z;
		_this.w = v1.w;
		var f = 0.0;
		switch(this.operation) {
		case "Add":
			var _this1 = this.v;
			_this1.x += v2.x;
			_this1.y += v2.y;
			_this1.z += v2.z;
			break;
		case "Average":
			var _this2 = this.v;
			_this2.x += v2.x;
			_this2.y += v2.y;
			_this2.z += v2.z;
			this.v.x *= 0.5;
			this.v.y *= 0.5;
			this.v.z *= 0.5;
			break;
		case "Cross Product":
			var _this3 = this.v;
			var ax = _this3.x;
			var ay = _this3.y;
			var az = _this3.z;
			var vx = v2.x;
			var vy = v2.y;
			var vz = v2.z;
			_this3.x = ay * vz - az * vy;
			_this3.y = az * vx - ax * vz;
			_this3.z = ax * vy - ay * vx;
			break;
		case "Dot Product":
			var _this4 = this.v;
			f = _this4.x * v2.x + _this4.y * v2.y + _this4.z * v2.z;
			var _this5 = this.v;
			_this5.x = f;
			_this5.y = f;
			_this5.z = f;
			_this5.w = 1.0;
			break;
		case "Multiply":
			this.v.x *= v2.x;
			this.v.y *= v2.y;
			this.v.z *= v2.z;
			break;
		case "Normalize":
			var _this6 = this.v;
			var n = Math.sqrt(_this6.x * _this6.x + _this6.y * _this6.y + _this6.z * _this6.z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				_this6.x *= invN;
				_this6.y *= invN;
				_this6.z *= invN;
			}
			break;
		case "Subtract":
			var _this7 = this.v;
			_this7.x -= v2.x;
			_this7.y -= v2.y;
			_this7.z -= v2.z;
			break;
		}
		if(from == 0) {
			return this.v;
		} else {
			return f;
		}
	}
	,__class__: arm_node_brush_VectorMathNode
});
var arm_node_brush_VectorNode = function(tree,x,y,z) {
	this.value = new iron_math_Vec4();
	arm_node_LogicNode.call(this,tree);
	if(x != null) {
		this.addInput(new arm_node_brush_FloatNode(tree,x),0);
		this.addInput(new arm_node_brush_FloatNode(tree,y),0);
		this.addInput(new arm_node_brush_FloatNode(tree,z),0);
	}
};
$hxClasses["arm.node.brush.VectorNode"] = arm_node_brush_VectorNode;
arm_node_brush_VectorNode.__name__ = "arm.node.brush.VectorNode";
arm_node_brush_VectorNode.__super__ = arm_node_LogicNode;
arm_node_brush_VectorNode.prototype = $extend(arm_node_LogicNode.prototype,{
	get: function(from) {
		this.value.x = this.inputs[0].get();
		this.value.y = this.inputs[1].get();
		this.value.z = this.inputs[2].get();
		return this.value;
	}
	,set: function(value) {
		this.inputs[0].set(value.x);
		this.inputs[1].set(value.y);
		this.inputs[2].set(value.z);
	}
	,__class__: arm_node_brush_VectorNode
});
var arm_plugin_Camera = function() {
	this.ease = 1.0;
	this.dir = new iron_math_Vec4();
	this.first = true;
	this.redraws = 0;
	var _gthis = this;
	arm_plugin_Camera.inst = this;
	var mouse = iron_system_Input.getMouse();
	var kb = iron_system_Input.getKeyboard();
	iron_App.notifyOnUpdate(function() {
		if(iron_system_Input.occupied || !arm_App.uiEnabled || arm_App.isDragging || arm_ui_UISidebar.inst.isScrolling || mouse.x - arm_App.x() < 0 || mouse.x - arm_App.x() > arm_App.w() || mouse.y - arm_App.y() < 0 || mouse.y - arm_App.y() > arm_App.h()) {
			return;
		}
		var camera = iron_Scene.active.camera;
		if(_gthis.first) {
			_gthis.first = false;
			_gthis.reset();
		}
		var modif = kb.down("alt") || kb.down("shift") || kb.down("control") || arm_Config.keymap.action_rotate == "middle";
		var controls = arm_Context.cameraControls;
		if(controls == 0) {
			if(arm_Operator.shortcut(arm_Config.keymap.action_rotate) || mouse.down("right") && !modif) {
				_gthis.redraws = 2;
				camera.transform.move(new iron_math_Vec4(-camera.transform.world.self._20,-camera.transform.world.self._21,-camera.transform.world.self._22),arm_plugin_Camera.dist);
				camera.transform.rotate(new iron_math_Vec4(0,0,1),-mouse.movementX / 100);
				camera.transform.rotate(new iron_math_Vec4(camera.transform.world.self._00,camera.transform.world.self._01,camera.transform.world.self._02),-mouse.movementY / 100);
				var x = camera.transform.world.self._10;
				var y = camera.transform.world.self._11;
				var z = camera.transform.world.self._12;
				if(z == null) {
					z = 0.0;
				}
				if(y == null) {
					y = 0.0;
				}
				if(x == null) {
					x = 0.0;
				}
				var inlVec4_x = x;
				var inlVec4_y = y;
				var inlVec4_z = z;
				var inlVec4_w = 1.0;
				if(inlVec4_z < 0) {
					camera.transform.rotate(new iron_math_Vec4(camera.transform.world.self._00,camera.transform.world.self._01,camera.transform.world.self._02),mouse.movementY / 100);
				}
				camera.transform.move(new iron_math_Vec4(-camera.transform.world.self._20,-camera.transform.world.self._21,-camera.transform.world.self._22),-arm_plugin_Camera.dist);
			}
			_gthis.panAction(modif);
			if(arm_Operator.shortcut(arm_Config.keymap.action_zoom)) {
				_gthis.redraws = 2;
				var f = -mouse.movementY / 150;
				camera.transform.move(new iron_math_Vec4(-camera.transform.local.self._20,-camera.transform.local.self._21,-camera.transform.local.self._22),f);
				arm_plugin_Camera.dist -= f;
			}
			if(mouse.wheelDelta != 0 && !modif) {
				_gthis.redraws = 2;
				var f1 = mouse.wheelDelta * -0.1;
				camera.transform.move(new iron_math_Vec4(-camera.transform.local.self._20,-camera.transform.local.self._21,-camera.transform.local.self._22),f1);
				arm_plugin_Camera.dist -= f1;
			}
			if(arm_Operator.shortcut(arm_Config.keymap.rotate_light)) {
				_gthis.redraws = 2;
				var light = iron_Scene.active.lights[0];
				var m_self = new kha_math_FastMatrix4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
				var alpha = mouse.movementX / 100;
				var ca = Math.cos(alpha);
				var sa = Math.sin(alpha);
				m_self = new kha_math_FastMatrix4(ca,-sa,0,0,sa,ca,0,0,0,0,1,0,0,0,0,1);
				var _this = light.transform.local;
				var a00 = _this.self._00;
				var a01 = _this.self._01;
				var a02 = _this.self._02;
				var a03 = _this.self._03;
				var a10 = _this.self._10;
				var a11 = _this.self._11;
				var a12 = _this.self._12;
				var a13 = _this.self._13;
				var a20 = _this.self._20;
				var a21 = _this.self._21;
				var a22 = _this.self._22;
				var a23 = _this.self._23;
				var a30 = _this.self._30;
				var a31 = _this.self._31;
				var a32 = _this.self._32;
				var a33 = _this.self._33;
				var b0 = m_self._00;
				var b1 = m_self._10;
				var b2 = m_self._20;
				var b3 = m_self._30;
				_this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
				_this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
				_this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
				_this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
				b0 = m_self._01;
				b1 = m_self._11;
				b2 = m_self._21;
				b3 = m_self._31;
				_this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
				_this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
				_this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
				_this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
				b0 = m_self._02;
				b1 = m_self._12;
				b2 = m_self._22;
				b3 = m_self._32;
				_this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
				_this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
				_this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
				_this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
				b0 = m_self._03;
				b1 = m_self._13;
				b2 = m_self._23;
				b3 = m_self._33;
				_this.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
				_this.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
				_this.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
				_this.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
				light.transform.decompose();
			}
		} else if(controls == 1) {
			if(arm_Operator.shortcut(arm_Config.keymap.action_rotate) || mouse.down("right") && !modif) {
				_gthis.redraws = 2;
				var t = arm_Context.object.transform;
				var _this1 = t.world;
				var _this2 = new iron_math_Vec4(_this1.self._20,_this1.self._21,_this1.self._22);
				var n = Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y + _this2.z * _this2.z);
				if(n > 0.0) {
					var invN = 1.0 / n;
					_this2.x *= invN;
					_this2.y *= invN;
					_this2.z *= invN;
				}
				var up = _this2;
				t.rotate(up,mouse.movementX / 100);
				var _this3 = new iron_math_Vec4(camera.transform.world.self._00,camera.transform.world.self._01,camera.transform.world.self._02);
				var n1 = Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y + _this3.z * _this3.z);
				if(n1 > 0.0) {
					var invN1 = 1.0 / n1;
					_this3.x *= invN1;
					_this3.y *= invN1;
					_this3.z *= invN1;
				}
				var right = _this3;
				t.rotate(right,mouse.movementY / 100);
				t.buildMatrix();
				var _this4 = t.world;
				var x1 = _this4.self._20;
				var y1 = _this4.self._21;
				var z1 = _this4.self._22;
				if(z1 == null) {
					z1 = 0.0;
				}
				if(y1 == null) {
					y1 = 0.0;
				}
				if(x1 == null) {
					x1 = 0.0;
				}
				var inlVec4_x1 = x1;
				var inlVec4_y1 = y1;
				var inlVec4_z1 = z1;
				var inlVec4_w1 = 1.0;
				if(inlVec4_z1 < 0) {
					t.rotate(right,-mouse.movementY / 100);
				}
			}
			_gthis.panAction(modif);
			if(arm_Operator.shortcut(arm_Config.keymap.action_zoom)) {
				_gthis.redraws = 2;
				camera.transform.move(new iron_math_Vec4(-camera.transform.local.self._20,-camera.transform.local.self._21,-camera.transform.local.self._22),-mouse.movementY / 150);
			}
			if(mouse.wheelDelta != 0) {
				_gthis.redraws = 2;
				camera.transform.move(new iron_math_Vec4(-camera.transform.local.self._20,-camera.transform.local.self._21,-camera.transform.local.self._22),mouse.wheelDelta * -0.1);
			}
		} else if(controls == 2 && mouse.down("right")) {
			var moveForward = kb.down("w") || kb.down("up") || mouse.wheelDelta < 0;
			var moveBackward = kb.down("s") || kb.down("down") || mouse.wheelDelta > 0;
			var strafeLeft = kb.down("a") || kb.down("left");
			var strafeRight = kb.down("d") || kb.down("right");
			var strafeUp = kb.down("e");
			var strafeDown = kb.down("q");
			var fast = kb.down("shift") ? 2.0 : kb.down("alt") ? 0.5 : 1.0;
			if(mouse.wheelDelta != 0) {
				fast *= Math.abs(mouse.wheelDelta) * 4.0;
			}
			if(moveForward || moveBackward || strafeRight || strafeLeft || strafeUp || strafeDown) {
				_gthis.ease += 0.016666666666666666 * iron_system_Time.scale * 15;
				if(_gthis.ease > 1.0) {
					_gthis.ease = 1.0;
				}
				var _this5 = _gthis.dir;
				_this5.x = 0;
				_this5.y = 0;
				_this5.z = 0;
				_this5.w = 1.0;
				if(moveForward) {
					var _this6 = _gthis.dir;
					var x2 = -camera.transform.local.self._20;
					var y2 = -camera.transform.local.self._21;
					var z2 = -camera.transform.local.self._22;
					if(z2 == null) {
						z2 = 0.0;
					}
					if(y2 == null) {
						y2 = 0.0;
					}
					if(x2 == null) {
						x2 = 0.0;
					}
					var inlVec4_x2 = x2;
					var inlVec4_y2 = y2;
					var inlVec4_z2 = z2;
					var inlVec4_w2 = 1.0;
					var x3 = -camera.transform.local.self._20;
					var y3 = -camera.transform.local.self._21;
					var z3 = -camera.transform.local.self._22;
					if(z3 == null) {
						z3 = 0.0;
					}
					if(y3 == null) {
						y3 = 0.0;
					}
					if(x3 == null) {
						x3 = 0.0;
					}
					var inlVec4_x3 = x3;
					var inlVec4_y3 = y3;
					var inlVec4_z3 = z3;
					var inlVec4_w3 = 1.0;
					var x4 = -camera.transform.local.self._20;
					var y4 = -camera.transform.local.self._21;
					var z4 = -camera.transform.local.self._22;
					if(z4 == null) {
						z4 = 0.0;
					}
					if(y4 == null) {
						y4 = 0.0;
					}
					if(x4 == null) {
						x4 = 0.0;
					}
					var inlVec4_x4 = x4;
					var inlVec4_y4 = y4;
					var inlVec4_z4 = z4;
					var inlVec4_w4 = 1.0;
					_this6.x += inlVec4_x2;
					_this6.y += inlVec4_y3;
					_this6.z += inlVec4_z4;
				}
				if(moveBackward) {
					var _this7 = _gthis.dir;
					var x5 = -camera.transform.local.self._20;
					var y5 = -camera.transform.local.self._21;
					var z5 = -camera.transform.local.self._22;
					if(z5 == null) {
						z5 = 0.0;
					}
					if(y5 == null) {
						y5 = 0.0;
					}
					if(x5 == null) {
						x5 = 0.0;
					}
					var inlVec4_x5 = x5;
					var inlVec4_y5 = y5;
					var inlVec4_z5 = z5;
					var inlVec4_w5 = 1.0;
					var x6 = -camera.transform.local.self._20;
					var y6 = -camera.transform.local.self._21;
					var z6 = -camera.transform.local.self._22;
					if(z6 == null) {
						z6 = 0.0;
					}
					if(y6 == null) {
						y6 = 0.0;
					}
					if(x6 == null) {
						x6 = 0.0;
					}
					var inlVec4_x6 = x6;
					var inlVec4_y6 = y6;
					var inlVec4_z6 = z6;
					var inlVec4_w6 = 1.0;
					var x7 = -camera.transform.local.self._20;
					var y7 = -camera.transform.local.self._21;
					var z7 = -camera.transform.local.self._22;
					if(z7 == null) {
						z7 = 0.0;
					}
					if(y7 == null) {
						y7 = 0.0;
					}
					if(x7 == null) {
						x7 = 0.0;
					}
					var inlVec4_x7 = x7;
					var inlVec4_y7 = y7;
					var inlVec4_z7 = z7;
					var inlVec4_w7 = 1.0;
					_this7.x += -inlVec4_x5;
					_this7.y += -inlVec4_y6;
					_this7.z += -inlVec4_z7;
				}
				if(strafeRight) {
					var _this8 = _gthis.dir;
					var x8 = camera.transform.local.self._00;
					var y8 = camera.transform.local.self._01;
					var z8 = camera.transform.local.self._02;
					if(z8 == null) {
						z8 = 0.0;
					}
					if(y8 == null) {
						y8 = 0.0;
					}
					if(x8 == null) {
						x8 = 0.0;
					}
					var inlVec4_x8 = x8;
					var inlVec4_y8 = y8;
					var inlVec4_z8 = z8;
					var inlVec4_w8 = 1.0;
					var x9 = camera.transform.local.self._00;
					var y9 = camera.transform.local.self._01;
					var z9 = camera.transform.local.self._02;
					if(z9 == null) {
						z9 = 0.0;
					}
					if(y9 == null) {
						y9 = 0.0;
					}
					if(x9 == null) {
						x9 = 0.0;
					}
					var inlVec4_x9 = x9;
					var inlVec4_y9 = y9;
					var inlVec4_z9 = z9;
					var inlVec4_w9 = 1.0;
					var x10 = camera.transform.local.self._00;
					var y10 = camera.transform.local.self._01;
					var z10 = camera.transform.local.self._02;
					if(z10 == null) {
						z10 = 0.0;
					}
					if(y10 == null) {
						y10 = 0.0;
					}
					if(x10 == null) {
						x10 = 0.0;
					}
					var inlVec4_x10 = x10;
					var inlVec4_y10 = y10;
					var inlVec4_z10 = z10;
					var inlVec4_w10 = 1.0;
					_this8.x += inlVec4_x8;
					_this8.y += inlVec4_y9;
					_this8.z += inlVec4_z10;
				}
				if(strafeLeft) {
					var _this9 = _gthis.dir;
					var x11 = camera.transform.local.self._00;
					var y11 = camera.transform.local.self._01;
					var z11 = camera.transform.local.self._02;
					if(z11 == null) {
						z11 = 0.0;
					}
					if(y11 == null) {
						y11 = 0.0;
					}
					if(x11 == null) {
						x11 = 0.0;
					}
					var inlVec4_x11 = x11;
					var inlVec4_y11 = y11;
					var inlVec4_z11 = z11;
					var inlVec4_w11 = 1.0;
					var x12 = camera.transform.local.self._00;
					var y12 = camera.transform.local.self._01;
					var z12 = camera.transform.local.self._02;
					if(z12 == null) {
						z12 = 0.0;
					}
					if(y12 == null) {
						y12 = 0.0;
					}
					if(x12 == null) {
						x12 = 0.0;
					}
					var inlVec4_x12 = x12;
					var inlVec4_y12 = y12;
					var inlVec4_z12 = z12;
					var inlVec4_w12 = 1.0;
					var x13 = camera.transform.local.self._00;
					var y13 = camera.transform.local.self._01;
					var z13 = camera.transform.local.self._02;
					if(z13 == null) {
						z13 = 0.0;
					}
					if(y13 == null) {
						y13 = 0.0;
					}
					if(x13 == null) {
						x13 = 0.0;
					}
					var inlVec4_x13 = x13;
					var inlVec4_y13 = y13;
					var inlVec4_z13 = z13;
					var inlVec4_w13 = 1.0;
					_this9.x += -inlVec4_x11;
					_this9.y += -inlVec4_y12;
					_this9.z += -inlVec4_z13;
				}
				if(strafeUp) {
					var _this10 = _gthis.dir;
					_this10.x += 0;
					_this10.y += 0;
					_this10.z += 1;
				}
				if(strafeDown) {
					var _this11 = _gthis.dir;
					_this11.x += 0;
					_this11.y += 0;
					_this11.z += -1;
				}
			} else {
				_gthis.ease -= 0.016666666666666666 * iron_system_Time.scale * 20.0 * _gthis.ease;
				if(_gthis.ease < 0.0) {
					_gthis.ease = 0.0;
				}
			}
			var d = 0.016666666666666666 * iron_system_Time.scale * 2.0 * fast * _gthis.ease;
			if(d > 0.0) {
				camera.transform.move(_gthis.dir,d);
				if(arm_Context.cameraType == 1) {
					arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
				}
			}
			_gthis.redraws = 2;
			camera.transform.rotate(new iron_math_Vec4(0.0,0.0,1.0),-mouse.movementX / 200);
			camera.transform.rotate(new iron_math_Vec4(camera.transform.local.self._00,camera.transform.local.self._01,camera.transform.local.self._02),-mouse.movementY / 200);
		}
		if(_gthis.redraws > 0) {
			_gthis.redraws--;
			arm_Context.ddirty = 2;
			if(arm_Context.cameraType == 1) {
				arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
			}
		}
	});
};
$hxClasses["arm.plugin.Camera"] = arm_plugin_Camera;
arm_plugin_Camera.__name__ = "arm.plugin.Camera";
arm_plugin_Camera.prototype = {
	reset: function() {
		var camera = iron_Scene.active.camera;
		var _this = camera.transform.loc;
		arm_plugin_Camera.dist = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
		var _this1 = camera.transform.local;
		var tmp = new iron_math_Mat4(_this1.self._00,_this1.self._10,_this1.self._20,_this1.self._30,_this1.self._01,_this1.self._11,_this1.self._21,_this1.self._31,_this1.self._02,_this1.self._12,_this1.self._22,_this1.self._32,_this1.self._03,_this1.self._13,_this1.self._23,_this1.self._33);
		var _this2 = camera.transform.local;
		this.views = [tmp,new iron_math_Mat4(_this2.self._00,_this2.self._10,_this2.self._20,_this2.self._30,_this2.self._01,_this2.self._11,_this2.self._21,_this2.self._31,_this2.self._02,_this2.self._12,_this2.self._22,_this2.self._32,_this2.self._03,_this2.self._13,_this2.self._23,_this2.self._33)];
	}
	,panAction: function(modif) {
		var camera = iron_Scene.active.camera;
		var mouse = iron_system_Input.getMouse();
		if(arm_Operator.shortcut(arm_Config.keymap.action_pan) || mouse.down("middle") && !modif) {
			this.redraws = 2;
			var _this = camera.transform.world;
			var x = _this.self._10;
			var y = _this.self._11;
			var z = _this.self._12;
			if(z == null) {
				z = 0.0;
			}
			if(y == null) {
				y = 0.0;
			}
			if(x == null) {
				x = 0.0;
			}
			var look_x = x;
			var look_y = y;
			var look_z = z;
			var look_w = 1.0;
			var n = Math.sqrt(look_x * look_x + look_y * look_y + look_z * look_z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				look_x *= invN;
				look_y *= invN;
				look_z *= invN;
			}
			var f = mouse.movementY / 150;
			look_x *= f;
			look_y *= f;
			look_z *= f;
			var _this1 = camera.transform.world;
			var x1 = _this1.self._00;
			var y1 = _this1.self._01;
			var z1 = _this1.self._02;
			if(z1 == null) {
				z1 = 0.0;
			}
			if(y1 == null) {
				y1 = 0.0;
			}
			if(x1 == null) {
				x1 = 0.0;
			}
			var right_x = x1;
			var right_y = y1;
			var right_z = z1;
			var right_w = 1.0;
			var n1 = Math.sqrt(right_x * right_x + right_y * right_y + right_z * right_z);
			if(n1 > 0.0) {
				var invN1 = 1.0 / n1;
				right_x *= invN1;
				right_y *= invN1;
				right_z *= invN1;
			}
			var f1 = -mouse.movementX / 150;
			right_x *= f1;
			right_y *= f1;
			right_z *= f1;
			var _this2 = camera.transform.loc;
			_this2.x += look_x;
			_this2.y += look_y;
			_this2.z += look_z;
			var _this3 = camera.transform.loc;
			_this3.x += right_x;
			_this3.y += right_y;
			_this3.z += right_z;
			camera.buildMatrix();
		}
	}
	,__class__: arm_plugin_Camera
};
var arm_plugin_Gizmo = function() { };
$hxClasses["arm.plugin.Gizmo"] = arm_plugin_Gizmo;
arm_plugin_Gizmo.__name__ = "arm.plugin.Gizmo";
arm_plugin_Gizmo.update = function() {
	var gizmo = arm_Context.gizmo;
	if(!gizmo.visible) {
		return;
	}
	if(arm_Context.object != null) {
		var cam = iron_Scene.active.camera;
		var _this = gizmo.transform.loc;
		var v = arm_Context.object.transform.loc;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var v1 = cam.transform.loc;
		var v2 = gizmo.transform.loc;
		var vx = v1.x - v2.x;
		var vy = v1.y - v2.y;
		var vz = v1.z - v2.z;
		var dist = Math.sqrt(vx * vx + vy * vy + vz * vz) / 10;
		var _this1 = gizmo.transform.scale;
		_this1.x = dist;
		_this1.y = dist;
		_this1.z = dist;
		_this1.w = 1.0;
		var _this2 = arm_Context.gizmoX.transform.scale;
		_this2.x = dist;
		_this2.y = dist;
		_this2.z = dist;
		_this2.w = 1.0;
		var _this3 = arm_Context.gizmoY.transform.scale;
		_this3.x = dist;
		_this3.y = dist;
		_this3.z = dist;
		_this3.w = 1.0;
		var _this4 = arm_Context.gizmoZ.transform.scale;
		_this4.x = dist;
		_this4.y = dist;
		_this4.z = dist;
		_this4.w = 1.0;
		gizmo.transform.buildMatrix();
	}
	var mouse = iron_system_Input.getMouse();
	var kb = iron_system_Input.getKeyboard();
	if(mouse.x - arm_App.x() < arm_App.w()) {
		if(kb.started("delete") || kb.started("backspace")) {
			if(arm_Context.object != null) {
				arm_Context.object.remove();
				arm_Context.selectObject(iron_Scene.active.getChild("Scene"));
			}
		}
		if(kb.started("c") && arm_Context.object != null) {
			if(((arm_Context.object) instanceof iron_object_MeshObject)) {
				var mo = js_Boot.__cast(arm_Context.object , iron_object_MeshObject);
				var object = iron_Scene.active.addMeshObject(mo.data,mo.materials,iron_Scene.active.getChild("Scene"));
				object.name = mo.name + ".1";
				var _this5 = object.transform.loc;
				var v3 = mo.transform.loc;
				_this5.x = v3.x;
				_this5.y = v3.y;
				_this5.z = v3.z;
				_this5.w = v3.w;
				var _this6 = object.transform.rot;
				var q = mo.transform.rot;
				_this6.x = q.x;
				_this6.y = q.y;
				_this6.z = q.z;
				_this6.w = q.w;
				var _this7 = object.transform.scale;
				var v4 = mo.transform.scale;
				_this7.x = v4.x;
				_this7.y = v4.y;
				_this7.z = v4.z;
				_this7.w = v4.w;
				var hit = iron_math_RayCaster.planeIntersect(new iron_math_Vec4(0.0,0.0,1.0),new iron_math_Vec4(),mouse.x - arm_App.x(),mouse.y - arm_App.y(),iron_Scene.active.camera);
				if(hit != null) {
					object.transform.loc.x = hit.x;
					object.transform.loc.y = hit.y;
					object.transform.setRotation(0,0,Math.random() * 3.1516 * 2);
				}
				object.transform.buildMatrix();
				var _g = 0;
				var _g1 = mo.traits;
				while(_g < _g1.length) {
					var t = _g1[_g];
					++_g;
					var trait = Type.createInstance(js_Boot.getClass(t),[]);
					object.addTrait(trait);
				}
				arm_Context.selectObject(object);
			} else if(((arm_Context.object) instanceof iron_object_LightObject)) {
				var lo = js_Boot.__cast(arm_Context.object , iron_object_LightObject);
				var object1 = iron_Scene.active.addLightObject(lo.data,iron_Scene.active.getChild("Scene"));
				object1.name = lo.name + ".1";
				var _this8 = object1.transform.loc;
				var v5 = lo.transform.loc;
				_this8.x = v5.x;
				_this8.y = v5.y;
				_this8.z = v5.z;
				_this8.w = v5.w;
				var _this9 = object1.transform.rot;
				var q1 = lo.transform.rot;
				_this9.x = q1.x;
				_this9.y = q1.y;
				_this9.z = q1.z;
				_this9.w = q1.w;
				var _this10 = object1.transform.scale;
				var v6 = lo.transform.scale;
				_this10.x = v6.x;
				_this10.y = v6.y;
				_this10.z = v6.z;
				_this10.w = v6.w;
				object1.transform.buildMatrix();
				arm_Context.selectObject(object1);
			}
			arm_Context.rdirty = 3;
			arm_Context.ddirty = 3;
		}
		if(kb.started("m")) {
			var raw = arm_Context.materialScene.data.raw;
			raw.skip_context = raw.skip_context == "" ? "voxel" : "";
		}
	}
	var tmp = mouse.started("middle");
	if(mouse.started("left") && arm_Context.object.name != "Scene") {
		gizmo.transform.buildMatrix();
		var trs = [arm_Context.gizmoX.transform,arm_Context.gizmoY.transform,arm_Context.gizmoZ.transform];
		var hit1 = iron_math_RayCaster.closestBoxIntersect(trs,mouse.x - arm_App.x(),mouse.y - arm_App.y(),iron_Scene.active.camera);
		if(hit1 != null) {
			if(hit1.object == arm_Context.gizmoX) {
				arm_Context.axisX = true;
			} else if(hit1.object == arm_Context.gizmoY) {
				arm_Context.axisY = true;
			} else if(hit1.object == arm_Context.gizmoZ) {
				arm_Context.axisZ = true;
			}
			if(arm_Context.axisX || arm_Context.axisY || arm_Context.axisZ) {
				arm_Context.axisStart = 0.0;
			}
		}
	} else if(mouse.released("left")) {
		arm_Context.axisX = arm_Context.axisY = arm_Context.axisZ = false;
	}
	if(arm_Context.axisX || arm_Context.axisY || arm_Context.axisZ) {
		var t1 = arm_Context.object.transform;
		var v7 = new iron_math_Vec4();
		v7.x = t1.world.self._30;
		v7.y = t1.world.self._31;
		v7.z = t1.world.self._32;
		v7.w = 1.0;
		if(arm_Context.axisX) {
			var hit2 = iron_math_RayCaster.planeIntersect(new iron_math_Vec4(0.0,1.0,0.0),v7,mouse.x - arm_App.x(),mouse.y - arm_App.y(),iron_Scene.active.camera);
			if(hit2 != null) {
				if(arm_Context.axisStart == 0) {
					arm_Context.axisStart = hit2.x - arm_Context.object.transform.loc.x;
				}
				arm_Context.object.transform.loc.x = hit2.x - arm_Context.axisStart;
				arm_Context.object.transform.buildMatrix();
			}
		} else if(arm_Context.axisY) {
			var hit3 = iron_math_RayCaster.planeIntersect(new iron_math_Vec4(1.0,0.0,0.0),v7,mouse.x - arm_App.x(),mouse.y - arm_App.y(),iron_Scene.active.camera);
			if(hit3 != null) {
				if(arm_Context.axisStart == 0) {
					arm_Context.axisStart = hit3.y - arm_Context.object.transform.loc.y;
				}
				arm_Context.object.transform.loc.y = hit3.y - arm_Context.axisStart;
				arm_Context.object.transform.buildMatrix();
			}
		} else if(arm_Context.axisZ) {
			var hit4 = iron_math_RayCaster.planeIntersect(new iron_math_Vec4(1.0,0.0,0.0),v7,mouse.x - arm_App.x(),mouse.y - arm_App.y(),iron_Scene.active.camera);
			if(hit4 != null) {
				if(arm_Context.axisStart == 0) {
					arm_Context.axisStart = hit4.z - arm_Context.object.transform.loc.z;
				}
				arm_Context.object.transform.loc.z = hit4.z - arm_Context.axisStart;
				arm_Context.object.transform.buildMatrix();
			}
		}
	}
	iron_system_Input.occupied = (arm_Context.axisX || arm_Context.axisY || arm_Context.axisZ) && mouse.x - arm_App.x() < arm_App.w();
};
var arm_render_Inc = function() { };
$hxClasses["arm.render.Inc"] = arm_render_Inc;
arm_render_Inc.__name__ = "arm.render.Inc";
arm_render_Inc.init = function(_path) {
	arm_render_Inc.path = _path;
	var config = arm_Config.raw;
	arm_render_Inc.superSample = config.rp_supersample;
};
arm_render_Inc.applyConfig = function() {
	var config = arm_Config.raw;
	if(arm_render_Inc.superSample != config.rp_supersample) {
		arm_render_Inc.superSample = config.rp_supersample;
		var _this = arm_render_Inc.path.renderTargets;
		var rt = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(rt.hasNext()) {
			var rt1 = rt.next();
			if(rt1.raw.width == 0 && rt1.raw.scale != null) {
				rt1.raw.scale = arm_render_Inc.superSample;
			}
		}
		arm_render_Inc.path.resize();
	}
	if(!arm_render_Inc.voxelsCreated) {
		arm_render_Inc.initGI();
	}
};
arm_render_Inc.initGI = function(tname) {
	if(tname == null) {
		tname = "voxels";
	}
	var config = arm_Config.raw;
	if(config.rp_gi != true || arm_render_Inc.voxelsCreated) {
		return;
	}
	arm_render_Inc.voxelsCreated = true;
	var t = new iron_RenderTargetRaw();
	t.name = tname;
	t.format = "R8";
	var res = 256;
	var resZ = 1.0;
	t.width = res;
	t.height = res;
	t.depth = res * resZ | 0;
	t.is_image = true;
	t.mipmaps = true;
	arm_render_Inc.path.createRenderTarget(t);
};
arm_render_Inc.drawCompass = function(currentG) {
	if(arm_Context.showCompass) {
		var scene = iron_Scene.active;
		var cam = iron_Scene.active.camera;
		var gizmo = scene.getChild(".GizmoTranslate");
		var visible = gizmo.visible;
		var parent = gizmo.parent;
		var loc = gizmo.transform.loc;
		var rot = gizmo.transform.rot;
		var crot = cam.transform.rot;
		var ratio = arm_App.w() / arm_App.h();
		var P = cam.P;
		var left = -8 * ratio;
		var right = 8 * ratio;
		var rl = right - left;
		var tb = 16;
		var fn = 4;
		var tx = -(right + left) / rl;
		var ty = 0 / tb;
		var tz = 0 / fn;
		cam.P = new iron_math_Mat4(2 / rl,0,0,tx,0,2 / tb,0,ty,0,0,-2 / fn,tz,0,0,0,1);
		gizmo.visible = true;
		gizmo.parent = cam;
		gizmo.transform.loc = new iron_math_Vec4(7.2 * ratio,-7.6,-1);
		gizmo.transform.rot = new iron_math_Quat(-crot.x,-crot.y,-crot.z,crot.w);
		var _this = gizmo.transform.scale;
		_this.x = 0.5;
		_this.y = 0.5;
		_this.z = 0.5;
		_this.w = 1.0;
		gizmo.transform.buildMatrix();
		gizmo.render(currentG,"overlay",[]);
		cam.P = P;
		gizmo.visible = visible;
		gizmo.parent = parent;
		gizmo.transform.loc = loc;
		gizmo.transform.rot = rot;
		gizmo.transform.buildMatrix();
	}
};
arm_render_Inc.beginSplit = function() {
	if(arm_Context.splitView) {
		if(arm_Context.viewIndexLast == -1 && arm_Context.viewIndex == -1) {
			arm_Context.viewIndex = 1;
		} else {
			arm_Context.viewIndex = iron_system_Input.getMouse().x - arm_App.x() > arm_App.w() / 2 ? 1 : 0;
		}
		var cam = iron_Scene.active.camera;
		if(arm_Context.viewIndexLast > -1) {
			var _this = arm_plugin_Camera.inst.views[arm_Context.viewIndexLast];
			var m = cam.transform.local;
			_this.self._00 = m.self._00;
			_this.self._01 = m.self._01;
			_this.self._02 = m.self._02;
			_this.self._03 = m.self._03;
			_this.self._10 = m.self._10;
			_this.self._11 = m.self._11;
			_this.self._12 = m.self._12;
			_this.self._13 = m.self._13;
			_this.self._20 = m.self._20;
			_this.self._21 = m.self._21;
			_this.self._22 = m.self._22;
			_this.self._23 = m.self._23;
			_this.self._30 = m.self._30;
			_this.self._31 = m.self._31;
			_this.self._32 = m.self._32;
			_this.self._33 = m.self._33;
		}
		if(arm_Context.viewIndexLast != arm_Context.viewIndex) {
			arm_Context.ddirty = 1;
		}
		cam.transform.setMatrix(arm_plugin_Camera.inst.views[arm_Context.viewIndex]);
		cam.buildMatrix();
		cam.buildProjection();
	}
};
arm_render_Inc.endSplit = function() {
	arm_Context.viewIndexLast = arm_Context.viewIndex;
	arm_Context.viewIndex = -1;
};
arm_render_Inc.isCached = function() {
	var mouse = iron_system_Input.getMouse();
	var mx = arm_render_Inc.lastX;
	var my = arm_render_Inc.lastY;
	arm_render_Inc.lastX = mouse.x - arm_App.x();
	arm_render_Inc.lastY = mouse.y - arm_App.y();
	if(arm_Config.raw.brush_live) {
		var inViewport = arm_Context.paintVec.x < 1 && arm_Context.paintVec.x > 0 && arm_Context.paintVec.y < 1 && arm_Context.paintVec.y > 0;
		var in2dView = arm_ui_UIView2D.inst.show && arm_ui_UIView2D.inst.type == 0 && mx > arm_ui_UIView2D.inst.wx && mx < arm_ui_UIView2D.inst.wx + arm_ui_UIView2D.inst.ww && my > arm_ui_UIView2D.inst.wy && my < arm_ui_UIView2D.inst.wy + arm_ui_UIView2D.inst.wh;
		if((mx != arm_render_Inc.lastX || my != arm_render_Inc.lastY || arm_Context.brushLocked) && (inViewport || in2dView)) {
			arm_Context.rdirty = 2;
			arm_Context.sub = 0;
		}
	}
	if(arm_Context.ddirty <= 0 && arm_Context.rdirty <= 0 && (arm_Context.pdirty <= 0 || arm_ui_UIHeader.inst.worktab.position == 1)) {
		if(mx != arm_render_Inc.lastX || my != arm_render_Inc.lastY || mouse.locked) {
			arm_Context.ddirty = 0;
		}
		if(arm_Context.ddirty > -2) {
			arm_render_Inc.path.setTarget("");
			arm_render_Inc.path.bindTarget("taa","tex");
			if(arm_Config.raw.rp_supersample == 4) {
				arm_render_Inc.path.drawShader("shader_datas/supersample_resolve/supersample_resolve");
			} else {
				arm_render_Inc.path.drawShader("shader_datas/copy_pass/copy_pass");
			}
			if(arm_Config.raw.brush_3d) {
				arm_render_RenderPathPaint.commandsCursor();
			}
			if(arm_Context.ddirty <= 0) {
				arm_Context.ddirty--;
			}
		}
		arm_render_Inc.endSplit();
		arm_render_RenderPathPaint.finishPaint();
		return true;
	}
	return false;
};
var arm_render_RenderPathDeferred = function() { };
$hxClasses["arm.render.RenderPathDeferred"] = arm_render_RenderPathDeferred;
arm_render_RenderPathDeferred.__name__ = "arm.render.RenderPathDeferred";
arm_render_RenderPathDeferred.init = function(_path) {
	arm_render_RenderPathDeferred.path = _path;
	arm_render_RenderPathDeferred.path.createDepthBuffer("main","DEPTH24");
	var t = new iron_RenderTargetRaw();
	t.name = "gbuffer0";
	t.width = 0;
	t.height = 0;
	t.format = "RGBA64";
	t.scale = arm_render_Inc.superSample;
	t.depth_buffer = "main";
	arm_render_RenderPathDeferred.path.createRenderTarget(t);
	var t1 = new iron_RenderTargetRaw();
	t1.name = "gbuffer1";
	t1.width = 0;
	t1.height = 0;
	t1.format = "RGBA64";
	t1.scale = arm_render_Inc.superSample;
	arm_render_RenderPathDeferred.path.createRenderTarget(t1);
	var t2 = new iron_RenderTargetRaw();
	t2.name = "gbuffer2";
	t2.width = 0;
	t2.height = 0;
	t2.format = "RGBA64";
	t2.scale = arm_render_Inc.superSample;
	arm_render_RenderPathDeferred.path.createRenderTarget(t2);
	var t3 = new iron_RenderTargetRaw();
	t3.name = "tex";
	t3.width = 0;
	t3.height = 0;
	t3.format = "RGBA64";
	t3.scale = arm_render_Inc.superSample;
	t3.depth_buffer = "main";
	arm_render_RenderPathDeferred.path.createRenderTarget(t3);
	var t4 = new iron_RenderTargetRaw();
	t4.name = "buf";
	t4.width = 0;
	t4.height = 0;
	t4.format = "RGBA64";
	t4.scale = arm_render_Inc.superSample;
	arm_render_RenderPathDeferred.path.createRenderTarget(t4);
	var t5 = new iron_RenderTargetRaw();
	t5.name = "bufa";
	t5.width = 0;
	t5.height = 0;
	t5.format = "RGBA32";
	t5.scale = arm_render_Inc.superSample;
	arm_render_RenderPathDeferred.path.createRenderTarget(t5);
	var t6 = new iron_RenderTargetRaw();
	t6.name = "taa";
	t6.width = 0;
	t6.height = 0;
	t6.format = "RGBA32";
	t6.scale = arm_render_Inc.superSample;
	arm_render_RenderPathDeferred.path.createRenderTarget(t6);
	var t7 = new iron_RenderTargetRaw();
	t7.name = "taa2";
	t7.width = 0;
	t7.height = 0;
	t7.format = "RGBA32";
	t7.scale = arm_render_Inc.superSample;
	arm_render_RenderPathDeferred.path.createRenderTarget(t7);
	var t8 = new iron_RenderTargetRaw();
	t8.name = "empty_white";
	t8.width = 1;
	t8.height = 1;
	t8.format = "R8";
	var rt = new iron_RenderTarget(t8);
	var b = new haxe_io_Bytes(new ArrayBuffer(1));
	b.b[0] = 255;
	rt.image = kha_Image.fromBytes(b,t8.width,t8.height,1);
	var key = t8.name;
	var _this = arm_render_RenderPathDeferred.path.renderTargets;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,rt);
	} else {
		_this.h[key] = rt;
	}
	var t9 = new iron_RenderTargetRaw();
	t9.name = "empty_black";
	t9.width = 1;
	t9.height = 1;
	t9.format = "RGBA32";
	var rt1 = new iron_RenderTarget(t9);
	var b1 = new haxe_io_Bytes(new ArrayBuffer(4));
	b1.b[0] = 0;
	b1.b[1] = 0;
	b1.b[2] = 0;
	b1.b[3] = 0;
	rt1.image = kha_Image.fromBytes(b1,t9.width,t9.height,0);
	var key1 = t9.name;
	var _this1 = arm_render_RenderPathDeferred.path.renderTargets;
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,rt1);
	} else {
		_this1.h[key1] = rt1;
	}
	arm_render_RenderPathDeferred.path.loadShader("world_pass/world_pass/world_pass");
	arm_render_RenderPathDeferred.path.loadShader("deferred_light/deferred_light/deferred_light");
	arm_render_RenderPathDeferred.path.loadShader("shader_datas/compositor_pass/compositor_pass");
	arm_render_RenderPathDeferred.path.loadShader("shader_datas/copy_pass/copy_pass");
	arm_render_RenderPathDeferred.path.loadShader("shader_datas/smaa_edge_detect/smaa_edge_detect");
	arm_render_RenderPathDeferred.path.loadShader("shader_datas/smaa_blend_weight/smaa_blend_weight");
	arm_render_RenderPathDeferred.path.loadShader("shader_datas/smaa_neighborhood_blend/smaa_neighborhood_blend");
	arm_render_RenderPathDeferred.path.loadShader("shader_datas/taa_pass/taa_pass");
	arm_render_RenderPathDeferred.path.loadShader("shader_datas/supersample_resolve/supersample_resolve");
	arm_render_Inc.initGI();
	arm_render_RenderPathDeferred.path.loadShader("deferred_light/deferred_light/deferred_light_voxel");
	arm_render_RenderPathPaint.init(arm_render_RenderPathDeferred.path);
	arm_render_RenderPathPreview.init(arm_render_RenderPathDeferred.path);
};
arm_render_RenderPathDeferred.commands = function() {
	if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
		return;
	}
	arm_render_Inc.beginSplit();
	if(arm_render_Inc.isCached()) {
		return;
	}
	var skipTaa = arm_Context.splitView;
	if(!skipTaa) {
		iron_Scene.active.camera.frame = arm_render_RenderPathDeferred.taaFrame;
		iron_Scene.active.camera.projectionJitter();
	}
	iron_Scene.active.camera.buildMatrix();
	arm_render_RenderPathPaint.begin();
	arm_render_RenderPathDeferred.drawSplit();
	arm_render_RenderPathDeferred.drawGbuffer();
	arm_render_RenderPathPaint.draw();
	arm_render_RenderPathDeferred.drawDeferred();
	arm_render_RenderPathPaint.end();
	arm_render_Inc.endSplit();
	arm_render_RenderPathDeferred.taaFrame++;
};
arm_render_RenderPathDeferred.drawDeferred = function() {
	var cameraType = arm_Context.cameraType;
	var ddirty = arm_Context.ddirty;
	var ssgi = arm_Config.raw.rp_ssgi != false && cameraType == 0;
	if(ssgi && ddirty > 0 && arm_render_RenderPathDeferred.taaFrame > 0) {
		var _this = arm_render_RenderPathDeferred.path.renderTargets;
		if((__map_reserved["singlea"] != null ? _this.getReserved("singlea") : _this.h["singlea"]) == null) {
			var t = new iron_RenderTargetRaw();
			t.name = "singlea";
			t.width = 0;
			t.height = 0;
			t.format = "R8";
			t.scale = arm_render_Inc.superSample;
			arm_render_RenderPathDeferred.path.createRenderTarget(t);
			var t1 = new iron_RenderTargetRaw();
			t1.name = "singleb";
			t1.width = 0;
			t1.height = 0;
			t1.format = "R8";
			t1.scale = arm_render_Inc.superSample;
			arm_render_RenderPathDeferred.path.createRenderTarget(t1);
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/ssgi_pass/ssgi_pass");
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/blur_edge_pass/blur_edge_pass_x");
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/blur_edge_pass/blur_edge_pass_y");
		}
		arm_render_RenderPathDeferred.path.setTarget("singlea");
		arm_render_RenderPathDeferred.path.bindTarget("_main","gbufferD");
		arm_render_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/ssgi_pass/ssgi_pass");
		arm_render_RenderPathDeferred.path.setTarget("singleb");
		arm_render_RenderPathDeferred.path.bindTarget("singlea","tex");
		arm_render_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_edge_pass/blur_edge_pass_x");
		arm_render_RenderPathDeferred.path.setTarget("singlea");
		arm_render_RenderPathDeferred.path.bindTarget("singleb","tex");
		arm_render_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_edge_pass/blur_edge_pass_y");
	}
	if(arm_Config.raw.rp_gi != false) {
		var voxelize = arm_render_RenderPathDeferred.path.voxelize() && ddirty > 0 && arm_render_RenderPathDeferred.taaFrame > 0;
		if(voxelize) {
			var res = 256;
			var voxtex = arm_render_RenderPathDeferred.voxels;
			arm_render_RenderPathDeferred.path.clearImage(voxtex,0);
			arm_render_RenderPathDeferred.path.setTarget("");
			arm_render_RenderPathDeferred.path.setViewport(res,res);
			arm_render_RenderPathDeferred.path.bindTarget(voxtex,"voxels");
			if(arm_node_MaterialBuilder.heightUsed) {
				var tid = arm_Project.layers[0].id;
				arm_render_RenderPathDeferred.path.bindTarget("texpaint_pack" + tid,"texpaint_pack");
			}
			arm_render_RenderPathDeferred.path.drawMeshes("voxel");
			arm_render_RenderPathDeferred.path.generateMipmaps(arm_render_RenderPathDeferred.voxels);
		}
	}
	arm_render_RenderPathDeferred.path.setDepthFrom("tex","gbuffer1");
	arm_render_RenderPathDeferred.path.setTarget("tex");
	arm_render_RenderPathDeferred.path.bindTarget("_main","gbufferD");
	arm_render_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
	arm_render_RenderPathDeferred.path.bindTarget("gbuffer1","gbuffer1");
	var ssgi1 = arm_Config.raw.rp_ssgi != false && cameraType == 0;
	if(ssgi1 && arm_render_RenderPathDeferred.taaFrame > 0) {
		arm_render_RenderPathDeferred.path.bindTarget("singlea","ssaotex");
	} else {
		arm_render_RenderPathDeferred.path.bindTarget("empty_white","ssaotex");
	}
	var voxelao_pass = false;
	if(arm_Config.raw.rp_gi != false) {
		voxelao_pass = true;
		arm_render_RenderPathDeferred.path.bindTarget(arm_render_RenderPathDeferred.voxels,"voxels");
	}
	if(voxelao_pass) {
		arm_render_RenderPathDeferred.path.drawShader("deferred_light/deferred_light/deferred_light_voxel");
	} else {
		arm_render_RenderPathDeferred.path.drawShader("deferred_light/deferred_light/deferred_light");
	}
	arm_render_RenderPathDeferred.path.setDepthFrom("tex","gbuffer0");
	arm_render_RenderPathDeferred.path.setTarget("tex");
	arm_render_RenderPathDeferred.path.drawSkydome("world_pass/world_pass/world_pass");
	if(arm_Config.raw.rp_bloom != false) {
		var _this1 = arm_render_RenderPathDeferred.path.renderTargets;
		if((__map_reserved["bloomtex"] != null ? _this1.getReserved("bloomtex") : _this1.h["bloomtex"]) == null) {
			var t2 = new iron_RenderTargetRaw();
			t2.name = "bloomtex";
			t2.width = 0;
			t2.height = 0;
			t2.scale = 0.25;
			t2.format = "RGBA64";
			arm_render_RenderPathDeferred.path.createRenderTarget(t2);
			var t3 = new iron_RenderTargetRaw();
			t3.name = "bloomtex2";
			t3.width = 0;
			t3.height = 0;
			t3.scale = 0.25;
			t3.format = "RGBA64";
			arm_render_RenderPathDeferred.path.createRenderTarget(t3);
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/bloom_pass/bloom_pass");
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y");
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y_blend");
		}
		arm_render_RenderPathDeferred.path.setTarget("bloomtex");
		arm_render_RenderPathDeferred.path.bindTarget("tex","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/bloom_pass/bloom_pass");
		arm_render_RenderPathDeferred.path.setTarget("bloomtex2");
		arm_render_RenderPathDeferred.path.bindTarget("bloomtex","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
		arm_render_RenderPathDeferred.path.setTarget("bloomtex");
		arm_render_RenderPathDeferred.path.bindTarget("bloomtex2","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y");
		arm_render_RenderPathDeferred.path.setTarget("bloomtex2");
		arm_render_RenderPathDeferred.path.bindTarget("bloomtex","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
		arm_render_RenderPathDeferred.path.setTarget("bloomtex");
		arm_render_RenderPathDeferred.path.bindTarget("bloomtex2","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y");
		arm_render_RenderPathDeferred.path.setTarget("bloomtex2");
		arm_render_RenderPathDeferred.path.bindTarget("bloomtex","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
		arm_render_RenderPathDeferred.path.setTarget("bloomtex");
		arm_render_RenderPathDeferred.path.bindTarget("bloomtex2","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y");
		arm_render_RenderPathDeferred.path.setTarget("bloomtex2");
		arm_render_RenderPathDeferred.path.bindTarget("bloomtex","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
		arm_render_RenderPathDeferred.path.setTarget("tex");
		arm_render_RenderPathDeferred.path.bindTarget("bloomtex2","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y_blend");
	}
	if(arm_Config.raw.rp_ssr != false) {
		var _this2 = arm_render_RenderPathDeferred.path.cachedShaderContexts;
		if((__map_reserved["shader_datas/ssr_pass/ssr_pass"] != null ? _this2.getReserved("shader_datas/ssr_pass/ssr_pass") : _this2.h["shader_datas/ssr_pass/ssr_pass"]) == null) {
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/ssr_pass/ssr_pass");
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/blur_adaptive_pass/blur_adaptive_pass_x");
			arm_render_RenderPathDeferred.path.loadShader("shader_datas/blur_adaptive_pass/blur_adaptive_pass_y3_blend");
		}
		var targeta = "buf";
		var targetb = "gbuffer1";
		arm_render_RenderPathDeferred.path.setTarget(targeta);
		arm_render_RenderPathDeferred.path.bindTarget("tex","tex");
		arm_render_RenderPathDeferred.path.bindTarget("_main","gbufferD");
		arm_render_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		arm_render_RenderPathDeferred.path.bindTarget("gbuffer1","gbuffer1");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/ssr_pass/ssr_pass");
		arm_render_RenderPathDeferred.path.setTarget(targetb);
		arm_render_RenderPathDeferred.path.bindTarget(targeta,"tex");
		arm_render_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_adaptive_pass/blur_adaptive_pass_x");
		arm_render_RenderPathDeferred.path.setTarget("tex");
		arm_render_RenderPathDeferred.path.bindTarget(targetb,"tex");
		arm_render_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/blur_adaptive_pass/blur_adaptive_pass_y3_blend");
	}
	arm_render_RenderPathDeferred.path.setTarget("buf");
	arm_render_RenderPathDeferred.path.bindTarget("tex","tex");
	arm_render_RenderPathDeferred.path.drawShader("shader_datas/compositor_pass/compositor_pass");
	arm_render_RenderPathDeferred.path.setTarget("buf");
	var currentG = arm_render_RenderPathDeferred.path.currentG;
	arm_render_RenderPathDeferred.path.drawMeshes("overlay");
	arm_render_Inc.drawCompass(currentG);
	var current = arm_render_RenderPathDeferred.taaFrame % 2 == 0 ? "bufa" : "taa2";
	var last = arm_render_RenderPathDeferred.taaFrame % 2 == 0 ? "taa2" : "bufa";
	arm_render_RenderPathDeferred.path.setTarget(current);
	arm_render_RenderPathDeferred.path.clearTarget(0);
	arm_render_RenderPathDeferred.path.bindTarget("buf","colorTex");
	arm_render_RenderPathDeferred.path.drawShader("shader_datas/smaa_edge_detect/smaa_edge_detect");
	arm_render_RenderPathDeferred.path.setTarget("taa");
	arm_render_RenderPathDeferred.path.clearTarget(0);
	arm_render_RenderPathDeferred.path.bindTarget(current,"edgesTex");
	arm_render_RenderPathDeferred.path.drawShader("shader_datas/smaa_blend_weight/smaa_blend_weight");
	arm_render_RenderPathDeferred.path.setTarget(current);
	arm_render_RenderPathDeferred.path.bindTarget("buf","colorTex");
	arm_render_RenderPathDeferred.path.bindTarget("taa","blendTex");
	arm_render_RenderPathDeferred.path.bindTarget("gbuffer2","sveloc");
	arm_render_RenderPathDeferred.path.drawShader("shader_datas/smaa_neighborhood_blend/smaa_neighborhood_blend");
	var skipTaa = arm_Context.splitView;
	if(skipTaa) {
		arm_render_RenderPathDeferred.path.setTarget("taa");
		arm_render_RenderPathDeferred.path.bindTarget(current,"tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/copy_pass/copy_pass");
	} else {
		arm_render_RenderPathDeferred.path.setTarget("taa");
		arm_render_RenderPathDeferred.path.bindTarget(current,"tex");
		arm_render_RenderPathDeferred.path.bindTarget(last,"tex2");
		arm_render_RenderPathDeferred.path.bindTarget("gbuffer2","sveloc");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/taa_pass/taa_pass");
	}
	if(arm_Config.raw.rp_supersample != 4) {
		arm_render_RenderPathDeferred.path.setTarget("");
		arm_render_RenderPathDeferred.path.bindTarget(arm_render_RenderPathDeferred.taaFrame == 0 ? current : "taa","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/copy_pass/copy_pass");
	}
	if(arm_Config.raw.rp_supersample == 4) {
		arm_render_RenderPathDeferred.path.setTarget("");
		arm_render_RenderPathDeferred.path.bindTarget(arm_render_RenderPathDeferred.taaFrame % 2 == 0 ? "taa2" : "taa","tex");
		arm_render_RenderPathDeferred.path.drawShader("shader_datas/supersample_resolve/supersample_resolve");
	}
};
arm_render_RenderPathDeferred.drawGbuffer = function() {
	arm_render_RenderPathDeferred.path.setTarget("gbuffer0");
	arm_render_RenderPathDeferred.path.clearTarget(null,1.0);
	arm_render_RenderPathDeferred.path.setTarget("gbuffer2");
	arm_render_RenderPathDeferred.path.clearTarget(-16777216);
	arm_render_RenderPathDeferred.path.setTarget("gbuffer0",["gbuffer1","gbuffer2"]);
	arm_render_RenderPathPaint.bindLayers();
	arm_render_RenderPathDeferred.path.drawMeshes("mesh");
	arm_render_RenderPathPaint.unbindLayers();
};
arm_render_RenderPathDeferred.drawSplit = function() {
	if(arm_Context.splitView) {
		if(arm_Context.pdirty > 0) {
			var cam = iron_Scene.active.camera;
			arm_Context.viewIndex = arm_Context.viewIndex == 0 ? 1 : 0;
			cam.transform.setMatrix(arm_plugin_Camera.inst.views[arm_Context.viewIndex]);
			cam.buildMatrix();
			cam.buildProjection();
			arm_render_RenderPathDeferred.drawGbuffer();
			arm_render_RenderPathDeferred.drawDeferred();
			arm_Context.viewIndex = arm_Context.viewIndex == 0 ? 1 : 0;
			cam.transform.setMatrix(arm_plugin_Camera.inst.views[arm_Context.viewIndex]);
			cam.buildMatrix();
			cam.buildProjection();
		}
	}
};
var arm_render_RenderPathForward = function() { };
$hxClasses["arm.render.RenderPathForward"] = arm_render_RenderPathForward;
arm_render_RenderPathForward.__name__ = "arm.render.RenderPathForward";
arm_render_RenderPathForward.init = function(_path) {
	arm_render_RenderPathForward.path = _path;
};
arm_render_RenderPathForward.commands = function() {
	if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
		return;
	}
	arm_render_Inc.beginSplit();
	if(arm_render_Inc.isCached()) {
		return;
	}
	var skipTaa = arm_Context.splitView;
	if(!skipTaa) {
		iron_Scene.active.camera.frame = arm_render_RenderPathDeferred.taaFrame;
		iron_Scene.active.camera.projectionJitter();
	}
	iron_Scene.active.camera.buildMatrix();
	arm_render_RenderPathPaint.begin();
	arm_render_RenderPathForward.drawSplit();
	arm_render_RenderPathForward.drawGbuffer();
	arm_render_RenderPathPaint.draw();
	arm_render_RenderPathForward.drawForward();
	arm_render_RenderPathPaint.end();
	arm_render_Inc.endSplit();
	arm_render_RenderPathDeferred.taaFrame++;
};
arm_render_RenderPathForward.drawGbuffer = function() {
	arm_render_RenderPathForward.path.setTarget("gbuffer0");
	arm_render_RenderPathForward.path.clearTarget(null,1.0);
	arm_render_RenderPathForward.path.setTarget("gbuffer2");
	arm_render_RenderPathForward.path.clearTarget(-16777216);
	arm_render_RenderPathForward.path.setTarget("gbuffer0",["gbuffer1","gbuffer2"]);
	arm_render_RenderPathPaint.bindLayers();
	arm_render_RenderPathForward.path.drawMeshes("mesh");
	arm_render_RenderPathPaint.unbindLayers();
};
arm_render_RenderPathForward.drawForward = function() {
	arm_render_RenderPathForward.path.setDepthFrom("gbuffer1","gbuffer0");
	arm_render_RenderPathForward.path.setTarget("gbuffer1");
	arm_render_RenderPathForward.path.drawSkydome("world_pass/world_pass/world_pass");
	arm_render_RenderPathForward.path.setDepthFrom("gbuffer1","gbuffer2");
	arm_render_RenderPathForward.path.setTarget("buf");
	arm_render_RenderPathForward.path.bindTarget("gbuffer1","tex");
	arm_render_RenderPathForward.path.drawShader("shader_datas/compositor_pass/compositor_pass");
	arm_render_RenderPathForward.path.setTarget("buf");
	var currentG = arm_render_RenderPathForward.path.currentG;
	arm_render_RenderPathForward.path.drawMeshes("overlay");
	arm_render_Inc.drawCompass(currentG);
	var taaFrame = arm_render_RenderPathDeferred.taaFrame;
	var current = taaFrame % 2 == 0 ? "bufa" : "taa2";
	var last = taaFrame % 2 == 0 ? "taa2" : "bufa";
	arm_render_RenderPathForward.path.setTarget(current);
	arm_render_RenderPathForward.path.clearTarget(0);
	arm_render_RenderPathForward.path.bindTarget("buf","colorTex");
	arm_render_RenderPathForward.path.drawShader("shader_datas/smaa_edge_detect/smaa_edge_detect");
	arm_render_RenderPathForward.path.setTarget("taa");
	arm_render_RenderPathForward.path.clearTarget(0);
	arm_render_RenderPathForward.path.bindTarget(current,"edgesTex");
	arm_render_RenderPathForward.path.drawShader("shader_datas/smaa_blend_weight/smaa_blend_weight");
	arm_render_RenderPathForward.path.setTarget(current);
	arm_render_RenderPathForward.path.bindTarget("buf","colorTex");
	arm_render_RenderPathForward.path.bindTarget("taa","blendTex");
	arm_render_RenderPathForward.path.bindTarget("gbuffer2","sveloc");
	arm_render_RenderPathForward.path.drawShader("shader_datas/smaa_neighborhood_blend/smaa_neighborhood_blend");
	var skipTaa = arm_Context.splitView;
	if(skipTaa) {
		arm_render_RenderPathForward.path.setTarget("taa");
		arm_render_RenderPathForward.path.bindTarget(current,"tex");
		arm_render_RenderPathForward.path.drawShader("shader_datas/copy_pass/copy_pass");
	} else {
		arm_render_RenderPathForward.path.setTarget("taa");
		arm_render_RenderPathForward.path.bindTarget(current,"tex");
		arm_render_RenderPathForward.path.bindTarget(last,"tex2");
		arm_render_RenderPathForward.path.bindTarget("gbuffer2","sveloc");
		arm_render_RenderPathForward.path.drawShader("shader_datas/taa_pass/taa_pass");
	}
	if(arm_Config.raw.rp_supersample != 4) {
		arm_render_RenderPathForward.path.setTarget("");
		arm_render_RenderPathForward.path.bindTarget(taaFrame == 0 ? current : "taa","tex");
		arm_render_RenderPathForward.path.drawShader("shader_datas/copy_pass/copy_pass");
	}
	if(arm_Config.raw.rp_supersample == 4) {
		arm_render_RenderPathForward.path.setTarget("");
		arm_render_RenderPathForward.path.bindTarget(taaFrame % 2 == 0 ? "taa2" : "taa","tex");
		arm_render_RenderPathForward.path.drawShader("shader_datas/supersample_resolve/supersample_resolve");
	}
};
arm_render_RenderPathForward.drawSplit = function() {
	if(arm_Context.splitView) {
		if(arm_Context.pdirty > 0) {
			var cam = iron_Scene.active.camera;
			arm_Context.viewIndex = arm_Context.viewIndex == 0 ? 1 : 0;
			cam.transform.setMatrix(arm_plugin_Camera.inst.views[arm_Context.viewIndex]);
			cam.buildMatrix();
			cam.buildProjection();
			arm_render_RenderPathForward.drawGbuffer();
			arm_render_RenderPathForward.drawForward();
			arm_Context.viewIndex = arm_Context.viewIndex == 0 ? 1 : 0;
			cam.transform.setMatrix(arm_plugin_Camera.inst.views[arm_Context.viewIndex]);
			cam.buildMatrix();
			cam.buildProjection();
		}
	}
};
var arm_render_RenderPathPaint = function() { };
$hxClasses["arm.render.RenderPathPaint"] = arm_render_RenderPathPaint;
arm_render_RenderPathPaint.__name__ = "arm.render.RenderPathPaint";
arm_render_RenderPathPaint.init = function(_path) {
	arm_render_RenderPathPaint.path = _path;
	var t = new iron_RenderTargetRaw();
	t.name = "texpaint_blend0";
	t.width = arm_Config.getTextureRes();
	t.height = arm_Config.getTextureRes();
	t.format = "R8";
	arm_render_RenderPathPaint.path.createRenderTarget(t);
	var t1 = new iron_RenderTargetRaw();
	t1.name = "texpaint_blend1";
	t1.width = arm_Config.getTextureRes();
	t1.height = arm_Config.getTextureRes();
	t1.format = "R8";
	arm_render_RenderPathPaint.path.createRenderTarget(t1);
	var t2 = new iron_RenderTargetRaw();
	t2.name = "texpaint_colorid";
	t2.width = 1;
	t2.height = 1;
	t2.format = "RGBA32";
	arm_render_RenderPathPaint.path.createRenderTarget(t2);
	var t3 = new iron_RenderTargetRaw();
	t3.name = "texpaint_picker";
	t3.width = 1;
	t3.height = 1;
	t3.format = "RGBA32";
	arm_render_RenderPathPaint.path.createRenderTarget(t3);
	var t4 = new iron_RenderTargetRaw();
	t4.name = "texpaint_nor_picker";
	t4.width = 1;
	t4.height = 1;
	t4.format = "RGBA32";
	arm_render_RenderPathPaint.path.createRenderTarget(t4);
	var t5 = new iron_RenderTargetRaw();
	t5.name = "texpaint_pack_picker";
	t5.width = 1;
	t5.height = 1;
	t5.format = "RGBA32";
	arm_render_RenderPathPaint.path.createRenderTarget(t5);
	arm_render_RenderPathPaint.path.loadShader("shader_datas/copy_mrt3_pass/copy_mrt3_pass");
	arm_render_RenderPathPaint.path.loadShader("shader_datas/dilate_pass/dilate_pass");
};
arm_render_RenderPathPaint.commandsPaint = function() {
	var tid = arm_Context.layer.id;
	if(arm_Context.pdirty > 0 && arm_ui_UIHeader.inst.worktab.position != 1) {
		if(arm_Context.tool == 7) {
			arm_render_RenderPathPaint.path.setTarget("texparticle");
			arm_render_RenderPathPaint.path.clearTarget(0);
			arm_render_RenderPathPaint.path.bindTarget("_main","gbufferD");
			if((arm_Context.xray || arm_Context.brushAngleReject) && arm_Config.raw.brush_3d) {
				arm_render_RenderPathPaint.path.bindTarget("gbuffer0","gbuffer0");
			}
			var mo = iron_Scene.active.getChild(".ParticleEmitter");
			mo.visible = true;
			mo.render(arm_render_RenderPathPaint.path.currentG,"mesh",arm_render_RenderPathPaint.path.bindParams);
			mo.visible = false;
			mo = iron_Scene.active.getChild(".Particle");
			mo.visible = true;
			mo.render(arm_render_RenderPathPaint.path.currentG,"mesh",arm_render_RenderPathPaint.path.bindParams);
			mo.visible = false;
			var _this = arm_render_RenderPathPaint.path;
			if(_this.scissorSet) {
				_this.currentG.disableScissor();
				_this.scissorSet = false;
			}
			_this.currentG.end();
			_this.currentG = null;
			_this.bindParams = null;
		}
		if(arm_Context.tool == 9) {
			arm_render_RenderPathPaint.path.setTarget("texpaint_colorid");
			arm_render_RenderPathPaint.path.clearTarget(-16777216);
			arm_render_RenderPathPaint.path.bindTarget("gbuffer2","gbuffer2");
			arm_render_RenderPathPaint.path.drawMeshes("paint");
			arm_ui_UIHeader.inst.headerHandle.redraws = 2;
		} else if(arm_Context.tool == 10) {
			arm_render_RenderPathPaint.path.setTarget("texpaint_picker",["texpaint_nor_picker","texpaint_pack_picker"]);
			arm_render_RenderPathPaint.path.clearTarget(-16777216);
			arm_render_RenderPathPaint.path.bindTarget("gbuffer2","gbuffer2");
			tid = arm_Context.layer.id;
			arm_render_RenderPathPaint.path.bindTarget("texpaint" + tid,"texpaint");
			arm_render_RenderPathPaint.path.bindTarget("texpaint_nor" + tid,"texpaint_nor");
			arm_render_RenderPathPaint.path.bindTarget("texpaint_pack" + tid,"texpaint_pack");
			arm_render_RenderPathPaint.path.drawMeshes("paint");
			arm_ui_UIHeader.inst.headerHandle.redraws = 2;
			var _this1 = arm_render_RenderPathPaint.path.renderTargets;
			var texpaint_picker = (__map_reserved["texpaint_picker"] != null ? _this1.getReserved("texpaint_picker") : _this1.h["texpaint_picker"]).image;
			var _this2 = arm_render_RenderPathPaint.path.renderTargets;
			var texpaint_nor_picker = (__map_reserved["texpaint_nor_picker"] != null ? _this2.getReserved("texpaint_nor_picker") : _this2.h["texpaint_nor_picker"]).image;
			var _this3 = arm_render_RenderPathPaint.path.renderTargets;
			var texpaint_pack_picker = (__map_reserved["texpaint_pack_picker"] != null ? _this3.getReserved("texpaint_pack_picker") : _this3.h["texpaint_pack_picker"]).image;
			var a = texpaint_picker.getPixels();
			var b = texpaint_nor_picker.getPixels();
			var c = texpaint_pack_picker.getPixels();
			arm_Context.baseRPicked = a.b[0] / 255;
			arm_Context.baseGPicked = a.b[1] / 255;
			arm_Context.baseBPicked = a.b[2] / 255;
			arm_Context.uvxPicked = a.b[3] / 255;
			arm_Context.normalRPicked = b.b[0] / 255;
			arm_Context.normalGPicked = b.b[1] / 255;
			arm_Context.normalBPicked = b.b[2] / 255;
			arm_Context.uvyPicked = c.b[3] / 255;
			arm_Context.occlusionPicked = c.b[0] / 255;
			arm_Context.roughnessPicked = c.b[1] / 255;
			arm_Context.metallicPicked = c.b[2] / 255;
			if(arm_Context.pickerSelectMaterial) {
				var matid = b.b[3];
				var _g = 0;
				var _g1 = arm_Project.materials;
				while(_g < _g1.length) {
					var m = _g1[_g];
					++_g;
					if(m.id == matid) {
						arm_Context.setMaterial(m);
						arm_Context.materialIdPicked = matid;
						break;
					}
				}
			}
		} else {
			if(arm_Context.tool == 8 && arm_Context.bakeType == 0) {
				if(arm_render_RenderPathPaint.initVoxels) {
					arm_render_RenderPathPaint.initVoxels = false;
					var rp_gi = arm_Config.raw.rp_gi;
					arm_Config.raw.rp_gi = true;
					arm_render_Inc.initGI();
					arm_Config.raw.rp_gi = rp_gi;
				}
				arm_render_RenderPathPaint.path.clearImage("voxels",0);
				arm_render_RenderPathPaint.path.setTarget("");
				arm_render_RenderPathPaint.path.setViewport(256,256);
				arm_render_RenderPathPaint.path.bindTarget("voxels","voxels");
				arm_render_RenderPathPaint.path.drawMeshes("voxel");
				arm_render_RenderPathPaint.path.generateMipmaps("voxels");
			}
			if(arm_Context.tool == 8 && arm_Context.brushTime == 0.016666666666666666 * iron_system_Time.scale) {
				arm_render_RenderPathPaint.path.setTarget("texpaint" + tid);
				arm_render_RenderPathPaint.path.clearTarget(-16777216);
			}
			arm_render_RenderPathPaint.path.setTarget("texpaint_blend1");
			arm_render_RenderPathPaint.path.bindTarget("texpaint_blend0","tex");
			arm_render_RenderPathPaint.path.drawShader("shader_datas/copy_pass/copy_pass");
			var isMask = arm_Context.layerIsMask;
			var texpaint = isMask ? "texpaint_mask" + tid : "texpaint" + tid;
			arm_render_RenderPathPaint.path.setTarget(texpaint,["texpaint_nor" + tid,"texpaint_pack" + tid,"texpaint_blend0"]);
			arm_render_RenderPathPaint.path.bindTarget("_main","gbufferD");
			if((arm_Context.xray || arm_Context.brushAngleReject) && arm_Config.raw.brush_3d) {
				arm_render_RenderPathPaint.path.bindTarget("gbuffer0","gbuffer0");
			}
			arm_render_RenderPathPaint.path.bindTarget("texpaint_blend1","paintmask");
			if(arm_Context.tool == 8 && arm_Context.bakeType == 0) {
				arm_render_RenderPathPaint.path.bindTarget("voxels","voxels");
			}
			if(arm_Context.colorIdPicked) {
				arm_render_RenderPathPaint.path.bindTarget("texpaint_colorid","texpaint_colorid");
			}
			var readTC = arm_Context.tool == 2 && arm_Context.fillTypeHandle.position == 1 || arm_Context.tool == 5 || arm_Context.tool == 6;
			if(readTC) {
				arm_render_RenderPathPaint.path.bindTarget("gbuffer2","gbuffer2");
			}
			arm_render_RenderPathPaint.path.drawMeshes("paint");
			if(arm_Context.tool == 8 && arm_Context.bakeType == 1 && arm_Context.bakeCurvSmooth > 0) {
				var _this4 = arm_render_RenderPathPaint.path.renderTargets;
				if((__map_reserved["texpaint_blur"] != null ? _this4.getReserved("texpaint_blur") : _this4.h["texpaint_blur"]) == null) {
					var t = new iron_RenderTargetRaw();
					t.name = "texpaint_blur";
					t.width = arm_Config.getTextureRes() * 0.95 | 0;
					t.height = arm_Config.getTextureRes() * 0.95 | 0;
					t.format = "RGBA32";
					arm_render_RenderPathPaint.path.createRenderTarget(t);
				}
				var blurs = Math.round(arm_Context.bakeCurvSmooth);
				var _g2 = 0;
				var _g11 = blurs;
				while(_g2 < _g11) {
					var i = _g2++;
					arm_render_RenderPathPaint.path.setTarget("texpaint_blur");
					arm_render_RenderPathPaint.path.bindTarget(texpaint,"tex");
					arm_render_RenderPathPaint.path.drawShader("shader_datas/copy_pass/copy_pass");
					arm_render_RenderPathPaint.path.setTarget(texpaint);
					arm_render_RenderPathPaint.path.bindTarget("texpaint_blur","tex");
					arm_render_RenderPathPaint.path.drawShader("shader_datas/copy_pass/copy_pass");
				}
			}
		}
	}
};
arm_render_RenderPathPaint.useLiveLayer = function(use) {
	var tid = arm_Context.layer.id;
	var hid = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
	if(use) {
		var _this = arm_render_RenderPathPaint.path.renderTargets;
		var key = "texpaint" + tid;
		arm_render_RenderPathPaint._texpaint = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var _this1 = arm_render_RenderPathPaint.path.renderTargets;
		var key1 = "texpaint_undo" + hid;
		arm_render_RenderPathPaint._texpaint_undo = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
		var _this2 = arm_render_RenderPathPaint.path.renderTargets;
		var key2 = "texpaint_nor_undo" + hid;
		arm_render_RenderPathPaint._texpaint_nor_undo = __map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2];
		var _this3 = arm_render_RenderPathPaint.path.renderTargets;
		var key3 = "texpaint_pack_undo" + hid;
		arm_render_RenderPathPaint._texpaint_pack_undo = __map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3];
		var _this4 = arm_render_RenderPathPaint.path.renderTargets;
		var key4 = "texpaint_mask" + tid;
		arm_render_RenderPathPaint._texpaint_mask = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		var _this5 = arm_render_RenderPathPaint.path.renderTargets;
		var key5 = "texpaint_nor" + tid;
		arm_render_RenderPathPaint._texpaint_nor = __map_reserved[key5] != null ? _this5.getReserved(key5) : _this5.h[key5];
		var _this6 = arm_render_RenderPathPaint.path.renderTargets;
		var key6 = "texpaint_pack" + tid;
		arm_render_RenderPathPaint._texpaint_pack = __map_reserved[key6] != null ? _this6.getReserved(key6) : _this6.h[key6];
		var this1 = arm_render_RenderPathPaint.path.renderTargets;
		var _this7 = arm_render_RenderPathPaint.path.renderTargets;
		var key7 = "texpaint" + tid;
		var value = __map_reserved[key7] != null ? _this7.getReserved(key7) : _this7.h[key7];
		var _this8 = this1;
		var key8 = "texpaint_undo" + hid;
		if(__map_reserved[key8] != null) {
			_this8.setReserved(key8,value);
		} else {
			_this8.h[key8] = value;
		}
		var this2 = arm_render_RenderPathPaint.path.renderTargets;
		var _this9 = arm_render_RenderPathPaint.path.renderTargets;
		var key9 = "texpaint_nor" + tid;
		var value1 = __map_reserved[key9] != null ? _this9.getReserved(key9) : _this9.h[key9];
		var _this10 = this2;
		var key10 = "texpaint_nor_undo" + hid;
		if(__map_reserved[key10] != null) {
			_this10.setReserved(key10,value1);
		} else {
			_this10.h[key10] = value1;
		}
		var this3 = arm_render_RenderPathPaint.path.renderTargets;
		var _this11 = arm_render_RenderPathPaint.path.renderTargets;
		var key11 = "texpaint_pack" + tid;
		var value2 = __map_reserved[key11] != null ? _this11.getReserved(key11) : _this11.h[key11];
		var _this12 = this3;
		var key12 = "texpaint_pack_undo" + hid;
		if(__map_reserved[key12] != null) {
			_this12.setReserved(key12,value2);
		} else {
			_this12.h[key12] = value2;
		}
		var this4 = arm_render_RenderPathPaint.path.renderTargets;
		var _this13 = arm_render_RenderPathPaint.path.renderTargets;
		var key13 = "texpaint" + tid;
		var value3 = __map_reserved[key13] != null ? _this13.getReserved(key13) : _this13.h[key13];
		var _this14 = this4;
		var key14 = "texpaint_undo" + hid;
		if(__map_reserved[key14] != null) {
			_this14.setReserved(key14,value3);
		} else {
			_this14.h[key14] = value3;
		}
		var this5 = arm_render_RenderPathPaint.path.renderTargets;
		var _this15 = arm_render_RenderPathPaint.path.renderTargets;
		var value4 = __map_reserved["texpaint_live"] != null ? _this15.getReserved("texpaint_live") : _this15.h["texpaint_live"];
		var _this16 = this5;
		var key15 = "texpaint" + tid;
		if(__map_reserved[key15] != null) {
			_this16.setReserved(key15,value4);
		} else {
			_this16.h[key15] = value4;
		}
		if(arm_render_RenderPathPaint._texpaint_mask != null) {
			var this6 = arm_render_RenderPathPaint.path.renderTargets;
			var _this17 = arm_render_RenderPathPaint.path.renderTargets;
			var value5 = __map_reserved["texpaint_mask_live"] != null ? _this17.getReserved("texpaint_mask_live") : _this17.h["texpaint_mask_live"];
			var _this18 = this6;
			var key16 = "texpaint_mask" + tid;
			if(__map_reserved[key16] != null) {
				_this18.setReserved(key16,value5);
			} else {
				_this18.h[key16] = value5;
			}
		}
		var this7 = arm_render_RenderPathPaint.path.renderTargets;
		var _this19 = arm_render_RenderPathPaint.path.renderTargets;
		var value6 = __map_reserved["texpaint_nor_live"] != null ? _this19.getReserved("texpaint_nor_live") : _this19.h["texpaint_nor_live"];
		var _this20 = this7;
		var key17 = "texpaint_nor" + tid;
		if(__map_reserved[key17] != null) {
			_this20.setReserved(key17,value6);
		} else {
			_this20.h[key17] = value6;
		}
		var this8 = arm_render_RenderPathPaint.path.renderTargets;
		var _this21 = arm_render_RenderPathPaint.path.renderTargets;
		var value7 = __map_reserved["texpaint_pack_live"] != null ? _this21.getReserved("texpaint_pack_live") : _this21.h["texpaint_pack_live"];
		var _this22 = this8;
		var key18 = "texpaint_pack" + tid;
		if(__map_reserved[key18] != null) {
			_this22.setReserved(key18,value7);
		} else {
			_this22.h[key18] = value7;
		}
	} else {
		var value8 = arm_render_RenderPathPaint._texpaint;
		var _this23 = arm_render_RenderPathPaint.path.renderTargets;
		var key19 = "texpaint" + tid;
		if(__map_reserved[key19] != null) {
			_this23.setReserved(key19,value8);
		} else {
			_this23.h[key19] = value8;
		}
		var value9 = arm_render_RenderPathPaint._texpaint_undo;
		var _this24 = arm_render_RenderPathPaint.path.renderTargets;
		var key20 = "texpaint_undo" + hid;
		if(__map_reserved[key20] != null) {
			_this24.setReserved(key20,value9);
		} else {
			_this24.h[key20] = value9;
		}
		var value10 = arm_render_RenderPathPaint._texpaint_nor_undo;
		var _this25 = arm_render_RenderPathPaint.path.renderTargets;
		var key21 = "texpaint_nor_undo" + hid;
		if(__map_reserved[key21] != null) {
			_this25.setReserved(key21,value10);
		} else {
			_this25.h[key21] = value10;
		}
		var value11 = arm_render_RenderPathPaint._texpaint_pack_undo;
		var _this26 = arm_render_RenderPathPaint.path.renderTargets;
		var key22 = "texpaint_pack_undo" + hid;
		if(__map_reserved[key22] != null) {
			_this26.setReserved(key22,value11);
		} else {
			_this26.h[key22] = value11;
		}
		if(arm_render_RenderPathPaint._texpaint_mask != null) {
			var value12 = arm_render_RenderPathPaint._texpaint_mask;
			var _this27 = arm_render_RenderPathPaint.path.renderTargets;
			var key23 = "texpaint_mask" + tid;
			if(__map_reserved[key23] != null) {
				_this27.setReserved(key23,value12);
			} else {
				_this27.h[key23] = value12;
			}
		}
		var value13 = arm_render_RenderPathPaint._texpaint_nor;
		var _this28 = arm_render_RenderPathPaint.path.renderTargets;
		var key24 = "texpaint_nor" + tid;
		if(__map_reserved[key24] != null) {
			_this28.setReserved(key24,value13);
		} else {
			_this28.h[key24] = value13;
		}
		var value14 = arm_render_RenderPathPaint._texpaint_pack;
		var _this29 = arm_render_RenderPathPaint.path.renderTargets;
		var key25 = "texpaint_pack" + tid;
		if(__map_reserved[key25] != null) {
			_this29.setReserved(key25,value14);
		} else {
			_this29.h[key25] = value14;
		}
	}
	arm_render_RenderPathPaint.liveLayerLocked = use;
};
arm_render_RenderPathPaint.commandsLiveBrush = function() {
	var tool = arm_Context.tool;
	if(tool != 0 && tool != 1 && tool != 5 && tool != 3 && tool != 4 && tool != 6) {
		return;
	}
	if(arm_render_RenderPathPaint.liveLayerLocked) {
		return;
	}
	if(arm_render_RenderPathPaint.liveLayer == null) {
		arm_render_RenderPathPaint.liveLayer = new arm_data_LayerSlot("_live");
		arm_render_RenderPathPaint.liveLayer.createMask(0);
	}
	var tid = arm_Context.layer.id;
	if(arm_Context.layerIsMask) {
		arm_render_RenderPathPaint.path.setTarget("texpaint_mask_live");
		arm_render_RenderPathPaint.path.bindTarget("texpaint_mask" + tid,"tex");
		arm_render_RenderPathPaint.path.drawShader("shader_datas/copy_pass/copy_pass");
	} else {
		arm_render_RenderPathPaint.path.setTarget("texpaint_live",["texpaint_nor_live","texpaint_pack_live"]);
		arm_render_RenderPathPaint.path.bindTarget("texpaint" + tid,"tex0");
		arm_render_RenderPathPaint.path.bindTarget("texpaint_nor" + tid,"tex1");
		arm_render_RenderPathPaint.path.bindTarget("texpaint_pack" + tid,"tex2");
		arm_render_RenderPathPaint.path.drawShader("shader_datas/copy_mrt3_pass/copy_mrt3_pass");
	}
	arm_render_RenderPathPaint.useLiveLayer(true);
	arm_render_RenderPathPaint.liveLayerDrawn = 2;
	arm_ui_UIView2D.inst.hwnd.redraws = 2;
	var _x = arm_Context.paintVec.x;
	var _y = arm_Context.paintVec.y;
	if(arm_Context.brushLocked) {
		var tmp = arm_Context.lockStartedX - arm_App.x();
		var tmp1 = arm_App.w();
		arm_Context.paintVec.x = tmp / tmp1;
		var tmp2 = arm_Context.lockStartedY - arm_App.y();
		var tmp3 = arm_App.h();
		arm_Context.paintVec.y = tmp2 / tmp3;
	}
	var _lastX = arm_Context.lastPaintVecX;
	var _lastY = arm_Context.lastPaintVecY;
	var _pdirty = arm_Context.pdirty;
	arm_Context.lastPaintVecX = arm_Context.paintVec.x;
	arm_Context.lastPaintVecY = arm_Context.paintVec.y;
	if(arm_Operator.shortcut(arm_Config.keymap.brush_ruler)) {
		arm_Context.lastPaintVecX = arm_Context.lastPaintX;
		arm_Context.lastPaintVecY = arm_Context.lastPaintY;
	}
	arm_Context.pdirty = 2;
	arm_render_RenderPathPaint.commandsSymmetry();
	arm_render_RenderPathPaint.commandsPaint();
	arm_render_RenderPathPaint.useLiveLayer(false);
	arm_Context.paintVec.x = _x;
	arm_Context.paintVec.y = _y;
	arm_Context.lastPaintVecX = _lastX;
	arm_Context.lastPaintVecY = _lastY;
	arm_Context.pdirty = _pdirty;
	arm_Context.brushBlendDirty = true;
};
arm_render_RenderPathPaint.commandsCursor = function() {
	var tool = arm_Context.tool;
	if(tool != 0 && tool != 1 && tool != 5 && tool != 6 && tool != 7) {
		return;
	}
	if(!arm_App.uiEnabled || arm_ui_UIHeader.inst.worktab.position == 1) {
		return;
	}
	var mx = arm_Context.paintVec.x;
	var my = 1.0 - arm_Context.paintVec.y;
	if(arm_Context.brushLocked) {
		mx = (arm_Context.lockStartedX - arm_App.x()) / arm_App.w();
		my = 1.0 - (arm_Context.lockStartedY - arm_App.y()) / arm_App.h();
	}
	arm_render_RenderPathPaint.drawCursor(mx,my,arm_Context.brushNodesRadius * arm_Context.brushRadius / 3.4);
};
arm_render_RenderPathPaint.drawCursor = function(mx,my,radius,tintR,tintG,tintB) {
	if(tintB == null) {
		tintB = 1.0;
	}
	if(tintG == null) {
		tintG = 1.0;
	}
	if(tintR == null) {
		tintR = 1.0;
	}
	var plane = js_Boot.__cast(iron_Scene.active.getChild(".Plane") , iron_object_MeshObject);
	var geom = plane.data.geom;
	var g = arm_render_RenderPathPaint.path.frameG;
	if(arm_Layers.pipeCursor == null) {
		arm_Layers.makeCursorPipe();
	}
	arm_render_RenderPathPaint.path.setTarget("");
	g.setPipeline(arm_Layers.pipeCursor);
	var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
	var img;
	if(decal) {
		img = arm_Context.decalImage;
	} else {
		var _this = arm_Res.bundled;
		img = __map_reserved["cursor.k"] != null ? _this.getReserved("cursor.k") : _this.h["cursor.k"];
	}
	g.setTexture(arm_Layers.cursorTex,img);
	var _this1 = arm_render_RenderPathPaint.path.renderTargets;
	var gbuffer0 = (__map_reserved["gbuffer0"] != null ? _this1.getReserved("gbuffer0") : _this1.h["gbuffer0"]).image;
	g.setTextureDepth(arm_Layers.cursorGbufferD,gbuffer0);
	g.setFloat2(arm_Layers.cursorMouse,mx,my);
	g.setFloat2(arm_Layers.cursorTexStep,1 / gbuffer0.get_width(),1 / gbuffer0.get_height());
	g.setFloat(arm_Layers.cursorRadius,radius);
	var _this2 = iron_Scene.active.camera;
	var x = _this2.transform.world.self._00;
	var y = _this2.transform.world.self._01;
	var z = _this2.transform.world.self._02;
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	var right_x = x;
	var right_y = y;
	var right_z = z;
	var right_w = 1.0;
	var n = Math.sqrt(right_x * right_x + right_y * right_y + right_z * right_z);
	if(n > 0.0) {
		var invN = 1.0 / n;
		right_x *= invN;
		right_y *= invN;
		right_z *= invN;
	}
	g.setFloat3(arm_Layers.cursorCameraRight,right_x,right_y,right_z);
	g.setFloat3(arm_Layers.cursorTint,tintR,tintG,tintB);
	g.setMatrix(arm_Layers.cursorVP,iron_Scene.active.camera.VP.self);
	var helpMat = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	var m = iron_Scene.active.camera.VP;
	var a00 = m.self._00;
	var a01 = m.self._01;
	var a02 = m.self._02;
	var a03 = m.self._03;
	var a10 = m.self._10;
	var a11 = m.self._11;
	var a12 = m.self._12;
	var a13 = m.self._13;
	var a20 = m.self._20;
	var a21 = m.self._21;
	var a22 = m.self._22;
	var a23 = m.self._23;
	var a30 = m.self._30;
	var a31 = m.self._31;
	var a32 = m.self._32;
	var a33 = m.self._33;
	var b00 = a00 * a11 - a01 * a10;
	var b01 = a00 * a12 - a02 * a10;
	var b02 = a00 * a13 - a03 * a10;
	var b03 = a01 * a12 - a02 * a11;
	var b04 = a01 * a13 - a03 * a11;
	var b05 = a02 * a13 - a03 * a12;
	var b06 = a20 * a31 - a21 * a30;
	var b07 = a20 * a32 - a22 * a30;
	var b08 = a20 * a33 - a23 * a30;
	var b09 = a21 * a32 - a22 * a31;
	var b10 = a21 * a33 - a23 * a31;
	var b11 = a22 * a33 - a23 * a32;
	var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	if(det == 0.0) {
		helpMat.self._00 = 1.0;
		helpMat.self._01 = 0.0;
		helpMat.self._02 = 0.0;
		helpMat.self._03 = 0.0;
		helpMat.self._10 = 0.0;
		helpMat.self._11 = 1.0;
		helpMat.self._12 = 0.0;
		helpMat.self._13 = 0.0;
		helpMat.self._20 = 0.0;
		helpMat.self._21 = 0.0;
		helpMat.self._22 = 1.0;
		helpMat.self._23 = 0.0;
		helpMat.self._30 = 0.0;
		helpMat.self._31 = 0.0;
		helpMat.self._32 = 0.0;
		helpMat.self._33 = 1.0;
	} else {
		det = 1.0 / det;
		helpMat.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
		helpMat.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
		helpMat.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
		helpMat.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
		helpMat.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
		helpMat.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
		helpMat.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
		helpMat.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
		helpMat.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
		helpMat.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
		helpMat.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
		helpMat.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
		helpMat.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
		helpMat.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
		helpMat.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
		helpMat.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
	}
	g.setMatrix(arm_Layers.cursorInvVP,helpMat.self);
	g.setVertexBuffer(geom.vertexBuffer);
	g.setIndexBuffer(geom.indexBuffers[0]);
	g.drawIndexedVertices();
	g.disableScissor();
	var _this3 = arm_render_RenderPathPaint.path;
	if(_this3.scissorSet) {
		_this3.currentG.disableScissor();
		_this3.scissorSet = false;
	}
	_this3.currentG.end();
	_this3.currentG = null;
	_this3.bindParams = null;
};
arm_render_RenderPathPaint.commandsSymmetry = function() {
	if(arm_Context.symX || arm_Context.symY || arm_Context.symZ) {
		arm_Context.ddirty = 2;
		var t = arm_Context.paintObject.transform;
		var sx = t.scale.x;
		var sy = t.scale.y;
		var sz = t.scale.z;
		if(arm_Context.symX) {
			var _this = t.scale;
			_this.x = -sx;
			_this.y = sy;
			_this.z = sz;
			_this.w = 1.0;
			t.buildMatrix();
			arm_render_RenderPathPaint.commandsPaint();
		}
		if(arm_Context.symY) {
			var _this1 = t.scale;
			_this1.x = sx;
			_this1.y = -sy;
			_this1.z = sz;
			_this1.w = 1.0;
			t.buildMatrix();
			arm_render_RenderPathPaint.commandsPaint();
		}
		if(arm_Context.symZ) {
			var _this2 = t.scale;
			_this2.x = sx;
			_this2.y = sy;
			_this2.z = -sz;
			_this2.w = 1.0;
			t.buildMatrix();
			arm_render_RenderPathPaint.commandsPaint();
		}
		if(arm_Context.symX && arm_Context.symY) {
			var _this3 = t.scale;
			_this3.x = -sx;
			_this3.y = -sy;
			_this3.z = sz;
			_this3.w = 1.0;
			t.buildMatrix();
			arm_render_RenderPathPaint.commandsPaint();
		}
		if(arm_Context.symX && arm_Context.symZ) {
			var _this4 = t.scale;
			_this4.x = -sx;
			_this4.y = sy;
			_this4.z = -sz;
			_this4.w = 1.0;
			t.buildMatrix();
			arm_render_RenderPathPaint.commandsPaint();
		}
		if(arm_Context.symY && arm_Context.symZ) {
			var _this5 = t.scale;
			_this5.x = sx;
			_this5.y = -sy;
			_this5.z = -sz;
			_this5.w = 1.0;
			t.buildMatrix();
			arm_render_RenderPathPaint.commandsPaint();
		}
		if(arm_Context.symX && arm_Context.symY && arm_Context.symZ) {
			var _this6 = t.scale;
			_this6.x = -sx;
			_this6.y = -sy;
			_this6.z = -sz;
			_this6.w = 1.0;
			t.buildMatrix();
			arm_render_RenderPathPaint.commandsPaint();
		}
		var _this7 = t.scale;
		_this7.x = sx;
		_this7.y = sy;
		_this7.z = sz;
		_this7.w = 1.0;
		t.buildMatrix();
	}
};
arm_render_RenderPathPaint.begin = function() {
	arm_render_RenderPathPaint.pushUndoLast = arm_History.pushUndo;
	if(arm_History.pushUndo && arm_History.undoLayers != null) {
		arm_History.paint();
	}
	if(arm_Context.paint2d) {
		arm_render_RenderPathPaint.painto = arm_Context.paintObject;
		arm_render_RenderPathPaint.visibles = [];
		var _g = 0;
		var _g1 = arm_Project.paintObjects;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			arm_render_RenderPathPaint.visibles.push(p.visible);
			p.visible = false;
		}
		if(arm_Context.mergedObject != null) {
			arm_render_RenderPathPaint.mergedObjectVisible = arm_Context.mergedObject.visible;
			arm_Context.mergedObject.visible = false;
		}
		var cam = iron_Scene.active.camera;
		var _this = arm_Context.savedCamera;
		var m = cam.transform.local;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
		arm_render_RenderPathPaint.savedFov = cam.data.raw.fov;
		arm_util_ViewportUtil.updateCameraType(0);
		var m1 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		m1.self._00 += 0 * m1.self._03;
		m1.self._01 += 0 * m1.self._03;
		m1.self._02 += 0.5 * m1.self._03;
		m1.self._10 += 0 * m1.self._13;
		m1.self._11 += 0 * m1.self._13;
		m1.self._12 += 0.5 * m1.self._13;
		m1.self._20 += 0 * m1.self._23;
		m1.self._21 += 0 * m1.self._23;
		m1.self._22 += 0.5 * m1.self._23;
		m1.self._30 += 0 * m1.self._33;
		m1.self._31 += 0 * m1.self._33;
		m1.self._32 += 0.5 * m1.self._33;
		cam.transform.setMatrix(m1);
		cam.data.raw.fov = 0.92;
		cam.buildProjection();
		cam.buildMatrix();
		var tw = 0.95 * arm_ui_UIView2D.inst.panScale;
		var tx = arm_ui_UIView2D.inst.panX / arm_App.w();
		var ty = arm_ui_UIView2D.inst.panY / arm_App.h();
		m1.self._00 = 1.0;
		m1.self._01 = 0.0;
		m1.self._02 = 0.0;
		m1.self._03 = 0.0;
		m1.self._10 = 0.0;
		m1.self._11 = 1.0;
		m1.self._12 = 0.0;
		m1.self._13 = 0.0;
		m1.self._20 = 0.0;
		m1.self._21 = 0.0;
		m1.self._22 = 1.0;
		m1.self._23 = 0.0;
		m1.self._30 = 0.0;
		m1.self._31 = 0.0;
		m1.self._32 = 0.0;
		m1.self._33 = 1.0;
		var x = tw;
		var y = tw;
		var z = 1;
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = 1.0;
		var x1 = v_x;
		var y1 = v_y;
		var z1 = v_z;
		m1.self._00 *= x1;
		m1.self._01 *= x1;
		m1.self._02 *= x1;
		m1.self._03 *= x1;
		m1.self._10 *= y1;
		m1.self._11 *= y1;
		m1.self._12 *= y1;
		m1.self._13 *= y1;
		m1.self._20 *= z1;
		m1.self._21 *= z1;
		m1.self._22 *= z1;
		m1.self._23 *= z1;
		var x2 = tx;
		var y2 = ty;
		var z2 = 0;
		if(z2 == null) {
			z2 = 0.0;
		}
		if(y2 == null) {
			y2 = 0.0;
		}
		if(x2 == null) {
			x2 = 0.0;
		}
		var v_x1 = x2;
		var v_y1 = y2;
		var v_z1 = z2;
		var v_w1 = 1.0;
		m1.self._30 = v_x1;
		m1.self._31 = v_y1;
		m1.self._32 = v_z1;
		var m2 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		var m3 = iron_Scene.active.camera.VP;
		var a00 = m3.self._00;
		var a01 = m3.self._01;
		var a02 = m3.self._02;
		var a03 = m3.self._03;
		var a10 = m3.self._10;
		var a11 = m3.self._11;
		var a12 = m3.self._12;
		var a13 = m3.self._13;
		var a20 = m3.self._20;
		var a21 = m3.self._21;
		var a22 = m3.self._22;
		var a23 = m3.self._23;
		var a30 = m3.self._30;
		var a31 = m3.self._31;
		var a32 = m3.self._32;
		var a33 = m3.self._33;
		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			m2.self._00 = 1.0;
			m2.self._01 = 0.0;
			m2.self._02 = 0.0;
			m2.self._03 = 0.0;
			m2.self._10 = 0.0;
			m2.self._11 = 1.0;
			m2.self._12 = 0.0;
			m2.self._13 = 0.0;
			m2.self._20 = 0.0;
			m2.self._21 = 0.0;
			m2.self._22 = 1.0;
			m2.self._23 = 0.0;
			m2.self._30 = 0.0;
			m2.self._31 = 0.0;
			m2.self._32 = 0.0;
			m2.self._33 = 1.0;
		} else {
			det = 1.0 / det;
			m2.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
			m2.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
			m2.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
			m2.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
			m2.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
			m2.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
			m2.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
			m2.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
			m2.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
			m2.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
			m2.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
			m2.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
			m2.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
			m2.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
			m2.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
			m2.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
		}
		var a001 = m1.self._00;
		var a011 = m1.self._01;
		var a021 = m1.self._02;
		var a031 = m1.self._03;
		var a101 = m1.self._10;
		var a111 = m1.self._11;
		var a121 = m1.self._12;
		var a131 = m1.self._13;
		var a201 = m1.self._20;
		var a211 = m1.self._21;
		var a221 = m1.self._22;
		var a231 = m1.self._23;
		var a301 = m1.self._30;
		var a311 = m1.self._31;
		var a321 = m1.self._32;
		var a331 = m1.self._33;
		var b0 = m2.self._00;
		var b1 = m2.self._10;
		var b2 = m2.self._20;
		var b3 = m2.self._30;
		m1.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		m1.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		m1.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		m1.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m2.self._01;
		b1 = m2.self._11;
		b2 = m2.self._21;
		b3 = m2.self._31;
		m1.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		m1.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		m1.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		m1.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m2.self._02;
		b1 = m2.self._12;
		b2 = m2.self._22;
		b3 = m2.self._32;
		m1.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		m1.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		m1.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		m1.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m2.self._03;
		b1 = m2.self._13;
		b2 = m2.self._23;
		b3 = m2.self._33;
		m1.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		m1.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		m1.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		m1.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		arm_render_RenderPathPaint.planeo = iron_Scene.active.getChild(".Plane");
		arm_render_RenderPathPaint.planeo.visible = true;
		arm_Context.paintObject = arm_render_RenderPathPaint.planeo;
		var _this_x = 0.0;
		var _this_y = 0.0;
		var _this_z = 0.0;
		var _this_w = 1.0;
		_this_x = m1.self._00;
		_this_y = m1.self._01;
		_this_z = m1.self._02;
		_this_w = 1.0;
		var sx = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
		var _this1 = arm_render_RenderPathPaint.planeo.transform.rot;
		var f = -Math.PI / 2 / 2;
		var c1 = Math.cos(f);
		var s1 = Math.sin(f);
		f = 0.;
		var c2 = Math.cos(f);
		var s2 = Math.sin(f);
		f = 0.;
		var c3 = Math.cos(f);
		var s3 = Math.sin(f);
		_this1.x = s1 * c2 * c3 + c1 * s2 * s3;
		_this1.y = c1 * s2 * c3 + s1 * c2 * s3;
		_this1.z = c1 * c2 * s3 - s1 * s2 * c3;
		_this1.w = c1 * c2 * c3 - s1 * s2 * s3;
		var _this2 = arm_render_RenderPathPaint.planeo.transform.scale;
		_this2.x = sx;
		_this2.y = 1.0;
		_this2.z = sx;
		_this2.w = 1.0;
		var _this3 = arm_render_RenderPathPaint.planeo.transform.loc;
		_this3.x = m1.self._30;
		_this3.y = -m1.self._31;
		_this3.z = 0.0;
		_this3.w = 1.0;
		arm_render_RenderPathPaint.planeo.transform.buildMatrix();
	}
	if(arm_render_RenderPathPaint.liveLayerDrawn > 0) {
		arm_render_RenderPathPaint.liveLayerDrawn--;
	}
	if(arm_Config.raw.brush_live && arm_Context.pdirty <= 0 && arm_Context.ddirty <= 0 && arm_Context.brushTime == 0) {
		arm_render_RenderPathPaint.commandsLiveBrush();
	}
};
arm_render_RenderPathPaint.end = function() {
	if(arm_Config.raw.brush_3d) {
		arm_render_RenderPathPaint.commandsCursor();
	}
	arm_Context.ddirty--;
	arm_Context.pdirty--;
	arm_Context.rdirty--;
};
arm_render_RenderPathPaint.draw = function() {
	if(arm_Config.raw.brush_live && arm_Context.pdirty <= 0 && arm_Context.ddirty > 0 && arm_Context.brushTime == 0) {
		arm_render_RenderPathPaint.commandsLiveBrush();
	}
	if(arm_History.undoLayers != null) {
		arm_render_RenderPathPaint.commandsSymmetry();
		if(arm_Context.tool == 8) {
			if(arm_Context.pdirty > 0) {
				arm_render_RenderPathPaint.dilated = false;
			}
			if(arm_Context.bakeType == 2 || arm_Context.bakeType == 4 || arm_Context.bakeType == 5) {
				if(!arm_render_RenderPathPaint.baking && arm_Context.pdirty > 0) {
					arm_render_RenderPathPaint.baking = true;
					var _bakeType = arm_Context.bakeType;
					arm_Context.bakeType = arm_Context.bakeType == 2 ? 3 : 6;
					arm_node_MaterialParser.parsePaintMaterial();
					var _paintObject = arm_Context.paintObject;
					var highPoly = arm_Project.paintObjects[arm_Context.bakeHighPoly];
					var _visible = highPoly.visible;
					highPoly.visible = true;
					arm_Context.selectPaintObject(highPoly);
					arm_render_RenderPathPaint.commandsPaint();
					highPoly.visible = _visible;
					arm_Context.sub--;
					if(arm_render_RenderPathPaint.pushUndoLast) {
						arm_History.paint();
					}
					arm_Context.selectPaintObject(_paintObject);
					var _renderFinal = null;
					_renderFinal = function(_) {
						arm_Context.bakeType = _bakeType;
						arm_node_MaterialParser.parsePaintMaterial();
						arm_Context.pdirty = 1;
						arm_render_RenderPathPaint.commandsPaint();
						arm_Context.pdirty = 0;
						iron_App.removeRender(_renderFinal);
						arm_render_RenderPathPaint.baking = false;
					};
					var _renderDeriv = null;
					_renderDeriv = function(_1) {
						arm_Context.bakeType = 4;
						arm_node_MaterialParser.parsePaintMaterial();
						arm_Context.pdirty = 1;
						arm_render_RenderPathPaint.commandsPaint();
						arm_Context.pdirty = 0;
						arm_Context.sub--;
						if(arm_render_RenderPathPaint.pushUndoLast) {
							arm_History.paint();
						}
						iron_App.removeRender(_renderDeriv);
						iron_App.notifyOnRender(_renderFinal);
					};
					iron_App.notifyOnRender(arm_Context.bakeType == 5 ? _renderDeriv : _renderFinal);
				}
			} else if(arm_Context.bakeType == 9) {
				var _layerFilter = arm_Context.layerFilter;
				var _paintObject1 = arm_Context.paintObject;
				var isMerged = arm_Context.mergedObject != null;
				var _visible1 = isMerged && arm_Context.mergedObject.visible;
				arm_Context.layerFilter = 1;
				if(isMerged) {
					arm_Context.mergedObject.visible = false;
				}
				var _g = 0;
				var _g1 = arm_Project.paintObjects;
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					arm_Context.selectPaintObject(p);
					arm_render_RenderPathPaint.commandsPaint();
				}
				arm_Context.layerFilter = _layerFilter;
				arm_Context.selectPaintObject(_paintObject1);
				if(isMerged) {
					arm_Context.mergedObject.visible = _visible1;
				}
			} else {
				arm_render_RenderPathPaint.commandsPaint();
			}
		} else {
			arm_render_RenderPathPaint.commandsPaint();
		}
	}
	if(arm_Context.brushBlendDirty) {
		arm_Context.brushBlendDirty = false;
		arm_render_RenderPathPaint.path.setTarget("texpaint_blend0",["texpaint_blend1"]);
		arm_render_RenderPathPaint.path.clearTarget(0);
	}
	if(arm_Context.paint2d) {
		arm_render_RenderPathPaint.planeo.visible = false;
		var _g2 = 0;
		var _g11 = arm_Project.paintObjects.length;
		while(_g2 < _g11) {
			var i = _g2++;
			arm_Project.paintObjects[i].visible = arm_render_RenderPathPaint.visibles[i];
		}
		if(arm_Context.mergedObject != null) {
			arm_Context.mergedObject.visible = arm_render_RenderPathPaint.mergedObjectVisible;
		}
		arm_Context.paintObject = arm_render_RenderPathPaint.painto;
		iron_Scene.active.camera.transform.setMatrix(arm_Context.savedCamera);
		iron_Scene.active.camera.data.raw.fov = arm_render_RenderPathPaint.savedFov;
		arm_util_ViewportUtil.updateCameraType(arm_Context.cameraType);
		iron_Scene.active.camera.buildProjection();
		iron_Scene.active.camera.buildMatrix();
		arm_render_RenderPathDeferred.drawGbuffer();
	}
};
arm_render_RenderPathPaint.bindLayers = function() {
	if(arm_Config.raw.brush_live && arm_render_RenderPathPaint.liveLayerDrawn > 0) {
		arm_render_RenderPathPaint.useLiveLayer(true);
	}
	var tid = arm_Project.layers[0].id;
	arm_render_RenderPathPaint.path.bindTarget("texpaint" + tid,"texpaint");
	arm_render_RenderPathPaint.path.bindTarget("texpaint_nor" + tid,"texpaint_nor");
	arm_render_RenderPathPaint.path.bindTarget("texpaint_pack" + tid,"texpaint_pack");
	if(arm_Project.layers[0].texpaint_mask != null) {
		arm_render_RenderPathPaint.path.bindTarget("texpaint_mask" + tid,"texpaint_mask");
	}
	var _g = 1;
	var _g1 = arm_Project.layers.length;
	while(_g < _g1) {
		var i = _g++;
		var l = arm_Project.layers[i];
		tid = l.id;
		arm_render_RenderPathPaint.path.bindTarget("texpaint" + tid,"texpaint" + tid);
		arm_render_RenderPathPaint.path.bindTarget("texpaint_nor" + tid,"texpaint_nor" + tid);
		arm_render_RenderPathPaint.path.bindTarget("texpaint_pack" + tid,"texpaint_pack" + tid);
		if(l.texpaint_mask != null) {
			arm_render_RenderPathPaint.path.bindTarget("texpaint_mask" + tid,"texpaint_mask" + tid);
		}
	}
};
arm_render_RenderPathPaint.unbindLayers = function() {
	if(arm_Config.raw.brush_live && arm_render_RenderPathPaint.liveLayerDrawn > 0) {
		arm_render_RenderPathPaint.useLiveLayer(false);
	}
};
arm_render_RenderPathPaint.finishPaint = function() {
	if(arm_Context.tool == 8 && !arm_render_RenderPathPaint.dilated && arm_Context.dilateRadius > 0) {
		arm_Layers.makeTempImg();
		arm_render_RenderPathPaint.dilated = true;
		arm_render_RenderPathPaint.path.setTarget("temptex0");
		arm_render_RenderPathPaint.path.bindTarget("texpaint0","tex");
		arm_render_RenderPathPaint.path.drawShader("shader_datas/copy_pass/copy_pass");
		arm_render_RenderPathPaint.path.setTarget("texpaint0");
		arm_render_RenderPathPaint.path.bindTarget("temptex0","tex");
		arm_render_RenderPathPaint.path.drawShader("shader_datas/dilate_pass/dilate_pass");
	}
};
var arm_render_RenderPathPreview = function() { };
$hxClasses["arm.render.RenderPathPreview"] = arm_render_RenderPathPreview;
arm_render_RenderPathPreview.__name__ = "arm.render.RenderPathPreview";
arm_render_RenderPathPreview.init = function(_path) {
	arm_render_RenderPathPreview.path = _path;
	var t = new iron_RenderTargetRaw();
	t.name = "texpreview";
	t.width = 1;
	t.height = 1;
	t.format = "RGBA32";
	arm_render_RenderPathPreview.path.createRenderTarget(t);
	var t1 = new iron_RenderTargetRaw();
	t1.name = "texpreview_icon";
	t1.width = 1;
	t1.height = 1;
	t1.format = "RGBA32";
	arm_render_RenderPathPreview.path.createRenderTarget(t1);
	arm_render_RenderPathPreview.path.createDepthBuffer("mmain","DEPTH24");
	var t2 = new iron_RenderTargetRaw();
	t2.name = "mtex";
	t2.width = 256;
	t2.height = 256;
	t2.format = "RGBA64";
	t2.scale = arm_render_Inc.superSample;
	t2.depth_buffer = "mmain";
	arm_render_RenderPathPreview.path.createRenderTarget(t2);
	var t3 = new iron_RenderTargetRaw();
	t3.name = "mgbuffer0";
	t3.width = 256;
	t3.height = 256;
	t3.format = "RGBA64";
	t3.scale = arm_render_Inc.superSample;
	t3.depth_buffer = "mmain";
	arm_render_RenderPathPreview.path.createRenderTarget(t3);
	var t4 = new iron_RenderTargetRaw();
	t4.name = "mgbuffer1";
	t4.width = 256;
	t4.height = 256;
	t4.format = "RGBA64";
	t4.scale = arm_render_Inc.superSample;
	arm_render_RenderPathPreview.path.createRenderTarget(t4);
	var t5 = new iron_RenderTargetRaw();
	t5.name = "mgbuffer2";
	t5.width = 256;
	t5.height = 256;
	t5.format = "RGBA64";
	t5.scale = arm_render_Inc.superSample;
	arm_render_RenderPathPreview.path.createRenderTarget(t5);
};
arm_render_RenderPathPreview.commandsPreview = function() {
	arm_render_RenderPathPreview.path.setTarget("mgbuffer2");
	arm_render_RenderPathPreview.path.clearTarget(-16777216);
	arm_render_RenderPathPreview.path.setTarget("mgbuffer0",["mgbuffer1","mgbuffer2"]);
	arm_render_RenderPathPreview.path.clearTarget(null,1.0);
	arm_render_RenderPathPreview.path.drawMeshes("mesh");
	arm_render_RenderPathPreview.path.setDepthFrom("mtex","mgbuffer1");
	arm_render_RenderPathPreview.path.setTarget("mtex");
	arm_render_RenderPathPreview.path.bindTarget("_mmain","gbufferD");
	arm_render_RenderPathPreview.path.bindTarget("mgbuffer0","gbuffer0");
	arm_render_RenderPathPreview.path.bindTarget("mgbuffer1","gbuffer1");
	arm_render_RenderPathPreview.path.bindTarget("empty_white","ssaotex");
	arm_render_RenderPathPreview.path.drawShader("deferred_light/deferred_light/deferred_light");
	arm_render_RenderPathPreview.path.setDepthFrom("mtex","mgbuffer0");
	arm_render_RenderPathPreview.path.setTarget("mtex");
	arm_render_RenderPathPreview.path.drawSkydome("world_pass/world_pass/world_pass");
	var framebuffer = "texpreview";
	var selectedMat = arm_ui_UIHeader.inst.worktab.position == 1 ? arm_Context.materialScene : arm_Context.material;
	var _this = iron_RenderPath.active.renderTargets;
	(__map_reserved["texpreview"] != null ? _this.getReserved("texpreview") : _this.h["texpreview"]).image = selectedMat.image;
	var _this1 = iron_RenderPath.active.renderTargets;
	(__map_reserved["texpreview_icon"] != null ? _this1.getReserved("texpreview_icon") : _this1.h["texpreview_icon"]).image = selectedMat.imageIcon;
	arm_render_RenderPathPreview.path.setTarget(framebuffer);
	arm_render_RenderPathPreview.path.bindTarget("mtex","tex");
	arm_render_RenderPathPreview.path.drawShader("shader_datas/compositor_pass/compositor_pass");
	arm_render_RenderPathPreview.path.setTarget("texpreview_icon");
	arm_render_RenderPathPreview.path.bindTarget("texpreview","tex");
	arm_render_RenderPathPreview.path.drawShader("shader_datas/supersample_resolve/supersample_resolve");
};
arm_render_RenderPathPreview.commandsDecal = function() {
	arm_render_RenderPathPreview.path.setTarget("gbuffer2");
	arm_render_RenderPathPreview.path.clearTarget(-16777216);
	arm_render_RenderPathPreview.path.setTarget("gbuffer0",["gbuffer1","gbuffer2"]);
	arm_render_RenderPathPreview.path.clearTarget(null,1.0);
	arm_render_RenderPathPreview.path.drawMeshes("mesh");
	arm_render_RenderPathPreview.path.setDepthFrom("tex","gbuffer1");
	arm_render_RenderPathPreview.path.setTarget("tex");
	arm_render_RenderPathPreview.path.bindTarget("_main","gbufferD");
	arm_render_RenderPathPreview.path.bindTarget("gbuffer0","gbuffer0");
	arm_render_RenderPathPreview.path.bindTarget("gbuffer1","gbuffer1");
	arm_render_RenderPathPreview.path.bindTarget("empty_white","ssaotex");
	arm_render_RenderPathPreview.path.drawShader("deferred_light/deferred_light/deferred_light");
	arm_render_RenderPathPreview.path.setDepthFrom("tex","gbuffer0");
	arm_render_RenderPathPreview.path.setTarget("tex");
	arm_render_RenderPathPreview.path.drawSkydome("world_pass/world_pass/world_pass");
	var framebuffer = "texpreview";
	var _this = iron_RenderPath.active.renderTargets;
	(__map_reserved["texpreview"] != null ? _this.getReserved("texpreview") : _this.h["texpreview"]).image = arm_Context.decalImage;
	arm_render_RenderPathPreview.path.setTarget(framebuffer);
	arm_render_RenderPathPreview.path.bindTarget("tex","tex");
	arm_render_RenderPathPreview.path.drawShader("shader_datas/compositor_pass/compositor_pass");
};
var arm_render_Uniforms = function() { };
$hxClasses["arm.render.Uniforms"] = arm_render_Uniforms;
arm_render_Uniforms.__name__ = "arm.render.Uniforms";
arm_render_Uniforms.init = function() {
	iron_object_Uniforms.externalFloatLinks = [arm_render_Uniforms.linkFloat];
	iron_object_Uniforms.externalVec2Links = [arm_render_Uniforms.linkVec2];
	iron_object_Uniforms.externalVec3Links = [arm_render_Uniforms.linkVec3];
	iron_object_Uniforms.externalVec4Links = [arm_render_Uniforms.linkVec4];
	iron_object_Uniforms.externalTextureLinks = [arm_render_Uniforms.linkTex];
};
arm_render_Uniforms.linkFloat = function(object,mat,link) {
	if(link == "_brushRadius") {
		var val = arm_Context.brushRadius * arm_Context.brushNodesRadius / 15.0;
		var pen = iron_system_Input.getPen();
		if(arm_Config.raw.pressure_radius && pen.down()) {
			val *= pen.pressure * arm_Config.raw.pressure_sensitivity;
		}
		var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
		if(arm_Config.raw.brush_3d && !decal) {
			val *= arm_Context.paint2d ? 0.6 : 2;
		} else {
			val *= 900 / arm_App.h();
		}
		return val;
	}
	if(link == "_brushScaleX") {
		return 1 / arm_Context.brushScaleX;
	}
	if(link == "_brushOpacity") {
		var val1 = arm_Context.brushOpacity * arm_Context.brushNodesOpacity;
		var pen1 = iron_system_Input.getPen();
		if(arm_Config.raw.pressure_opacity && pen1.down()) {
			val1 *= pen1.pressure * arm_Config.raw.pressure_sensitivity;
		}
		return val1;
	}
	if(link == "_brushHardness") {
		if(arm_Context.tool != 0 && arm_Context.tool != 1) {
			return 1.0;
		}
		var val2 = arm_Context.brushHardness * arm_Context.brushNodesHardness;
		var pen2 = iron_system_Input.getPen();
		if(arm_Config.raw.pressure_hardness && pen2.down()) {
			val2 *= pen2.pressure * arm_Config.raw.pressure_sensitivity;
		}
		if(arm_Config.raw.brush_3d && !arm_Context.paint2d) {
			val2 *= val2;
		}
		return val2;
	}
	if(link == "_brushScale") {
		var nodesScale = arm_Context.brushNodesScale;
		var fill = arm_Context.layer.material_mask != null;
		var val3 = (fill ? arm_Context.layer.scale : arm_Context.brushScale) * nodesScale;
		return val3;
	}
	if(link == "_texpaintSize") {
		return arm_Config.getTextureRes();
	}
	if(link == "_objectId") {
		return arm_Project.paintObjects.indexOf(arm_Context.paintObject);
	}
	if(link == "_vignetteStrength") {
		return arm_Config.raw.rp_vignette;
	}
	if(link == "_coneOffset") {
		return arm_Context.vxaoOffset;
	}
	if(link == "_coneAperture") {
		return arm_Context.vxaoAperture;
	}
	if(link == "_dilateRadius") {
		return arm_Context.dilateRadius;
	}
	return null;
};
arm_render_Uniforms.linkVec2 = function(object,mat,link) {
	if(link == "_sub") {
		arm_Context.sub = (arm_Context.sub + 1) % 4;
		var eps = arm_Context.brushBias * 0.00022 * arm_Config.getTextureResBias();
		if(arm_Context.sub == 0) {
			var _this = arm_render_Uniforms.vec;
			_this.x = eps;
			_this.y = eps;
			_this.z = 0.0;
			_this.w = 1.0;
		} else if(arm_Context.sub == 1) {
			var _this1 = arm_render_Uniforms.vec;
			_this1.x = eps;
			_this1.y = -eps;
			_this1.z = 0.0;
			_this1.w = 1.0;
		} else if(arm_Context.sub == 2) {
			var _this2 = arm_render_Uniforms.vec;
			_this2.x = -eps;
			_this2.y = -eps;
			_this2.z = 0.0;
			_this2.w = 1.0;
		} else {
			var _this3 = arm_render_Uniforms.vec;
			_this3.x = -eps;
			_this3.y = eps;
			_this3.z = 0.0;
			_this3.w = 1.0;
		}
		return arm_render_Uniforms.vec;
	}
	if(link == "_gbufferSize") {
		var _this4 = arm_render_Uniforms.vec;
		_this4.x = 0;
		_this4.y = 0;
		_this4.z = 0;
		_this4.w = 1.0;
		var _this5 = iron_RenderPath.active.renderTargets;
		var gbuffer2 = __map_reserved["gbuffer2"] != null ? _this5.getReserved("gbuffer2") : _this5.h["gbuffer2"];
		var _this6 = arm_render_Uniforms.vec;
		var x = gbuffer2.image.get_width();
		var y = gbuffer2.image.get_height();
		_this6.x = x;
		_this6.y = y;
		_this6.z = 0;
		_this6.w = 1.0;
		return arm_render_Uniforms.vec;
	}
	if(link == "_cloneDelta") {
		var _this7 = arm_render_Uniforms.vec;
		_this7.x = arm_Context.cloneDeltaX;
		_this7.y = arm_Context.cloneDeltaY;
		_this7.z = 0;
		_this7.w = 1.0;
		return arm_render_Uniforms.vec;
	}
	if(link == "_brushAngle") {
		var brushAngle = arm_Context.brushAngle + arm_Context.brushNodesAngle;
		var angle = arm_Context.layer.material_mask != null ? arm_Context.layer.angle : brushAngle;
		angle *= Math.PI / 180;
		var pen = iron_system_Input.getPen();
		if(arm_Config.raw.pressure_angle && pen.down()) {
			angle *= pen.pressure * arm_Config.raw.pressure_sensitivity;
		}
		var _this8 = arm_render_Uniforms.vec;
		var y1 = Math.sin(angle);
		_this8.x = Math.cos(angle);
		_this8.y = y1;
		_this8.z = 0;
		_this8.w = 1.0;
		return arm_render_Uniforms.vec;
	}
	return null;
};
arm_render_Uniforms.linkVec3 = function(object,mat,link) {
	var v = null;
	if(link == "_brushDirection") {
		v = iron_object_Uniforms.helpVec;
		if(arm_Context.lastPaintVecX != arm_Context.paintVec.x) {
			arm_Context.prevPaintVecX = arm_Context.lastPaintVecX;
		}
		if(arm_Context.lastPaintVecY != arm_Context.paintVec.y) {
			arm_Context.prevPaintVecY = arm_Context.lastPaintVecY;
		}
		var x = arm_Context.paintVec.x;
		var y = arm_Context.paintVec.y;
		var lastx = arm_Context.prevPaintVecX;
		var lasty = arm_Context.prevPaintVecY;
		if(arm_Context.paint2d) {
			x -= 1.0;
			lastx -= 1.0;
		}
		var angle = Math.atan2(-y + lasty,x - lastx) - Math.PI / 2;
		var allowPaint = arm_Context.prevPaintVecX > 0 && arm_Context.prevPaintVecY > 0 ? 1 : 0;
		var y1 = Math.sin(angle);
		v.x = Math.cos(angle);
		v.y = y1;
		v.z = allowPaint;
		v.w = 1.0;
		return v;
	}
	return v;
};
arm_render_Uniforms.linkVec4 = function(object,mat,link) {
	if(link == "_inputBrush") {
		var down = iron_system_Input.getMouse().down() || iron_system_Input.getPen().down();
		var _this = arm_render_Uniforms.vec;
		var w = 0.0;
		if(w == null) {
			w = 1.0;
		}
		_this.x = arm_Context.paintVec.x;
		_this.y = arm_Context.paintVec.y;
		_this.z = down ? 1.0 : 0.0;
		_this.w = w;
		if(arm_Context.paint2d) {
			arm_render_Uniforms.vec.x -= 1.0;
		}
		return arm_render_Uniforms.vec;
	}
	if(link == "_inputBrushLast") {
		var down1 = iron_system_Input.getMouse().down() || iron_system_Input.getPen().down();
		var _this1 = arm_render_Uniforms.vec;
		var w1 = 0.0;
		if(w1 == null) {
			w1 = 1.0;
		}
		_this1.x = arm_Context.lastPaintVecX;
		_this1.y = arm_Context.lastPaintVecY;
		_this1.z = down1 ? 1.0 : 0.0;
		_this1.w = w1;
		if(arm_Context.paint2d) {
			arm_render_Uniforms.vec.x -= 1.0;
		}
		return arm_render_Uniforms.vec;
	}
	if(link == "_stencilTransform") {
		var _this2 = arm_render_Uniforms.vec;
		var w2 = arm_Context.brushStencilAngle;
		if(w2 == null) {
			w2 = 1.0;
		}
		_this2.x = arm_Context.brushStencilX;
		_this2.y = arm_Context.brushStencilY;
		_this2.z = arm_Context.brushStencilScale;
		_this2.w = w2;
		if(arm_Context.paint2d) {
			arm_render_Uniforms.vec.x -= 1.0;
		}
		return arm_render_Uniforms.vec;
	}
	return null;
};
arm_render_Uniforms.linkTex = function(object,mat,link) {
	if(link == "_texcolorid") {
		if(arm_Project.assets.length == 0) {
			var _this = iron_RenderPath.active.renderTargets;
			return (__map_reserved["empty_white"] != null ? _this.getReserved("empty_white") : _this.h["empty_white"]).image;
		} else {
			return arm_ui_UISidebar.inst.getImage(arm_Project.assets[arm_Context.colorIdHandle.position]);
		}
	}
	if(link == "_texuvmap") {
		arm_util_UVUtil.cacheUVMap();
		return arm_util_UVUtil.uvmap;
	}
	if(link == "_textrianglemap") {
		arm_util_UVUtil.cacheTriangleMap();
		return arm_util_UVUtil.trianglemap;
	}
	if(link == "_textexttool") {
		return arm_Context.textToolImage;
	}
	if(link == "_texbrushmask") {
		return arm_Context.brushMaskImage;
	}
	if(link == "_texbrushstencil") {
		return arm_Context.brushStencilImage;
	}
	if(link == "_texpaint_undo") {
		var i = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
		var _this1 = iron_RenderPath.active.renderTargets;
		var key = "texpaint_undo" + i;
		return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).image;
	}
	if(link == "_texpaint_nor_undo") {
		var i1 = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
		var _this2 = iron_RenderPath.active.renderTargets;
		var key1 = "texpaint_nor_undo" + i1;
		return (__map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1]).image;
	}
	if(link == "_texpaint_pack_undo") {
		var i2 = arm_History.undoI - 1 < 0 ? arm_Config.raw.undo_steps - 1 : arm_History.undoI - 1;
		var _this3 = iron_RenderPath.active.renderTargets;
		var key2 = "texpaint_pack_undo" + i2;
		return (__map_reserved[key2] != null ? _this3.getReserved(key2) : _this3.h[key2]).image;
	}
	if(StringTools.startsWith(link,"_texpaint_pack_vert")) {
		var tid = HxOverrides.substr(link,link.length - 1,null);
		var _this4 = iron_RenderPath.active.renderTargets;
		var key3 = "texpaint_pack" + tid;
		return (__map_reserved[key3] != null ? _this4.getReserved(key3) : _this4.h[key3]).image;
	}
	if(StringTools.startsWith(link,"_texpaint_mask_vert")) {
		var tid1 = Std.parseInt(HxOverrides.substr(link,link.length - 1,null));
		return arm_Project.layers[tid1].texpaint_mask;
	}
	if(link == "_texpaint_mask") {
		return arm_Context.layer.texpaint_mask;
	}
	if(StringTools.startsWith(link,"_texpaint_mask")) {
		var tid2 = Std.parseInt(HxOverrides.substr(link,link.length - 1,null));
		return arm_Project.layers[tid2].texpaint_mask;
	}
	if(StringTools.startsWith(link,"_texpaint_nor")) {
		var tid3 = Std.parseInt(HxOverrides.substr(link,link.length - 1,null));
		return arm_Project.layers[tid3].texpaint_nor;
	}
	if(StringTools.startsWith(link,"_texpaint_pack")) {
		var tid4 = Std.parseInt(HxOverrides.substr(link,link.length - 1,null));
		return arm_Project.layers[tid4].texpaint_pack;
	}
	if(StringTools.startsWith(link,"_texpaint")) {
		var tid5 = Std.parseInt(HxOverrides.substr(link,link.length - 1,null));
		return arm_Project.layers[tid5].texpaint;
	}
	if(link == "_texparticle") {
		var _this5 = iron_RenderPath.active.renderTargets;
		return (__map_reserved["texparticle"] != null ? _this5.getReserved("texparticle") : _this5.h["texparticle"]).image;
	}
	if(link == "_ltcMat") {
		if(arm_data_ConstData.ltcMatTex == null) {
			arm_data_ConstData.initLTC();
		}
		return arm_data_ConstData.ltcMatTex;
	}
	if(link == "_ltcMag") {
		if(arm_data_ConstData.ltcMagTex == null) {
			arm_data_ConstData.initLTC();
		}
		return arm_data_ConstData.ltcMagTex;
	}
	return null;
};
var arm_ui_BoxExport = function() { };
$hxClasses["arm.ui.BoxExport"] = arm_ui_BoxExport;
arm_ui_BoxExport.__name__ = "arm.ui.BoxExport";
arm_ui_BoxExport.showTextures = function() {
	arm_ui_UIBox.showCustom(function(ui) {
		if(arm_ui_BoxExport.files == null) {
			arm_ui_BoxExport.fetchPresets();
		}
		if(arm_ui_BoxExport.preset == null) {
			arm_ui_BoxExport.parsePreset();
			arm_ui_BoxExport.hpreset.children = null;
		}
		if(ui.tab(arm_ui_BoxExport.htab,arm_Translator.tr("Export Textures"))) {
			ui.row([0.5,0.5]);
			ui.combo(arm_App.resHandle,["128","256","512","1K","2K","4K","8K","16K"],arm_Translator.tr("Resolution"),true);
			if(arm_App.resHandle.changed) {
				iron_App.notifyOnRender(arm_Layers.resizeLayers);
				arm_util_UVUtil.uvmap = null;
				arm_util_UVUtil.uvmapCached = false;
				arm_util_UVUtil.trianglemap = null;
				arm_util_UVUtil.trianglemapCached = false;
			}
			ui.combo(arm_App.bitsHandle,["8bit","16bit","32bit"],arm_Translator.tr("Color"),true);
			if(arm_App.bitsHandle.changed) {
				iron_App.notifyOnRender(arm_Layers.setLayerBits);
			}
			ui.row([0.5,0.5]);
			if(arm_App.bitsHandle.position == 0) {
				arm_Context.formatType = ui.combo(zui_Handle.global.nest(58,{ position : arm_Context.formatType}),["png","jpg"],arm_Translator.tr("Format"),true);
			} else {
				arm_Context.formatType = ui.combo(zui_Handle.global.nest(59,{ position : arm_Context.formatType}),["exr"],arm_Translator.tr("Format"),true);
			}
			ui.enabled = arm_Context.formatType == 1 && arm_App.bitsHandle.position == 0;
			arm_Context.formatQuality = ui.slider(zui_Handle.global.nest(60,{ value : arm_Context.formatQuality}),arm_Translator.tr("Quality"),0.0,100.0,true,1);
			ui.enabled = true;
			ui.row([0.5,0.5]);
			arm_Context.layersExport = ui.combo(zui_Handle.global.nest(61,{ position : arm_Context.layersExport}),[arm_Translator.tr("Visible"),arm_Translator.tr("Selected")],arm_Translator.tr("Layers"),true);
			ui.combo(arm_ui_BoxExport.hpreset,arm_ui_BoxExport.files,arm_Translator.tr("Preset"),true);
			if(arm_ui_BoxExport.hpreset.changed) {
				arm_ui_BoxExport.preset = null;
			}
			ui.endElement();
			ui.row([0.5,0.5]);
			if(ui.button(arm_Translator.tr("Cancel"))) {
				arm_ui_UIBox.show = false;
			}
			if(ui.button(arm_Translator.tr("Export"))) {
				arm_ui_UIBox.show = false;
				var filters = arm_App.bitsHandle.position != 0 ? "exr" : arm_Context.formatType == 0 ? "png" : "jpg";
				arm_ui_UIFiles.show(filters,true,function(path) {
					arm_Context.textureExportPath = path;
					var $export = null;
					$export = function(_) {
						arm_io_ExportTexture.run(path);
						iron_App.removeRender($export);
					};
					iron_App.notifyOnRender($export);
				});
			}
			if(ui.isHovered) {
				ui.tooltip(arm_Translator.tr("Export texture files") + (" (" + Std.string(arm_Config.keymap.file_export_textures) + ")"));
			}
		}
		if(ui.tab(arm_ui_BoxExport.htab,arm_Translator.tr("Presets"))) {
			ui.row([0.6,0.2,0.2]);
			ui.combo(arm_ui_BoxExport.hpreset,arm_ui_BoxExport.files,arm_Translator.tr("Preset"));
			if(arm_ui_BoxExport.hpreset.changed) {
				arm_ui_BoxExport.preset = null;
			}
			if(ui.button(arm_Translator.tr("New"))) {
				arm_ui_UIBox.showCustom(function(ui1) {
					if(ui1.tab(zui_Handle.global.nest(62,null),arm_Translator.tr("New Preset"))) {
						ui1.row([0.5,0.5]);
						var presetName = ui1.textInput(zui_Handle.global.nest(63,{ text : "new_preset"}),arm_Translator.tr("Name"));
						if(ui1.button("OK") || ui1.isReturnDown) {
							arm_ui_BoxExport.newPreset(presetName);
							arm_ui_BoxExport.fetchPresets();
							arm_ui_BoxExport.preset = null;
							arm_ui_BoxExport.hpreset.position = arm_ui_BoxExport.files.indexOf(presetName);
							arm_ui_UIBox.show = false;
							arm_ui_BoxExport.htab.position = 1;
							arm_ui_BoxExport.showTextures();
						}
					}
				});
			}
			if(ui.button(arm_Translator.tr("Import"))) {
				arm_ui_UIFiles.show("json",false,function(path1) {
					path1 = path1.toLowerCase();
					if(StringTools.endsWith(path1,".json")) {
						var filename = HxOverrides.substr(path1,path1.lastIndexOf(arm_sys_Path.sep) + 1,null);
						var dstPath = arm_sys_Path.data() + arm_sys_Path.sep + "export_presets" + arm_sys_Path.sep + filename;
						arm_sys_File.copy(path1,dstPath);
						arm_ui_BoxExport.fetchPresets();
						arm_ui_BoxExport.preset = null;
						arm_ui_BoxExport.hpreset.position = arm_ui_BoxExport.files.indexOf(HxOverrides.substr(filename,0,filename.length - 5));
						arm_Log.info("Preset '" + filename + "' imported.");
					} else {
						arm_Log.error(arm_Strings.error1);
					}
				});
			}
			if(arm_ui_BoxExport.preset == null) {
				arm_ui_BoxExport.parsePreset();
				arm_ui_BoxExport.hpreset.children = null;
			}
			ui.separator(10,false);
			ui.row([0.2,0.2,0.2,0.2,0.2]);
			ui.text(arm_Translator.tr("Texture"));
			ui.text(arm_Translator.tr("R"));
			ui.text(arm_Translator.tr("G"));
			ui.text(arm_Translator.tr("B"));
			ui.text(arm_Translator.tr("A"));
			ui.changed = false;
			var _g = 0;
			var _g1 = arm_ui_BoxExport.preset.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = [arm_ui_BoxExport.preset.textures[i]];
				ui.row([0.2,0.2,0.2,0.2,0.2]);
				var htex = arm_ui_BoxExport.hpreset.nest(i);
				htex.text = t[0].name;
				t[0].name = ui.textInput(htex);
				if(ui.isHovered && ui.inputReleasedR) {
					arm_ui_UIMenu.draw((function(t1) {
						return function(ui2) {
							ui2.text(t1[0].name,2,ui2.t.HIGHLIGHT_COL);
							if(ui2.button(arm_Translator.tr("Delete"),0)) {
								HxOverrides.remove(arm_ui_BoxExport.preset.textures,t1[0]);
								arm_ui_BoxExport.savePreset();
							}
						};
					})(t),2);
				}
				var hr = htex.nest(0);
				hr.position = arm_ui_BoxExport.channels.indexOf(t[0].channels[0]);
				var hg = htex.nest(1);
				hg.position = arm_ui_BoxExport.channels.indexOf(t[0].channels[1]);
				var hb = htex.nest(2);
				hb.position = arm_ui_BoxExport.channels.indexOf(t[0].channels[2]);
				var ha = htex.nest(3);
				ha.position = arm_ui_BoxExport.channels.indexOf(t[0].channels[3]);
				ui.combo(hr,arm_ui_BoxExport.channels,arm_Translator.tr("R"));
				if(hr.changed) {
					t[0].channels[0] = arm_ui_BoxExport.channels[hr.position];
				}
				ui.combo(hg,arm_ui_BoxExport.channels,arm_Translator.tr("G"));
				if(hg.changed) {
					t[0].channels[1] = arm_ui_BoxExport.channels[hg.position];
				}
				ui.combo(hb,arm_ui_BoxExport.channels,arm_Translator.tr("B"));
				if(hb.changed) {
					t[0].channels[2] = arm_ui_BoxExport.channels[hb.position];
				}
				ui.combo(ha,arm_ui_BoxExport.channels,arm_Translator.tr("A"));
				if(ha.changed) {
					t[0].channels[3] = arm_ui_BoxExport.channels[ha.position];
				}
			}
			if(ui.changed) {
				arm_ui_BoxExport.savePreset();
			}
			ui.row([0.125]);
			if(ui.button(arm_Translator.tr("Add"))) {
				arm_ui_BoxExport.preset.textures.push({ name : "base", channels : ["base_r","base_g","base_b","1.0"]});
				arm_ui_BoxExport.hpreset.children = null;
				arm_ui_BoxExport.savePreset();
			}
		}
	},500,310);
};
arm_ui_BoxExport.showMesh = function() {
	arm_ui_UIBox.showCustom(function(ui) {
		var htab = zui_Handle.global.nest(64,null);
		if(ui.tab(htab,arm_Translator.tr("Export Mesh"))) {
			arm_Context.exportMeshFormat = ui.combo(zui_Handle.global.nest(65,{ position : arm_Context.exportMeshFormat}),["obj","arm"],arm_Translator.tr("Format"),true);
			var applyDisplacement = ui.check(zui_Handle.global.nest(66,null),arm_Translator.tr("Apply Displacement"));
			var tris = 0;
			var _g = 0;
			var _g1 = arm_Project.paintObjects;
			while(_g < _g1.length) {
				var po = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g11 = po.data.raw.index_arrays;
				while(_g2 < _g11.length) {
					var inda = _g11[_g2];
					++_g2;
					tris += inda.values.length / 3 | 0;
				}
			}
			ui.text(tris + " triangles");
			ui.row([0.5,0.5]);
			if(ui.button("Cancel")) {
				arm_ui_UIBox.show = false;
			}
			if(ui.button("Export")) {
				arm_ui_UIBox.show = false;
				arm_ui_UIFiles.show(arm_Context.exportMeshFormat == 0 ? "obj" : "arm",true,function(path) {
					var f = arm_ui_UIFiles.filename;
					if(f == "") {
						f = arm_Translator.tr("untitled");
					}
					arm_io_ExportMesh.run(path + arm_sys_Path.sep + f,applyDisplacement);
				});
			}
		}
	});
};
arm_ui_BoxExport.fetchPresets = function() {
	arm_ui_BoxExport.files = arm_sys_File.readDirectory(arm_sys_Path.data() + arm_sys_Path.sep + "export_presets");
	var _g = 0;
	var _g1 = arm_ui_BoxExport.files.length;
	while(_g < _g1) {
		var i = _g++;
		arm_ui_BoxExport.files[i] = HxOverrides.substr(arm_ui_BoxExport.files[i],0,arm_ui_BoxExport.files[i].length - 5);
	}
};
arm_ui_BoxExport.parsePreset = function() {
	var file = "export_presets/" + arm_ui_BoxExport.files[arm_ui_BoxExport.hpreset.position] + ".json";
	iron_data_Data.getBlob(file,function(blob) {
		arm_ui_BoxExport.preset = JSON.parse(blob.toString());
		iron_data_Data.deleteBlob("export_presets/" + file);
	});
};
arm_ui_BoxExport.newPreset = function(name) {
	var template = "{\r\n\t\"textures\": [\r\n\t\t{ \"name\": \"base\", \"channels\": [\"base_r\", \"base_g\", \"base_b\", \"1.0\"] }\r\n\t]\r\n}\r\n";
	if(!StringTools.endsWith(name,".json")) {
		name += ".json";
	}
	var path = arm_sys_Path.data() + arm_sys_Path.sep + "export_presets" + arm_sys_Path.sep + name;
	Krom.fileSaveBytes(path,haxe_io_Bytes.ofString(template).b.bufferValue);
};
arm_ui_BoxExport.savePreset = function() {
	var name = arm_ui_BoxExport.files[arm_ui_BoxExport.hpreset.position];
	if(name == "generic") {
		return;
	}
	var path = arm_sys_Path.data() + arm_sys_Path.sep + "export_presets" + arm_sys_Path.sep + name + ".json";
	Krom.fileSaveBytes(path,haxe_io_Bytes.ofString(JSON.stringify(arm_ui_BoxExport.preset)).b.bufferValue);
};
var arm_ui_BoxPreferences = function() { };
$hxClasses["arm.ui.BoxPreferences"] = arm_ui_BoxPreferences;
arm_ui_BoxPreferences.__name__ = "arm.ui.BoxPreferences";
arm_ui_BoxPreferences.show = function() {
	arm_ui_UIBox.showCustom(function(ui) {
		if(ui.tab(arm_ui_BoxPreferences.htab,arm_Translator.tr("Interface"),true)) {
			if(arm_ui_BoxPreferences.locales == null) {
				arm_ui_BoxPreferences.locales = arm_Translator.getSupportedLocales();
			}
			var localeHandle = zui_Handle.global.nest(19,{ position : arm_ui_BoxPreferences.locales.indexOf(arm_Config.raw.locale)});
			ui.combo(localeHandle,arm_ui_BoxPreferences.locales,arm_Translator.tr("Language"),true);
			if(localeHandle.changed) {
				var localeCode = arm_ui_BoxPreferences.locales[localeHandle.position];
				arm_Config.raw.locale = localeCode;
				arm_Config.save();
				arm_Translator.loadTranslations(localeCode);
				arm_ui_UISidebar.inst.tagUIRedraw();
			}
			var hscale = zui_Handle.global.nest(20,{ value : arm_Config.raw.window_scale});
			ui.slider(hscale,arm_Translator.tr("UI Scale"),1.0,4.0,false,10);
			if(!hscale.changed && arm_Context.hscaleWasChanged) {
				if(hscale.value == null || isNaN(hscale.value)) {
					hscale.value = 1.0;
				}
				arm_Config.raw.window_scale = hscale.value;
				arm_Config.save();
				arm_ui_BoxPreferences.setScale();
			}
			arm_Context.hscaleWasChanged = hscale.changed;
			if(arm_ui_BoxPreferences.themes == null) {
				arm_ui_BoxPreferences.themes = arm_sys_File.readDirectory(arm_sys_Path.data() + arm_sys_Path.sep + "themes");
				var _g = 0;
				var _g1 = arm_ui_BoxPreferences.themes.length;
				while(_g < _g1) {
					var i = _g++;
					arm_ui_BoxPreferences.themes[i] = HxOverrides.substr(arm_ui_BoxPreferences.themes[i],0,arm_ui_BoxPreferences.themes[i].length - 5);
				}
				arm_ui_BoxPreferences.themes.unshift("dark");
			}
			var themeHandle = zui_Handle.global.nest(21,{ position : arm_ui_BoxPreferences.themes.indexOf(HxOverrides.substr(arm_Config.raw.theme,0,arm_Config.raw.theme.length - 5))});
			ui.combo(themeHandle,arm_ui_BoxPreferences.themes,arm_Translator.tr("Theme"),true);
			if(themeHandle.changed) {
				arm_Config.raw.theme = arm_ui_BoxPreferences.themes[themeHandle.position] + ".json";
				arm_Config.save();
				arm_ui_BoxPreferences.loadTheme(arm_Config.raw.theme);
			}
			arm_Context.nativeBrowser = ui.check(zui_Handle.global.nest(22,{ selected : arm_Context.nativeBrowser}),arm_Translator.tr("Native File Browser"));
			arm_Context.cacheDraws = ui.check(zui_Handle.global.nest(23,{ selected : arm_Context.cacheDraws}),arm_Translator.tr("Cache UI Draws"));
			if(ui.isHovered) {
				ui.tooltip(arm_Translator.tr("Enabling may reduce GPU usage"));
			}
			ui.changed = false;
			arm_Context.showAssetNames = ui.check(zui_Handle.global.nest(24,{ selected : arm_Context.showAssetNames}),arm_Translator.tr("Show Asset Names"));
			if(ui.changed) {
				arm_ui_UISidebar.inst.tagUIRedraw();
			}
			ui.endElement();
			ui.row([0.5]);
			if(ui.button(arm_Translator.tr("Restore"))) {
				arm_ui_UIMenu.draw(function(ui1) {
					ui1.text(arm_Translator.tr("Restore defaults?"),2,ui1.t.HIGHLIGHT_COL);
					if(ui1.button(arm_Translator.tr("Confirm"),0)) {
						ui1.t.ELEMENT_H = arm_App.defaultElementH;
						arm_Config.restore();
						arm_ui_BoxPreferences.setScale();
						if(arm_ui_BoxPreferences.filesPlugin != null) {
							var _g2 = 0;
							var _g11 = arm_ui_BoxPreferences.filesPlugin;
							while(_g2 < _g11.length) {
								var f = _g11[_g2];
								++_g2;
								arm_Plugin.stop(f);
							}
						}
						arm_ui_BoxPreferences.filesPlugin = null;
						arm_ui_BoxPreferences.filesKeymap = null;
					}
				},2);
			}
		}
		if(ui.tab(arm_ui_BoxPreferences.htab,arm_Translator.tr("Usage"),true)) {
			arm_Context.undoHandle = zui_Handle.global.nest(25,{ value : arm_Config.raw.undo_steps});
			var tmp = ui.slider(arm_Context.undoHandle,arm_Translator.tr("Undo Steps"),1,64,false,1) | 0;
			arm_Config.raw.undo_steps = tmp;
			if(arm_Context.undoHandle.changed) {
				ui.g.end();
				while(arm_History.undoLayers.length < arm_Config.raw.undo_steps) {
					var l = new arm_data_LayerSlot("_undo" + arm_History.undoLayers.length);
					l.createMask(0,false);
					arm_History.undoLayers.push(l);
				}
				while(arm_History.undoLayers.length > arm_Config.raw.undo_steps) {
					var l1 = arm_History.undoLayers.pop();
					l1.unload();
				}
				arm_History.reset();
				ui.g.begin(false);
				arm_Config.save();
			}
			arm_Context.brushBias = ui.slider(zui_Handle.global.nest(26,{ value : arm_Context.brushBias}),arm_Translator.tr("Paint Bleed"),0.0,2.0,true);
			if(ui.isHovered) {
				ui.tooltip(arm_Translator.tr("Stretch brush strokes on the uv map to prevent seams"));
			}
			arm_Context.dilateRadius = ui.slider(zui_Handle.global.nest(27,{ value : arm_Context.dilateRadius}),arm_Translator.tr("Dilate Radius"),0.0,64.0,true,1);
			if(ui.isHovered) {
				ui.tooltip(arm_Translator.tr("Dilate baked textures to prevent seams"));
			}
			var brushLiveHandle = zui_Handle.global.nest(28,{ selected : arm_Config.raw.brush_live});
			var tmp1 = arm_Translator.tr("Live Brush Preview");
			arm_Config.raw.brush_live = ui.check(brushLiveHandle,tmp1);
			if(ui.isHovered) {
				ui.tooltip(arm_Translator.tr("Draw live brush preview in viewport"));
			}
			if(brushLiveHandle.changed) {
				arm_Context.ddirty = 2;
			}
			var brush3dHandle = zui_Handle.global.nest(29,{ selected : arm_Config.raw.brush_3d});
			var tmp2 = arm_Translator.tr("3D Cursor");
			arm_Config.raw.brush_3d = ui.check(brush3dHandle,tmp2);
			if(brush3dHandle.changed) {
				arm_node_MaterialParser.parsePaintMaterial();
			}
			ui.enabled = arm_Config.raw.brush_3d;
			var brushDepthRejectHandle = zui_Handle.global.nest(30,{ selected : arm_Context.brushDepthReject});
			arm_Context.brushDepthReject = ui.check(brushDepthRejectHandle,arm_Translator.tr("Depth Reject"));
			if(brushDepthRejectHandle.changed) {
				arm_node_MaterialParser.parsePaintMaterial();
			}
			ui.row([0.5,0.5]);
			var brushAngleRejectHandle = zui_Handle.global.nest(31,{ selected : arm_Context.brushAngleReject});
			arm_Context.brushAngleReject = ui.check(brushAngleRejectHandle,arm_Translator.tr("Angle Reject"));
			if(brushAngleRejectHandle.changed) {
				arm_node_MaterialParser.parsePaintMaterial();
			}
			if(!arm_Context.brushAngleReject) {
				ui.enabled = false;
			}
			var angleDotHandle = zui_Handle.global.nest(32,{ value : arm_Context.brushAngleRejectDot});
			arm_Context.brushAngleRejectDot = ui.slider(angleDotHandle,arm_Translator.tr("Angle"),0.0,1.0,true);
			if(angleDotHandle.changed) {
				arm_node_MaterialParser.parsePaintMaterial();
			}
			ui.enabled = true;
		}
		if(ui.tab(arm_ui_BoxPreferences.htab,arm_Translator.tr("Pen"),true)) {
			ui.text(arm_Translator.tr("Pressure controls"));
			var tmp3 = zui_Handle.global.nest(33,{ selected : arm_Config.raw.pressure_radius});
			var tmp4 = arm_Translator.tr("Brush Radius");
			arm_Config.raw.pressure_radius = ui.check(tmp3,tmp4);
			var tmp5 = zui_Handle.global.nest(34,{ selected : arm_Config.raw.pressure_hardness});
			var tmp6 = arm_Translator.tr("Brush Hardness");
			arm_Config.raw.pressure_hardness = ui.check(tmp5,tmp6);
			var tmp7 = zui_Handle.global.nest(35,{ selected : arm_Config.raw.pressure_opacity});
			var tmp8 = arm_Translator.tr("Brush Opacity");
			arm_Config.raw.pressure_opacity = ui.check(tmp7,tmp8);
			var tmp9 = zui_Handle.global.nest(36,{ selected : arm_Config.raw.pressure_angle});
			var tmp10 = arm_Translator.tr("Brush Angle");
			arm_Config.raw.pressure_angle = ui.check(tmp9,tmp10);
			var tmp11 = zui_Handle.global.nest(37,{ value : arm_Config.raw.pressure_sensitivity});
			var tmp12 = arm_Translator.tr("Sensitivity");
			arm_Config.raw.pressure_sensitivity = ui.slider(tmp11,tmp12,0.0,2.0,true);
		}
		arm_Context.hssgi = zui_Handle.global.nest(38,{ selected : arm_Config.raw.rp_ssgi});
		arm_Context.hssr = zui_Handle.global.nest(39,{ selected : arm_Config.raw.rp_ssr});
		arm_Context.hbloom = zui_Handle.global.nest(40,{ selected : arm_Config.raw.rp_bloom});
		var f1 = arm_Config.raw.rp_supersample;
		arm_Context.hsupersample = zui_Handle.global.nest(41,{ position : f1 == 0.25 ? 0 : f1 == 0.5 ? 1 : f1 == 1.0 ? 2 : f1 == 1.5 ? 3 : f1 == 2.0 ? 4 : 5});
		arm_Context.hvxao = zui_Handle.global.nest(42,{ selected : arm_Config.raw.rp_gi});
		if(ui.tab(arm_ui_BoxPreferences.htab,arm_Translator.tr("Viewport"),true)) {
			ui.combo(arm_Context.hsupersample,["0.25x","0.5x","1.0x","1.5x","2.0x","4.0x"],arm_Translator.tr("Super Sample"),true);
			if(arm_Context.hsupersample.changed) {
				arm_Config.applyConfig();
			}
			ui.check(arm_Context.hvxao,arm_Translator.tr("Voxel AO"));
			if(ui.isHovered) {
				ui.tooltip(arm_Translator.tr("Cone-traced AO and shadows"));
			}
			if(arm_Context.hvxao.changed) {
				arm_Config.applyConfig();
			}
			ui.enabled = arm_Context.hvxao.selected;
			var h = zui_Handle.global.nest(43,{ value : arm_Context.vxaoOffset});
			arm_Context.vxaoOffset = ui.slider(h,arm_Translator.tr("Cone Offset"),1.0,4.0,true);
			if(h.changed) {
				arm_Context.ddirty = 2;
			}
			var h1 = zui_Handle.global.nest(44,{ value : arm_Context.vxaoAperture});
			arm_Context.vxaoAperture = ui.slider(h1,arm_Translator.tr("Aperture"),1.0,4.0,true);
			if(h1.changed) {
				arm_Context.ddirty = 2;
			}
			ui.enabled = true;
			ui.check(arm_Context.hssgi,arm_Translator.tr("SSAO"));
			if(arm_Context.hssgi.changed) {
				arm_Config.applyConfig();
			}
			ui.check(arm_Context.hssr,arm_Translator.tr("SSR"));
			if(arm_Context.hssr.changed) {
				arm_Config.applyConfig();
			}
			ui.check(arm_Context.hbloom,arm_Translator.tr("Bloom"));
			if(arm_Context.hbloom.changed) {
				arm_Config.applyConfig();
			}
			var h2 = zui_Handle.global.nest(45,{ value : arm_Config.raw.rp_vignette});
			var tmp13 = arm_Translator.tr("Vignette");
			arm_Config.raw.rp_vignette = ui.slider(h2,tmp13,0.0,1.0,true);
			if(h2.changed) {
				arm_Context.ddirty = 2;
				arm_Config.save();
			}
			var cam = iron_Scene.active.camera;
			var camRaw = cam.data.raw;
			var near_handle = zui_Handle.global.nest(46,null);
			var far_handle = zui_Handle.global.nest(47,null);
			near_handle.value = (camRaw.near_plane * 1000 | 0) / 1000;
			far_handle.value = (camRaw.far_plane * 100 | 0) / 100;
			camRaw.near_plane = ui.slider(near_handle,arm_Translator.tr("Clip Start"),0.001,1.0,true);
			camRaw.far_plane = ui.slider(far_handle,arm_Translator.tr("Clip End"),50.0,100.0,true);
			if(near_handle.changed || far_handle.changed) {
				cam.buildProjection();
			}
		}
		if(ui.tab(arm_ui_BoxPreferences.htab,arm_Translator.tr("Keymap"),true)) {
			if(arm_ui_BoxPreferences.filesKeymap == null) {
				arm_ui_BoxPreferences.fetchKeymaps();
			}
			ui.row([0.5,0.25,0.25]);
			arm_ui_BoxPreferences.presetHandle = zui_Handle.global.nest(48,{ position : arm_ui_BoxPreferences.getPresetIndex()});
			ui.combo(arm_ui_BoxPreferences.presetHandle,arm_ui_BoxPreferences.filesKeymap,arm_Translator.tr("Preset"));
			if(arm_ui_BoxPreferences.presetHandle.changed) {
				arm_Config.raw.keymap = arm_ui_BoxPreferences.filesKeymap[arm_ui_BoxPreferences.presetHandle.position] + ".json";
				arm_Config.applyConfig();
				arm_Config.loadKeymap();
			}
			if(ui.button(arm_Translator.tr("Import"))) {
				arm_ui_UIFiles.show("json",false,function(path) {
					arm_io_ImportKeymap.run(path);
				});
			}
			if(ui.button(arm_Translator.tr("Export"))) {
				arm_ui_UIFiles.show("json",true,function(dest) {
					if(!StringTools.endsWith(arm_ui_UIFiles.filename,".json")) {
						arm_ui_UIFiles.filename += ".json";
					}
					var path1 = arm_sys_Path.data() + arm_sys_Path.sep + "keymap_presets" + arm_sys_Path.sep + arm_Config.raw.keymap;
					arm_sys_File.copy(path1,dest + arm_sys_Path.sep + arm_ui_UIFiles.filename);
				});
			}
			ui.separator(8,false);
			var i1 = 0;
			ui.changed = false;
			var _g3 = 0;
			var _g12 = Reflect.fields(arm_Config.keymap);
			while(_g3 < _g12.length) {
				var key = _g12[_g3];
				++_g3;
				var h3 = zui_Handle.global.nest(49,null).nest(i1++);
				h3.text = Reflect.field(arm_Config.keymap,key);
				var text = ui.textInput(h3,key,0);
				arm_Config.keymap[key] = text;
			}
			if(ui.changed) {
				arm_Config.applyConfig();
				arm_Config.saveKeymap();
			}
		}
		if(ui.tab(arm_ui_BoxPreferences.htab,arm_Translator.tr("Plugins"),true)) {
			ui.row([0.25,0.25]);
			if(ui.button(arm_Translator.tr("New"))) {
				arm_ui_UIBox.showCustom(function(ui2) {
					if(ui2.tab(zui_Handle.global.nest(50,null),arm_Translator.tr("New Plugin"))) {
						ui2.row([0.5,0.5]);
						var pluginName = ui2.textInput(zui_Handle.global.nest(51,{ text : "new_plugin"}),arm_Translator.tr("Name"));
						if(ui2.button(arm_Translator.tr("OK")) || ui2.isReturnDown) {
							var template = "let plugin = new arm.Plugin();\r\nlet h1 = new zui.Handle();\r\nplugin.drawUI = function(ui) {\r\n\tif (ui.panel(h1, 'New Plugin')) {\r\n\t\tif (ui.button('Button')) {\r\n\t\t\tarm.Log.error('Hello');\r\n\t\t}\r\n\t}\r\n}\r\n";
							if(!StringTools.endsWith(pluginName,".js")) {
								pluginName += ".js";
							}
							var path2 = arm_sys_Path.data() + arm_sys_Path.sep + "plugins" + arm_sys_Path.sep + pluginName;
							Krom.fileSaveBytes(path2,haxe_io_Bytes.ofString(template).b.bufferValue);
							arm_ui_BoxPreferences.filesPlugin = null;
							arm_ui_UIBox.show = false;
							arm_App.redrawUI();
							arm_ui_BoxPreferences.htab.position = 5;
							arm_ui_BoxPreferences.show();
						}
					}
				});
			}
			if(ui.button(arm_Translator.tr("Import"))) {
				arm_ui_UIFiles.show("js,wasm,zip",false,function(path3) {
					arm_io_ImportPlugin.run(path3);
				});
			}
			if(arm_ui_BoxPreferences.filesPlugin == null) {
				arm_ui_BoxPreferences.filesPlugin = arm_sys_File.readDirectory(arm_sys_Path.data() + arm_sys_Path.sep + "plugins");
			}
			if(arm_Config.raw.plugins == null) {
				arm_Config.raw.plugins = [];
			}
			var h4 = zui_Handle.global.nest(52,{ selected : false});
			var _g4 = 0;
			var _g13 = arm_ui_BoxPreferences.filesPlugin;
			while(_g4 < _g13.length) {
				var f2 = [_g13[_g4]];
				++_g4;
				var isJs = StringTools.endsWith(f2[0],".js");
				var isWasm = false;
				if(!isJs && !isWasm) {
					continue;
				}
				var enabled = arm_Config.raw.plugins.indexOf(f2[0]) >= 0;
				h4.selected = enabled;
				var tag = isJs ? f2[0].split(".")[0] : f2[0];
				ui.check(h4,tag);
				if(h4.changed && h4.selected != enabled) {
					if(h4.selected) {
						arm_Config.raw.plugins.push(f2[0]);
						arm_Plugin.start(f2[0]);
					} else {
						HxOverrides.remove(arm_Config.raw.plugins,f2[0]);
						arm_Plugin.stop(f2[0]);
					}
					arm_Config.save();
					arm_App.redrawUI();
				}
				if(ui.isHovered && ui.inputReleasedR) {
					arm_ui_UIMenu.draw((function(f3) {
						return function(ui3) {
							ui3.text(f3[0],2,ui3.t.HIGHLIGHT_COL);
							var path4 = arm_sys_Path.data() + arm_sys_Path.sep + "plugins" + arm_sys_Path.sep + f3[0];
							if(ui3.button(arm_Translator.tr("Edit in Text Editor"),0)) {
								arm_sys_File.start(path4);
							}
							if(ui3.button(arm_Translator.tr("Edit in Script Tab"),0)) {
								iron_data_Data.getBlob("plugins/" + f3[0],(function(f4) {
									return function(blob) {
										arm_ui_TabScript.hscript.text = blob.toString();
										iron_data_Data.deleteBlob("plugins/" + f4[0]);
										arm_Log.info("Script opened");
									};
								})(f3));
							}
							if(ui3.button(arm_Translator.tr("Export"),0)) {
								arm_ui_UIFiles.show("js",true,(function() {
									return function(dest1) {
										if(!StringTools.endsWith(arm_ui_UIFiles.filename,".js")) {
											arm_ui_UIFiles.filename += ".js";
										}
										arm_sys_File.copy(path4,dest1 + arm_sys_Path.sep + arm_ui_UIFiles.filename);
									};
								})());
							}
							if(ui3.button(arm_Translator.tr("Delete"),0)) {
								if(arm_Config.raw.plugins.indexOf(f3[0]) >= 0) {
									HxOverrides.remove(arm_Config.raw.plugins,f3[0]);
									arm_Plugin.stop(f3[0]);
								}
								HxOverrides.remove(arm_ui_BoxPreferences.filesPlugin,f3[0]);
								arm_sys_File.delete(path4);
							}
						};
					})(f2),5);
				}
			}
		}
	},600,400);
};
arm_ui_BoxPreferences.fetchKeymaps = function() {
	arm_ui_BoxPreferences.filesKeymap = arm_sys_File.readDirectory(arm_sys_Path.data() + arm_sys_Path.sep + "keymap_presets");
	var _g = 0;
	var _g1 = arm_ui_BoxPreferences.filesKeymap.length;
	while(_g < _g1) {
		var i = _g++;
		arm_ui_BoxPreferences.filesKeymap[i] = HxOverrides.substr(arm_ui_BoxPreferences.filesKeymap[i],0,arm_ui_BoxPreferences.filesKeymap[i].length - 5);
	}
};
arm_ui_BoxPreferences.getPresetIndex = function() {
	return arm_ui_BoxPreferences.filesKeymap.indexOf(HxOverrides.substr(arm_Config.raw.keymap,0,arm_Config.raw.keymap.length - 5));
};
arm_ui_BoxPreferences.setScale = function() {
	var scale = arm_Config.raw.window_scale;
	arm_ui_UISidebar.inst.ui.setScale(scale);
	arm_ui_UISidebar.inst.windowW = arm_ui_UISidebar.defaultWindowW * scale | 0;
	arm_ui_UIToolbar.inst.toolbarw = 54 * scale | 0;
	arm_ui_UIHeader.inst.headerh = 28 * scale | 0;
	arm_ui_UIStatus.inst.statush = 32 * scale | 0;
	arm_ui_UIMenubar.inst.menubarw = 330 * scale | 0;
	arm_ui_UISidebar.inst.setIconScale();
	arm_ui_UINodes.inst.ui.setScale(scale);
	arm_ui_UIView2D.inst.ui.setScale(scale);
	arm_App.uiBox.setScale(scale);
	arm_App.uiMenu.setScale(scale);
	arm_App.resize();
};
arm_ui_BoxPreferences.loadTheme = function(theme) {
	if(theme == "dark.json") {
		arm_App.theme = zui_Themes.dark;
	} else {
		iron_data_Data.getBlob("themes/" + theme,function(b) {
			arm_App.theme = JSON.parse(b.toString());
		});
	}
	arm_App.uiBox.t = arm_App.theme;
	arm_ui_UISidebar.inst.ui.t = arm_App.theme;
	arm_ui_UINodes.inst.ui.t = arm_App.theme;
	arm_ui_UIView2D.inst.ui.t = arm_App.theme;
	arm_ui_UISidebar.inst.tagUIRedraw();
};
var arm_ui_TabBrowser = function() { };
$hxClasses["arm.ui.TabBrowser"] = arm_ui_TabBrowser;
arm_ui_TabBrowser.__name__ = "arm.ui.TabBrowser";
arm_ui_TabBrowser.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UIStatus.inst.statustab,arm_Translator.tr("Browser")) && arm_ui_UIStatus.inst.statush > 32 * ui.ops.scaleFactor) {
		if(arm_Config.raw.bookmarks == null) {
			arm_Config.raw.bookmarks = [];
		}
		var bookmarksW = 100 * ui.ops.scaleFactor | 0;
		var _y = ui._y;
		ui._x = bookmarksW;
		ui._w -= bookmarksW;
		if(arm_ui_TabBrowser.hpath.text == "" && arm_Config.raw.bookmarks.length > 0) {
			arm_ui_TabBrowser.hpath.text = arm_Config.raw.bookmarks[0];
		}
		var tmp = arm_ui_TabBrowser.hpath;
		var tmp1 = arm_Translator.tr("Path");
		arm_ui_TabBrowser.hpath.text = ui.textInput(tmp,tmp1);
		arm_ui_UIFiles.fileBrowser(ui,arm_ui_TabBrowser.hpath,false,true);
		if(arm_ui_TabBrowser.known) {
			arm_io_ImportAsset.run(arm_ui_TabBrowser.hpath.text);
			arm_ui_TabBrowser.hpath.text = HxOverrides.substr(arm_ui_TabBrowser.hpath.text,0,arm_ui_TabBrowser.hpath.text.lastIndexOf(arm_sys_Path.sep));
		}
		arm_ui_TabBrowser.known = arm_ui_TabBrowser.hpath.text.indexOf(".") > 0;
		var bottomY = ui._y;
		var _h = ui._h;
		ui._x = 0;
		ui._y = _y;
		ui._w = bookmarksW;
		if(ui.button("+")) {
			arm_Config.raw.bookmarks.push(arm_ui_TabBrowser.hpath.text);
			arm_Config.save();
		}
		var _g = 0;
		var _g1 = arm_Config.raw.bookmarks;
		while(_g < _g1.length) {
			var b = [_g1[_g]];
			++_g;
			var folder = [HxOverrides.substr(b[0],b[0].lastIndexOf(arm_sys_Path.sep) + 1,null)];
			if(ui.button(folder[0],0)) {
				arm_ui_TabBrowser.hpath.text = b[0];
			}
			if(ui.isHovered && ui.inputReleasedR) {
				arm_ui_UIMenu.draw((function(folder1,b1) {
					return function(ui1) {
						ui1.text(folder1[0],2,ui1.t.HIGHLIGHT_COL);
						if(ui1.button(arm_Translator.tr("Delete"),0)) {
							HxOverrides.remove(arm_Config.raw.bookmarks,b1[0]);
							arm_Config.save();
						}
					};
				})(folder,b),2);
			}
		}
		ui._y = bottomY;
	}
};
var arm_ui_TabBrushes = function() { };
$hxClasses["arm.ui.TabBrushes"] = arm_ui_TabBrushes;
arm_ui_TabBrushes.__name__ = "arm.ui.TabBrushes";
arm_ui_TabBrushes.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UISidebar.inst.htab1,arm_Translator.tr("Brushes"))) {
		ui.row([0.25,0.25,0.25]);
		if(ui.button(arm_Translator.tr("New"))) {
			arm_Context.brush = new arm_data_BrushSlot();
			arm_Project.brushes.push(arm_Context.brush);
			arm_node_MaterialParser.parseBrush();
			arm_Context.parseBrushInputs();
			arm_ui_UINodes.inst.hwnd.redraws = 2;
		}
		if(ui.button(arm_Translator.tr("Import"))) {
			arm_Project.importBrush();
		}
		if(ui.button(arm_Translator.tr("Nodes"))) {
			arm_ui_UISidebar.inst.showBrushNodes();
		}
		var slotw = 51 * ui.ops.scaleFactor | 0;
		var num = arm_ui_UISidebar.inst.windowW / slotw | 0;
		var _g = 0;
		var _g1 = Math.ceil(arm_Project.brushes.length / num) | 0;
		while(_g < _g1) {
			var row = _g++;
			var _g2 = [];
			var _g11 = 0;
			var _g21 = num;
			while(_g11 < _g21) {
				var i = _g11++;
				_g2.push(1 / num);
			}
			ui.row(_g2);
			ui._x += 2;
			if(row > 0) {
				ui._y += 6;
			}
			var _g3 = 0;
			var _g4 = num;
			while(_g3 < _g4) {
				var j = _g3++;
				var imgw = 50 * ui.ops.scaleFactor | 0;
				var i1 = [j + row * num];
				if(i1[0] >= arm_Project.brushes.length) {
					ui.endElement(imgw);
					continue;
				}
				var img = ui.ops.scaleFactor > 1 ? arm_Project.brushes[i1[0]].image : arm_Project.brushes[i1[0]].imageIcon;
				var imgFull = arm_Project.brushes[i1[0]].image;
				if(arm_Context.brush == arm_Project.brushes[i1[0]]) {
					var off = row % 2 == 1 ? 1 : 0;
					var w = 50;
					if(arm_Config.raw.window_scale > 1) {
						w += arm_Config.raw.window_scale * 2 | 0;
					}
					ui.fill(-1,-2,w + 3,2,ui.t.HIGHLIGHT_COL);
					ui.fill(-1,w - off,w + 3,2 + off,ui.t.HIGHLIGHT_COL);
					ui.fill(-1,-2,2,w + 3,ui.t.HIGHLIGHT_COL);
					ui.fill(w + 1,-2,2,w + 4,ui.t.HIGHLIGHT_COL);
				}
				var tile = ui.ops.scaleFactor > 1 ? 100 : 50;
				var state;
				if(arm_Project.brushes[i1[0]].previewReady) {
					state = ui.image(img);
				} else {
					var _this = arm_Res.bundled;
					state = ui.image(__map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"],-1,null,tile * 5,tile,tile,tile);
				}
				if(state == 1) {
					if(arm_Context.brush != arm_Project.brushes[i1[0]]) {
						arm_Context.selectBrush(i1[0]);
					}
					if(kha_Scheduler.time() - arm_Context.selectTime < 0.25) {
						arm_ui_UISidebar.inst.showBrushNodes();
					}
					arm_Context.selectTime = kha_Scheduler.time();
				}
				if(ui.isHovered && ui.inputReleasedR) {
					var add = arm_Project.brushes.length > 1 ? 1 : 0;
					arm_ui_UIMenu.draw((function(i2) {
						return function(ui1) {
							ui1.text(arm_Project.brushes[i2[0]].canvas.name,2,ui1.t.HIGHLIGHT_COL);
							if(ui1.button("Export",0)) {
								arm_Context.selectBrush(i2[0]);
								arm_ui_UIFiles.show("arm",true,(function() {
									return function(path) {
										var f = arm_ui_UIFiles.filename;
										if(f == "") {
											f = arm_Translator.tr("untitled");
										}
										arm_io_ExportArm.runBrush(path + arm_sys_Path.sep + f);
									};
								})());
							}
							if(ui1.button("Duplicate",0)) {
								var dupliBrush = null;
								dupliBrush = (function(i3) {
									return function(_) {
										iron_App.removeRender(dupliBrush);
										arm_Context.brush = new arm_data_BrushSlot();
										arm_Project.brushes.push(arm_Context.brush);
										var cloned = JSON.parse(JSON.stringify(arm_Project.brushes[i3[0]].canvas));
										arm_Context.brush.canvas = cloned;
										arm_Context.setBrush(arm_Context.brush);
										arm_util_RenderUtil.makeBrushPreview();
									};
								})(i2);
								iron_App.notifyOnRender(dupliBrush);
							}
							if(arm_Project.brushes.length > 1 && ui1.button(arm_Translator.tr("Delete"),0)) {
								arm_Context.selectBrush(i2[0] == 0 ? 1 : 0);
								arm_Project.brushes.splice(i2[0],1);
								arm_ui_UISidebar.inst.hwnd1.redraws = 2;
							}
						};
					})(i1),3 + add);
				}
				if(ui.isHovered && imgFull != null) {
					ui.tooltipImage(imgFull);
				}
			}
			ui._y += 6;
		}
	}
};
var arm_ui_TabConsole = function() { };
$hxClasses["arm.ui.TabConsole"] = arm_ui_TabConsole;
arm_ui_TabConsole.__name__ = "arm.ui.TabConsole";
arm_ui_TabConsole.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	var title = arm_Log.messageTimer > 0 ? arm_Log.message + "        " : arm_Translator.tr("Console");
	var color = arm_Log.messageTimer > 0 ? arm_Log.messageColor : -1;
	if(ui.tab(arm_ui_UIStatus.inst.statustab,title,false,color) && arm_ui_UIStatus.inst.statush > 32 * ui.ops.scaleFactor) {
		ui.row([0.05,0.05]);
		if(ui.button(arm_Translator.tr("Clear"))) {
			arm_Log.lastTraces = [];
		}
		if(ui.button(arm_Translator.tr("Export"))) {
			var str = arm_Log.lastTraces.join("\n");
			arm_ui_UIFiles.show("txt",true,function(path) {
				var f = arm_ui_UIFiles.filename;
				if(f == "") {
					f = arm_Translator.tr("untitled");
				}
				path = path + arm_sys_Path.sep + f;
				if(!StringTools.endsWith(path,".txt")) {
					path += ".txt";
				}
				Krom.fileSaveBytes(path,haxe_io_Bytes.ofString(str).b.bufferValue);
			});
		}
		var _g = 0;
		var _g1 = arm_Log.lastTraces;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			ui.text(t);
		}
	}
};
var arm_ui_TabFonts = function() { };
$hxClasses["arm.ui.TabFonts"] = arm_ui_TabFonts;
arm_ui_TabFonts.__name__ = "arm.ui.TabFonts";
arm_ui_TabFonts.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UISidebar.inst.htab2,arm_Translator.tr("Fonts"))) {
		ui.row([0.25]);
		if(ui.button(arm_Translator.tr("Import"))) {
			arm_Project.importAsset("ttf");
		}
		if(ui.isHovered) {
			ui.tooltip(arm_Translator.tr("Import font file") + (" (" + Std.string(arm_Config.keymap.file_import_assets) + ")"));
		}
		var _g = 0;
		var _g1 = arm_io_ImportFont.fontList;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			ui.text(f);
		}
	}
};
var arm_ui_TabHistory = function() { };
$hxClasses["arm.ui.TabHistory"] = arm_ui_TabHistory;
arm_ui_TabHistory.__name__ = "arm.ui.TabHistory";
arm_ui_TabHistory.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UISidebar.inst.htab,arm_Translator.tr("History"))) {
		var _g = 0;
		var _g1 = arm_History.steps.length;
		while(_g < _g1) {
			var i = _g++;
			var active = arm_History.steps.length - 1 - arm_History.redos;
			if(i == active) {
				ui.fill(0,0,ui._windowW,ui.t.ELEMENT_H,ui.t.HIGHLIGHT_COL);
			}
			ui.text(arm_History.steps[i].name);
			if(ui.isReleased) {
				var diff = i - active;
				while(diff > 0) {
					--diff;
					arm_History.redo();
				}
				while(diff < 0) {
					++diff;
					arm_History.undo();
				}
			}
		}
	}
};
var arm_ui_TabLayers = function() { };
$hxClasses["arm.ui.TabLayers"] = arm_ui_TabLayers;
arm_ui_TabLayers.__name__ = "arm.ui.TabLayers";
arm_ui_TabLayers.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	var tmp = arm_ui_UISidebar.inst.htab;
	var tmp1 = arm_Translator.tr("Layers");
	if(ui.tab(tmp,tmp1)) {
		ui.row([0.25,0.25,0.5]);
		var tmp2 = arm_Translator.tr("New");
		if(ui.button(tmp2)) {
			arm_Layers.newLayer();
			arm_History.newLayer();
		}
		var tmp3 = arm_Translator.tr("2D View");
		if(ui.button(tmp3)) {
			arm_ui_UISidebar.inst.show2DView();
		} else if(ui.isHovered) {
			var tmp4 = arm_Translator.tr("Show 2D View");
			ui.tooltip(tmp4 + (" (" + Std.string(arm_Config.keymap.toggle_node_editor) + ")"));
		}
		var ar = [arm_Translator.tr("All")];
		var _g = 0;
		var _g1 = arm_Project.paintObjects;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			ar.push(p.name);
		}
		var filterHandle = zui_Handle.global.nest(80,null);
		var tmp5 = arm_Translator.tr("Filter");
		arm_Context.layerFilter = ui.combo(filterHandle,ar,tmp5);
		if(filterHandle.changed) {
			var _g2 = 0;
			var _g3 = arm_Project.paintObjects;
			while(_g2 < _g3.length) {
				var p1 = _g3[_g2];
				++_g2;
				p1.visible = arm_Context.layerFilter == 0 || p1.name == ar[arm_Context.layerFilter];
				arm_Layers.setObjectMask();
			}
			arm_util_UVUtil.uvmapCached = false;
			arm_Context.ddirty = 2;
		}
		var drawList = function(l,i) {
			if(arm_Context.layerFilter > 0 && l.objectMask > 0 && l.objectMask != arm_Context.layerFilter) {
				return;
			}
			if(l.parent != null && !l.parent.show_panel) {
				return;
			}
			var off = ui.t.ELEMENT_OFFSET;
			var step = ui.t.ELEMENT_H;
			var checkw = ui._windowW / 100 * 8 / ui.ops.scaleFactor;
			if(l.show_panel && l.getChildren() == null) {
				var mult = l.material_mask != null ? 2 : 1;
				var ph = (step + off) * mult;
				ui.fill(checkw,step * 2,ui._windowW / ui.ops.scaleFactor - 2 - checkw,ph,ui.t.SEPARATOR_COL);
			}
			if(arm_Context.layer == l) {
				if(arm_Context.layerIsMask) {
					ui.rect(ui._windowW / 100 * 24 / ui.ops.scaleFactor + (ui.ops.scaleFactor | 0),0,step * 2,step * 2,ui.t.HIGHLIGHT_COL,2);
				} else {
					ui.fill(checkw,0,ui._windowW / ui.ops.scaleFactor - 2 - checkw,step * 2,ui.t.HIGHLIGHT_COL);
				}
			}
			var mouse = iron_system_Input.getMouse();
			var mx = mouse.x;
			var my = mouse.y;
			var inLayers = mx > arm_ui_UISidebar.inst.tabx && my < arm_ui_UISidebar.inst.tabh;
			if(arm_App.isDragging && arm_App.dragLayer != null && my > ui._y - step && my < ui._y + step) {
				ui.fill(checkw,0,ui._windowW / ui.ops.scaleFactor - 2 - checkw,2 * ui.ops.scaleFactor,ui.t.HIGHLIGHT_COL);
				arm_ui_TabLayers.dragDestination = arm_Project.layers.indexOf(arm_App.dragLayer) < i ? i : i + 1;
			}
			if(l.texpaint_mask != null) {
				ui.row([0.08,0.16,0.16,0.2,0.3,0.1]);
			} else {
				ui.row([0.08,0.16,0.36,0.3,0.1]);
			}
			var center = step / 2 * ui.ops.scaleFactor;
			ui._y += center;
			var _this = arm_Res.bundled;
			var icons = __map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"];
			var r = arm_Res.tile18(icons,l.visible ? 0 : 1,0);
			ui._x += 2;
			ui._y += 3;
			var col = ui.t.ACCENT_SELECT_COL;
			var groupVisible = l.parent == null || l.parent.visible;
			if(!groupVisible) {
				col -= -1728053248;
			}
			if(ui.image(icons,col,null,r.x,r.y,r.w,r.h) == 3) {
				l.visible = !l.visible;
				arm_node_MaterialParser.parseMeshMaterial();
			}
			ui._x -= 2;
			ui._y -= 3;
			ui._y -= center;
			var contextMenu = false;
			var uix = ui._x;
			var uiy = ui._y;
			ui._x += 2;
			ui._y += 3;
			if(l.parent != null) {
				ui._x += 10 * ui.ops.scaleFactor;
			}
			var state = 0;
			var iconH = (ui.t.ELEMENT_H * ui.ops.scaleFactor - 3) * 2;
			if(l.getChildren() == null) {
				var icon = l.material_mask == null ? l.texpaint_preview : l.material_mask.imageIcon;
				if(l.material_mask == null) {
					var r1 = arm_Res.tile50(icons,4,1);
					var _x = ui._x;
					var _y = ui._y;
					ui.curRatio--;
					ui.image(icons,-1,null,r1.x,r1.y,r1.w,r1.h);
					ui._x = _x;
					ui._y = _y;
				}
				state = ui.image(icon,-1,iconH);
			} else {
				var folder = arm_Res.tile50(icons,2,1);
				state = ui.image(icons,ui.t.LABEL_COL - 2105376,iconH,folder.x,folder.y,folder.w,folder.h);
			}
			ui._x -= 2;
			ui._y -= 3;
			if(ui.isHovered && l.texpaint_preview != null) {
				ui.tooltipImage(l.texpaint_preview);
			}
			if(ui.isHovered && ui.inputReleasedR) {
				contextMenu = true;
			}
			if(state == 1) {
				arm_Context.setLayer(l);
				if(kha_Scheduler.time() - arm_Context.selectTime < 0.25) {
					arm_ui_UISidebar.inst.show2DView();
				}
				arm_Context.selectTime = kha_Scheduler.time();
				if(l.getChildren() == null) {
					var mouse1 = iron_system_Input.getMouse();
					arm_App.dragOffX = -(mouse1.x - uix - ui._windowX - 3);
					arm_App.dragOffY = -(mouse1.y - uiy - ui._windowY + 1);
					arm_App.dragLayer = arm_Context.layer;
				}
			}
			if(l.texpaint_mask != null) {
				var uix1 = ui._x;
				var uiy1 = ui._y;
				ui._x += 4 * ui.ops.scaleFactor | 0;
				ui._y += 3;
				ui.g.set_pipeline(arm_ui_UIView2D.inst.pipe);
				ui.currentWindow.texture.get_g4().setInt(arm_ui_UIView2D.inst.channelLocation,1);
				var state1 = ui.image(l.texpaint_mask_preview,-1,(ui.t.ELEMENT_H * ui.ops.scaleFactor - 3) * 2);
				ui.g.set_pipeline(null);
				ui._x -= 4 * ui.ops.scaleFactor | 0;
				ui._y -= 3;
				if(ui.isHovered) {
					ui.tooltipImage(l.texpaint_mask_preview);
				}
				if(ui.isHovered && ui.inputReleasedR) {
					arm_ui_UIMenu.draw(function(ui1) {
						ui1.text("" + l.name + " " + arm_Translator.tr("Mask"),2,ui1.t.HIGHLIGHT_COL);
						if(ui1.button(arm_Translator.tr("Delete"),0)) {
							arm_Context.setLayer(l);
							arm_History.deleteMask();
							l.deleteMask();
							arm_Context.setLayer(l);
						}
						if(ui1.button(arm_Translator.tr("Apply"),0)) {
							var makeApply = null;
							makeApply = function(g) {
								g.end();
								arm_Context.setLayer(l);
								arm_History.applyMask();
								l.applyMask();
								arm_node_MaterialParser.parseMeshMaterial();
								g.begin();
								iron_App.removeRender(makeApply);
							};
							iron_App.notifyOnRender(makeApply);
						}
					},3);
				}
				if(state1 == 1) {
					arm_Context.setLayer(l,true);
					if(kha_Scheduler.time() - arm_Context.selectTime < 0.25) {
						arm_ui_UISidebar.inst.show2DView();
					}
					arm_Context.selectTime = kha_Scheduler.time();
					var mouse2 = iron_system_Input.getMouse();
					arm_App.dragOffX = -(mouse2.x - uix1 - ui._windowX - 3);
					arm_App.dragOffY = -(mouse2.y - uiy1 - ui._windowY + 1);
					arm_App.dragLayer = arm_Context.layer;
				}
			}
			ui._y += center;
			var state2 = ui.text(l.name);
			ui._y -= center;
			if(l.parent != null) {
				ui._x -= 10 * ui.ops.scaleFactor;
			}
			if(state2 == 1) {
				arm_Context.setLayer(l);
				if(kha_Scheduler.time() - arm_Context.selectTime < 0.25) {
					arm_ui_UISidebar.inst.show2DView();
				}
				arm_Context.selectTime = kha_Scheduler.time();
			}
			if(ui.isHovered && ui.inputReleasedR) {
				contextMenu = true;
			}
			if(contextMenu) {
				var add = l.material_mask != null ? 1 : 0;
				var menuElements = l.getChildren() != null ? 6 : 20 + add;
				arm_ui_UIMenu.draw(function(ui2) {
					ui2.text(l.name,2,ui2.t.HIGHLIGHT_COL);
					if(ui2.button(arm_Translator.tr("Export"),0)) {
						arm_ui_BoxExport.showTextures();
					}
					if(l.getChildren() == null && l.material_mask == null && ui2.button(arm_Translator.tr("To Fill Layer"),0)) {
						var makeFill = null;
						makeFill = function(g1) {
							g1.end();
							arm_History.toFillLayer();
							l.toFillLayer();
							g1.begin();
							iron_App.removeRender(makeFill);
						};
						iron_App.notifyOnRender(makeFill);
					}
					if(l.getChildren() == null && l.material_mask != null && ui2.button(arm_Translator.tr("To Paint Layer"),0)) {
						var makePaint = null;
						makePaint = function(g2) {
							g2.end();
							arm_History.toPaintLayer();
							l.toPaintLayer();
							g2.begin();
							iron_App.removeRender(makePaint);
						};
						iron_App.notifyOnRender(makePaint);
					}
					if(l.getChildren() == null && ui2.button(arm_Translator.tr("To Group"),0)) {
						if(l.parent == null) {
							arm_Context.setLayer(l);
							var group = arm_Layers.newGroup();
							HxOverrides.remove(arm_Project.layers,group);
							arm_Project.layers.splice(arm_Project.layers.indexOf(l) + 1,0,group);
							group.show_panel = true;
							l.parent = group;
							arm_Context.setLayer(l);
						}
					}
					if(ui2.button(arm_Translator.tr("Delete"),0)) {
						if(arm_Project.layers.length > 1) {
							arm_Context.layer = l;
							if(l.getChildren() == null) {
								arm_History.deleteLayer();
							}
							l.delete();
							if(l.parent != null && l.parent.getChildren() == null) {
								l.parent.delete();
							}
							arm_Context.ddirty = 2;
						}
					}
					if(ui2.button(arm_Translator.tr("Move Up"),0)) {
						if(i < arm_Project.layers.length - 1) {
							var isGroup = arm_Project.layers[i].getChildren() != null;
							if(isGroup) {
								if(arm_Project.layers[i + 1].parent != null) {
									return;
								}
							}
							arm_Context.setLayer(l);
							arm_History.orderLayers(i + 1);
							var target = arm_Project.layers[i + 1];
							arm_Project.layers[i + 1] = arm_Project.layers[i];
							arm_Project.layers[i] = target;
							arm_ui_UISidebar.inst.hwnd.redraws = 2;
							if(!isGroup) {
								arm_Project.layers[i + 1].parent = arm_Project.layers[i].parent;
								if(arm_Project.layers[i].texpaint == null && arm_Project.layers[i].getChildren() == null) {
									arm_Project.layers[i].delete();
								}
							} else {
								var children = arm_Project.layers[i + 1].getChildren();
								var j = i;
								var _g21 = 0;
								while(_g21 < children.length) {
									var c = children[_g21];
									++_g21;
									var target1 = arm_Project.layers[j - 1];
									arm_Project.layers[j - 1] = arm_Project.layers[j];
									arm_Project.layers[j] = target1;
									--j;
								}
							}
						}
					}
					if(ui2.button(arm_Translator.tr("Move Down"),0)) {
						if(i > 0) {
							var isGroup1 = l.getChildren() != null;
							if(isGroup1) {
								var children1 = l.getChildren();
								if(i - children1.length <= 1) {
									return;
								}
								if(arm_Project.layers[i - children1.length - 2].parent != null) {
									return;
								}
								var _g22 = 0;
								while(_g22 < children1.length) {
									var c1 = children1[_g22];
									++_g22;
									var k = arm_Project.layers.indexOf(c1);
									var target2 = arm_Project.layers[k - 1];
									arm_Project.layers[k - 1] = arm_Project.layers[k];
									arm_Project.layers[k] = target2;
								}
							}
							arm_Context.setLayer(l);
							arm_History.orderLayers(i - 1);
							var target3 = arm_Project.layers[i - 1];
							arm_Project.layers[i - 1] = arm_Project.layers[i];
							arm_Project.layers[i] = target3;
							arm_ui_UISidebar.inst.hwnd.redraws = 2;
							if(!isGroup1) {
								arm_Project.layers[i - 1].parent = arm_Project.layers[i].parent;
								if(arm_Project.layers[i].getChildren() != null) {
									arm_Project.layers[i - 1].parent = arm_Project.layers[i];
								}
								if(arm_Project.layers.length > i + 1 && arm_Project.layers[i + 1].texpaint == null && arm_Project.layers[i + 1].getChildren() == null) {
									arm_Project.layers[i + 1].delete();
								}
							}
						}
					}
					var drawList1 = l.getChildren() != null && ui2.button(arm_Translator.tr("Merge Group"),0);
					if(l.getChildren() == null && ui2.button(arm_Translator.tr("Merge Down"),0)) {
						arm_Context.setLayer(l);
						iron_App.notifyOnRender(arm_History.mergeLayers);
						iron_App.notifyOnRender(arm_Layers.mergeSelectedLayer);
					}
					if(l.getChildren() == null && ui2.button(arm_Translator.tr("Duplicate"),0)) {
						arm_Context.setLayer(l);
						arm_History.duplicateLayer();
						var makeDupli = null;
						makeDupli = function(g3) {
							g3.end();
							l = l.duplicate();
							arm_Context.setLayer(l);
							g3.begin();
							iron_App.removeRender(makeDupli);
						};
						iron_App.notifyOnRender(makeDupli);
					}
					if(l.getChildren() == null && ui2.button(arm_Translator.tr("Black Mask"),0)) {
						l.createMask(0);
						arm_Context.setLayer(l,true);
						arm_Context.layerPreviewDirty = true;
						arm_History.newMask();
					}
					if(l.getChildren() == null && ui2.button(arm_Translator.tr("White Mask"),0)) {
						l.createMask(-1);
						arm_Context.setLayer(l,true);
						arm_Context.layerPreviewDirty = true;
						arm_History.newMask();
					}
					if(l.material_mask != null) {
						if(ui2.button(arm_Translator.tr("Select Material"),0)) {
							arm_Context.setMaterial(l.material_mask);
						}
					}
					if(l.getChildren() == null) {
						var baseHandle = zui_Handle.global.nest(81,null).nest(l.id);
						var opacHandle = zui_Handle.global.nest(82,null).nest(l.id);
						var norHandle = zui_Handle.global.nest(83,null).nest(l.id);
						var occHandle = zui_Handle.global.nest(84,null).nest(l.id);
						var roughHandle = zui_Handle.global.nest(85,null).nest(l.id);
						var metHandle = zui_Handle.global.nest(86,null).nest(l.id);
						var heightHandle = zui_Handle.global.nest(87,null).nest(l.id);
						var emisHandle = zui_Handle.global.nest(88,null).nest(l.id);
						var subsHandle = zui_Handle.global.nest(89,null).nest(l.id);
						baseHandle.selected = l.paintBase;
						opacHandle.selected = l.paintOpac;
						norHandle.selected = l.paintNor;
						occHandle.selected = l.paintOcc;
						roughHandle.selected = l.paintRough;
						metHandle.selected = l.paintMet;
						heightHandle.selected = l.paintHeight;
						emisHandle.selected = l.paintEmis;
						subsHandle.selected = l.paintSubs;
						var drawList2 = arm_Translator.tr("Base Color");
						l.paintBase = ui2.check(baseHandle,drawList2);
						var drawList3 = arm_Translator.tr("Opacity");
						l.paintOpac = ui2.check(opacHandle,drawList3);
						var drawList4 = arm_Translator.tr("Normal");
						l.paintNor = ui2.check(norHandle,drawList4);
						var drawList5 = arm_Translator.tr("Occlusion");
						l.paintOcc = ui2.check(occHandle,drawList5);
						var drawList6 = arm_Translator.tr("Roughness");
						l.paintRough = ui2.check(roughHandle,drawList6);
						var drawList7 = arm_Translator.tr("Metallic");
						l.paintMet = ui2.check(metHandle,drawList7);
						var drawList8 = arm_Translator.tr("Height");
						l.paintHeight = ui2.check(heightHandle,drawList8);
						var drawList9 = arm_Translator.tr("Emission");
						l.paintEmis = ui2.check(emisHandle,drawList9);
						var drawList10 = arm_Translator.tr("Subsurface");
						l.paintSubs = ui2.check(subsHandle,drawList10);
						if(baseHandle.changed || opacHandle.changed || norHandle.changed || occHandle.changed || roughHandle.changed || metHandle.changed || heightHandle.changed || emisHandle.changed || subsHandle.changed) {
							arm_node_MaterialParser.parseMeshMaterial();
							arm_ui_UIMenu.keepOpen = true;
						}
					}
				},menuElements);
			}
			if(l.getChildren() != null) {
				ui.endElement();
			} else {
				var blendingHandle = zui_Handle.global.nest(90,null).nest(l.id);
				blendingHandle.position = l.blending;
				var drawList11 = [arm_Translator.tr("Mix"),arm_Translator.tr("Darken"),arm_Translator.tr("Multiply"),arm_Translator.tr("Burn"),arm_Translator.tr("Lighten"),arm_Translator.tr("Screen"),arm_Translator.tr("Dodge"),arm_Translator.tr("Add"),arm_Translator.tr("Overlay"),arm_Translator.tr("Soft Light"),arm_Translator.tr("Linear Light"),arm_Translator.tr("Difference"),arm_Translator.tr("Subtract"),arm_Translator.tr("Divide"),arm_Translator.tr("Hue"),arm_Translator.tr("Saturation"),arm_Translator.tr("Color"),arm_Translator.tr("Value")];
				var drawList12 = arm_Translator.tr("Blending");
				ui.combo(blendingHandle,drawList11,drawList12);
				if(blendingHandle.changed) {
					arm_Context.setLayer(l);
					arm_History.layerBlending();
					l.blending = blendingHandle.position;
					arm_node_MaterialParser.parseMeshMaterial();
				}
			}
			ui._y += center;
			var layerPanel = zui_Handle.global.nest(91,null).nest(l.id);
			layerPanel.selected = l.show_panel;
			l.show_panel = ui.panel(layerPanel,"",true,false,false);
			ui._y -= center;
			if(l.getChildren() != null) {
				ui._y -= ui.t.ELEMENT_OFFSET;
				ui.endElement();
			} else {
				ui._y -= ui.t.ELEMENT_OFFSET;
				ui.row([0.08,0.16,0.36,0.3,0.1]);
				ui.endElement();
				ui.endElement();
				ui.endElement();
				var ar1 = [arm_Translator.tr("Shared")];
				var _g23 = 0;
				var _g31 = arm_Project.paintObjects;
				while(_g23 < _g31.length) {
					var p2 = _g31[_g23];
					++_g23;
					ar1.push(p2.name);
				}
				var objectHandle = zui_Handle.global.nest(92,null).nest(l.id);
				objectHandle.position = l.objectMask == null ? 0 : l.objectMask;
				var drawList13 = arm_Translator.tr("Object");
				l.objectMask = ui.combo(objectHandle,ar1,drawList13);
				if(objectHandle.changed) {
					arm_Context.setLayer(l);
					arm_node_MaterialParser.parseMeshMaterial();
					if(l.material_mask != null) {
						iron_App.notifyOnRender($bind(l,l.clear));
						var updateFillLayers = null;
						updateFillLayers = function(_) {
							arm_Layers.updateFillLayers(4);
							iron_App.removeRender(updateFillLayers);
						};
						iron_App.notifyOnRender(updateFillLayers);
					} else {
						arm_Layers.setObjectMask();
					}
				}
				ui.endElement();
			}
			ui._y -= ui.t.ELEMENT_OFFSET;
			if(l.show_panel && l.getChildren() == null) {
				ui.row([0.08,0.3066666666666667,0.3066666666666667,0.3066666666666667]);
				ui.endElement();
				ui._x += 1;
				ui._y += 2;
				var layerOpacHandle = zui_Handle.global.nest(93,null).nest(l.id);
				layerOpacHandle.value = l.maskOpacity;
				var drawList14 = arm_Translator.tr("Opacity");
				ui.slider(layerOpacHandle,drawList14,0.0,1.0,true);
				if(layerOpacHandle.changed) {
					arm_Context.setLayer(l);
					if(ui.inputStarted) {
						arm_History.layerOpacity();
					}
					l.maskOpacity = layerOpacHandle.value;
					arm_node_MaterialParser.parseMeshMaterial();
				}
				var drawList15 = arm_App.resHandle;
				var drawList16 = arm_Translator.tr("Res");
				ui.combo(drawList15,["128","256","512","1K","2K","4K","8K","16K"],drawList16,true);
				if(arm_App.resHandle.changed) {
					iron_App.notifyOnRender(arm_Layers.resizeLayers);
					arm_util_UVUtil.uvmap = null;
					arm_util_UVUtil.uvmapCached = false;
					arm_util_UVUtil.trianglemap = null;
					arm_util_UVUtil.trianglemapCached = false;
				}
				var drawList17 = arm_App.bitsHandle;
				var drawList18 = arm_Translator.tr("Color");
				ui.combo(drawList17,["8bit","16bit","32bit"],drawList18,true);
				if(arm_App.bitsHandle.changed) {
					iron_App.notifyOnRender(arm_Layers.setLayerBits);
				}
				if(l.material_mask != null) {
					ui.row([0.08,0.3066666666666667,0.3066666666666667,0.3066666666666667]);
					ui.endElement();
					var scaleHandle = zui_Handle.global.nest(94,null).nest(l.id);
					scaleHandle.value = l.scale;
					var drawList19 = arm_Translator.tr("UV Scale");
					l.scale = ui.slider(scaleHandle,drawList19,0.0,5.0,true);
					if(scaleHandle.changed) {
						arm_Context.setMaterial(l.material_mask);
						arm_Context.setLayer(l);
						arm_Layers.updateFillLayers();
					}
					var angleHandle = zui_Handle.global.nest(95,null).nest(l.id);
					angleHandle.value = l.angle;
					var drawList20 = arm_Translator.tr("Angle");
					l.angle = ui.slider(angleHandle,drawList20,0.0,360,true,1);
					if(angleHandle.changed) {
						arm_Context.setMaterial(l.material_mask);
						arm_Context.setLayer(l);
						arm_node_MaterialParser.parsePaintMaterial();
						arm_Layers.updateFillLayers();
					}
					var uvTypeHandle = zui_Handle.global.nest(96,null).nest(l.id);
					uvTypeHandle.position = l.uvType;
					var drawList21 = [arm_Translator.tr("UV Map"),arm_Translator.tr("Triplanar")];
					var drawList22 = arm_Translator.tr("TexCoord");
					l.uvType = ui.combo(uvTypeHandle,drawList21,drawList22);
					if(uvTypeHandle.changed) {
						arm_Context.setMaterial(l.material_mask);
						arm_Context.setLayer(l);
						arm_node_MaterialParser.parsePaintMaterial();
						arm_Layers.updateFillLayers();
					}
				}
			}
		};
		var _g24 = 0;
		var _g32 = arm_Project.layers.length;
		while(_g24 < _g32) {
			var i1 = _g24++;
			if(i1 >= arm_Project.layers.length) {
				break;
			}
			var j1 = arm_Project.layers.length - 1 - i1;
			var l1 = arm_Project.layers[j1];
			drawList(l1,j1);
		}
	}
};
var arm_ui_TabMaterials = function() { };
$hxClasses["arm.ui.TabMaterials"] = arm_ui_TabMaterials;
arm_ui_TabMaterials.__name__ = "arm.ui.TabMaterials";
arm_ui_TabMaterials.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	var isScene = arm_ui_UIHeader.inst.worktab.position == 1;
	var materials = isScene ? arm_Project.materialsScene : arm_Project.materials;
	var selectMaterial = isScene ? arm_Context.selectMaterialScene : arm_Context.selectMaterial;
	var tmp = arm_ui_UISidebar.inst.htab1;
	var tmp1 = arm_Translator.tr("Materials");
	if(ui.tab(tmp,tmp1)) {
		ui.row([0.25,0.25,0.25]);
		var tmp2 = arm_Translator.tr("New");
		if(ui.button(tmp2)) {
			if(isScene) {
				if(arm_Context.object != arm_Context.paintObject && ((arm_Context.object) instanceof iron_object_MeshObject)) {
					arm_util_MaterialUtil.removeMaterialCache();
					iron_data_Data.getMaterial("Scene","Material2",function(md) {
						ui.g.end();
						md.name = "Material2." + materials.length;
						arm_Context.materialScene = new arm_data_MaterialSlot(md);
						materials.push(arm_Context.materialScene);
						selectMaterial(materials.length - 1);
						arm_util_RenderUtil.makeMaterialPreview();
						ui.g.begin(false);
					});
				}
			} else {
				ui.g.end();
				arm_Context.material = new arm_data_MaterialSlot(materials[0].data);
				materials.push(arm_Context.material);
				arm_ui_TabMaterials.updateMaterial();
				ui.g.begin(false);
			}
		}
		var tmp3 = arm_Translator.tr("Import");
		if(ui.button(tmp3)) {
			arm_Project.importMaterial();
		}
		var tmp4 = arm_Translator.tr("Nodes");
		if(ui.button(tmp4)) {
			arm_ui_UISidebar.inst.showMaterialNodes();
		} else if(ui.isHovered) {
			var tmp5 = arm_Translator.tr("Show Node Editor");
			ui.tooltip(tmp5 + (" (" + Std.string(arm_Config.keymap.toggle_2d_view) + ")"));
		}
		var slotw = 51 * ui.ops.scaleFactor | 0;
		var num = arm_ui_UISidebar.inst.windowW / slotw | 0;
		var _g = 0;
		var _g1 = Math.ceil(materials.length / num) | 0;
		while(_g < _g1) {
			var row = _g++;
			var mult = arm_Context.showAssetNames ? 2 : 1;
			var _g2 = [];
			var _g11 = 0;
			var _g21 = num * mult;
			while(_g11 < _g21) {
				var i = _g11++;
				_g2.push(1 / num);
			}
			ui.row(_g2);
			ui._x += 2;
			var off = arm_Context.showAssetNames ? ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor * 10.0 : 6;
			if(row > 0) {
				ui._y += off;
			}
			var _g3 = 0;
			var _g4 = num;
			while(_g3 < _g4) {
				var j = _g3++;
				var imgw = 50 * ui.ops.scaleFactor | 0;
				var i1 = [j + row * num];
				if(i1[0] >= materials.length) {
					ui.endElement(imgw);
					continue;
				}
				var img = ui.ops.scaleFactor > 1 ? materials[i1[0]].image : materials[i1[0]].imageIcon;
				var imgFull = materials[i1[0]].image;
				if(arm_ui_TabMaterials.getSelectedMaterial() == materials[i1[0]]) {
					var off1 = row % 2 == 1 ? 1 : 0;
					var w = 50;
					if(arm_Config.raw.window_scale > 1) {
						w += arm_Config.raw.window_scale * 2 | 0;
					}
					ui.fill(-1,-2,w + 3,2,ui.t.HIGHLIGHT_COL);
					ui.fill(-1,w - off1,w + 3,2 + off1,ui.t.HIGHLIGHT_COL);
					ui.fill(-1,-2,2,w + 3,ui.t.HIGHLIGHT_COL);
					ui.fill(w + 1,-2,2,w + 4,ui.t.HIGHLIGHT_COL);
				}
				var uix = ui._x;
				var uiy = ui._y;
				var tile = ui.ops.scaleFactor > 1 ? 100 : 50;
				var state;
				if(materials[i1[0]].previewReady) {
					state = ui.image(img);
				} else {
					var _this = arm_Res.bundled;
					var state1 = __map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"];
					state = ui.image(state1,-1,null,tile,tile,tile,tile);
				}
				if(state == 1 && ui.inputY > ui._windowY) {
					if(arm_ui_TabMaterials.getSelectedMaterial() != materials[i1[0]]) {
						selectMaterial(i1[0]);
					}
					var mouse = iron_system_Input.getMouse();
					arm_App.dragOffX = -(mouse.x - uix - ui._windowX - 3);
					arm_App.dragOffY = -(mouse.y - uiy - ui._windowY + 1);
					arm_App.dragMaterial = arm_ui_TabMaterials.getSelectedMaterial();
					if(kha_Scheduler.time() - arm_Context.selectTime < 0.25) {
						arm_ui_UISidebar.inst.showMaterialNodes();
						arm_App.dragMaterial = null;
						arm_App.isDragging = false;
					}
					arm_Context.selectTime = kha_Scheduler.time();
				}
				if(ui.isHovered && ui.inputReleasedR) {
					var add = materials.length > 1 ? 1 : 0;
					arm_ui_UIMenu.draw((function(i2) {
						return function(ui1) {
							var m = materials[i2[0]];
							ui1.text(materials[i2[0]].canvas.name,2,ui1.t.HIGHLIGHT_COL);
							if(ui1.button(arm_Translator.tr("To Fill Layer"),0)) {
								selectMaterial(i2[0]);
								arm_Layers.createFillLayer();
							}
							if(ui1.button(arm_Translator.tr("Export"),0)) {
								selectMaterial(i2[0]);
								arm_ui_UIFiles.show("arm",true,(function() {
									return function(path) {
										var f = arm_ui_UIFiles.filename;
										if(f == "") {
											f = arm_Translator.tr("untitled");
										}
										arm_io_ExportArm.runMaterial(path + arm_sys_Path.sep + f);
									};
								})());
							}
							if(ui1.button(arm_Translator.tr("Duplicate"),0)) {
								var dupliMat = null;
								dupliMat = (function(i3) {
									return function(_) {
										iron_App.removeRender(dupliMat);
										arm_Context.material = new arm_data_MaterialSlot(materials[0].data);
										materials.push(arm_Context.material);
										var cloned = JSON.parse(JSON.stringify(materials[i3[0]].canvas));
										arm_Context.material.canvas = cloned;
										arm_ui_TabMaterials.updateMaterial();
									};
								})(i2);
								iron_App.notifyOnRender(dupliMat);
							}
							if(materials.length > 1 && ui1.button(arm_Translator.tr("Delete"),0)) {
								selectMaterial(i2[0] == 0 ? 1 : 0);
								materials.splice(i2[0],1);
								arm_ui_UISidebar.inst.hwnd1.redraws = 2;
							}
							var baseHandle = zui_Handle.global.nest(124,null).nest(m.id,{ selected : m.paintBase});
							var opacHandle = zui_Handle.global.nest(125,null).nest(m.id,{ selected : m.paintOpac});
							var norHandle = zui_Handle.global.nest(126,null).nest(m.id,{ selected : m.paintNor});
							var occHandle = zui_Handle.global.nest(127,null).nest(m.id,{ selected : m.paintOcc});
							var roughHandle = zui_Handle.global.nest(128,null).nest(m.id,{ selected : m.paintRough});
							var metHandle = zui_Handle.global.nest(129,null).nest(m.id,{ selected : m.paintMet});
							var heightHandle = zui_Handle.global.nest(130,null).nest(m.id,{ selected : m.paintHeight});
							var emisHandle = zui_Handle.global.nest(131,null).nest(m.id,{ selected : m.paintEmis});
							var subsHandle = zui_Handle.global.nest(132,null).nest(m.id,{ selected : m.paintSubs});
							m.paintBase = ui1.check(baseHandle,arm_Translator.tr("Base Color"));
							m.paintOpac = ui1.check(opacHandle,arm_Translator.tr("Opacity"));
							m.paintNor = ui1.check(norHandle,arm_Translator.tr("Normal"));
							m.paintOcc = ui1.check(occHandle,arm_Translator.tr("Occlusion"));
							m.paintRough = ui1.check(roughHandle,arm_Translator.tr("Roughness"));
							m.paintMet = ui1.check(metHandle,arm_Translator.tr("Metallic"));
							m.paintHeight = ui1.check(heightHandle,arm_Translator.tr("Height"));
							m.paintEmis = ui1.check(emisHandle,arm_Translator.tr("Emission"));
							m.paintSubs = ui1.check(subsHandle,arm_Translator.tr("Subsurface"));
							if(baseHandle.changed || opacHandle.changed || norHandle.changed || occHandle.changed || roughHandle.changed || metHandle.changed || heightHandle.changed || emisHandle.changed || subsHandle.changed) {
								arm_node_MaterialParser.parsePaintMaterial();
								arm_ui_UIMenu.keepOpen = true;
							}
						};
					})(i1),13 + add);
				}
				if(ui.isHovered) {
					ui.tooltipImage(imgFull);
				}
				if(arm_Context.showAssetNames) {
					ui._x = uix;
					ui._y += slotw * 0.9;
					ui.text(materials[i1[0]].canvas.name,1);
					ui._y -= slotw * 0.9;
				}
			}
			ui._y += 6;
		}
	}
};
arm_ui_TabMaterials.updateMaterial = function() {
	arm_ui_UIHeader.inst.headerHandle.redraws = 2;
	arm_ui_UINodes.inst.hwnd.redraws = 2;
	arm_node_MaterialParser.parsePaintMaterial();
	arm_util_RenderUtil.makeMaterialPreview();
	var decal = arm_Context.tool == 3 || arm_Context.tool == 4;
	if(decal) {
		arm_util_RenderUtil.makeDecalPreview();
	}
};
arm_ui_TabMaterials.getSelectedMaterial = function() {
	if(arm_ui_UIHeader.inst.worktab.position == 1) {
		return arm_Context.materialScene;
	} else {
		return arm_Context.material;
	}
};
var arm_ui_TabMeshes = function() { };
$hxClasses["arm.ui.TabMeshes"] = arm_ui_TabMeshes;
arm_ui_TabMeshes.__name__ = "arm.ui.TabMeshes";
arm_ui_TabMeshes.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UISidebar.inst.htab2,arm_Translator.tr("Meshes"))) {
		ui.row([0.25,0.25]);
		if(ui.button(arm_Translator.tr("Import"))) {
			arm_Project.importMesh();
		}
		if(ui.isHovered) {
			ui.tooltip(arm_Translator.tr("Import mesh file") + (" (" + Std.string(arm_Config.keymap.file_import_assets) + ")"));
		}
		if(ui.button(arm_Translator.tr("Tools..."))) {
			arm_ui_UIMenu.draw(function(ui1) {
				ui1.text(arm_Translator.tr("Tools"),2,ui1.t.HIGHLIGHT_COL);
				if(ui1.button(arm_Translator.tr("Flip Normals"),0)) {
					arm_util_MeshUtil.flipNormals();
					arm_Context.ddirty = 2;
				}
				if(ui1.button(arm_Translator.tr("Calculate Normals"),0)) {
					arm_util_MeshUtil.calcNormals();
					arm_Context.ddirty = 2;
				}
				if(ui1.button(arm_Translator.tr("Rotate X"),0)) {
					arm_util_MeshUtil.swapAxis(1,2);
					arm_Context.ddirty = 2;
				}
				if(ui1.button(arm_Translator.tr("Rotate Y"),0)) {
					arm_util_MeshUtil.swapAxis(2,0);
					arm_Context.ddirty = 2;
				}
				if(ui1.button(arm_Translator.tr("Rotate Z"),0)) {
					arm_util_MeshUtil.swapAxis(0,1);
					arm_Context.ddirty = 2;
				}
			},6);
		}
		if(ui.panel(zui_Handle.global.nest(134,{ selected : false}),arm_Translator.tr("Scene"),true,false,false)) {
			ui.indent();
			var _g = 0;
			var _g1 = arm_Project.paintObjects;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				ui.text(o.name);
			}
			ui.unindent();
		}
	}
};
var arm_ui_TabOutliner = function() { };
$hxClasses["arm.ui.TabOutliner"] = arm_ui_TabOutliner;
arm_ui_TabOutliner.__name__ = "arm.ui.TabOutliner";
arm_ui_TabOutliner.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	var tmp = arm_ui_UISidebar.inst.htab;
	var tmp1 = arm_Translator.tr("Outliner");
	if(ui.tab(tmp,tmp1)) {
		ui.row([0.25]);
		var tmp2 = arm_Translator.tr("Import");
		if(ui.button(tmp2)) {
			arm_Project.importMesh();
		}
		var i = 0;
		var drawList = null;
		drawList = function(h,o) {
			if(o.name.charAt(0) == ".") {
				return;
			}
			if(((o) instanceof iron_object_MeshObject) && (js_Boot.__cast(o , iron_object_MeshObject)).force_context != null) {
				return;
			}
			var b = false;
			if(i % 2 == 0) {
				ui.fill(-ui._x,0,ui._windowW,ui.t.ELEMENT_H,ui.t.WINDOW_BG_COL - 263172);
			}
			if(arm_Context.object == o) {
				ui.fill(-ui._x,0,ui._windowW,ui.t.ELEMENT_H,ui.t.HIGHLIGHT_COL);
			}
			if(o.children.length > 0) {
				ui.row([0.076923076923076927,0.92307692307692313]);
				var b1 = h.nest(i,{ selected : true});
				b = ui.panel(b1,"",true,false,false);
				ui.text(o.name);
			} else {
				ui._x += 18;
				ui.fill(-15 / ui.ops.scaleFactor,ui.t.ELEMENT_H / 2,15,1,ui.t.ACCENT_COL);
				ui.text(o.name);
				ui._x -= 18;
			}
			if(ui.isReleased) {
				arm_Context.selectObject(o);
				arm_Context.ddirty = 2;
				arm_ui_UISidebar.inst.hwnd1.redraws = 2;
			}
			i += 1;
			if(b) {
				var currentY = ui._y;
				var _g = 0;
				var _g1 = o.children;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					ui.indent();
					drawList(h,c);
					ui.unindent();
				}
				var h1 = (ui._y - currentY - ui.t.ELEMENT_H * ui.ops.scaleFactor / 2) / ui.ops.scaleFactor;
				ui.fill(15,-h1 - ui.t.ELEMENT_H / 2,1,h1,ui.t.ACCENT_COL);
			}
		};
		var _ELEMENT_OFFSET = ui.t.ELEMENT_OFFSET;
		ui.t.ELEMENT_OFFSET = 0;
		var _g2 = 0;
		var _g11 = iron_Scene.active.root.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			var tmp3 = zui_Handle.global.nest(135,null);
			drawList(tmp3,c1);
		}
		ui.t.ELEMENT_OFFSET = _ELEMENT_OFFSET;
	}
};
var arm_ui_TabParticles = function() { };
$hxClasses["arm.ui.TabParticles"] = arm_ui_TabParticles;
arm_ui_TabParticles.__name__ = "arm.ui.TabParticles";
arm_ui_TabParticles.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UISidebar.inst.htab1,arm_Translator.tr("Particles"))) {
		ui.row([0.25,0.25,0.25]);
		var tmp = ui.button(arm_Translator.tr("New"));
		var tmp1 = ui.button(arm_Translator.tr("Import"));
		var tmp2 = ui.button(arm_Translator.tr("Nodes"));
	}
};
var arm_ui_TabPlugins = function() { };
$hxClasses["arm.ui.TabPlugins"] = arm_ui_TabPlugins;
arm_ui_TabPlugins.__name__ = "arm.ui.TabPlugins";
arm_ui_TabPlugins.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UISidebar.inst.htab,arm_Translator.tr("Plugins"))) {
		ui.row([0.25]);
		if(ui.button(arm_Translator.tr("Manager"))) {
			arm_ui_BoxPreferences.htab.position = 5;
			arm_ui_BoxPreferences.show();
		}
		var _this = arm_Plugin.plugins;
		var p = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(p.hasNext()) {
			var p1 = p.next();
			if(p1.drawUI != null) {
				p1.drawUI(ui);
			}
		}
	}
};
var arm_ui_TabProperties = function() { };
$hxClasses["arm.ui.TabProperties"] = arm_ui_TabProperties;
arm_ui_TabProperties.__name__ = "arm.ui.TabProperties";
arm_ui_TabProperties.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UISidebar.inst.htab1,arm_Translator.tr("Properties"))) {
		if(arm_Context.object != null) {
			var h = zui_Handle.global.nest(136,null);
			h.selected = arm_Context.object.visible;
			var tmp = arm_Translator.tr("Visible");
			arm_Context.object.visible = ui.check(h,tmp);
			if(h.changed) {
				arm_Context.ddirty = 2;
			}
			var loc = arm_Context.object.transform.loc;
			var scale = arm_Context.object.transform.scale;
			var _this = arm_Context.object.transform.rot;
			var a = -2 * (_this.x * _this.z - _this.w * _this.y);
			var b = _this.w * _this.w + _this.x * _this.x - _this.y * _this.y - _this.z * _this.z;
			var c = 2 * (_this.x * _this.y + _this.w * _this.z);
			var d = -2 * (_this.y * _this.z - _this.w * _this.x);
			var e = _this.w * _this.w - _this.x * _this.x + _this.y * _this.y - _this.z * _this.z;
			var x = Math.atan2(d,e);
			var y = Math.atan2(a,b);
			var z = Math.asin(c);
			if(z == null) {
				z = 0.0;
			}
			if(y == null) {
				y = 0.0;
			}
			if(x == null) {
				x = 0.0;
			}
			var rot_x = x;
			var rot_y = y;
			var rot_z = z;
			var rot_w = 1.0;
			rot_x *= 57.29579143313326;
			rot_y *= 57.29579143313326;
			rot_z *= 57.29579143313326;
			var f = 0.0;
			ui.changed = false;
			ui.row(arm_ui_TabProperties.row4);
			ui.text(arm_Translator.tr("Location"));
			h = zui_Handle.global.nest(137,null);
			h.text = arm_ui_TabProperties.roundfp(loc.x) + "";
			f = parseFloat(ui.textInput(h,"X"));
			if(h.changed) {
				loc.x = f;
				arm_Context.ddirty = 2;
			}
			h = zui_Handle.global.nest(138,null);
			h.text = arm_ui_TabProperties.roundfp(loc.y) + "";
			f = parseFloat(ui.textInput(h,"Y"));
			if(h.changed) {
				loc.y = f;
				arm_Context.ddirty = 2;
			}
			h = zui_Handle.global.nest(139,null);
			h.text = arm_ui_TabProperties.roundfp(loc.z) + "";
			f = parseFloat(ui.textInput(h,"Z"));
			if(h.changed) {
				loc.z = f;
				arm_Context.ddirty = 2;
			}
			ui.row(arm_ui_TabProperties.row4);
			ui.text("Rotation");
			h = zui_Handle.global.nest(140,null);
			h.text = arm_ui_TabProperties.roundfp(rot_x) + "";
			f = parseFloat(ui.textInput(h,"X"));
			if(h.changed) {
				rot_x = f;
				arm_Context.ddirty = 2;
			}
			h = zui_Handle.global.nest(141,null);
			h.text = arm_ui_TabProperties.roundfp(rot_y) + "";
			f = parseFloat(ui.textInput(h,"Y"));
			if(h.changed) {
				rot_y = f;
				arm_Context.ddirty = 2;
			}
			h = zui_Handle.global.nest(142,null);
			h.text = arm_ui_TabProperties.roundfp(rot_z) + "";
			f = parseFloat(ui.textInput(h,"Z"));
			if(h.changed) {
				rot_z = f;
				arm_Context.ddirty = 2;
			}
			if(ui.changed && arm_Context.object.name != "Scene") {
				rot_x *= 0.01745328888888889;
				rot_y *= 0.01745328888888889;
				rot_z *= 0.01745328888888889;
				var _this1 = arm_Context.object.transform.rot;
				var f1 = rot_x / 2;
				var c1 = Math.cos(f1);
				var s1 = Math.sin(f1);
				f1 = rot_y / 2;
				var c2 = Math.cos(f1);
				var s2 = Math.sin(f1);
				f1 = rot_z / 2;
				var c3 = Math.cos(f1);
				var s3 = Math.sin(f1);
				_this1.x = s1 * c2 * c3 + c1 * s2 * s3;
				_this1.y = c1 * s2 * c3 + s1 * c2 * s3;
				_this1.z = c1 * c2 * s3 - s1 * s2 * c3;
				_this1.w = c1 * c2 * c3 - s1 * s2 * s3;
				arm_Context.object.transform.buildMatrix();
			}
			ui.row(arm_ui_TabProperties.row4);
			ui.text(arm_Translator.tr("Scale"));
			h = zui_Handle.global.nest(143,null);
			h.text = arm_ui_TabProperties.roundfp(scale.x) + "";
			f = parseFloat(ui.textInput(h,"X"));
			if(h.changed) {
				scale.x = f;
				arm_Context.ddirty = 2;
			}
			h = zui_Handle.global.nest(144,null);
			h.text = arm_ui_TabProperties.roundfp(scale.y) + "";
			f = parseFloat(ui.textInput(h,"Y"));
			if(h.changed) {
				scale.y = f;
				arm_Context.ddirty = 2;
			}
			h = zui_Handle.global.nest(145,null);
			h.text = arm_ui_TabProperties.roundfp(scale.z) + "";
			f = parseFloat(ui.textInput(h,"Z"));
			if(h.changed) {
				scale.z = f;
				arm_Context.ddirty = 2;
			}
			arm_Context.object.transform.dirty = true;
			var tmp1 = ui.changed && arm_Context.object.name != "Scene";
		}
	}
};
arm_ui_TabProperties.roundfp = function(f,precision) {
	if(precision == null) {
		precision = 2;
	}
	f *= Math.pow(10,precision);
	return Math.round(f) / Math.pow(10,precision);
};
var arm_ui_TabScript = function() { };
$hxClasses["arm.ui.TabScript"] = arm_ui_TabScript;
arm_ui_TabScript.__name__ = "arm.ui.TabScript";
arm_ui_TabScript.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	var tmp = arm_ui_UIStatus.inst.statustab;
	var tmp1 = arm_Translator.tr("Script");
	if(ui.tab(tmp,tmp1) && arm_ui_UIStatus.inst.statush > 32 * ui.ops.scaleFactor) {
		ui.row([0.05,0.05,0.05,0.05]);
		var tmp2 = arm_Translator.tr("Run");
		if(ui.button(tmp2)) {
			try {
				eval(arm_ui_TabScript.hscript.text);
			} catch( e ) {
				arm_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
			}
		}
		var tmp3 = arm_Translator.tr("Clear");
		if(ui.button(tmp3)) {
			arm_ui_TabScript.hscript.text = "";
		}
		var tmp4 = arm_Translator.tr("Import");
		if(ui.button(tmp4)) {
			arm_ui_UIFiles.show("js",false,function(path) {
				iron_data_Data.getBlob(path,function(b) {
					arm_ui_TabScript.hscript.text = b.toString();
					iron_data_Data.deleteBlob(path);
				});
			});
		}
		var tmp5 = arm_Translator.tr("Export");
		if(ui.button(tmp5)) {
			var str = arm_ui_TabScript.hscript.text;
			arm_ui_UIFiles.show("js",true,function(path1) {
				var f = arm_ui_UIFiles.filename;
				if(f == "") {
					f = arm_Translator.tr("untitled");
				}
				path1 = path1 + arm_sys_Path.sep + f;
				if(!StringTools.endsWith(path1,".js")) {
					path1 += ".js";
				}
				Krom.fileSaveBytes(path1,haxe_io_Bytes.ofString(str).b.bufferValue);
			});
		}
		var _font = ui.ops.font;
		var _fontSize = ui.fontSize;
		iron_data_Data.getFont("font_mono.ttf",function(f1) {
			ui.ops.font = f1;
		});
		ui.fontSize = 15;
		zui_Ext.textArea(ui,arm_ui_TabScript.hscript);
		ui.ops.font = _font;
		ui.fontSize = _fontSize;
	}
};
var arm_ui_TabTextures = function() { };
$hxClasses["arm.ui.TabTextures"] = arm_ui_TabTextures;
arm_ui_TabTextures.__name__ = "arm.ui.TabTextures";
arm_ui_TabTextures.draw = function() {
	var ui = arm_ui_UISidebar.inst.ui;
	if(ui.tab(arm_ui_UISidebar.inst.htab2,arm_Translator.tr("Textures"))) {
		ui.row([0.25,0.25]);
		if(ui.button(arm_Translator.tr("Import"))) {
			arm_ui_UIFiles.show(arm_sys_Path.textureFormats.join(","),false,function(path) {
				arm_io_ImportAsset.run(path);
			});
		}
		if(ui.isHovered) {
			ui.tooltip(arm_Translator.tr("Import texture file") + (" (" + Std.string(arm_Config.keymap.file_import_assets) + ")"));
		}
		if(ui.button(arm_Translator.tr("2D View"))) {
			arm_ui_UISidebar.inst.show2DView(1);
		}
		if(arm_Project.assets.length > 0) {
			var slotw = 51 * ui.ops.scaleFactor | 0;
			var num = arm_ui_UISidebar.inst.windowW / slotw | 0;
			var _g = 0;
			var _g1 = Math.ceil(arm_Project.assets.length / num) | 0;
			while(_g < _g1) {
				var row = _g++;
				var _g2 = [];
				var _g11 = 0;
				var _g21 = num;
				while(_g11 < _g21) {
					var i = _g11++;
					_g2.push(1 / num);
				}
				ui.row(_g2);
				ui._x += 2;
				if(row > 0) {
					ui._y += 6;
				}
				var _g3 = 0;
				var _g4 = num;
				while(_g3 < _g4) {
					var j = _g3++;
					var imgw = 50 * ui.ops.scaleFactor | 0;
					var i1 = [j + row * num];
					if(i1[0] >= arm_Project.assets.length) {
						ui.endElement(imgw);
						continue;
					}
					var asset = [arm_Project.assets[i1[0]]];
					var img = [arm_ui_UISidebar.inst.getImage(asset[0])];
					var uix = ui._x;
					var uiy = ui._y;
					var sw = img[0].get_height() < img[0].get_width() ? img[0].get_height() : 0;
					if(ui.image(img[0],-1,slotw,0,0,sw,sw) == 1 && ui.inputY > ui._windowY) {
						var mouse = iron_system_Input.getMouse();
						arm_App.dragOffX = -(mouse.x - uix - ui._windowX - 3);
						arm_App.dragOffY = -(mouse.y - uiy - ui._windowY + 1);
						arm_App.dragAsset = asset[0];
						arm_Context.texture = asset[0];
						if(kha_Scheduler.time() - arm_Context.selectTime < 0.25) {
							arm_ui_UISidebar.inst.show2DView(1);
						}
						arm_Context.selectTime = kha_Scheduler.time();
						arm_ui_UIView2D.inst.hwnd.redraws = 2;
					}
					var _uix = ui._x;
					var _uiy = ui._y;
					ui._x = uix;
					ui._y = uiy;
					if(asset[0] == arm_Context.texture) {
						var off = i1[0] % 2 == 1 ? 1 : 0;
						var w = 50;
						ui.fill(0,0,w + 3,2,ui.t.HIGHLIGHT_COL);
						ui.fill(0,w - off + 2,w + 3,2 + off,ui.t.HIGHLIGHT_COL);
						ui.fill(0,0,2,w + 3,ui.t.HIGHLIGHT_COL);
						ui.fill(w + 2,0,2,w + 4,ui.t.HIGHLIGHT_COL);
					}
					ui._x = _uix;
					ui._y = _uiy;
					if(i1[0] % num == num - 1) {
						ui._y = uiy + slotw;
					}
					if(ui.isHovered) {
						ui.tooltipImage(img[0],256);
					}
					if(ui.isHovered && ui.inputReleasedR) {
						arm_ui_UIMenu.draw((function(img1,asset1,i2) {
							return function(ui1) {
								ui1.text(asset1[0].name,2,ui1.t.HIGHLIGHT_COL);
								if(ui1.button(arm_Translator.tr("Export"),0)) {
									arm_ui_UIFiles.show("png",true,(function(img2) {
										return function(path1) {
											var target = kha_Image.createRenderTarget(img2[0].get_width(),img2[0].get_height());
											var exportTexture = null;
											exportTexture = (function(img3) {
												return function(g) {
													if(arm_Layers.pipeMerge == null) {
														arm_Layers.makePipe();
													}
													target.get_g2().begin(false);
													target.get_g2().set_pipeline(arm_Layers.pipeCopy);
													target.get_g2().drawImage(img3[0],0,0);
													target.get_g2().set_pipeline(null);
													target.get_g2().end();
													var f = arm_ui_UIFiles.filename;
													if(f == "") {
														f = arm_Translator.tr("untitled");
													}
													if(!StringTools.endsWith(f,".png")) {
														f += ".png";
													}
													var out = new haxe_io_BytesOutput();
													var writer = new arm_format_PngWriter(out);
													var data = arm_format_PngTools.build32RGB1(target.get_width(),target.get_height(),target.getPixels());
													writer.write(data);
													Krom.fileSaveBytes(path1 + arm_sys_Path.sep + f,out.getBytes().b.bufferValue);
													iron_App.removeRender(exportTexture);
												};
											})(img2);
											iron_App.notifyOnRender(exportTexture);
										};
									})(img1));
								}
								if(ui1.button(arm_Translator.tr("To Mask"),0)) {
									arm_Layers.createImageMask(asset1[0]);
								}
								if(ui1.button(arm_Translator.tr("Delete"),0)) {
									arm_ui_UISidebar.inst.hwnd2.redraws = 2;
									iron_data_Data.deleteImage(asset1[0].file);
									arm_Project.assetMap.remove(asset1[0].id);
									arm_Project.assets.splice(i2[0],1);
									arm_Project.assetNames.splice(i2[0],1);
									iron_system_Tween.timer(0.1,(function() {
										return function() {
											arm_node_MaterialParser.parsePaintMaterial();
											arm_util_RenderUtil.makeMaterialPreview();
											arm_ui_UISidebar.inst.hwnd1.redraws = 2;
										};
									})());
								}
							};
						})(img,asset,i1),4);
					}
				}
			}
		} else {
			var _this = arm_Res.bundled;
			var img4 = __map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"];
			var r = arm_Res.tile50(img4,0,1);
			ui.image(img4,ui.t.BUTTON_COL,r.h,r.x,r.y,r.w,r.h);
			if(ui.isHovered) {
				ui.tooltip(arm_Translator.tr("Drag and drop files here"));
			}
		}
	}
};
var arm_ui_UIBox = function() { };
$hxClasses["arm.ui.UIBox"] = arm_ui_UIBox;
arm_ui_UIBox.__name__ = "arm.ui.UIBox";
arm_ui_UIBox.render = function(g) {
	g.end();
	var ui = arm_App.uiBox;
	var appw = kha_System.windowWidth();
	var apph = kha_System.windowHeight();
	var mw = arm_ui_UIBox.modalW * ui.ops.scaleFactor | 0;
	var mh = arm_ui_UIBox.modalH * ui.ops.scaleFactor | 0;
	var left = appw / 2 - mw / 2 | 0;
	var top = apph / 2 - mh / 2 | 0;
	if(arm_ui_UIBox.boxCommands == null) {
		ui.begin(g);
		if(ui.window(arm_ui_UIBox.hwnd,left,top,mw,mh,true)) {
			ui._y += 10;
			if(ui.tab(zui_Handle.global.nest(6,null),arm_ui_UIBox.boxTitle)) {
				if(arm_ui_UIBox.copyable) {
					zui_Ext.textArea(ui,zui_Handle.global.nest(7,{ text : arm_ui_UIBox.boxText}),null,false);
				} else {
					ui.text(arm_ui_UIBox.boxText);
				}
				ui.endElement();
				ui.row([0.66666666666666663,0.33333333333333331]);
				ui.endElement();
				if(ui.button(arm_Translator.tr("OK"))) {
					arm_ui_UIBox.show = false;
					arm_App.redrawUI();
				}
			}
		}
		ui.end();
	} else {
		ui.begin(g);
		if(ui.window(arm_ui_UIBox.hwnd,left,top,mw,mh,true)) {
			ui._y += 10;
			arm_ui_UIBox.boxCommands(ui);
		}
		ui.end();
	}
	g.begin(false);
	arm_ui_UIBox.draws++;
};
arm_ui_UIBox.update = function() {
	if(arm_ui_UIMenu.show) {
		return;
	}
	var mouse = iron_system_Input.getMouse();
	var kb = iron_system_Input.getKeyboard();
	var ui = arm_App.uiBox;
	var inUse = ui.comboSelectedHandle != null;
	var isEscape = kb.started("escape");
	if(arm_ui_UIBox.draws > 2 && (ui.inputReleased || isEscape) && !inUse && !ui.isTyping) {
		var appw = kha_System.windowWidth();
		var apph = kha_System.windowHeight();
		var mw = arm_ui_UIBox.modalW * ui.ops.scaleFactor | 0;
		var mh = arm_ui_UIBox.modalH * ui.ops.scaleFactor | 0;
		var left = appw / 2 - mw / 2 + arm_ui_UIBox.hwnd.dragX;
		var right = appw / 2 + mw / 2 + arm_ui_UIBox.hwnd.dragX;
		var top = apph / 2 - mh / 2 + arm_ui_UIBox.hwnd.dragY;
		var bottom = apph / 2 + mh / 2 + arm_ui_UIBox.hwnd.dragY;
		var mx = mouse.x;
		var my = mouse.y;
		if(arm_ui_UIBox.clickToHide && (mx < left || mx > right || my < top || my > bottom) || isEscape) {
			arm_ui_UIBox.show = false;
			arm_App.redrawUI();
		}
	}
};
arm_ui_UIBox.showMessage = function(title,text,copyable) {
	if(copyable == null) {
		copyable = false;
	}
	arm_ui_UIBox.init();
	arm_ui_UIBox.modalW = 400;
	arm_ui_UIBox.modalH = 210;
	arm_ui_UIBox.boxTitle = title;
	arm_ui_UIBox.boxText = text;
	arm_ui_UIBox.boxCommands = null;
	arm_ui_UIBox.copyable = copyable;
};
arm_ui_UIBox.showCustom = function(commands,mw,mh) {
	if(mh == null) {
		mh = 200;
	}
	if(mw == null) {
		mw = 400;
	}
	arm_ui_UIBox.init();
	arm_ui_UIBox.modalW = mw;
	arm_ui_UIBox.modalH = mh;
	arm_ui_UIBox.boxCommands = commands;
};
arm_ui_UIBox.init = function() {
	arm_ui_UIBox.hwnd.dragX = 0;
	arm_ui_UIBox.hwnd.dragY = 0;
	arm_ui_UIBox.show = true;
	arm_ui_UIBox.draws = 0;
	arm_ui_UIBox.clickToHide = true;
};
var arm_ui_UIHeader = function() {
	this.worktab = zui_Handle.global.nest(1,null);
	this.headerh = 28;
	this.headerHandle = new zui_Handle({ layout : 1});
	arm_ui_UIHeader.inst = this;
};
$hxClasses["arm.ui.UIHeader"] = arm_ui_UIHeader;
arm_ui_UIHeader.__name__ = "arm.ui.UIHeader";
arm_ui_UIHeader.prototype = {
	renderUI: function(g) {
		var ui = arm_ui_UISidebar.inst.ui;
		var panelx = arm_App.x();
		if(ui.window(this.headerHandle,panelx,this.headerh,kha_System.windowWidth() - arm_ui_UIToolbar.inst.toolbarw - arm_ui_UISidebar.inst.windowW,28 * ui.ops.scaleFactor | 0)) {
			ui._y += 2;
			if(this.worktab.position == 0) {
				if(arm_Context.tool == 9) {
					ui.text(arm_Translator.tr("Picked Color"));
					if(arm_Context.colorIdPicked) {
						var _this = iron_RenderPath.active.renderTargets;
						ui.image((__map_reserved["texpaint_colorid"] != null ? _this.getReserved("texpaint_colorid") : _this.h["texpaint_colorid"]).image,-1,64);
					}
					if(ui.button("Clear")) {
						arm_Context.colorIdPicked = false;
					}
					ui.text(arm_Translator.tr("Color ID Map"));
					var cid = ui.combo(arm_Context.colorIdHandle,arm_App.enumTexts("TEX_IMAGE"),arm_Translator.tr("Color ID"));
					if(arm_Context.colorIdHandle.changed) {
						arm_Context.ddirty = 2;
					}
					if(arm_Project.assets.length > 0) {
						ui.image(arm_ui_UISidebar.inst.getImage(arm_Project.assets[cid]));
					}
				} else if(arm_Context.tool == 10) {
					arm_Context.baseRPicked = Math.round(arm_Context.baseRPicked * 10) / 10;
					arm_Context.baseGPicked = Math.round(arm_Context.baseGPicked * 10) / 10;
					arm_Context.baseBPicked = Math.round(arm_Context.baseBPicked * 10) / 10;
					arm_Context.normalRPicked = Math.round(arm_Context.normalRPicked * 10) / 10;
					arm_Context.normalGPicked = Math.round(arm_Context.normalGPicked * 10) / 10;
					arm_Context.normalBPicked = Math.round(arm_Context.normalBPicked * 10) / 10;
					arm_Context.occlusionPicked = Math.round(arm_Context.occlusionPicked * 100) / 100;
					arm_Context.roughnessPicked = Math.round(arm_Context.roughnessPicked * 100) / 100;
					arm_Context.metallicPicked = Math.round(arm_Context.metallicPicked * 100) / 100;
					var baseRPicked = arm_Context.baseRPicked;
					var baseGPicked = arm_Context.baseGPicked;
					var baseBPicked = arm_Context.baseBPicked;
					var normalRPicked = arm_Context.normalRPicked;
					var normalGPicked = arm_Context.normalGPicked;
					var normalBPicked = arm_Context.normalBPicked;
					var occlusionPicked = arm_Context.occlusionPicked;
					var roughnessPicked = arm_Context.roughnessPicked;
					var metallicPicked = arm_Context.metallicPicked;
					ui.text(arm_Translator.tr("Base") + (" " + baseRPicked + "," + baseGPicked + "," + baseBPicked));
					ui.text(arm_Translator.tr("Nor") + (" " + normalRPicked + "," + normalGPicked + "," + normalBPicked));
					ui.text(arm_Translator.tr("Occlusion") + (" " + occlusionPicked));
					ui.text(arm_Translator.tr("Roughness") + (" " + roughnessPicked));
					ui.text(arm_Translator.tr("Metallic") + (" " + metallicPicked));
					arm_Context.pickerSelectMaterial = ui.check(zui_Handle.global.nest(102,{ selected : arm_Context.pickerSelectMaterial}),arm_Translator.tr("Select Material"));
					ui.combo(arm_Context.pickerMaskHandle,[arm_Translator.tr("None"),arm_Translator.tr("Material")],arm_Translator.tr("Mask"),true);
					if(arm_Context.pickerMaskHandle.changed) {
						arm_node_MaterialParser.parsePaintMaterial();
					}
				} else if(arm_Context.tool == 8) {
					ui.changed = false;
					var bakeHandle = zui_Handle.global.nest(103,{ position : arm_Context.bakeType});
					var bakes = [arm_Translator.tr("AO"),arm_Translator.tr("Curvature"),arm_Translator.tr("Normal"),arm_Translator.tr("Normal (Object)"),arm_Translator.tr("Height"),arm_Translator.tr("Derivative"),arm_Translator.tr("Position"),arm_Translator.tr("TexCoord"),arm_Translator.tr("Material ID"),arm_Translator.tr("Object ID"),arm_Translator.tr("Vertex Color")];
					arm_Context.bakeType = ui.combo(bakeHandle,bakes,arm_Translator.tr("Bake"));
					if(arm_Context.bakeType == 3 || arm_Context.bakeType == 6 || arm_Context.bakeType == 12) {
						var bakeUpAxisHandle = zui_Handle.global.nest(104,{ position : arm_Context.bakeUpAxis});
						arm_Context.bakeUpAxis = ui.combo(bakeUpAxisHandle,["Z","Y"],arm_Translator.tr("Up Axis"),true);
					}
					if(arm_Context.bakeType == 0 || arm_Context.bakeType == 1) {
						var bakeAxisHandle = zui_Handle.global.nest(105,{ position : arm_Context.bakeAxis});
						arm_Context.bakeAxis = ui.combo(bakeAxisHandle,["XYZ","X","Y","Z","-X","-Y","-Z"],arm_Translator.tr("Axis"),true);
					}
					if(arm_Context.bakeType == 0) {
						var strengthHandle = zui_Handle.global.nest(106,{ value : arm_Context.bakeAoStrength});
						arm_Context.bakeAoStrength = ui.slider(strengthHandle,arm_Translator.tr("Strength"),0.0,2.0,true);
						var radiusHandle = zui_Handle.global.nest(107,{ value : arm_Context.bakeAoRadius});
						arm_Context.bakeAoRadius = ui.slider(radiusHandle,arm_Translator.tr("Radius"),0.0,2.0,true);
						var offsetHandle = zui_Handle.global.nest(108,{ value : arm_Context.bakeAoOffset});
						arm_Context.bakeAoOffset = ui.slider(offsetHandle,arm_Translator.tr("Offset"),0.0,2.0,true);
					}
					if(arm_Context.bakeType == 1) {
						var strengthHandle1 = zui_Handle.global.nest(109,{ value : arm_Context.bakeCurvStrength});
						arm_Context.bakeCurvStrength = ui.slider(strengthHandle1,arm_Translator.tr("Strength"),0.0,2.0,true);
						var radiusHandle1 = zui_Handle.global.nest(110,{ value : arm_Context.bakeCurvRadius});
						arm_Context.bakeCurvRadius = ui.slider(radiusHandle1,arm_Translator.tr("Radius"),0.0,2.0,true);
						var offsetHandle1 = zui_Handle.global.nest(111,{ value : arm_Context.bakeCurvOffset});
						arm_Context.bakeCurvOffset = ui.slider(offsetHandle1,arm_Translator.tr("Offset"),0.0,2.0,true);
						var smoothHandle = zui_Handle.global.nest(112,{ value : arm_Context.bakeCurvSmooth});
						arm_Context.bakeCurvSmooth = ui.slider(smoothHandle,arm_Translator.tr("Smooth"),0,5,false,1) | 0;
					}
					if(arm_Context.bakeType == 2 || arm_Context.bakeType == 4 || arm_Context.bakeType == 5) {
						var _g = [];
						var _g1 = 0;
						var _g2 = arm_Project.paintObjects;
						while(_g1 < _g2.length) {
							var p = _g2[_g1];
							++_g1;
							_g.push(p.name);
						}
						var ar = _g;
						var polyHandle = zui_Handle.global.nest(113,{ position : arm_Context.bakeHighPoly});
						arm_Context.bakeHighPoly = ui.combo(polyHandle,ar,arm_Translator.tr("High Poly"));
					}
					if(ui.changed) {
						arm_node_MaterialParser.parsePaintMaterial();
					}
				} else {
					if(arm_Context.tool != 2) {
						arm_Context.brushRadius = ui.slider(arm_Context.brushRadiusHandle,arm_Translator.tr("Radius"),0.01,2.0,true);
					}
					if(arm_Context.tool == 3) {
						arm_Context.brushScaleX = ui.slider(arm_Context.brushScaleXHandle,arm_Translator.tr("Scale X"),0.01,2.0,true);
					}
					if(arm_Context.tool == 0 || arm_Context.tool == 2 || arm_Context.tool == 3 || arm_Context.tool == 4) {
						var brushScaleHandle = zui_Handle.global.nest(114,{ value : arm_Context.brushScale});
						arm_Context.brushScale = ui.slider(brushScaleHandle,arm_Translator.tr("UV Scale"),0.01,5.0,true);
						if(brushScaleHandle.changed) {
							if(arm_Context.tool == 3 || arm_Context.tool == 4) {
								ui.g.end();
								arm_util_RenderUtil.makeDecalPreview();
								ui.g.begin(false);
							}
						}
						arm_Context.brushAngle = ui.slider(arm_Context.brushAngleHandle,arm_Translator.tr("Angle"),0.0,360.0,true,1);
						if(arm_Context.brushAngleHandle.changed) {
							arm_node_MaterialParser.parsePaintMaterial();
						}
					}
					arm_Context.brushOpacity = ui.slider(arm_Context.brushOpacityHandle,arm_Translator.tr("Opacity"),0.0,1.0,true);
					if(arm_Context.tool == 0 || arm_Context.tool == 1) {
						arm_Context.brushHardness = ui.slider(zui_Handle.global.nest(115,{ value : arm_Context.brushHardness}),arm_Translator.tr("Hardness"),0.0,1.0,true);
					}
					if(arm_Context.tool != 1) {
						var brushBlendingHandle = zui_Handle.global.nest(116,{ value : arm_Context.brushBlending});
						arm_Context.brushBlending = ui.combo(brushBlendingHandle,[arm_Translator.tr("Mix"),arm_Translator.tr("Darken"),arm_Translator.tr("Multiply"),arm_Translator.tr("Burn"),arm_Translator.tr("Lighten"),arm_Translator.tr("Screen"),arm_Translator.tr("Dodge"),arm_Translator.tr("Add"),arm_Translator.tr("Overlay"),arm_Translator.tr("Soft Light"),arm_Translator.tr("Linear Light"),arm_Translator.tr("Difference"),arm_Translator.tr("Subtract"),arm_Translator.tr("Divide"),arm_Translator.tr("Hue"),arm_Translator.tr("Saturation"),arm_Translator.tr("Color"),arm_Translator.tr("Value")],arm_Translator.tr("Blending"));
						if(brushBlendingHandle.changed) {
							arm_node_MaterialParser.parsePaintMaterial();
						}
					}
					if(arm_Context.tool == 0 || arm_Context.tool == 2) {
						var paintHandle = zui_Handle.global.nest(117,null);
						arm_Context.brushPaint = ui.combo(paintHandle,[arm_Translator.tr("UV Map"),arm_Translator.tr("Triplanar"),arm_Translator.tr("Project")],arm_Translator.tr("TexCoord"));
						if(paintHandle.changed) {
							arm_node_MaterialParser.parsePaintMaterial();
						}
					}
					if(arm_Context.tool == 4) {
						ui.combo(arm_Context.textToolHandle,arm_io_ImportFont.fontList,arm_Translator.tr("Font"));
						var h = zui_Handle.global.nest(118,null);
						h.text = arm_Context.textToolText;
						arm_Context.textToolText = ui.textInput(h,"");
						if(h.changed || arm_Context.textToolHandle.changed) {
							ui.g.end();
							arm_util_RenderUtil.makeTextPreview();
							arm_util_RenderUtil.makeDecalPreview();
							ui.g.begin(false);
						}
					}
					if(arm_Context.tool == 2) {
						ui.combo(arm_Context.fillTypeHandle,[arm_Translator.tr("Object"),arm_Translator.tr("Face"),arm_Translator.tr("Angle")],arm_Translator.tr("Fill Mode"));
						if(arm_Context.fillTypeHandle.changed) {
							if(arm_Context.fillTypeHandle.position == 1) {
								ui.g.end();
								arm_util_UVUtil.cacheTriangleMap();
								ui.g.begin(false);
							}
							arm_node_MaterialParser.parsePaintMaterial();
							arm_node_MaterialParser.parseMeshMaterial();
						}
					} else {
						var _w = ui._w;
						var sc = ui.ops.scaleFactor;
						ui._w = 60 * sc | 0;
						var xrayHandle = zui_Handle.global.nest(119,{ selected : arm_Context.xray});
						arm_Context.xray = ui.check(xrayHandle,arm_Translator.tr("X-Ray"));
						if(xrayHandle.changed) {
							arm_node_MaterialParser.parsePaintMaterial();
						}
						var symXHandle = zui_Handle.global.nest(120,{ selected : false});
						var symYHandle = zui_Handle.global.nest(121,{ selected : false});
						var symZHandle = zui_Handle.global.nest(122,{ selected : false});
						ui._w = 55 * sc | 0;
						ui.text("Symmetry");
						ui._w = 25 * sc | 0;
						arm_Context.symX = ui.check(symXHandle,"X");
						arm_Context.symY = ui.check(symYHandle,"Y");
						arm_Context.symZ = ui.check(symZHandle,"Z");
						if(symXHandle.changed || symYHandle.changed || symZHandle.changed) {
							arm_node_MaterialParser.parsePaintMaterial();
						}
						ui._w = _w;
					}
				}
			}
		}
	}
	,__class__: arm_ui_UIHeader
};
var arm_ui_UIMenubar = function() {
	this.menubarw = 330;
	this.menuHandle = new zui_Handle({ layout : 1});
	this.workspaceHandle = new zui_Handle({ layout : 1});
	arm_ui_UIMenubar.inst = this;
};
$hxClasses["arm.ui.UIMenubar"] = arm_ui_UIMenubar;
arm_ui_UIMenubar.__name__ = "arm.ui.UIMenubar";
arm_ui_UIMenubar.prototype = {
	renderUI: function(g) {
		var ui = arm_ui_UISidebar.inst.ui;
		var panelx = arm_App.x() - arm_ui_UIToolbar.inst.toolbarw;
		var WINDOW_BG_COL = ui.t.WINDOW_BG_COL;
		ui.t.WINDOW_BG_COL = ui.t.SEPARATOR_COL;
		if(ui.window(this.menuHandle,panelx,0,this.menubarw,28 * ui.ops.scaleFactor | 0)) {
			var _w = ui._w;
			ui._x += 1;
			var ELEMENT_OFFSET = ui.t.ELEMENT_OFFSET;
			ui.t.ELEMENT_OFFSET = 0;
			var BUTTON_COL = ui.t.BUTTON_COL;
			ui.t.BUTTON_COL = ui.t.SEPARATOR_COL;
			this.menuButton(arm_Translator.tr("File"),0);
			this.menuButton(arm_Translator.tr("Edit"),1);
			this.menuButton(arm_Translator.tr("Viewport"),2);
			this.menuButton(arm_Translator.tr("Mode"),3);
			this.menuButton(arm_Translator.tr("Camera"),4);
			this.menuButton(arm_Translator.tr("Help"),5);
			if(this.menubarw < ui._x + 10) {
				this.menubarw = ui._x + 10 | 0;
				arm_ui_UIToolbar.inst.toolbarHandle.redraws = 2;
			}
			ui._w = _w;
			ui.t.ELEMENT_OFFSET = ELEMENT_OFFSET;
			ui.t.BUTTON_COL = BUTTON_COL;
		}
		ui.t.WINDOW_BG_COL = WINDOW_BG_COL;
		var panelx1 = arm_App.x() - arm_ui_UIToolbar.inst.toolbarw + this.menubarw;
		if(ui.window(this.workspaceHandle,panelx1,0,kha_System.windowWidth() - arm_ui_UISidebar.inst.windowW - this.menubarw,28 * ui.ops.scaleFactor | 0)) {
			ui.tab(arm_ui_UIHeader.inst.worktab,arm_Translator.tr("Paint"));
			ui.tab(arm_ui_UIHeader.inst.worktab,arm_Translator.tr("Scene"));
			if(arm_ui_UIHeader.inst.worktab.changed) {
				arm_Context.ddirty = 2;
				arm_ui_UIToolbar.inst.toolbarHandle.redraws = 2;
				arm_ui_UIHeader.inst.headerHandle.redraws = 2;
				arm_ui_UISidebar.inst.hwnd.redraws = 2;
				arm_ui_UISidebar.inst.hwnd1.redraws = 2;
				arm_ui_UISidebar.inst.hwnd2.redraws = 2;
				if(arm_ui_UIHeader.inst.worktab.position == 1) {
					arm_Context.selectTool(0);
				}
				arm_node_MaterialParser.parseMeshMaterial();
				arm_Context.mainObject().skip_context = null;
			}
		}
	}
	,menuButton: function(name,category) {
		var ui = arm_ui_UISidebar.inst.ui;
		ui._w = ui.ops.font.width(ui.fontSize,name) + 25 | 0;
		if(ui.button(name) || arm_ui_UIMenu.show && arm_ui_UIMenu.menuCommands == null && ui.isHovered) {
			arm_ui_UIMenu.show = true;
			arm_ui_UIMenu.menuCategory = category;
			arm_ui_UIMenu.menuX = ui._x - ui._w | 0;
			arm_ui_UIMenu.menuY = arm_ui_UIHeader.inst.headerh;
		}
	}
	,__class__: arm_ui_UIMenubar
};
var arm_ui_UIStatus = function() {
	this.statustab = zui_Handle.global.nest(54,null);
	this.statush = 32;
	this.statusHandle = new zui_Handle();
	arm_ui_UIStatus.inst = this;
};
$hxClasses["arm.ui.UIStatus"] = arm_ui_UIStatus;
arm_ui_UIStatus.__name__ = "arm.ui.UIStatus";
arm_ui_UIStatus.prototype = {
	renderUI: function(g) {
		var ui = arm_ui_UISidebar.inst.ui;
		if(ui.window(this.statusHandle,arm_App.x(),kha_System.windowHeight() - this.statush,kha_System.windowWidth() - arm_ui_UIToolbar.inst.toolbarw - arm_ui_UISidebar.inst.windowW,this.statush)) {
			ui._y += 2;
			arm_ui_TabBrowser.draw();
			arm_ui_TabScript.draw();
			arm_ui_TabConsole.draw();
			var minimized = this.statush <= 32 * arm_Config.raw.window_scale;
			if(this.statustab.changed && (this.statustab.position == arm_Context.lastStatusPosition || minimized)) {
				arm_ui_UISidebar.inst.toggleBrowser();
			}
			arm_Context.lastStatusPosition = this.statustab.position;
		}
	}
	,__class__: arm_ui_UIStatus
};
var arm_ui_UIToolbar = function() {
	this.toolNames = [arm_Translator.tr("Brush"),arm_Translator.tr("Eraser"),arm_Translator.tr("Fill"),arm_Translator.tr("Decal"),arm_Translator.tr("Text"),arm_Translator.tr("Clone"),arm_Translator.tr("Blur"),arm_Translator.tr("Particle"),arm_Translator.tr("Bake"),arm_Translator.tr("ColorID"),arm_Translator.tr("Picker")];
	this.toolbarw = 54;
	this.toolbarHandle = new zui_Handle();
	arm_ui_UIToolbar.inst = this;
};
$hxClasses["arm.ui.UIToolbar"] = arm_ui_UIToolbar;
arm_ui_UIToolbar.__name__ = "arm.ui.UIToolbar";
arm_ui_UIToolbar.prototype = {
	renderUI: function(g) {
		var ui = arm_ui_UISidebar.inst.ui;
		if(ui.window(this.toolbarHandle,0,arm_ui_UIHeader.inst.headerh,this.toolbarw,kha_System.windowHeight() - arm_ui_UIHeader.inst.headerh)) {
			ui._y += 2;
			ui.imageScrollAlign = false;
			if(arm_ui_UIHeader.inst.worktab.position == 0) {
				var keys = ["(" + Std.string(arm_Config.keymap.tool_brush) + ")","(" + Std.string(arm_Config.keymap.tool_eraser) + ")","(" + Std.string(arm_Config.keymap.tool_fill) + ")","(" + Std.string(arm_Config.keymap.tool_decal) + ")","(" + Std.string(arm_Config.keymap.tool_text) + ")","(" + Std.string(arm_Config.keymap.tool_clone) + ") - " + arm_Translator.tr("Hold") + " (" + Std.string(arm_Config.keymap.set_clone_source) + ") " + arm_Translator.tr("to set source"),"(" + Std.string(arm_Config.keymap.tool_blur) + ")","(" + Std.string(arm_Config.keymap.tool_particle) + ")","(" + Std.string(arm_Config.keymap.tool_bake) + ")","(" + Std.string(arm_Config.keymap.tool_colorid) + ")","(" + Std.string(arm_Config.keymap.tool_picker) + ")"];
				var _this = arm_Res.bundled;
				var img = __map_reserved["icons.k"] != null ? _this.getReserved("icons.k") : _this.h["icons.k"];
				var imgw = ui.ops.scaleFactor > 1 ? 100 : 50;
				var _g = 0;
				var _g1 = this.toolNames.length;
				while(_g < _g1) {
					var i = _g++;
					ui._x += 2;
					if(arm_Context.tool == i) {
						ui.rect(-1,-1,52,52,ui.t.HIGHLIGHT_COL,2);
					}
					if(ui.image(img,-1,null,i * imgw,0,imgw,imgw) == 1) {
						arm_Context.selectTool(i);
					}
					if(ui.isHovered) {
						ui.tooltip(this.toolNames[i] + " " + keys[i]);
					}
					ui._x -= 2;
					ui._y += 2;
				}
			} else if(arm_ui_UIHeader.inst.worktab.position == 1) {
				var _this1 = arm_Res.bundled;
				var img1 = __map_reserved["icons.k"] != null ? _this1.getReserved("icons.k") : _this1.h["icons.k"];
				var imgw1 = ui.ops.scaleFactor > 1 ? 100 : 50;
				ui._x += 2;
				if(arm_Context.tool == 0) {
					ui.rect(-1,-1,52,52,ui.t.HIGHLIGHT_COL,2);
				}
				if(ui.image(img1,-1,null,imgw1 * 11,0,imgw1,imgw1) == 1) {
					arm_Context.selectTool(0);
				}
				if(ui.isHovered) {
					ui.tooltip(arm_Translator.tr("Gizmo") + " (G)");
				}
				ui._x -= 2;
				ui._y += 2;
			}
			ui.imageScrollAlign = true;
		}
	}
	,__class__: arm_ui_UIToolbar
};
var arm_ui_UIView2D = function() {
	this.uvmapShow = false;
	this.texType = 0;
	this.panScale = 1.0;
	this.panY = 0.0;
	this.panX = 0.0;
	this.hwnd = zui_Handle.global.nest(5,null);
	this.type = 0;
	this.show = false;
	arm_ui_UIView2D.inst = this;
	this.pipe = new kha_graphics4_PipelineState();
	this.pipe.vertexShader = Reflect.field(kha_Shaders,"layer_view_vert");
	this.pipe.fragmentShader = Reflect.field(kha_Shaders,"layer_view_frag");
	var vs = new kha_graphics4_VertexStructure();
	vs.add("pos",2);
	vs.add("tex",1);
	vs.add("col",3);
	this.pipe.inputLayout = [vs];
	this.pipe.blendSource = 1;
	this.pipe.blendDestination = 2;
	this.pipe.colorWriteMasksAlpha[0] = false;
	this.pipe.compile();
	this.channelLocation = this.pipe.getConstantLocation("channel");
	var scale = arm_Config.raw.window_scale;
	this.ui = new zui_Zui({ font : arm_App.font, theme : arm_App.theme, color_wheel : arm_App.colorWheel, scaleFactor : scale});
	this.ui.scrollEnabled = false;
	iron_App.notifyOnRender2D($bind(this,this.render));
	iron_App.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["arm.ui.UIView2D"] = arm_ui_UIView2D;
arm_ui_UIView2D.__name__ = "arm.ui.UIView2D";
arm_ui_UIView2D.prototype = {
	render: function(g) {
		if(arm_ui_UINodes.inst.defaultWindowW == 0) {
			var tmp = arm_App.w() / 2 | 0;
			arm_ui_UINodes.inst.defaultWindowW = tmp;
		}
		if(arm_ui_UINodes.inst.defaultWindowH == 0) {
			var tmp1 = arm_App.h() / 2 | 0;
			arm_ui_UINodes.inst.defaultWindowH = tmp1;
		}
		this.ww = arm_ui_UINodes.inst.defaultWindowW;
		this.wx = (arm_App.w() | 0) + arm_ui_UIToolbar.inst.toolbarw;
		this.wy = arm_ui_UIHeader.inst.headerh * 2;
		if(!this.show) {
			return;
		}
		if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
			return;
		}
		if(arm_Context.pdirty >= 0) {
			this.hwnd.redraws = 2;
		}
		var tw = arm_App.w() * 0.95 * this.panScale;
		var tx = arm_App.w() / 2 - tw / 2 + this.panX;
		var ty = arm_App.h() / 2 - tw / 2 + this.panY;
		g.end();
		if(arm_ui_UINodes.inst.grid == null) {
			arm_ui_UINodes.inst.drawGrid();
		}
		if(this.uvmapShow) {
			arm_util_UVUtil.cacheUVMap();
		}
		this.ui.begin(g);
		this.wh = arm_App.h();
		if(arm_ui_UINodes.inst.show) {
			this.wh -= arm_ui_UINodes.inst.defaultWindowH;
		}
		if(this.ui.window(this.hwnd,this.wx,this.wy,this.ww,this.wh)) {
			this.ui.g.set_color(-1);
			this.ui.g.drawImage(arm_ui_UINodes.inst.grid,this.panX * this.panScale % 40 - 40,this.panY * this.panScale % 40 - 40);
			var l = arm_Context.layer;
			var tex = null;
			var channel = 0;
			if(this.type == 0) {
				var layer = l.getChildren() == null ? l : l.getChildren()[0];
				if(arm_Config.raw.brush_live && arm_render_RenderPathPaint.liveLayerDrawn > 0) {
					layer = arm_render_RenderPathPaint.liveLayer;
				}
				tex = arm_Context.layerIsMask ? layer.texpaint_mask : this.texType == 0 ? layer.texpaint : this.texType == 5 ? layer.texpaint : this.texType == 1 ? layer.texpaint_nor : layer.texpaint_pack;
				channel = arm_Context.layerIsMask ? 1 : this.texType == 2 ? 1 : this.texType == 3 ? 2 : this.texType == 4 ? 3 : this.texType == 5 ? 4 : this.texType == 1 ? 5 : 0;
			} else {
				tex = arm_ui_UISidebar.inst.getImage(arm_Context.texture);
			}
			var th = tw;
			if(tex != null) {
				th = tw * (tex.get_height() / tex.get_width());
				if(this.type == 0) {
					this.ui.g.set_pipeline(this.pipe);
					this.drawLayer(tex,tx,ty,tw,th,channel);
					this.ui.g.set_pipeline(null);
				} else {
					this.ui.g.drawScaledImage(tex,tx,ty,tw,th);
				}
			}
			if(this.type == 0 && this.uvmapShow) {
				this.ui.g.drawScaledImage(arm_util_UVUtil.uvmap,tx,ty,tw,th);
			}
			var ACCENT_COL = this.ui.t.ACCENT_COL;
			var BUTTON_H = this.ui.t.BUTTON_H;
			var ELEMENT_H = this.ui.t.ELEMENT_H;
			var FONT_SIZE = this.ui.fontSize;
			this.ui.t.ACCENT_COL = 0;
			this.ui.t.BUTTON_H = 30;
			this.ui.t.ELEMENT_H = 30;
			this.ui.fontSize = 22 * this.ui.ops.scaleFactor | 0;
			var _this = this.ui;
			this.ui._x = this.ww - _this.t.ELEMENT_W * _this.ops.scaleFactor * 1.4;
			var _this1 = this.ui;
			this.ui._y = this.wh - _this1.t.ELEMENT_H * _this1.ops.scaleFactor * 1.2;
			var _this2 = this.ui;
			this.ui._w = _this2.t.ELEMENT_W * _this2.ops.scaleFactor * 1.4 | 0;
			var h = zui_Handle.global.nest(98,null);
			if(this.type == 0) {
				h.text = l.name;
				l.name = this.ui.textInput(h,"",2);
			} else {
				var asset = arm_Context.texture;
				if(asset != null) {
					var assetNames = arm_Project.assetNames;
					var i = assetNames.indexOf(asset.name);
					h.text = asset.name;
					asset.name = this.ui.textInput(h,"",2);
					assetNames[i] = asset.name;
				}
			}
			if(h.changed) {
				arm_ui_UISidebar.inst.hwnd.redraws = 2;
			}
			this.ui.t.ACCENT_COL = ACCENT_COL;
			this.ui.t.BUTTON_H = BUTTON_H;
			this.ui.t.ELEMENT_H = ELEMENT_H;
			this.ui.fontSize = FONT_SIZE;
			if(this.type == 0) {
				var _this3 = this.ui;
				var ew = _this3.t.ELEMENT_W * _this3.ops.scaleFactor | 0;
				this.ui.g.set_color(this.ui.t.WINDOW_BG_COL);
				var _this4 = this.ui;
				var _this5 = this.ui;
				this.ui.g.fillRect(0,0,this.ww,_this4.t.ELEMENT_H * _this4.ops.scaleFactor + _this5.t.ELEMENT_OFFSET * _this5.ops.scaleFactor);
				this.ui.g.set_color(-1);
				this.ui._x = 2;
				this.ui._y = 2;
				this.ui._w = ew;
				if(!arm_Context.layerIsMask) {
					this.texType = this.ui.combo(zui_Handle.global.nest(99,{ position : this.texType}),[arm_Translator.tr("Base Color"),arm_Translator.tr("Normal Map"),arm_Translator.tr("Occlusion"),arm_Translator.tr("Roughness"),arm_Translator.tr("Metallic"),arm_Translator.tr("Opacity")],arm_Translator.tr("Texture"));
					this.ui._x += ew + 3;
					this.ui._y = 2;
				}
				this.uvmapShow = this.ui.check(zui_Handle.global.nest(100,{ selected : this.uvmapShow}),arm_Translator.tr("UV Map"));
				this.ui._x += ew + 3;
				this.ui._y = 2;
			}
			if(arm_Context.tool == 10) {
				var _this6 = arm_Res.bundled;
				var cursorImg = __map_reserved["cursor.k"] != null ? _this6.getReserved("cursor.k") : _this6.h["cursor.k"];
				this.ui.g.drawScaledImage(cursorImg,tx + tw * arm_Context.uvxPicked - 16,ty + th * arm_Context.uvyPicked - 16,32,32);
			}
		}
		this.ui.end();
		g.begin(false);
	}
	,drawLayer: function(tex,tx,ty,tw,th,channel) {
		if(!arm_Context.textureFilter) {
			this.ui.g.set_imageScaleQuality(kha_graphics2_ImageScaleQuality.Low);
		}
		this.ui.currentWindow.texture.get_g4().setInt(this.channelLocation,channel);
		this.ui.g.drawScaledImage(tex,tx,ty,tw,th);
		if(!arm_Context.textureFilter) {
			this.ui.g.set_imageScaleQuality(kha_graphics2_ImageScaleQuality.High);
		}
	}
	,update: function() {
		var mouse = iron_system_Input.getMouse();
		var kb = iron_system_Input.getKeyboard();
		var _this = this.ui;
		var headerh = _this.t.ELEMENT_H * _this.ops.scaleFactor * 1.4;
		arm_Context.paint2d = false;
		if(!arm_App.uiEnabled || !this.show || mouse.x < this.wx || mouse.x > this.wx + this.ww || mouse.y < this.wy + headerh || mouse.y > this.wy + this.wh) {
			return;
		}
		if(mouse.down("right") || mouse.down("middle")) {
			this.panX += mouse.movementX;
			this.panY += mouse.movementY;
		}
		if(mouse.wheelDelta != 0) {
			this.panScale -= mouse.wheelDelta / 10;
			if(this.panScale < 0.1) {
				this.panScale = 0.1;
			}
			if(this.panScale > 3.0) {
				this.panScale = 3.0;
			}
		}
		var setCloneSource = arm_Context.tool == 5 && arm_Operator.shortcut("alt+" + Std.string(arm_Config.keymap.action_paint));
		if(this.type == 0 && (arm_Operator.shortcut(arm_Config.keymap.action_paint) || arm_Operator.shortcut(Std.string(arm_Config.keymap.brush_ruler) + "+" + Std.string(arm_Config.keymap.action_paint)) || setCloneSource || arm_Config.raw.brush_live)) {
			arm_Context.paint2d = true;
		}
		if(this.ui.isTyping) {
			return;
		}
		if(kb.started("left")) {
			this.panX -= 5;
		} else if(kb.started("right")) {
			this.panX += 5;
		}
		if(kb.started("up")) {
			this.panY -= 5;
		} else if(kb.started("down")) {
			this.panY += 5;
		}
	}
	,__class__: arm_ui_UIView2D
};
var arm_util_ParticleUtil = function() { };
$hxClasses["arm.util.ParticleUtil"] = arm_util_ParticleUtil;
arm_util_ParticleUtil.__name__ = "arm.util.ParticleUtil";
arm_util_ParticleUtil.f32 = function(ar) {
	var this1 = new Float32Array(ar.length);
	var res = this1;
	var _g = 0;
	var _g1 = ar.length;
	while(_g < _g1) {
		var i = _g++;
		res[i] = ar[i];
	}
	return res;
};
arm_util_ParticleUtil.initParticle = function() {
	if(arm_Context.particleMaterial != null) {
		return;
	}
	var raw = { name : "Particles", type : 0, loop : false, render_emitter : false, count : 1000, frame_start : 0, frame_end : 1000, lifetime : 400, lifetime_random : 0.5, emit_from : 1, object_align_factor : arm_util_ParticleUtil.f32([0,0,-40]), factor_random : 2.0, physics_type : 0, particle_size : 1.0, size_random : 0, mass : 1, instance_object : ".Particle", weight_gravity : 1};
	iron_Scene.active.raw.particle_datas = [raw];
	var particle_refs = [{ name : "Particles", particle : "Particles", seed : 0}];
	var t = new iron_RenderTargetRaw();
	t.name = "texparticle";
	t.width = 0;
	t.height = 0;
	t.format = "R8";
	t.scale = arm_render_Inc.superSample;
	iron_RenderPath.active.createRenderTarget(t);
	var _g = 0;
	var _g1 = iron_Scene.active.raw.material_datas;
	while(_g < _g1.length) {
		var mat = _g1[_g];
		++_g;
		if(mat.name == "Material2") {
			var m = JSON.parse(JSON.stringify(mat));
			m.name = "MaterialParticle";
			iron_Scene.active.raw.material_datas.push(m);
			break;
		}
	}
	iron_data_Data.getMaterial("Scene","MaterialParticle",function(md) {
		arm_Context.particleMaterial = md;
		var _g2 = 0;
		var _g3 = iron_Scene.active.raw.objects;
		while(_g2 < _g3.length) {
			var obj = _g3[_g2];
			++_g2;
			if(obj.name == ".Sphere") {
				var particle = JSON.parse(JSON.stringify(obj));
				particle.name = ".Particle";
				particle.is_particle = true;
				particle.material_refs = ["MaterialParticle"];
				iron_Scene.active.raw.objects.push(particle);
				particle.transform.values[0] *= 0.01;
				particle.transform.values[1] *= 0.01;
				particle.transform.values[2] *= 0.01;
				particle.transform.values[3] *= 0.01;
				particle.transform.values[4] *= 0.01;
				particle.transform.values[5] *= 0.01;
				particle.transform.values[6] *= 0.01;
				particle.transform.values[7] *= 0.01;
				particle.transform.values[8] *= 0.01;
				particle.transform.values[9] *= 0.01;
				particle.transform.values[10] *= 0.01;
				particle.transform.values[11] *= 0.01;
				particle.transform.values[12] *= 0.01;
				particle.transform.values[13] *= 0.01;
				particle.transform.values[14] *= 0.01;
				particle.transform.values[15] *= 0.01;
				break;
			}
		}
		iron_Scene.active.spawnObject(".Sphere",null,function(o) {
			var mo = o;
			mo.name = ".ParticleEmitter";
			mo.raw.particle_refs = particle_refs;
			mo.setupParticleSystem("Scene",particle_refs[0]);
		});
	});
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["haxe.io._UInt8Array.UInt8Array_Impl_"] = haxe_io__$UInt8Array_UInt8Array_$Impl_$;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.__name__ = "haxe.io._UInt8Array.UInt8Array_Impl_";
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var iron_RenderTargetRaw = function() {
	this.is_cubemap = null;
	this.is_image = null;
	this.depth = null;
	this.mipmaps = null;
	this.depth_buffer = null;
	this.displayp = null;
	this.scale = null;
	this.format = null;
};
$hxClasses["iron.RenderTargetRaw"] = iron_RenderTargetRaw;
iron_RenderTargetRaw.__name__ = "iron.RenderTargetRaw";
iron_RenderTargetRaw.prototype = {
	__class__: iron_RenderTargetRaw
};
var iron_RenderTarget = function(raw) {
	this.isCubeMap = false;
	this.is3D = false;
	this.hasDepth = false;
	this.cubeMap = null;
	this.image = null;
	this.depthStencilFrom = "";
	this.raw = raw;
};
$hxClasses["iron.RenderTarget"] = iron_RenderTarget;
iron_RenderTarget.__name__ = "iron.RenderTarget";
iron_RenderTarget.prototype = {
	unload: function() {
		if(this.image != null) {
			this.image.unload();
		}
		if(this.cubeMap != null) {
			this.cubeMap.unload();
		}
	}
	,__class__: iron_RenderTarget
};
var iron_CachedShaderContext = function() {
};
$hxClasses["iron.CachedShaderContext"] = iron_CachedShaderContext;
iron_CachedShaderContext.__name__ = "iron.CachedShaderContext";
iron_CachedShaderContext.prototype = {
	__class__: iron_CachedShaderContext
};
var iron_data_Armature = function(uid,name,actions) {
	this.actions = [];
	this.uid = uid;
	this.name = name;
	var _g = 0;
	while(_g < actions.length) {
		var a = actions[_g];
		++_g;
		var _g1 = 0;
		var _g11 = a.objects;
		while(_g1 < _g11.length) {
			var o = _g11[_g1];
			++_g1;
			iron_data_Armature.setParents(o);
		}
		var bones = [[]];
		iron_data_Armature.traverseBones(a.objects,(function(bones1) {
			return function(object) {
				bones1[0].push(object);
			};
		})(bones));
		this.actions.push({ name : a.name, bones : bones[0], mats : null});
	}
};
$hxClasses["iron.data.Armature"] = iron_data_Armature;
iron_data_Armature.__name__ = "iron.data.Armature";
iron_data_Armature.setParents = function(object) {
	if(object.children == null) {
		return;
	}
	var _g = 0;
	var _g1 = object.children;
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		o.parent = object;
		iron_data_Armature.setParents(o);
	}
};
iron_data_Armature.traverseBones = function(objects,callback) {
	var _g = 0;
	var _g1 = objects.length;
	while(_g < _g1) {
		var i = _g++;
		iron_data_Armature.traverseBonesStep(objects[i],callback);
	}
};
iron_data_Armature.traverseBonesStep = function(object,callback) {
	if(object.type == "bone_object") {
		callback(object);
	}
	if(object.children == null) {
		return;
	}
	var _g = 0;
	var _g1 = object.children.length;
	while(_g < _g1) {
		var i = _g++;
		iron_data_Armature.traverseBonesStep(object.children[i],callback);
	}
};
iron_data_Armature.prototype = {
	__class__: iron_data_Armature
};
var iron_data_CameraData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.CameraData"] = iron_data_CameraData;
iron_data_CameraData.__name__ = "iron.data.CameraData";
iron_data_CameraData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getCameraRawByName(format.camera_datas,id);
		if(raw == null) {
			haxe_Log.trace("Camera data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/CameraData.hx", lineNumber : 20, className : "iron.data.CameraData", methodName : "parse"});
			done(null);
		}
		new iron_data_CameraData(raw,done);
	});
};
iron_data_CameraData.prototype = {
	__class__: iron_data_CameraData
};
var iron_data_ConstData = function() { };
$hxClasses["iron.data.ConstData"] = iron_data_ConstData;
iron_data_ConstData.__name__ = "iron.data.ConstData";
iron_data_ConstData.createScreenAlignedData = function() {
	var data = [-1.0,-1.0,3.0,-1.0,-1.0,3.0];
	var indices = [0,1,2];
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",1);
	iron_data_ConstData.screenAlignedVB = new kha_graphics4_VertexBuffer(data.length / (structure.byteSize() / 4 | 0) | 0,structure,0);
	var vertices = iron_data_ConstData.screenAlignedVB.lock();
	var _g = 0;
	var _g1 = vertices.length;
	while(_g < _g1) {
		var i = _g++;
		vertices[i] = data[i];
	}
	iron_data_ConstData.screenAlignedVB.unlock();
	iron_data_ConstData.screenAlignedIB = new kha_graphics4_IndexBuffer(indices.length,0);
	var id = iron_data_ConstData.screenAlignedIB.lock();
	var _g2 = 0;
	var _g3 = id.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		id[i1] = indices[i1];
	}
	iron_data_ConstData.screenAlignedIB.unlock();
};
iron_data_ConstData.createSkydomeData = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",2);
	structure.add("nor",2);
	var structLength = structure.byteSize() / 4 | 0;
	var pos = iron_data_ConstData.skydomePos;
	var nor = iron_data_ConstData.skydomeNor;
	iron_data_ConstData.skydomeVB = new kha_graphics4_VertexBuffer(pos.length / 3 | 0,structure,0);
	var vertices = iron_data_ConstData.skydomeVB.lock();
	var _g = 0;
	var _g1 = vertices.length / structLength | 0;
	while(_g < _g1) {
		var i = _g++;
		vertices[i * structLength] = pos[i * 3];
		vertices[i * structLength + 1] = pos[i * 3 + 1];
		vertices[i * structLength + 2] = pos[i * 3 + 2];
		vertices[i * structLength + 3] = -nor[i * 3];
		vertices[i * structLength + 4] = -nor[i * 3 + 1];
		vertices[i * structLength + 5] = -nor[i * 3 + 2];
	}
	iron_data_ConstData.skydomeVB.unlock();
	var indices = iron_data_ConstData.skydomeIndices;
	iron_data_ConstData.skydomeIB = new kha_graphics4_IndexBuffer(indices.length,0);
	var id = iron_data_ConstData.skydomeIB.lock();
	var _g2 = 0;
	var _g3 = id.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		id[i1] = indices[i1];
	}
	iron_data_ConstData.skydomeIB.unlock();
};
var iron_data_Geometry = function(data,indices,materialIndices,usage) {
	this.mats = null;
	this.actions = null;
	this.skeletonBoneLens = null;
	this.skeletonBoneRefs = null;
	this.skeletonTransformsI = null;
	this.skinBoneWeights = null;
	this.skinBoneIndices = null;
	this.skinBoneCounts = null;
	this.aabbMax = null;
	this.aabbMin = null;
	this.aabb = null;
	this.instanceCount = 0;
	this.instanced = false;
	this.instancedVB = null;
	this.numTris = 0;
	this.ready = false;
	this.name = "";
	this.count = -1;
	this.start = 0;
	this.vertexBufferMap = new haxe_ds_StringMap();
	if(usage == null) {
		usage = 0;
	}
	this.indices = indices;
	this.materialIndices = materialIndices;
	this.usage = usage;
	this.vertexArrays = data.raw.vertex_arrays;
	this.positions = this.getVArray("pos");
	this.normals = this.getVArray("nor");
	this.uvs = this.getVArray("tex");
	this.cols = this.getVArray("col");
	this.data = data;
	this.struct = iron_data_Geometry.getVertexStructure(this.vertexArrays);
	this.structLength = this.struct.byteSize() / 2 | 0;
	this.structStr = "";
	var _g = 0;
	var _g1 = this.struct.elements;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		this.structStr += e.name;
	}
};
$hxClasses["iron.data.Geometry"] = iron_data_Geometry;
iron_data_Geometry.__name__ = "iron.data.Geometry";
iron_data_Geometry.getVertexStructure = function(vertexArrays) {
	var structure = new kha_graphics4_VertexStructure();
	var _g = 0;
	var _g1 = vertexArrays.length;
	while(_g < _g1) {
		var i = _g++;
		structure.add(vertexArrays[i].attrib,iron_data_Geometry.getVertexData(vertexArrays[i].data));
	}
	return structure;
};
iron_data_Geometry.getVertexData = function(data) {
	switch(data) {
	case "short2norm":
		return 5;
	case "short4norm":
		return 6;
	default:
		return 6;
	}
};
iron_data_Geometry.buildVertices = function(vertices,vertexArrays,offset,fakeUVs,uvsIndex) {
	if(uvsIndex == null) {
		uvsIndex = -1;
	}
	if(fakeUVs == null) {
		fakeUVs = false;
	}
	if(offset == null) {
		offset = 0;
	}
	var arr = vertexArrays[0];
	var numVertices = arr.values.length / arr.size | 0;
	var di = -1 + offset;
	var _g = 0;
	var _g1 = numVertices;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g11 = vertexArrays.length;
		while(_g2 < _g11) {
			var va = _g2++;
			var l = vertexArrays[va].size;
			if(fakeUVs && va == uvsIndex) {
				var _g3 = 0;
				var _g12 = l;
				while(_g3 < _g12) {
					var j = _g3++;
					vertices[++di] = 0;
				}
				continue;
			}
			var _g4 = 0;
			var _g13 = l;
			while(_g4 < _g13) {
				var o = _g4++;
				vertices[++di] = vertexArrays[va].values[i * l + o];
			}
			if(vertexArrays[va].padding != null) {
				if(vertexArrays[va].padding == 1) {
					vertices[++di] = 0;
				}
			}
		}
	}
};
iron_data_Geometry.prototype = {
	'delete': function() {
		var _this = this.vertexBufferMap;
		var buf = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(buf.hasNext()) {
			var buf1 = buf.next();
			if(buf1 != null) {
				buf1.delete();
			}
		}
		var _g = 0;
		var _g1 = this.indexBuffers;
		while(_g < _g1.length) {
			var buf2 = _g1[_g];
			++_g;
			buf2.delete();
		}
	}
	,applyScale: function(sx,sy,sz) {
		this.data.scalePos *= sx;
	}
	,getVArray: function(name) {
		var _g = 0;
		var _g1 = this.vertexArrays.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.vertexArrays[i].attrib == name) {
				return this.vertexArrays[i];
			}
		}
		return null;
	}
	,setupInstanced: function(data,instancedType,usage) {
		var structure = new kha_graphics4_VertexStructure();
		structure.instanced = true;
		this.instanced = true;
		structure.add("ipos",2);
		if(instancedType == 2 || instancedType == 4) {
			structure.add("irot",2);
		}
		if(instancedType == 3 || instancedType == 4) {
			structure.add("iscl",2);
		}
		this.instanceCount = data.length / (structure.byteSize() / 4 | 0) | 0;
		this.instancedVB = new kha_graphics4_VertexBuffer(this.instanceCount,structure,usage,1);
		var vertices = this.instancedVB.lock();
		var _g = 0;
		var _g1 = vertices.length;
		while(_g < _g1) {
			var i = _g++;
			vertices[i] = data[i];
		}
		this.instancedVB.unlock();
	}
	,get: function(vs) {
		var key = "";
		var _g = 0;
		while(_g < vs.length) {
			var e = vs[_g];
			++_g;
			key += e.name;
		}
		var _this = this.vertexBufferMap;
		var vb = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(vb == null) {
			var nVertexArrays = [];
			var atex = false;
			var texOffset = -1;
			var acol = false;
			var _g1 = 0;
			var _g2 = vs.length;
			while(_g1 < _g2) {
				var e1 = _g1++;
				if(vs[e1].name == "tex") {
					atex = true;
					texOffset = e1;
				}
				if(vs[e1].name == "col") {
					acol = true;
				}
				var _g11 = 0;
				var _g21 = this.vertexArrays.length;
				while(_g11 < _g21) {
					var va = _g11++;
					if(vs[e1].name == this.vertexArrays[va].attrib) {
						nVertexArrays.push(this.vertexArrays[va]);
					}
				}
			}
			var struct = iron_data_Geometry.getVertexStructure(nVertexArrays);
			vb = new kha_graphics4_VertexBuffer(this.positions.values.length / this.positions.size | 0,struct,this.usage);
			this.vertices = vb.lockInt16();
			iron_data_Geometry.buildVertices(this.vertices,nVertexArrays,0,atex && this.uvs == null,texOffset);
			vb.unlock();
			var _this1 = this.vertexBufferMap;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,vb);
			} else {
				_this1.h[key] = vb;
			}
			if(atex && this.uvs == null) {
				haxe_Log.trace("Armory Warning: Geometry " + this.name + " is missing UV map",{ fileName : "Sources/iron/data/Geometry.hx", lineNumber : 224, className : "iron.data.Geometry", methodName : "get"});
			}
			if(acol && this.cols == null) {
				haxe_Log.trace("Armory Warning: Geometry " + this.name + " is missing vertex colors",{ fileName : "Sources/iron/data/Geometry.hx", lineNumber : 225, className : "iron.data.Geometry", methodName : "get"});
			}
		}
		return vb;
	}
	,build: function() {
		if(this.ready) {
			return;
		}
		this.vertexBuffer = new kha_graphics4_VertexBuffer(this.positions.values.length / this.positions.size | 0,this.struct,this.usage);
		this.vertices = this.vertexBuffer.lockInt16();
		iron_data_Geometry.buildVertices(this.vertices,this.vertexArrays);
		this.vertexBuffer.unlock();
		var key = this.structStr;
		var value = this.vertexBuffer;
		var _this = this.vertexBufferMap;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
		this.indexBuffers = [];
		var _g = 0;
		var _g1 = this.indices;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(id.length == 0) {
				continue;
			}
			var indexBuffer = new kha_graphics4_IndexBuffer(id.length,this.usage);
			this.numTris += id.length / 3 | 0;
			var indicesA = indexBuffer.lock();
			var _g2 = 0;
			var _g11 = indicesA.length;
			while(_g2 < _g11) {
				var i = _g2++;
				indicesA[i] = id[i];
			}
			indexBuffer.unlock();
			this.indexBuffers.push(indexBuffer);
		}
		if(this.data.raw.instanced_data != null) {
			this.setupInstanced(this.data.raw.instanced_data,this.data.raw.instanced_type,this.usage);
		}
		this.ready = true;
	}
	,addArmature: function(armature) {
		var _g = 0;
		var _g1 = armature.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.addAction(a.bones,a.name);
		}
	}
	,addAction: function(bones,name) {
		if(bones == null) {
			return;
		}
		if(this.actions == null) {
			this.actions = new haxe_ds_StringMap();
			this.mats = new haxe_ds_StringMap();
		}
		var _this = this.actions;
		if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null) {
			return;
		}
		var actionBones = [];
		var _g = 0;
		var _g1 = this.skeletonBoneRefs;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < bones.length) {
				var b = bones[_g2];
				++_g2;
				if(b.name == s) {
					actionBones.push(b);
				}
			}
		}
		var _this1 = this.actions;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,actionBones);
		} else {
			_this1.h[name] = actionBones;
		}
		var actionMats = [];
		var _g21 = 0;
		while(_g21 < actionBones.length) {
			var b1 = actionBones[_g21];
			++_g21;
			var a = b1.transform.values;
			actionMats.push(new iron_math_Mat4(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]));
		}
		var _this2 = this.mats;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,actionMats);
		} else {
			_this2.h[name] = actionMats;
		}
	}
	,initSkeletonTransforms: function(transformsI) {
		this.skeletonTransformsI = [];
		var _g = 0;
		while(_g < transformsI.length) {
			var t = transformsI[_g];
			++_g;
			var mi = new iron_math_Mat4(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15]);
			this.skeletonTransformsI.push(mi);
		}
	}
	,calculateAABB: function() {
		this.aabbMin = new iron_math_Vec4(-0.01,-0.01,-0.01);
		this.aabbMax = new iron_math_Vec4(0.01,0.01,0.01);
		this.aabb = new iron_math_Vec4();
		var i = 0;
		while(i < this.positions.values.length) {
			if(this.positions.values[i] > this.aabbMax.x) {
				this.aabbMax.x = this.positions.values[i];
			}
			if(this.positions.values[i + 1] > this.aabbMax.y) {
				this.aabbMax.y = this.positions.values[i + 1];
			}
			if(this.positions.values[i + 2] > this.aabbMax.z) {
				this.aabbMax.z = this.positions.values[i + 2];
			}
			if(this.positions.values[i] < this.aabbMin.x) {
				this.aabbMin.x = this.positions.values[i];
			}
			if(this.positions.values[i + 1] < this.aabbMin.y) {
				this.aabbMin.y = this.positions.values[i + 1];
			}
			if(this.positions.values[i + 2] < this.aabbMin.z) {
				this.aabbMin.z = this.positions.values[i + 2];
			}
			i += 4;
		}
		this.aabb.x = (Math.abs(this.aabbMin.x) + Math.abs(this.aabbMax.x)) / 32767 * this.data.scalePos;
		this.aabb.y = (Math.abs(this.aabbMin.y) + Math.abs(this.aabbMax.y)) / 32767 * this.data.scalePos;
		this.aabb.z = (Math.abs(this.aabbMin.z) + Math.abs(this.aabbMax.z)) / 32767 * this.data.scalePos;
	}
	,__class__: iron_data_Geometry
};
var iron_data_LightData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.LightData"] = iron_data_LightData;
iron_data_LightData.__name__ = "iron.data.LightData";
iron_data_LightData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getLightRawByName(format.light_datas,id);
		if(raw == null) {
			haxe_Log.trace("Light data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/LightData.hx", lineNumber : 30, className : "iron.data.LightData", methodName : "parse"});
			done(null);
		}
		new iron_data_LightData(raw,done);
	});
};
iron_data_LightData.prototype = {
	__class__: iron_data_LightData
};
var iron_data_MaterialData = function(raw,done,file) {
	if(file == null) {
		file = "";
	}
	this.contexts = null;
	var _gthis = this;
	this.uid = ++iron_data_MaterialData.uidCounter;
	this.raw = raw;
	this.name = raw.name;
	var ref = raw.shader.split("/");
	var object_file = "";
	var data_ref = "";
	if(ref.length == 2) {
		object_file = ref[0];
		data_ref = ref[1];
	} else {
		object_file = file;
		data_ref = raw.shader;
	}
	iron_data_Data.getShader(object_file,data_ref,function(b) {
		_gthis.shader = b;
		_gthis.contexts = [];
		while(_gthis.contexts.length < raw.contexts.length) _gthis.contexts.push(null);
		var contextsLoaded = 0;
		var _g = 0;
		var _g1 = raw.contexts.length;
		while(_g < _g1) {
			var i = [_g++];
			var c = raw.contexts[i[0]];
			new iron_data_MaterialContext(c,(function(i1) {
				return function(self) {
					_gthis.contexts[i1[0]] = self;
					contextsLoaded += 1;
					if(contextsLoaded == raw.contexts.length) {
						done(_gthis);
					}
				};
			})(i));
		}
	},raw.override_context);
};
$hxClasses["iron.data.MaterialData"] = iron_data_MaterialData;
iron_data_MaterialData.__name__ = "iron.data.MaterialData";
iron_data_MaterialData.parse = function(file,name,done) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getMaterialRawByName(format.material_datas,name);
		if(raw == null) {
			haxe_Log.trace("Material data \"" + name + "\" not found!",{ fileName : "Sources/iron/data/MaterialData.hx", lineNumber : 58, className : "iron.data.MaterialData", methodName : "parse"});
			done(null);
		}
		new iron_data_MaterialData(raw,done,file);
	});
};
iron_data_MaterialData.prototype = {
	getContext: function(name) {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(HxOverrides.substr(c.raw.name,0,name.length) == name) {
				return c;
			}
		}
		return null;
	}
	,__class__: iron_data_MaterialData
};
var iron_data_MaterialContext = function(raw,done) {
	this.id = 0;
	this.textures = null;
	var _gthis = this;
	this.raw = raw;
	this.id = iron_data_MaterialContext.num++;
	if(raw.bind_textures != null && raw.bind_textures.length > 0) {
		var this1 = new Array(raw.bind_textures.length);
		this.textures = this1;
		var texturesLoaded = 0;
		var _g = 0;
		var _g1 = raw.bind_textures.length;
		while(_g < _g1) {
			var i = [_g++];
			var tex = [raw.bind_textures[i[0]]];
			if(tex[0].file == "" || tex[0].source == "movie") {
				texturesLoaded += 1;
				if(texturesLoaded == raw.bind_textures.length) {
					done(this);
				}
				continue;
			}
			iron_data_Data.getImage(tex[0].file,(function(tex1,i1) {
				return function(image) {
					_gthis.textures[i1[0]] = image;
					texturesLoaded += 1;
					if(tex1[0].mipmaps != null) {
						var mipmaps = [];
						while(mipmaps.length < tex1[0].mipmaps.length) mipmaps.push(null);
						var mipmapsLoaded = 0;
						var _g2 = 0;
						var _g11 = tex1[0].mipmaps.length;
						while(_g2 < _g11) {
							var j = [_g2++];
							var name = tex1[0].mipmaps[j[0]];
							iron_data_Data.getImage(name,(function(j1,tex2) {
								return function(mipimg) {
									mipmaps[j1[0]] = mipimg;
									mipmapsLoaded += 1;
									if(mipmapsLoaded == tex2[0].mipmaps.length) {
										image.setMipmaps(mipmaps);
										tex2[0].mipmaps = null;
										tex2[0].generate_mipmaps = false;
										if(texturesLoaded == raw.bind_textures.length) {
											done(_gthis);
										}
									}
								};
							})(j,tex1));
						}
					} else if(tex1[0].generate_mipmaps == true && image != null) {
						image.generateMipmaps(1000);
						tex1[0].mipmaps = null;
						tex1[0].generate_mipmaps = false;
						if(texturesLoaded == raw.bind_textures.length) {
							done(_gthis);
						}
					} else if(texturesLoaded == raw.bind_textures.length) {
						done(_gthis);
					}
				};
			})(tex,i),false,tex[0].format != null ? tex[0].format : "RGBA32");
		}
	} else {
		done(this);
	}
};
$hxClasses["iron.data.MaterialContext"] = iron_data_MaterialContext;
iron_data_MaterialContext.__name__ = "iron.data.MaterialContext";
iron_data_MaterialContext.prototype = {
	setTextureParameters: function(g,textureIndex,context,unitIndex) {
		context.setTextureParameters(g,unitIndex,this.raw.bind_textures[textureIndex]);
	}
	,__class__: iron_data_MaterialContext
};
var iron_data_MeshData = function(raw,done) {
	this.scaleTex = 1.0;
	this.scalePos = 1.0;
	this.refcount = 0;
	this.raw = raw;
	this.name = raw.name;
	if(raw.scale_pos != null) {
		this.scalePos = raw.scale_pos;
	}
	if(raw.scale_tex != null) {
		this.scaleTex = raw.scale_tex;
	}
	var indices = [];
	var materialIndices = [];
	var _g = 0;
	var _g1 = raw.index_arrays;
	while(_g < _g1.length) {
		var ind = _g1[_g];
		++_g;
		indices.push(ind.values);
		materialIndices.push(ind.material);
	}
	this.isSkinned = raw.skin != null;
	var vertexArrays = raw.vertex_arrays;
	if(this.isSkinned) {
		vertexArrays.push({ attrib : "bone", values : null, data : "short4norm"});
		vertexArrays.push({ attrib : "weight", values : null, data : "short4norm"});
	}
	var _g2 = 0;
	var _g3 = vertexArrays.length;
	while(_g2 < _g3) {
		var i = _g2++;
		var padding = vertexArrays[i].padding;
		vertexArrays[i].size = this.getVertexSize(vertexArrays[i].data,padding != null ? padding : 0);
	}
	var parsedUsage = 0;
	if(raw.dynamic_usage != null && raw.dynamic_usage == true) {
		parsedUsage = 1;
	}
	var usage = parsedUsage;
	if(this.isSkinned) {
		var bonea = null;
		var weighta = null;
		var vertex_length = vertexArrays[0].values.length / vertexArrays[0].size | 0;
		var l = vertex_length * 4;
		var this1 = new Int16Array(l);
		bonea = this1;
		var this2 = new Int16Array(l);
		weighta = this2;
		var index = 0;
		var ai = 0;
		var _g4 = 0;
		var _g5 = vertex_length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			var boneCount = raw.skin.bone_count_array[i1];
			var _g41 = index;
			var _g51 = index + boneCount;
			while(_g41 < _g51) {
				var j = _g41++;
				bonea[ai] = raw.skin.bone_index_array[j];
				weighta[ai] = raw.skin.bone_weight_array[j];
				++ai;
			}
			var _g6 = boneCount;
			var _g7 = 4;
			while(_g6 < _g7) {
				var j1 = _g6++;
				bonea[ai] = 0;
				weighta[ai] = 0;
				++ai;
			}
			index += boneCount;
		}
		vertexArrays[vertexArrays.length - 2].values = bonea;
		vertexArrays[vertexArrays.length - 1].values = weighta;
	}
	this.geom = new iron_data_Geometry(this,indices,materialIndices,usage);
	this.geom.name = this.name;
	done(this);
};
$hxClasses["iron.data.MeshData"] = iron_data_MeshData;
iron_data_MeshData.__name__ = "iron.data.MeshData";
iron_data_MeshData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getMeshRawByName(format.mesh_datas,id);
		if(raw == null) {
			haxe_Log.trace("Mesh data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/MeshData.hx", lineNumber : 101, className : "iron.data.MeshData", methodName : "parse"});
			done(null);
		}
		new iron_data_MeshData(raw,function(dat) {
			dat.format = format;
			if(raw.skin != null) {
				dat.geom.skinBoneCounts = raw.skin.bone_count_array;
				dat.geom.skinBoneIndices = raw.skin.bone_index_array;
				dat.geom.skinBoneWeights = raw.skin.bone_weight_array;
				dat.geom.skeletonBoneRefs = raw.skin.bone_ref_array;
				dat.geom.skeletonBoneLens = raw.skin.bone_len_array;
				dat.geom.initSkeletonTransforms(raw.skin.transformsI);
			}
			done(dat);
		});
	});
};
iron_data_MeshData.prototype = {
	'delete': function() {
		this.geom.delete();
	}
	,getVertexSize: function(vertex_data,padding) {
		if(padding == null) {
			padding = 0;
		}
		switch(vertex_data) {
		case "short2norm":
			return 2 - padding;
		case "short4norm":
			return 4 - padding;
		default:
			return 0;
		}
	}
	,__class__: iron_data_MeshData
};
var iron_data_ParticleData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.ParticleData"] = iron_data_ParticleData;
iron_data_ParticleData.__name__ = "iron.data.ParticleData";
iron_data_ParticleData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getParticleRawByName(format.particle_datas,id);
		if(raw == null) {
			haxe_Log.trace("Particle data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/ParticleData.hx", lineNumber : 21, className : "iron.data.ParticleData", methodName : "parse"});
			done(null);
		}
		new iron_data_ParticleData(raw,done);
	});
};
iron_data_ParticleData.prototype = {
	__class__: iron_data_ParticleData
};
var iron_data_ShaderData = function(raw,done,overrideContext) {
	this.contexts = [];
	var _gthis = this;
	this.raw = raw;
	this.name = raw.name;
	var _g = 0;
	var _g1 = raw.contexts;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		this.contexts.push(null);
	}
	var contextsLoaded = 0;
	var _g2 = 0;
	var _g3 = raw.contexts.length;
	while(_g2 < _g3) {
		var i = [_g2++];
		var c1 = raw.contexts[i[0]];
		new iron_data_ShaderContext(c1,(function(i1) {
			return function(con) {
				_gthis.contexts[i1[0]] = con;
				contextsLoaded += 1;
				if(contextsLoaded == raw.contexts.length) {
					done(_gthis);
				}
			};
		})(i),overrideContext);
	}
};
$hxClasses["iron.data.ShaderData"] = iron_data_ShaderData;
iron_data_ShaderData.__name__ = "iron.data.ShaderData";
iron_data_ShaderData.parse = function(file,name,done,overrideContext) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getShaderRawByName(format.shader_datas,name);
		if(raw == null) {
			haxe_Log.trace("Shader data \"" + name + "\" not found!",{ fileName : "Sources/iron/data/ShaderData.hx", lineNumber : 48, className : "iron.data.ShaderData", methodName : "parse"});
			done(null);
		}
		new iron_data_ShaderData(raw,done,overrideContext);
	});
};
iron_data_ShaderData.prototype = {
	getContext: function(name) {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.raw.name == name) {
				return c;
			}
		}
		return null;
	}
	,__class__: iron_data_ShaderData
};
var iron_data_ShaderContext = function(raw,done,overrideContext) {
	this.instancingType = 0;
	this.raw = raw;
	this.overrideContext = overrideContext;
	this.parseVertexStructure();
	this.compile(done);
};
$hxClasses["iron.data.ShaderContext"] = iron_data_ShaderContext;
iron_data_ShaderContext.__name__ = "iron.data.ShaderContext";
iron_data_ShaderContext.parseData = function(data) {
	if(data == "float1") {
		return 0;
	} else if(data == "float2") {
		return 1;
	} else if(data == "float3") {
		return 2;
	} else if(data == "float4") {
		return 3;
	} else if(data == "short2norm") {
		return 5;
	} else if(data == "short4norm") {
		return 6;
	}
	return 0;
};
iron_data_ShaderContext.prototype = {
	compile: function(done) {
		if(this.pipeState != null) {
			this.pipeState.delete();
		}
		this.pipeState = new kha_graphics4_PipelineState();
		this.constants = [];
		this.textureUnits = [];
		if(this.instancingType > 0) {
			var instStruct = new kha_graphics4_VertexStructure();
			instStruct.add("ipos",2);
			if(this.instancingType == 2 || this.instancingType == 4) {
				instStruct.add("irot",2);
			}
			if(this.instancingType == 3 || this.instancingType == 4) {
				instStruct.add("iscl",2);
			}
			instStruct.instanced = true;
			this.pipeState.inputLayout = [this.structure,instStruct];
		} else {
			this.pipeState.inputLayout = [this.structure];
		}
		this.pipeState.depthWrite = this.raw.depth_write;
		this.pipeState.depthMode = this.getCompareMode(this.raw.compare_mode);
		this.pipeState.cullMode = this.getCullMode(this.raw.cull_mode);
		if(this.raw.blend_source != null) {
			this.pipeState.blendSource = this.getBlendingFactor(this.raw.blend_source);
		}
		if(this.raw.blend_destination != null) {
			this.pipeState.blendDestination = this.getBlendingFactor(this.raw.blend_destination);
		}
		if(this.raw.blend_operation != null) {
			this.pipeState.blendOperation = this.getBlendingOperation(this.raw.blend_operation);
		}
		if(this.raw.alpha_blend_source != null) {
			this.pipeState.alphaBlendSource = this.getBlendingFactor(this.raw.alpha_blend_source);
		}
		if(this.raw.alpha_blend_destination != null) {
			this.pipeState.alphaBlendDestination = this.getBlendingFactor(this.raw.alpha_blend_destination);
		}
		if(this.raw.alpha_blend_operation != null) {
			this.pipeState.alphaBlendOperation = this.getBlendingOperation(this.raw.alpha_blend_operation);
		}
		if(this.raw.color_writes_red != null) {
			var _g = 0;
			var _g1 = this.raw.color_writes_red.length;
			while(_g < _g1) {
				var i = _g++;
				this.pipeState.colorWriteMasksRed[i] = this.raw.color_writes_red[i];
			}
		}
		if(this.raw.color_writes_green != null) {
			var _g2 = 0;
			var _g11 = this.raw.color_writes_green.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.pipeState.colorWriteMasksGreen[i1] = this.raw.color_writes_green[i1];
			}
		}
		if(this.raw.color_writes_blue != null) {
			var _g3 = 0;
			var _g12 = this.raw.color_writes_blue.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				this.pipeState.colorWriteMasksBlue[i2] = this.raw.color_writes_blue[i2];
			}
		}
		if(this.raw.color_writes_alpha != null) {
			var _g4 = 0;
			var _g13 = this.raw.color_writes_alpha.length;
			while(_g4 < _g13) {
				var i3 = _g4++;
				this.pipeState.colorWriteMasksAlpha[i3] = this.raw.color_writes_alpha[i3];
			}
		}
		if(this.raw.conservative_raster != null) {
			this.pipeState.conservativeRasterization = this.raw.conservative_raster;
		}
		if(this.raw.shader_from_source) {
			this.pipeState.vertexShader = kha_graphics4_VertexShader.fromSource(this.raw.vertex_shader);
			this.pipeState.fragmentShader = kha_graphics4_FragmentShader.fromSource(this.raw.fragment_shader);
			if(this.pipeState.vertexShader.shader == null || this.pipeState.fragmentShader.shader == null) {
				done(null);
				return;
			}
			this.finishCompile(done);
		} else {
			var tmp = StringTools.replace(this.raw.fragment_shader,".","_");
			this.pipeState.fragmentShader = Reflect.field(kha_Shaders,tmp);
			var tmp1 = StringTools.replace(this.raw.vertex_shader,".","_");
			this.pipeState.vertexShader = Reflect.field(kha_Shaders,tmp1);
			if(this.raw.geometry_shader != null) {
				var tmp2 = StringTools.replace(this.raw.geometry_shader,".","_");
				this.pipeState.geometryShader = Reflect.field(kha_Shaders,tmp2);
			}
			if(this.raw.tesscontrol_shader != null) {
				var tmp3 = StringTools.replace(this.raw.tesscontrol_shader,".","_");
				this.pipeState.tessellationControlShader = Reflect.field(kha_Shaders,tmp3);
			}
			if(this.raw.tesseval_shader != null) {
				var tmp4 = StringTools.replace(this.raw.tesseval_shader,".","_");
				this.pipeState.tessellationEvaluationShader = Reflect.field(kha_Shaders,tmp4);
			}
			this.finishCompile(done);
		}
	}
	,finishCompile: function(done) {
		if(this.overrideContext != null) {
			if(this.overrideContext.cull_mode != null) {
				this.pipeState.cullMode = this.getCullMode(this.overrideContext.cull_mode);
			}
		}
		this.pipeState.compile();
		if(this.raw.constants != null) {
			var _g = 0;
			var _g1 = this.raw.constants;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				this.addConstant(c);
			}
		}
		if(this.raw.texture_units != null) {
			var _g2 = 0;
			var _g11 = this.raw.texture_units;
			while(_g2 < _g11.length) {
				var tu = _g11[_g2];
				++_g2;
				this.addTexture(tu);
			}
		}
		done(this);
	}
	,parseVertexStructure: function() {
		this.structure = new kha_graphics4_VertexStructure();
		var ipos = false;
		var irot = false;
		var iscl = false;
		var _g = 0;
		var _g1 = this.raw.vertex_elements;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.name == "ipos") {
				ipos = true;
				continue;
			}
			if(elem.name == "irot") {
				irot = true;
				continue;
			}
			if(elem.name == "iscl") {
				iscl = true;
				continue;
			}
			this.structure.add(elem.name,iron_data_ShaderContext.parseData(elem.data));
		}
		if(ipos && !irot && !iscl) {
			this.instancingType = 1;
		} else if(ipos && irot && !iscl) {
			this.instancingType = 2;
		} else if(ipos && !irot && iscl) {
			this.instancingType = 3;
		} else if(ipos && irot && iscl) {
			this.instancingType = 4;
		}
	}
	,'delete': function() {
		if(this.pipeState.fragmentShader != null) {
			this.pipeState.fragmentShader.delete();
		}
		if(this.pipeState.vertexShader != null) {
			this.pipeState.vertexShader.delete();
		}
		if(this.pipeState.geometryShader != null) {
			this.pipeState.geometryShader.delete();
		}
		if(this.pipeState.tessellationControlShader != null) {
			this.pipeState.tessellationControlShader.delete();
		}
		if(this.pipeState.tessellationEvaluationShader != null) {
			this.pipeState.tessellationEvaluationShader.delete();
		}
		this.pipeState.delete();
	}
	,getCompareMode: function(s) {
		switch(s) {
		case "always":
			return 0;
		case "equal":
			return 2;
		case "greater":
			return 6;
		case "greater_equal":
			return 7;
		case "less":
			return 4;
		case "less_equal":
			return 5;
		case "never":
			return 1;
		case "not_equal":
			return 3;
		default:
			return 4;
		}
	}
	,getCullMode: function(s) {
		switch(s) {
		case "clockwise":
			return 0;
		case "none":
			return 2;
		default:
			return 1;
		}
	}
	,getBlendingOperation: function(s) {
		switch(s) {
		case "add":
			return 0;
		case "max":
			return 4;
		case "min":
			return 3;
		case "reverse_subtract":
			return 2;
		case "subtract":
			return 1;
		default:
			return 0;
		}
	}
	,getBlendingFactor: function(s) {
		switch(s) {
		case "blend_one":
			return 1;
		case "blend_zero":
			return 2;
		case "destination_alpha":
			return 4;
		case "destination_color":
			return 8;
		case "inverse_destination_alpha":
			return 6;
		case "inverse_destination_color":
			return 10;
		case "inverse_source_alpha":
			return 5;
		case "inverse_source_color":
			return 9;
		case "source_alpha":
			return 3;
		case "source_color":
			return 7;
		default:
			return 0;
		}
	}
	,getTextureAddresing: function(s) {
		switch(s) {
		case "mirror":
			return 1;
		case "repeat":
			return 0;
		default:
			return 2;
		}
	}
	,getTextureFilter: function(s) {
		switch(s) {
		case "linear":
			return 1;
		case "point":
			return 0;
		default:
			return 2;
		}
	}
	,getMipmapFilter: function(s) {
		switch(s) {
		case "no":
			return 0;
		case "point":
			return 1;
		default:
			return 2;
		}
	}
	,addConstant: function(c) {
		this.constants.push(this.pipeState.getConstantLocation(c.name));
	}
	,addTexture: function(tu) {
		var unit = this.pipeState.getTextureUnit(tu.name);
		this.textureUnits.push(unit);
	}
	,setTextureParameters: function(g,unitIndex,tex) {
		var unit = this.textureUnits[unitIndex];
		g.setTextureParameters(unit,tex.u_addressing == null ? 0 : this.getTextureAddresing(tex.u_addressing),tex.v_addressing == null ? 0 : this.getTextureAddresing(tex.v_addressing),tex.min_filter == null ? 1 : this.getTextureFilter(tex.min_filter),tex.mag_filter == null ? 1 : this.getTextureFilter(tex.mag_filter),tex.mipmap_filter == null ? 0 : this.getMipmapFilter(tex.mipmap_filter));
	}
	,__class__: iron_data_ShaderContext
};
var iron_data_WorldData = function(raw,done) {
	var _gthis = this;
	this.raw = raw;
	this.name = raw.name;
	if(raw.probe != null) {
		new iron_data_Probe(raw.probe,function(self) {
			_gthis.probe = self;
			done(_gthis);
		});
	} else {
		done(this);
	}
};
$hxClasses["iron.data.WorldData"] = iron_data_WorldData;
iron_data_WorldData.__name__ = "iron.data.WorldData";
iron_data_WorldData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getWorldRawByName(format.world_datas,id);
		if(raw == null) {
			haxe_Log.trace("World data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/WorldData.hx", lineNumber : 57, className : "iron.data.WorldData", methodName : "parse"});
			done(null);
		}
		new iron_data_WorldData(raw,done);
	});
};
iron_data_WorldData.getEmptyIrradiance = function() {
	if(iron_data_WorldData.emptyIrr == null) {
		var this1 = new Float32Array(28);
		iron_data_WorldData.emptyIrr = this1;
		var _g = 0;
		var _g1 = iron_data_WorldData.emptyIrr.length;
		while(_g < _g1) {
			var i = _g++;
			iron_data_WorldData.emptyIrr[i] = 0.0;
		}
	}
	return iron_data_WorldData.emptyIrr;
};
iron_data_WorldData.prototype = {
	loadEnvmap: function(done) {
		var _gthis = this;
		if(this.raw.envmap != null) {
			iron_data_Data.getImage(this.raw.envmap,function(image) {
				_gthis.envmap = image;
				done(_gthis);
			});
		} else {
			done(this);
		}
	}
	,__class__: iron_data_WorldData
};
var iron_data_Probe = function(raw,done) {
	this.radianceMipmaps = [];
	var _gthis = this;
	this.raw = raw;
	this.setIrradiance(function(irr) {
		_gthis.irradiance = irr;
		if(raw.radiance != null) {
			iron_data_Data.getImage(raw.radiance,function(rad) {
				_gthis.radiance = rad;
				while(_gthis.radianceMipmaps.length < raw.radiance_mipmaps) _gthis.radianceMipmaps.push(null);
				var dot = raw.radiance.lastIndexOf(".");
				var ext = raw.radiance.substring(dot);
				var base = raw.radiance.substring(0,dot);
				var mipsLoaded = 0;
				var _g = 0;
				var _g1 = raw.radiance_mipmaps;
				while(_g < _g1) {
					var i = [_g++];
					iron_data_Data.getImage(base + "_" + i[0] + ext,(function(i1) {
						return function(mipimg) {
							_gthis.radianceMipmaps[i1[0]] = mipimg;
							mipsLoaded += 1;
							if(mipsLoaded == raw.radiance_mipmaps) {
								_gthis.radiance.setMipmaps(_gthis.radianceMipmaps);
								done(_gthis);
							}
						};
					})(i),true);
				}
			});
		} else {
			done(_gthis);
		}
	});
};
$hxClasses["iron.data.Probe"] = iron_data_Probe;
iron_data_Probe.__name__ = "iron.data.Probe";
iron_data_Probe.prototype = {
	setIrradiance: function(done) {
		if(this.raw.irradiance == null) {
			var tmp = iron_data_WorldData.getEmptyIrradiance();
			done(tmp);
		} else {
			var ext = StringTools.endsWith(this.raw.irradiance,".json") ? "" : ".arm";
			iron_data_Data.getBlob(this.raw.irradiance + ext,function(b) {
				var irradianceParsed;
				if(ext == "") {
					irradianceParsed = JSON.parse(b.toString());
				} else {
					var i = new haxe_io_BytesInput(b.toBytes());
					i.set_bigEndian(false);
					irradianceParsed = iron_system_ArmPack.read(i);
				}
				var this1 = new Float32Array(28);
				var irr = this1;
				irr[0] = irradianceParsed.irradiance[0];
				irr[1] = irradianceParsed.irradiance[1];
				irr[2] = irradianceParsed.irradiance[2];
				irr[3] = irradianceParsed.irradiance[3];
				irr[4] = irradianceParsed.irradiance[4];
				irr[5] = irradianceParsed.irradiance[5];
				irr[6] = irradianceParsed.irradiance[6];
				irr[7] = irradianceParsed.irradiance[7];
				irr[8] = irradianceParsed.irradiance[8];
				irr[9] = irradianceParsed.irradiance[9];
				irr[10] = irradianceParsed.irradiance[10];
				irr[11] = irradianceParsed.irradiance[11];
				irr[12] = irradianceParsed.irradiance[12];
				irr[13] = irradianceParsed.irradiance[13];
				irr[14] = irradianceParsed.irradiance[14];
				irr[15] = irradianceParsed.irradiance[15];
				irr[16] = irradianceParsed.irradiance[16];
				irr[17] = irradianceParsed.irradiance[17];
				irr[18] = irradianceParsed.irradiance[18];
				irr[19] = irradianceParsed.irradiance[19];
				irr[20] = irradianceParsed.irradiance[20];
				irr[21] = irradianceParsed.irradiance[21];
				irr[22] = irradianceParsed.irradiance[22];
				irr[23] = irradianceParsed.irradiance[23];
				irr[24] = irradianceParsed.irradiance[24];
				irr[25] = irradianceParsed.irradiance[25];
				irr[26] = irradianceParsed.irradiance[26];
				done(irr);
			});
		}
	}
	,__class__: iron_data_Probe
};
var iron_math_Mat3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this.self = new kha_math_FastMatrix3(_00,_10,_20,_01,_11,_21,_02,_12,_22);
};
$hxClasses["iron.math.Mat3"] = iron_math_Mat3;
iron_math_Mat3.__name__ = "iron.math.Mat3";
iron_math_Mat3.prototype = {
	__class__: iron_math_Mat3
};
var iron_math_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.0;
	}
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["iron.math.Quat"] = iron_math_Quat;
iron_math_Quat.__name__ = "iron.math.Quat";
iron_math_Quat.prototype = {
	__class__: iron_math_Quat
};
var iron_math_Ray = function(origin,direction) {
	this.origin = origin == null ? new iron_math_Vec4() : origin;
	this.direction = direction == null ? new iron_math_Vec4() : direction;
};
$hxClasses["iron.math.Ray"] = iron_math_Ray;
iron_math_Ray.__name__ = "iron.math.Ray";
iron_math_Ray.prototype = {
	at: function(t) {
		var result = new iron_math_Vec4();
		var v = this.direction;
		result.x = v.x;
		result.y = v.y;
		result.z = v.z;
		result.w = v.w;
		var _this = result;
		_this.x *= t;
		_this.y *= t;
		_this.z *= t;
		var _this1 = _this;
		var v1 = this.origin;
		_this1.x += v1.x;
		_this1.y += v1.y;
		_this1.z += v1.z;
		return _this1;
	}
	,distanceToPlane: function(plane) {
		var _this = plane.normal;
		var v = this.direction;
		var denominator = _this.x * v.x + _this.y * v.y + _this.z * v.z;
		if(denominator == 0) {
			if(plane.distanceToPoint(this.origin) == 0) {
				return 0;
			}
			return -1;
		}
		var _this1 = this.origin;
		var v1 = plane.normal;
		var t = -(_this1.x * v1.x + _this1.y * v1.y + _this1.z * v1.z + plane.constant) / denominator;
		if(t >= 0) {
			return t;
		} else {
			return -1;
		}
	}
	,intersectPlane: function(plane) {
		var t = this.distanceToPlane(plane);
		if(t == -1) {
			return null;
		}
		return this.at(t);
	}
	,intersectBox: function(center,dim) {
		var tmin;
		var tmax;
		var tymin;
		var tymax;
		var tzmin;
		var tzmax;
		var halfX = dim.x / 2;
		var halfY = dim.y / 2;
		var halfZ = dim.z / 2;
		var boxMinX = center.x - halfX;
		var boxMinY = center.y - halfY;
		var boxMinZ = center.z - halfZ;
		var boxMaxX = center.x + halfX;
		var boxMaxY = center.y + halfY;
		var boxMaxZ = center.z + halfZ;
		var invdirx = 1 / this.direction.x;
		var invdiry = 1 / this.direction.y;
		var invdirz = 1 / this.direction.z;
		var origin = this.origin;
		if(invdirx >= 0) {
			tmin = (boxMinX - origin.x) * invdirx;
			tmax = (boxMaxX - origin.x) * invdirx;
		} else {
			tmin = (boxMaxX - origin.x) * invdirx;
			tmax = (boxMinX - origin.x) * invdirx;
		}
		if(invdiry >= 0) {
			tymin = (boxMinY - origin.y) * invdiry;
			tymax = (boxMaxY - origin.y) * invdiry;
		} else {
			tymin = (boxMaxY - origin.y) * invdiry;
			tymax = (boxMinY - origin.y) * invdiry;
		}
		if(tmin > tymax || tymin > tmax) {
			return null;
		}
		if(tymin > tmin || tmin != tmin) {
			tmin = tymin;
		}
		if(tymax < tmax || tmax != tmax) {
			tmax = tymax;
		}
		if(invdirz >= 0) {
			tzmin = (boxMinZ - origin.z) * invdirz;
			tzmax = (boxMaxZ - origin.z) * invdirz;
		} else {
			tzmin = (boxMaxZ - origin.z) * invdirz;
			tzmax = (boxMinZ - origin.z) * invdirz;
		}
		if(tmin > tzmax || tzmin > tmax) {
			return null;
		}
		if(tzmin > tmin || tmin != tmin) {
			tmin = tzmin;
		}
		if(tzmax < tmax || tmax != tmax) {
			tmax = tzmax;
		}
		if(tmax < 0) {
			return null;
		}
		return this.at(tmin >= 0 ? tmin : tmax);
	}
	,__class__: iron_math_Ray
};
var iron_math_Plane = function() {
	this.constant = 0.0;
	this.normal = new iron_math_Vec4(1.0,0.0,0.0);
};
$hxClasses["iron.math.Plane"] = iron_math_Plane;
iron_math_Plane.__name__ = "iron.math.Plane";
iron_math_Plane.prototype = {
	distanceToPoint: function(point) {
		var _this = this.normal;
		return _this.x * point.x + _this.y * point.y + _this.z * point.z + this.constant;
	}
	,set: function(normal,point) {
		var _this = this.normal;
		_this.x = normal.x;
		_this.y = normal.y;
		_this.z = normal.z;
		_this.w = normal.w;
		var v = this.normal;
		this.constant = -(point.x * v.x + point.y * v.y + point.z * v.z);
		return this;
	}
	,__class__: iron_math_Plane
};
var iron_math_RayCaster = function() { };
$hxClasses["iron.math.RayCaster"] = iron_math_RayCaster;
iron_math_RayCaster.__name__ = "iron.math.RayCaster";
iron_math_RayCaster.getRay = function(inputX,inputY,camera) {
	var start = new iron_math_Vec4();
	var end = new iron_math_Vec4();
	iron_math_RayCaster.getDirection(start,end,inputX,inputY,camera);
	end.x -= start.x;
	end.y -= start.y;
	end.z -= start.z;
	var n = Math.sqrt(end.x * end.x + end.y * end.y + end.z * end.z);
	if(n > 0.0) {
		var invN = 1.0 / n;
		end.x *= invN;
		end.y *= invN;
		end.z *= invN;
	}
	end.x *= camera.data.raw.far_plane;
	end.y *= camera.data.raw.far_plane;
	end.z *= camera.data.raw.far_plane;
	return new iron_math_Ray(start,end);
};
iron_math_RayCaster.getDirection = function(start,end,inputX,inputY,camera) {
	start.x = inputX / arm_App.w() * 2.0 - 1.0;
	start.y = -(inputY / arm_App.h() * 2.0 - 1.0);
	start.z = -1.0;
	end.x = start.x;
	end.y = start.y;
	end.z = 1.0;
	var _this = iron_math_RayCaster.PInv;
	var m = camera.P;
	var a00 = m.self._00;
	var a01 = m.self._01;
	var a02 = m.self._02;
	var a03 = m.self._03;
	var a10 = m.self._10;
	var a11 = m.self._11;
	var a12 = m.self._12;
	var a13 = m.self._13;
	var a20 = m.self._20;
	var a21 = m.self._21;
	var a22 = m.self._22;
	var a23 = m.self._23;
	var a30 = m.self._30;
	var a31 = m.self._31;
	var a32 = m.self._32;
	var a33 = m.self._33;
	var b00 = a00 * a11 - a01 * a10;
	var b01 = a00 * a12 - a02 * a10;
	var b02 = a00 * a13 - a03 * a10;
	var b03 = a01 * a12 - a02 * a11;
	var b04 = a01 * a13 - a03 * a11;
	var b05 = a02 * a13 - a03 * a12;
	var b06 = a20 * a31 - a21 * a30;
	var b07 = a20 * a32 - a22 * a30;
	var b08 = a20 * a33 - a23 * a30;
	var b09 = a21 * a32 - a22 * a31;
	var b10 = a21 * a33 - a23 * a31;
	var b11 = a22 * a33 - a23 * a32;
	var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	if(det == 0.0) {
		_this.self._00 = 1.0;
		_this.self._01 = 0.0;
		_this.self._02 = 0.0;
		_this.self._03 = 0.0;
		_this.self._10 = 0.0;
		_this.self._11 = 1.0;
		_this.self._12 = 0.0;
		_this.self._13 = 0.0;
		_this.self._20 = 0.0;
		_this.self._21 = 0.0;
		_this.self._22 = 1.0;
		_this.self._23 = 0.0;
		_this.self._30 = 0.0;
		_this.self._31 = 0.0;
		_this.self._32 = 0.0;
		_this.self._33 = 1.0;
	} else {
		det = 1.0 / det;
		_this.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
		_this.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
		_this.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
		_this.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
		_this.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
		_this.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
		_this.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
		_this.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
		_this.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
		_this.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
		_this.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
		_this.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
		_this.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
		_this.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
		_this.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
		_this.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
	}
	var _this1 = iron_math_RayCaster.VInv;
	var m1 = camera.V;
	var a001 = m1.self._00;
	var a011 = m1.self._01;
	var a021 = m1.self._02;
	var a031 = m1.self._03;
	var a101 = m1.self._10;
	var a111 = m1.self._11;
	var a121 = m1.self._12;
	var a131 = m1.self._13;
	var a201 = m1.self._20;
	var a211 = m1.self._21;
	var a221 = m1.self._22;
	var a231 = m1.self._23;
	var a301 = m1.self._30;
	var a311 = m1.self._31;
	var a321 = m1.self._32;
	var a331 = m1.self._33;
	var b001 = a001 * a111 - a011 * a101;
	var b011 = a001 * a121 - a021 * a101;
	var b021 = a001 * a131 - a031 * a101;
	var b031 = a011 * a121 - a021 * a111;
	var b041 = a011 * a131 - a031 * a111;
	var b051 = a021 * a131 - a031 * a121;
	var b061 = a201 * a311 - a211 * a301;
	var b071 = a201 * a321 - a221 * a301;
	var b081 = a201 * a331 - a231 * a301;
	var b091 = a211 * a321 - a221 * a311;
	var b101 = a211 * a331 - a231 * a311;
	var b111 = a221 * a331 - a231 * a321;
	var det1 = b001 * b111 - b011 * b101 + b021 * b091 + b031 * b081 - b041 * b071 + b051 * b061;
	if(det1 == 0.0) {
		_this1.self._00 = 1.0;
		_this1.self._01 = 0.0;
		_this1.self._02 = 0.0;
		_this1.self._03 = 0.0;
		_this1.self._10 = 0.0;
		_this1.self._11 = 1.0;
		_this1.self._12 = 0.0;
		_this1.self._13 = 0.0;
		_this1.self._20 = 0.0;
		_this1.self._21 = 0.0;
		_this1.self._22 = 1.0;
		_this1.self._23 = 0.0;
		_this1.self._30 = 0.0;
		_this1.self._31 = 0.0;
		_this1.self._32 = 0.0;
		_this1.self._33 = 1.0;
	} else {
		det1 = 1.0 / det1;
		_this1.self._00 = (a111 * b111 - a121 * b101 + a131 * b091) * det1;
		_this1.self._01 = (a021 * b101 - a011 * b111 - a031 * b091) * det1;
		_this1.self._02 = (a311 * b051 - a321 * b041 + a331 * b031) * det1;
		_this1.self._03 = (a221 * b041 - a211 * b051 - a231 * b031) * det1;
		_this1.self._10 = (a121 * b081 - a101 * b111 - a131 * b071) * det1;
		_this1.self._11 = (a001 * b111 - a021 * b081 + a031 * b071) * det1;
		_this1.self._12 = (a321 * b021 - a301 * b051 - a331 * b011) * det1;
		_this1.self._13 = (a201 * b051 - a221 * b021 + a231 * b011) * det1;
		_this1.self._20 = (a101 * b101 - a111 * b081 + a131 * b061) * det1;
		_this1.self._21 = (a011 * b081 - a001 * b101 - a031 * b061) * det1;
		_this1.self._22 = (a301 * b041 - a311 * b021 + a331 * b001) * det1;
		_this1.self._23 = (a211 * b021 - a201 * b041 - a231 * b001) * det1;
		_this1.self._30 = (a111 * b071 - a101 * b091 - a121 * b061) * det1;
		_this1.self._31 = (a001 * b091 - a011 * b071 + a021 * b061) * det1;
		_this1.self._32 = (a311 * b011 - a301 * b031 - a321 * b001) * det1;
		_this1.self._33 = (a201 * b031 - a211 * b011 + a221 * b001) * det1;
	}
	var _this2 = iron_math_RayCaster.VPInv;
	var b = iron_math_RayCaster.VInv;
	var a = iron_math_RayCaster.PInv;
	var a002 = a.self._00;
	var a012 = a.self._01;
	var a022 = a.self._02;
	var a032 = a.self._03;
	var a102 = a.self._10;
	var a112 = a.self._11;
	var a122 = a.self._12;
	var a132 = a.self._13;
	var a202 = a.self._20;
	var a212 = a.self._21;
	var a222 = a.self._22;
	var a232 = a.self._23;
	var a302 = a.self._30;
	var a312 = a.self._31;
	var a322 = a.self._32;
	var a332 = a.self._33;
	var b0 = b.self._00;
	var b1 = b.self._10;
	var b2 = b.self._20;
	var b3 = b.self._30;
	_this2.self._00 = a002 * b0 + a012 * b1 + a022 * b2 + a032 * b3;
	_this2.self._10 = a102 * b0 + a112 * b1 + a122 * b2 + a132 * b3;
	_this2.self._20 = a202 * b0 + a212 * b1 + a222 * b2 + a232 * b3;
	_this2.self._30 = a302 * b0 + a312 * b1 + a322 * b2 + a332 * b3;
	b0 = b.self._01;
	b1 = b.self._11;
	b2 = b.self._21;
	b3 = b.self._31;
	_this2.self._01 = a002 * b0 + a012 * b1 + a022 * b2 + a032 * b3;
	_this2.self._11 = a102 * b0 + a112 * b1 + a122 * b2 + a132 * b3;
	_this2.self._21 = a202 * b0 + a212 * b1 + a222 * b2 + a232 * b3;
	_this2.self._31 = a302 * b0 + a312 * b1 + a322 * b2 + a332 * b3;
	b0 = b.self._02;
	b1 = b.self._12;
	b2 = b.self._22;
	b3 = b.self._32;
	_this2.self._02 = a002 * b0 + a012 * b1 + a022 * b2 + a032 * b3;
	_this2.self._12 = a102 * b0 + a112 * b1 + a122 * b2 + a132 * b3;
	_this2.self._22 = a202 * b0 + a212 * b1 + a222 * b2 + a232 * b3;
	_this2.self._32 = a302 * b0 + a312 * b1 + a322 * b2 + a332 * b3;
	b0 = b.self._03;
	b1 = b.self._13;
	b2 = b.self._23;
	b3 = b.self._33;
	_this2.self._03 = a002 * b0 + a012 * b1 + a022 * b2 + a032 * b3;
	_this2.self._13 = a102 * b0 + a112 * b1 + a122 * b2 + a132 * b3;
	_this2.self._23 = a202 * b0 + a212 * b1 + a222 * b2 + a232 * b3;
	_this2.self._33 = a302 * b0 + a312 * b1 + a322 * b2 + a332 * b3;
	var m2 = iron_math_RayCaster.VPInv;
	var x = start.x;
	var y = start.y;
	var z = start.z;
	var d = 1.0 / (m2.self._03 * x + m2.self._13 * y + m2.self._23 * z + m2.self._33);
	start.x = (m2.self._00 * x + m2.self._10 * y + m2.self._20 * z + m2.self._30) * d;
	start.y = (m2.self._01 * x + m2.self._11 * y + m2.self._21 * z + m2.self._31) * d;
	start.z = (m2.self._02 * x + m2.self._12 * y + m2.self._22 * z + m2.self._32) * d;
	var m3 = iron_math_RayCaster.VPInv;
	var x1 = end.x;
	var y1 = end.y;
	var z1 = end.z;
	var d1 = 1.0 / (m3.self._03 * x1 + m3.self._13 * y1 + m3.self._23 * z1 + m3.self._33);
	end.x = (m3.self._00 * x1 + m3.self._10 * y1 + m3.self._20 * z1 + m3.self._30) * d1;
	end.y = (m3.self._01 * x1 + m3.self._11 * y1 + m3.self._21 * z1 + m3.self._31) * d1;
	end.z = (m3.self._02 * x1 + m3.self._12 * y1 + m3.self._22 * z1 + m3.self._32) * d1;
};
iron_math_RayCaster.boxIntersect = function(transform,inputX,inputY,camera) {
	var ray = iron_math_RayCaster.getRay(inputX,inputY,camera);
	var t = transform;
	var c = new iron_math_Vec4(t.world.self._30,t.world.self._31,t.world.self._32);
	var s = new iron_math_Vec4(t.dim.x,t.dim.y,t.dim.z);
	return ray.intersectBox(c,s);
};
iron_math_RayCaster.closestBoxIntersect = function(transforms,inputX,inputY,camera) {
	var intersects = [];
	var _g = 0;
	while(_g < transforms.length) {
		var t = transforms[_g];
		++_g;
		var intersect = iron_math_RayCaster.boxIntersect(t,inputX,inputY,camera);
		if(intersect != null) {
			intersects.push(t);
		}
	}
	if(intersects.length == 0) {
		return null;
	}
	var closest = null;
	var minDist = Infinity;
	var _g1 = 0;
	while(_g1 < intersects.length) {
		var t1 = intersects[_g1];
		++_g1;
		var v1 = t1.loc;
		var v2 = camera.transform.loc;
		var vx = v1.x - v2.x;
		var vy = v1.y - v2.y;
		var vz = v1.z - v2.z;
		var dist = Math.sqrt(vx * vx + vy * vy + vz * vz);
		if(dist < minDist) {
			minDist = dist;
			closest = t1;
		}
	}
	return closest;
};
iron_math_RayCaster.planeIntersect = function(normal,a,inputX,inputY,camera) {
	var ray = iron_math_RayCaster.getRay(inputX,inputY,camera);
	var plane = new iron_math_Plane();
	plane.set(normal,a);
	return ray.intersectPlane(plane);
};
var iron_math_Vec2 = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["iron.math.Vec2"] = iron_math_Vec2;
iron_math_Vec2.__name__ = "iron.math.Vec2";
iron_math_Vec2.prototype = {
	__class__: iron_math_Vec2
};
var iron_math_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["iron.math.Vec3"] = iron_math_Vec3;
iron_math_Vec3.__name__ = "iron.math.Vec3";
iron_math_Vec3.prototype = {
	__class__: iron_math_Vec3
};
var iron_object_Animation = function() {
	this.blendFactor = 0.0;
	this.blendAction = "";
	this.blendCurrent = 0.0;
	this.blendTime = 0.0;
	this.frameTime = 0.016666666666666666;
	this.paused = false;
	this.onComplete = null;
	this.frameIndex = 0;
	this.loop = true;
	this.speed = 1.0;
	this.time = 0.0;
	this.action = "";
	iron_Scene.active.animations.push(this);
	if(iron_Scene.active.raw.frame_time != null) {
		this.frameTime = iron_Scene.active.raw.frame_time;
	}
	this.play();
};
$hxClasses["iron.object.Animation"] = iron_object_Animation;
iron_object_Animation.__name__ = "iron.object.Animation";
iron_object_Animation.prototype = {
	play: function(action,onComplete,blendTime,speed,loop) {
		if(loop == null) {
			loop = true;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(blendTime == null) {
			blendTime = 0.0;
		}
		if(action == null) {
			action = "";
		}
		if(blendTime > 0) {
			this.blendTime = blendTime;
			this.blendCurrent = 0.0;
			this.blendAction = this.action;
			this.frameIndex = 0;
			this.time = 0.0;
		} else {
			this.frameIndex = -1;
		}
		this.action = action;
		this.onComplete = onComplete;
		this.speed = speed;
		this.loop = loop;
		this.paused = false;
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.animations,this);
	}
	,update: function(delta) {
		if(this.paused || this.speed == 0.0) {
			return;
		}
		this.time += delta * this.speed;
		if(this.blendTime > 0 && this.blendFactor == 0) {
			this.blendCurrent += delta;
			if(this.blendCurrent >= this.blendTime) {
				this.blendTime = 0.0;
			}
		}
	}
	,rewind: function(track) {
		this.frameIndex = this.speed > 0 ? 0 : track.frames.length - 1;
		this.time = track.frames[this.frameIndex] * this.frameTime;
	}
	,__class__: iron_object_Animation
};
var iron_object_CameraObject = function(data) {
	this.currentFace = 0;
	this.renderTargetCube = null;
	this.renderTarget = null;
	this.frustumPlanes = null;
	this.prevV = null;
	this.frame = 0;
	this.noJitterP = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	iron_object_Object.call(this);
	this.data = data;
	this.buildProjection();
	this.V = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.VP = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	if(data.raw.frustum_culling) {
		this.frustumPlanes = [];
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
	}
	iron_Scene.active.cameras.push(this);
};
$hxClasses["iron.object.CameraObject"] = iron_object_CameraObject;
iron_object_CameraObject.__name__ = "iron.object.CameraObject";
iron_object_CameraObject.buildViewFrustum = function(VP,frustumPlanes) {
	var _this = frustumPlanes[0];
	var _this1 = _this.normal;
	_this1.x = VP.self._03 + VP.self._00;
	_this1.y = VP.self._13 + VP.self._10;
	_this1.z = VP.self._23 + VP.self._20;
	_this1.w = 1.0;
	_this.constant = VP.self._33 + VP.self._30;
	var _this2 = frustumPlanes[1];
	var _this3 = _this2.normal;
	_this3.x = VP.self._03 - VP.self._00;
	_this3.y = VP.self._13 - VP.self._10;
	_this3.z = VP.self._23 - VP.self._20;
	_this3.w = 1.0;
	_this2.constant = VP.self._33 - VP.self._30;
	var _this4 = frustumPlanes[2];
	var _this5 = _this4.normal;
	_this5.x = VP.self._03 - VP.self._01;
	_this5.y = VP.self._13 - VP.self._11;
	_this5.z = VP.self._23 - VP.self._21;
	_this5.w = 1.0;
	_this4.constant = VP.self._33 - VP.self._31;
	var _this6 = frustumPlanes[3];
	var _this7 = _this6.normal;
	_this7.x = VP.self._03 + VP.self._01;
	_this7.y = VP.self._13 + VP.self._11;
	_this7.z = VP.self._23 + VP.self._21;
	_this7.w = 1.0;
	_this6.constant = VP.self._33 + VP.self._31;
	var _this8 = frustumPlanes[4];
	var _this9 = _this8.normal;
	_this9.x = VP.self._02;
	_this9.y = VP.self._12;
	_this9.z = VP.self._22;
	_this9.w = 1.0;
	_this8.constant = VP.self._32;
	var _this10 = frustumPlanes[5];
	var _this11 = _this10.normal;
	_this11.x = VP.self._03 - VP.self._02;
	_this11.y = VP.self._13 - VP.self._12;
	_this11.z = VP.self._23 - VP.self._22;
	_this11.w = 1.0;
	_this10.constant = VP.self._33 - VP.self._32;
	var _g = 0;
	while(_g < frustumPlanes.length) {
		var plane = frustumPlanes[_g];
		++_g;
		plane.normalize();
	}
};
iron_object_CameraObject.sphereInFrustum = function(frustumPlanes,t,radiusScale,offsetX,offsetY,offsetZ) {
	if(offsetZ == null) {
		offsetZ = 0.0;
	}
	if(offsetY == null) {
		offsetY = 0.0;
	}
	if(offsetX == null) {
		offsetX = 0.0;
	}
	if(radiusScale == null) {
		radiusScale = 1.0;
	}
	var radius = t.radius * radiusScale;
	var _g = 0;
	while(_g < frustumPlanes.length) {
		var plane = frustumPlanes[_g];
		++_g;
		var _this = iron_object_CameraObject.sphereCenter;
		_this.x = t.world.self._30 + offsetX;
		_this.y = t.world.self._31 + offsetY;
		_this.z = t.world.self._32 + offsetZ;
		_this.w = 1.0;
		if(plane.distanceToSphere(iron_object_CameraObject.sphereCenter,radius) + radius * 2 < 0) {
			return false;
		}
	}
	return true;
};
iron_object_CameraObject.setCubeFace = function(m,eye,face,flip) {
	if(flip == null) {
		flip = false;
	}
	var _this = iron_object_CameraObject.vcenter;
	_this.x = eye.x;
	_this.y = eye.y;
	_this.z = eye.z;
	_this.w = eye.w;
	var f = flip ? -1.0 : 1.0;
	switch(face) {
	case 0:
		var _this1 = iron_object_CameraObject.vcenter;
		_this1.x += f;
		_this1.y += 0.0;
		_this1.z += 0.0;
		var _this2 = iron_object_CameraObject.vup;
		_this2.x = 0.0;
		_this2.y = -1.0 * f;
		_this2.z = 0.0;
		_this2.w = 1.0;
		break;
	case 1:
		var _this3 = iron_object_CameraObject.vcenter;
		_this3.x += -1.0 * f;
		_this3.y += 0.0;
		_this3.z += 0.0;
		var _this4 = iron_object_CameraObject.vup;
		_this4.x = 0.0;
		_this4.y = -1.0 * f;
		_this4.z = 0.0;
		_this4.w = 1.0;
		break;
	case 2:
		var _this5 = iron_object_CameraObject.vcenter;
		_this5.x += 0.0;
		_this5.y += f;
		_this5.z += 0.0;
		var _this6 = iron_object_CameraObject.vup;
		_this6.x = 0.0;
		_this6.y = 0.0;
		_this6.z = f;
		_this6.w = 1.0;
		break;
	case 3:
		var _this7 = iron_object_CameraObject.vcenter;
		_this7.x += 0.0;
		_this7.y += -1.0 * f;
		_this7.z += 0.0;
		var _this8 = iron_object_CameraObject.vup;
		_this8.x = 0.0;
		_this8.y = 0.0;
		_this8.z = -1.0 * f;
		_this8.w = 1.0;
		break;
	case 4:
		var _this9 = iron_object_CameraObject.vcenter;
		_this9.x += 0.0;
		_this9.y += 0.0;
		_this9.z += f;
		var _this10 = iron_object_CameraObject.vup;
		_this10.x = 0.0;
		_this10.y = -1.0 * f;
		_this10.z = 0.0;
		_this10.w = 1.0;
		break;
	case 5:
		var _this11 = iron_object_CameraObject.vcenter;
		_this11.x += 0.0;
		_this11.y += 0.0;
		_this11.z += -1.0 * f;
		var _this12 = iron_object_CameraObject.vup;
		_this12.x = 0.0;
		_this12.y = -1.0 * f;
		_this12.z = 0.0;
		_this12.w = 1.0;
		break;
	}
	var center = iron_object_CameraObject.vcenter;
	var up = iron_object_CameraObject.vup;
	var f0 = center.x - eye.x;
	var f1 = center.y - eye.y;
	var f2 = center.z - eye.z;
	var n = 1.0 / Math.sqrt(f0 * f0 + f1 * f1 + f2 * f2);
	f0 *= n;
	f1 *= n;
	f2 *= n;
	var s0 = f1 * up.z - f2 * up.y;
	var s1 = f2 * up.x - f0 * up.z;
	var s2 = f0 * up.y - f1 * up.x;
	n = 1.0 / Math.sqrt(s0 * s0 + s1 * s1 + s2 * s2);
	s0 *= n;
	s1 *= n;
	s2 *= n;
	var u0 = s1 * f2 - s2 * f1;
	var u1 = s2 * f0 - s0 * f2;
	var u2 = s0 * f1 - s1 * f0;
	var d0 = -eye.x * s0 - eye.y * s1 - eye.z * s2;
	var d1 = -eye.x * u0 - eye.y * u1 - eye.z * u2;
	var d2 = eye.x * f0 + eye.y * f1 + eye.z * f2;
	m.self._00 = s0;
	m.self._10 = s1;
	m.self._20 = s2;
	m.self._30 = d0;
	m.self._01 = u0;
	m.self._11 = u1;
	m.self._21 = u2;
	m.self._31 = d1;
	m.self._02 = -f0;
	m.self._12 = -f1;
	m.self._22 = -f2;
	m.self._32 = d2;
	m.self._03 = 0.0;
	m.self._13 = 0.0;
	m.self._23 = 0.0;
	m.self._33 = 1.0;
};
iron_object_CameraObject.__super__ = iron_object_Object;
iron_object_CameraObject.prototype = $extend(iron_object_Object.prototype,{
	buildProjection: function(screenAspect) {
		if(this.data.raw.ortho != null) {
			var left = this.data.raw.ortho[0];
			var right = this.data.raw.ortho[1];
			var bottom = this.data.raw.ortho[2];
			var top = this.data.raw.ortho[3];
			var near = this.data.raw.near_plane;
			var far = this.data.raw.far_plane;
			var rl = right - left;
			var tb = top - bottom;
			var fn = far - near;
			var tx = -(right + left) / rl;
			var ty = -(top + bottom) / tb;
			var tz = -(far + near) / fn;
			this.P = new iron_math_Mat4(2 / rl,0,0,tx,0,2 / tb,0,ty,0,0,-2 / fn,tz,0,0,0,1);
		} else {
			if(screenAspect == null) {
				screenAspect = arm_App.w() / arm_App.h();
			}
			var aspect = this.data.raw.aspect != null ? this.data.raw.aspect : screenAspect;
			var zn = this.data.raw.near_plane;
			var zf = this.data.raw.far_plane;
			var uh = 1.0 / Math.tan(this.data.raw.fov / 2);
			var uw = uh / aspect;
			this.P = new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
		}
		var _this = this.noJitterP;
		var m = this.P;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.cameras,this);
		iron_object_Object.prototype.remove.call(this);
	}
	,renderFrame: function(g) {
		this.projectionJitter();
		this.buildMatrix();
		if(this.prevV == null) {
			this.prevV = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
			var _this = this.prevV;
			var m = this.V;
			_this.self._00 = m.self._00;
			_this.self._01 = m.self._01;
			_this.self._02 = m.self._02;
			_this.self._03 = m.self._03;
			_this.self._10 = m.self._10;
			_this.self._11 = m.self._11;
			_this.self._12 = m.self._12;
			_this.self._13 = m.self._13;
			_this.self._20 = m.self._20;
			_this.self._21 = m.self._21;
			_this.self._22 = m.self._22;
			_this.self._23 = m.self._23;
			_this.self._30 = m.self._30;
			_this.self._31 = m.self._31;
			_this.self._32 = m.self._32;
			_this.self._33 = m.self._33;
		}
		iron_RenderPath.active.renderFrame(g);
		var _this1 = this.prevV;
		var m1 = this.V;
		_this1.self._00 = m1.self._00;
		_this1.self._01 = m1.self._01;
		_this1.self._02 = m1.self._02;
		_this1.self._03 = m1.self._03;
		_this1.self._10 = m1.self._10;
		_this1.self._11 = m1.self._11;
		_this1.self._12 = m1.self._12;
		_this1.self._13 = m1.self._13;
		_this1.self._20 = m1.self._20;
		_this1.self._21 = m1.self._21;
		_this1.self._22 = m1.self._22;
		_this1.self._23 = m1.self._23;
		_this1.self._30 = m1.self._30;
		_this1.self._31 = m1.self._31;
		_this1.self._32 = m1.self._32;
		_this1.self._33 = m1.self._33;
	}
	,projectionJitter: function() {
		var w = iron_RenderPath.active.currentW;
		var h = iron_RenderPath.active.currentH;
		var _this = this.P;
		var m = this.noJitterP;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
		var x = 0.0;
		var y = 0.0;
		if(this.frame % 2 == 0) {
			x = 0.25;
			y = 0.25;
		} else {
			x = -0.25;
			y = -0.25;
		}
		this.P.self._20 += x / w;
		this.P.self._21 += y / h;
		this.frame++;
	}
	,buildMatrix: function() {
		this.transform.buildMatrix();
		var _this = this.transform.world;
		var x = Math.sqrt(_this.self._00 * _this.self._00 + _this.self._10 * _this.self._10 + _this.self._20 * _this.self._20);
		var y = Math.sqrt(_this.self._01 * _this.self._01 + _this.self._11 * _this.self._11 + _this.self._21 * _this.self._21);
		var z = Math.sqrt(_this.self._02 * _this.self._02 + _this.self._12 * _this.self._12 + _this.self._22 * _this.self._22);
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var sc_x = x;
		var sc_y = y;
		var sc_z = z;
		var sc_w = 1.0;
		if(sc_x != 1.0 || sc_y != 1.0 || sc_z != 1.0) {
			var _this1 = iron_object_CameraObject.temp;
			_this1.x = 1.0 / sc_x;
			_this1.y = 1.0 / sc_y;
			_this1.z = 1.0 / sc_z;
			_this1.w = 1.0;
			var _this2 = this.transform.world;
			var v = iron_object_CameraObject.temp;
			var x1 = v.x;
			var y1 = v.y;
			var z1 = v.z;
			_this2.self._00 *= x1;
			_this2.self._01 *= x1;
			_this2.self._02 *= x1;
			_this2.self._03 *= x1;
			_this2.self._10 *= y1;
			_this2.self._11 *= y1;
			_this2.self._12 *= y1;
			_this2.self._13 *= y1;
			_this2.self._20 *= z1;
			_this2.self._21 *= z1;
			_this2.self._22 *= z1;
			_this2.self._23 *= z1;
		}
		var _this3 = this.V;
		var m = this.transform.world;
		var a00 = m.self._00;
		var a01 = m.self._01;
		var a02 = m.self._02;
		var a03 = m.self._03;
		var a10 = m.self._10;
		var a11 = m.self._11;
		var a12 = m.self._12;
		var a13 = m.self._13;
		var a20 = m.self._20;
		var a21 = m.self._21;
		var a22 = m.self._22;
		var a23 = m.self._23;
		var a30 = m.self._30;
		var a31 = m.self._31;
		var a32 = m.self._32;
		var a33 = m.self._33;
		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			_this3.self._00 = 1.0;
			_this3.self._01 = 0.0;
			_this3.self._02 = 0.0;
			_this3.self._03 = 0.0;
			_this3.self._10 = 0.0;
			_this3.self._11 = 1.0;
			_this3.self._12 = 0.0;
			_this3.self._13 = 0.0;
			_this3.self._20 = 0.0;
			_this3.self._21 = 0.0;
			_this3.self._22 = 1.0;
			_this3.self._23 = 0.0;
			_this3.self._30 = 0.0;
			_this3.self._31 = 0.0;
			_this3.self._32 = 0.0;
			_this3.self._33 = 1.0;
		} else {
			det = 1.0 / det;
			_this3.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
			_this3.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
			_this3.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
			_this3.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
			_this3.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
			_this3.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
			_this3.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
			_this3.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
			_this3.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
			_this3.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
			_this3.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
			_this3.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
			_this3.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
			_this3.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
			_this3.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
			_this3.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
		}
		var _this4 = this.VP;
		var b = this.P;
		var a = this.V;
		var a001 = a.self._00;
		var a011 = a.self._01;
		var a021 = a.self._02;
		var a031 = a.self._03;
		var a101 = a.self._10;
		var a111 = a.self._11;
		var a121 = a.self._12;
		var a131 = a.self._13;
		var a201 = a.self._20;
		var a211 = a.self._21;
		var a221 = a.self._22;
		var a231 = a.self._23;
		var a301 = a.self._30;
		var a311 = a.self._31;
		var a321 = a.self._32;
		var a331 = a.self._33;
		var b0 = b.self._00;
		var b1 = b.self._10;
		var b2 = b.self._20;
		var b3 = b.self._30;
		_this4.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this4.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this4.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this4.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = b.self._01;
		b1 = b.self._11;
		b2 = b.self._21;
		b3 = b.self._31;
		_this4.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this4.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this4.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this4.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = b.self._02;
		b1 = b.self._12;
		b2 = b.self._22;
		b3 = b.self._32;
		_this4.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this4.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this4.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this4.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = b.self._03;
		b1 = b.self._13;
		b2 = b.self._23;
		b3 = b.self._33;
		_this4.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this4.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this4.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this4.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		if(this.data.raw.frustum_culling) {
			iron_object_CameraObject.buildViewFrustum(this.VP,this.frustumPlanes);
		}
	}
	,__class__: iron_object_CameraObject
});
var iron_object_FrustumPlane = function() {
	this.constant = 0.0;
	this.normal = new iron_math_Vec4(1.0,0.0,0.0);
};
$hxClasses["iron.object.FrustumPlane"] = iron_object_FrustumPlane;
iron_object_FrustumPlane.__name__ = "iron.object.FrustumPlane";
iron_object_FrustumPlane.prototype = {
	normalize: function() {
		var _this = this.normal;
		var inverseNormalLength = 1.0 / Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
		var _this1 = this.normal;
		_this1.x *= inverseNormalLength;
		_this1.y *= inverseNormalLength;
		_this1.z *= inverseNormalLength;
		this.constant *= inverseNormalLength;
	}
	,distanceToSphere: function(sphereCenter,sphereRadius) {
		var _this = this.normal;
		return _this.x * sphereCenter.x + _this.y * sphereCenter.y + _this.z * sphereCenter.z + this.constant - sphereRadius;
	}
	,__class__: iron_object_FrustumPlane
};
var iron_object_Constraint = function(constr) {
	this.target = null;
	this.raw = constr;
};
$hxClasses["iron.object.Constraint"] = iron_object_Constraint;
iron_object_Constraint.__name__ = "iron.object.Constraint";
iron_object_Constraint.prototype = {
	apply: function(transform) {
		if(this.target == null && this.raw.target != null) {
			this.target = iron_Scene.active.getChild(this.raw.target).transform;
		}
		if(this.raw.type == "COPY_LOCATION") {
			if(this.raw.use_x) {
				transform.world.self._30 = this.target.loc.x;
				if(this.raw.use_offset) {
					transform.world.self._30 += transform.loc.x;
				}
			}
			if(this.raw.use_y) {
				transform.world.self._31 = this.target.loc.y;
				if(this.raw.use_offset) {
					transform.world.self._31 += transform.loc.y;
				}
			}
			if(this.raw.use_z) {
				transform.world.self._32 = this.target.loc.z;
				if(this.raw.use_offset) {
					transform.world.self._32 += transform.loc.z;
				}
			}
		}
	}
	,__class__: iron_object_Constraint
};
var iron_object_LightObject = function(data) {
	this.frustumPlanes = null;
	this.VP = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.P = null;
	this.V = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.camSlicedP = null;
	iron_object_Object.call(this);
	this.data = data;
	var type = data.raw.type;
	var fov = data.raw.fov;
	if(type == "sun") {
		if(iron_object_LightObject.corners == null) {
			iron_object_LightObject.corners = [];
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
		}
		this.P = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	} else if(type == "point" || type == "area") {
		var zn = data.raw.near_plane;
		var zf = data.raw.far_plane;
		var uh = 1.0 / Math.tan(fov / 2);
		var uw = uh / 1;
		this.P = new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
	} else if(type == "spot") {
		var zn1 = data.raw.near_plane;
		var zf1 = data.raw.far_plane;
		var uh1 = 1.0 / Math.tan(fov / 2);
		var uw1 = uh1 / 1;
		this.P = new iron_math_Mat4(uw1,0,0,0,0,uh1,0,0,0,0,(zf1 + zn1) / (zn1 - zf1),2 * zf1 * zn1 / (zn1 - zf1),0,0,-1,0);
	}
	iron_Scene.active.lights.push(this);
};
$hxClasses["iron.object.LightObject"] = iron_object_LightObject;
iron_object_LightObject.__name__ = "iron.object.LightObject";
iron_object_LightObject.setCorners = function() {
	var _this = iron_object_LightObject.corners[0];
	_this.x = -1.0;
	_this.y = -1.0;
	_this.z = 1.0;
	_this.w = 1.0;
	var _this1 = iron_object_LightObject.corners[1];
	_this1.x = -1.0;
	_this1.y = -1.0;
	_this1.z = -1.0;
	_this1.w = 1.0;
	var _this2 = iron_object_LightObject.corners[2];
	_this2.x = -1.0;
	_this2.y = 1.0;
	_this2.z = 1.0;
	_this2.w = 1.0;
	var _this3 = iron_object_LightObject.corners[3];
	_this3.x = -1.0;
	_this3.y = 1.0;
	_this3.z = -1.0;
	_this3.w = 1.0;
	var _this4 = iron_object_LightObject.corners[4];
	_this4.x = 1.0;
	_this4.y = -1.0;
	_this4.z = 1.0;
	_this4.w = 1.0;
	var _this5 = iron_object_LightObject.corners[5];
	_this5.x = 1.0;
	_this5.y = -1.0;
	_this5.z = -1.0;
	_this5.w = 1.0;
	var _this6 = iron_object_LightObject.corners[6];
	_this6.x = 1.0;
	_this6.y = 1.0;
	_this6.z = 1.0;
	_this6.w = 1.0;
	var _this7 = iron_object_LightObject.corners[7];
	_this7.x = 1.0;
	_this7.y = 1.0;
	_this7.z = -1.0;
	_this7.w = 1.0;
};
iron_object_LightObject.__super__ = iron_object_Object;
iron_object_LightObject.prototype = $extend(iron_object_Object.prototype,{
	remove: function() {
		if(iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.lights,this);
		}
		iron_object_Object.prototype.remove.call(this);
	}
	,buildMatrix: function(camera) {
		this.transform.buildMatrix();
		if(this.data.raw.type == "sun") {
			this.setCascade(camera,0);
		} else {
			var _this = this.V;
			var m = this.transform.world;
			var a00 = m.self._00;
			var a01 = m.self._01;
			var a02 = m.self._02;
			var a03 = m.self._03;
			var a10 = m.self._10;
			var a11 = m.self._11;
			var a12 = m.self._12;
			var a13 = m.self._13;
			var a20 = m.self._20;
			var a21 = m.self._21;
			var a22 = m.self._22;
			var a23 = m.self._23;
			var a30 = m.self._30;
			var a31 = m.self._31;
			var a32 = m.self._32;
			var a33 = m.self._33;
			var b00 = a00 * a11 - a01 * a10;
			var b01 = a00 * a12 - a02 * a10;
			var b02 = a00 * a13 - a03 * a10;
			var b03 = a01 * a12 - a02 * a11;
			var b04 = a01 * a13 - a03 * a11;
			var b05 = a02 * a13 - a03 * a12;
			var b06 = a20 * a31 - a21 * a30;
			var b07 = a20 * a32 - a22 * a30;
			var b08 = a20 * a33 - a23 * a30;
			var b09 = a21 * a32 - a22 * a31;
			var b10 = a21 * a33 - a23 * a31;
			var b11 = a22 * a33 - a23 * a32;
			var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
			if(det == 0.0) {
				_this.self._00 = 1.0;
				_this.self._01 = 0.0;
				_this.self._02 = 0.0;
				_this.self._03 = 0.0;
				_this.self._10 = 0.0;
				_this.self._11 = 1.0;
				_this.self._12 = 0.0;
				_this.self._13 = 0.0;
				_this.self._20 = 0.0;
				_this.self._21 = 0.0;
				_this.self._22 = 1.0;
				_this.self._23 = 0.0;
				_this.self._30 = 0.0;
				_this.self._31 = 0.0;
				_this.self._32 = 0.0;
				_this.self._33 = 1.0;
			} else {
				det = 1.0 / det;
				_this.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
				_this.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
				_this.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
				_this.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
				_this.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
				_this.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
				_this.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
				_this.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
				_this.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
				_this.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
				_this.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
				_this.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
				_this.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
				_this.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
				_this.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
				_this.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
			}
			this.updateViewFrustum(camera);
		}
	}
	,setCascade: function(camera,cascade) {
		var _this = iron_object_LightObject.m;
		var m = camera.V;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
		if(this.camSlicedP == null) {
			var ortho = camera.data.raw.ortho;
			if(ortho == null) {
				var fov = camera.data.raw.fov;
				var near = this.data.raw.near_plane;
				var far = this.data.raw.far_plane;
				var aspect = camera.data.raw.aspect != null ? camera.data.raw.aspect : arm_App.w() / arm_App.h();
				var uh = 1.0 / Math.tan(fov / 2);
				var uw = uh / aspect;
				this.camSlicedP = new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(far + near) / (near - far),2 * far * near / (near - far),0,0,-1,0);
			} else {
				var left = ortho[0];
				var right = ortho[1];
				var bottom = ortho[2];
				var top = ortho[3];
				var near1 = this.data.raw.near_plane;
				var far1 = this.data.raw.far_plane;
				var rl = right - left;
				var tb = top - bottom;
				var fn = far1 - near1;
				var tx = -(right + left) / rl;
				var ty = -(top + bottom) / tb;
				var tz = -(far1 + near1) / fn;
				this.camSlicedP = new iron_math_Mat4(2 / rl,0,0,tx,0,2 / tb,0,ty,0,0,-2 / fn,tz,0,0,0,1);
			}
		}
		var _this1 = iron_object_LightObject.m;
		var m1 = this.camSlicedP;
		var a00 = _this1.self._00;
		var a01 = _this1.self._01;
		var a02 = _this1.self._02;
		var a03 = _this1.self._03;
		var a10 = _this1.self._10;
		var a11 = _this1.self._11;
		var a12 = _this1.self._12;
		var a13 = _this1.self._13;
		var a20 = _this1.self._20;
		var a21 = _this1.self._21;
		var a22 = _this1.self._22;
		var a23 = _this1.self._23;
		var a30 = _this1.self._30;
		var a31 = _this1.self._31;
		var a32 = _this1.self._32;
		var a33 = _this1.self._33;
		var b0 = m1.self._00;
		var b1 = m1.self._10;
		var b2 = m1.self._20;
		var b3 = m1.self._30;
		_this1.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._01;
		b1 = m1.self._11;
		b2 = m1.self._21;
		b3 = m1.self._31;
		_this1.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._02;
		b1 = m1.self._12;
		b2 = m1.self._22;
		b3 = m1.self._32;
		_this1.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._03;
		b1 = m1.self._13;
		b2 = m1.self._23;
		b3 = m1.self._33;
		_this1.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		var _this2 = iron_object_LightObject.m;
		var m2 = iron_object_LightObject.m;
		var a001 = m2.self._00;
		var a011 = m2.self._01;
		var a021 = m2.self._02;
		var a031 = m2.self._03;
		var a101 = m2.self._10;
		var a111 = m2.self._11;
		var a121 = m2.self._12;
		var a131 = m2.self._13;
		var a201 = m2.self._20;
		var a211 = m2.self._21;
		var a221 = m2.self._22;
		var a231 = m2.self._23;
		var a301 = m2.self._30;
		var a311 = m2.self._31;
		var a321 = m2.self._32;
		var a331 = m2.self._33;
		var b00 = a001 * a111 - a011 * a101;
		var b01 = a001 * a121 - a021 * a101;
		var b02 = a001 * a131 - a031 * a101;
		var b03 = a011 * a121 - a021 * a111;
		var b04 = a011 * a131 - a031 * a111;
		var b05 = a021 * a131 - a031 * a121;
		var b06 = a201 * a311 - a211 * a301;
		var b07 = a201 * a321 - a221 * a301;
		var b08 = a201 * a331 - a231 * a301;
		var b09 = a211 * a321 - a221 * a311;
		var b10 = a211 * a331 - a231 * a311;
		var b11 = a221 * a331 - a231 * a321;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			_this2.self._00 = 1.0;
			_this2.self._01 = 0.0;
			_this2.self._02 = 0.0;
			_this2.self._03 = 0.0;
			_this2.self._10 = 0.0;
			_this2.self._11 = 1.0;
			_this2.self._12 = 0.0;
			_this2.self._13 = 0.0;
			_this2.self._20 = 0.0;
			_this2.self._21 = 0.0;
			_this2.self._22 = 1.0;
			_this2.self._23 = 0.0;
			_this2.self._30 = 0.0;
			_this2.self._31 = 0.0;
			_this2.self._32 = 0.0;
			_this2.self._33 = 1.0;
		} else {
			det = 1.0 / det;
			_this2.self._00 = (a111 * b11 - a121 * b10 + a131 * b09) * det;
			_this2.self._01 = (a021 * b10 - a011 * b11 - a031 * b09) * det;
			_this2.self._02 = (a311 * b05 - a321 * b04 + a331 * b03) * det;
			_this2.self._03 = (a221 * b04 - a211 * b05 - a231 * b03) * det;
			_this2.self._10 = (a121 * b08 - a101 * b11 - a131 * b07) * det;
			_this2.self._11 = (a001 * b11 - a021 * b08 + a031 * b07) * det;
			_this2.self._12 = (a321 * b02 - a301 * b05 - a331 * b01) * det;
			_this2.self._13 = (a201 * b05 - a221 * b02 + a231 * b01) * det;
			_this2.self._20 = (a101 * b10 - a111 * b08 + a131 * b06) * det;
			_this2.self._21 = (a011 * b08 - a001 * b10 - a031 * b06) * det;
			_this2.self._22 = (a301 * b04 - a311 * b02 + a331 * b00) * det;
			_this2.self._23 = (a211 * b02 - a201 * b04 - a231 * b00) * det;
			_this2.self._30 = (a111 * b07 - a101 * b09 - a121 * b06) * det;
			_this2.self._31 = (a001 * b09 - a011 * b07 + a021 * b06) * det;
			_this2.self._32 = (a311 * b01 - a301 * b03 - a321 * b00) * det;
			_this2.self._33 = (a201 * b03 - a211 * b01 + a221 * b00) * det;
		}
		var _this3 = this.V;
		var m3 = this.transform.world;
		var a002 = m3.self._00;
		var a012 = m3.self._01;
		var a022 = m3.self._02;
		var a032 = m3.self._03;
		var a102 = m3.self._10;
		var a112 = m3.self._11;
		var a122 = m3.self._12;
		var a132 = m3.self._13;
		var a202 = m3.self._20;
		var a212 = m3.self._21;
		var a222 = m3.self._22;
		var a232 = m3.self._23;
		var a302 = m3.self._30;
		var a312 = m3.self._31;
		var a322 = m3.self._32;
		var a332 = m3.self._33;
		var b001 = a002 * a112 - a012 * a102;
		var b011 = a002 * a122 - a022 * a102;
		var b021 = a002 * a132 - a032 * a102;
		var b031 = a012 * a122 - a022 * a112;
		var b041 = a012 * a132 - a032 * a112;
		var b051 = a022 * a132 - a032 * a122;
		var b061 = a202 * a312 - a212 * a302;
		var b071 = a202 * a322 - a222 * a302;
		var b081 = a202 * a332 - a232 * a302;
		var b091 = a212 * a322 - a222 * a312;
		var b101 = a212 * a332 - a232 * a312;
		var b111 = a222 * a332 - a232 * a322;
		var det1 = b001 * b111 - b011 * b101 + b021 * b091 + b031 * b081 - b041 * b071 + b051 * b061;
		if(det1 == 0.0) {
			_this3.self._00 = 1.0;
			_this3.self._01 = 0.0;
			_this3.self._02 = 0.0;
			_this3.self._03 = 0.0;
			_this3.self._10 = 0.0;
			_this3.self._11 = 1.0;
			_this3.self._12 = 0.0;
			_this3.self._13 = 0.0;
			_this3.self._20 = 0.0;
			_this3.self._21 = 0.0;
			_this3.self._22 = 1.0;
			_this3.self._23 = 0.0;
			_this3.self._30 = 0.0;
			_this3.self._31 = 0.0;
			_this3.self._32 = 0.0;
			_this3.self._33 = 1.0;
		} else {
			det1 = 1.0 / det1;
			_this3.self._00 = (a112 * b111 - a122 * b101 + a132 * b091) * det1;
			_this3.self._01 = (a022 * b101 - a012 * b111 - a032 * b091) * det1;
			_this3.self._02 = (a312 * b051 - a322 * b041 + a332 * b031) * det1;
			_this3.self._03 = (a222 * b041 - a212 * b051 - a232 * b031) * det1;
			_this3.self._10 = (a122 * b081 - a102 * b111 - a132 * b071) * det1;
			_this3.self._11 = (a002 * b111 - a022 * b081 + a032 * b071) * det1;
			_this3.self._12 = (a322 * b021 - a302 * b051 - a332 * b011) * det1;
			_this3.self._13 = (a202 * b051 - a222 * b021 + a232 * b011) * det1;
			_this3.self._20 = (a102 * b101 - a112 * b081 + a132 * b061) * det1;
			_this3.self._21 = (a012 * b081 - a002 * b101 - a032 * b061) * det1;
			_this3.self._22 = (a302 * b041 - a312 * b021 + a332 * b001) * det1;
			_this3.self._23 = (a212 * b021 - a202 * b041 - a232 * b001) * det1;
			_this3.self._30 = (a112 * b071 - a102 * b091 - a122 * b061) * det1;
			_this3.self._31 = (a002 * b091 - a012 * b071 + a022 * b061) * det1;
			_this3.self._32 = (a312 * b011 - a302 * b031 - a322 * b001) * det1;
			_this3.self._33 = (a202 * b031 - a212 * b011 + a222 * b001) * det1;
		}
		var _this4 = this.V;
		var _this5 = iron_math_Mat4.helpVec;
		_this5.x = _this4.self._00;
		_this5.y = _this4.self._01;
		_this5.z = _this4.self._02;
		_this5.w = 1.0;
		var _this6 = _this5;
		var scale = 1.0 / Math.sqrt(_this6.x * _this6.x + _this6.y * _this6.y + _this6.z * _this6.z);
		_this4.self._00 *= scale;
		_this4.self._01 *= scale;
		_this4.self._02 *= scale;
		var _this7 = iron_math_Mat4.helpVec;
		_this7.x = _this4.self._10;
		_this7.y = _this4.self._11;
		_this7.z = _this4.self._12;
		_this7.w = 1.0;
		var _this8 = _this7;
		scale = 1.0 / Math.sqrt(_this8.x * _this8.x + _this8.y * _this8.y + _this8.z * _this8.z);
		_this4.self._10 *= scale;
		_this4.self._11 *= scale;
		_this4.self._12 *= scale;
		var _this9 = iron_math_Mat4.helpVec;
		_this9.x = _this4.self._20;
		_this9.y = _this4.self._21;
		_this9.z = _this4.self._22;
		_this9.w = 1.0;
		var _this10 = _this9;
		scale = 1.0 / Math.sqrt(_this10.x * _this10.x + _this10.y * _this10.y + _this10.z * _this10.z);
		_this4.self._20 *= scale;
		_this4.self._21 *= scale;
		_this4.self._22 *= scale;
		_this4.self._03 = 0.0;
		_this4.self._13 = 0.0;
		_this4.self._23 = 0.0;
		_this4.self._30 = 0.0;
		_this4.self._31 = 0.0;
		_this4.self._32 = 0.0;
		_this4.self._33 = 1.0;
		var _this11 = iron_object_LightObject.m;
		var m4 = this.V;
		var a003 = _this11.self._00;
		var a013 = _this11.self._01;
		var a023 = _this11.self._02;
		var a033 = _this11.self._03;
		var a103 = _this11.self._10;
		var a113 = _this11.self._11;
		var a123 = _this11.self._12;
		var a133 = _this11.self._13;
		var a203 = _this11.self._20;
		var a213 = _this11.self._21;
		var a223 = _this11.self._22;
		var a233 = _this11.self._23;
		var a303 = _this11.self._30;
		var a313 = _this11.self._31;
		var a323 = _this11.self._32;
		var a333 = _this11.self._33;
		var b010 = m4.self._00;
		var b12 = m4.self._10;
		var b21 = m4.self._20;
		var b31 = m4.self._30;
		_this11.self._00 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
		_this11.self._10 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
		_this11.self._20 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
		_this11.self._30 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
		b010 = m4.self._01;
		b12 = m4.self._11;
		b21 = m4.self._21;
		b31 = m4.self._31;
		_this11.self._01 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
		_this11.self._11 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
		_this11.self._21 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
		_this11.self._31 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
		b010 = m4.self._02;
		b12 = m4.self._12;
		b21 = m4.self._22;
		b31 = m4.self._32;
		_this11.self._02 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
		_this11.self._12 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
		_this11.self._22 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
		_this11.self._32 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
		b010 = m4.self._03;
		b12 = m4.self._13;
		b21 = m4.self._23;
		b31 = m4.self._33;
		_this11.self._03 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
		_this11.self._13 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
		_this11.self._23 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
		_this11.self._33 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
		iron_object_LightObject.setCorners();
		var _g = 0;
		var _g1 = iron_object_LightObject.corners;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var m5 = iron_object_LightObject.m;
			var x = v.x;
			var y = v.y;
			var z = v.z;
			var w = v.w;
			v.x = m5.self._00 * x + m5.self._10 * y + m5.self._20 * z + m5.self._30 * w;
			v.y = m5.self._01 * x + m5.self._11 * y + m5.self._21 * z + m5.self._31 * w;
			v.z = m5.self._02 * x + m5.self._12 * y + m5.self._22 * z + m5.self._32 * w;
			v.w = m5.self._03 * x + m5.self._13 * y + m5.self._23 * z + m5.self._33 * w;
			v.x /= v.w;
			v.y /= v.w;
			v.z /= v.w;
			v.w = 1.0;
		}
		var minx = iron_object_LightObject.corners[0].x;
		var miny = iron_object_LightObject.corners[0].y;
		var minz = iron_object_LightObject.corners[0].z;
		var maxx = iron_object_LightObject.corners[0].x;
		var maxy = iron_object_LightObject.corners[0].y;
		var maxz = iron_object_LightObject.corners[0].z;
		var _g2 = 0;
		var _g3 = iron_object_LightObject.corners;
		while(_g2 < _g3.length) {
			var v1 = _g3[_g2];
			++_g2;
			if(v1.x < minx) {
				minx = v1.x;
			}
			if(v1.x > maxx) {
				maxx = v1.x;
			}
			if(v1.y < miny) {
				miny = v1.y;
			}
			if(v1.y > maxy) {
				maxy = v1.y;
			}
			if(v1.z < minz) {
				minz = v1.z;
			}
			if(v1.z > maxz) {
				maxz = v1.z;
			}
		}
		var v11 = iron_object_LightObject.corners[0];
		var v2 = iron_object_LightObject.corners[7];
		var vx = v11.x - v2.x;
		var vy = v11.y - v2.y;
		var vz = v11.z - v2.z;
		var diag0 = Math.sqrt(vx * vx + vy * vy + vz * vz);
		var offx = (diag0 - (maxx - minx)) * 0.5;
		var offy = (diag0 - (maxy - miny)) * 0.5;
		minx -= offx;
		maxx += offx;
		miny -= offy;
		maxy += offy;
		var smsize = this.data.raw.shadowmap_size;
		var worldPerTexelX = (maxx - minx) / smsize;
		var worldPerTexelY = (maxy - miny) / smsize;
		var worldPerTexelZ = (maxz - minz) / smsize;
		minx = Math.floor(minx / worldPerTexelX) * worldPerTexelX;
		miny = Math.floor(miny / worldPerTexelY) * worldPerTexelY;
		minz = Math.floor(minz / worldPerTexelZ) * worldPerTexelZ;
		maxx = Math.floor(maxx / worldPerTexelX) * worldPerTexelX;
		maxy = Math.floor(maxy / worldPerTexelY) * worldPerTexelY;
		maxz = Math.floor(maxz / worldPerTexelZ) * worldPerTexelZ;
		var hx = (maxx - minx) / 2;
		var hy = (maxy - miny) / 2;
		var hz = (maxz - minz) / 2;
		this.V.self._30 = -(minx + hx);
		this.V.self._31 = -(miny + hy);
		this.V.self._32 = -(minz + hz);
		var left1 = -hx;
		var bottom1 = -hy;
		var near2 = -hz * 4 * iron_object_LightObject.cascadeBounds;
		var rl1 = hx - left1;
		var tb1 = hy - bottom1;
		var fn1 = hz - near2;
		var tx1 = -(hx + left1) / rl1;
		var ty1 = -(hy + bottom1) / tb1;
		var tz1 = -(hz + near2) / fn1;
		iron_object_LightObject.m = new iron_math_Mat4(2 / rl1,0,0,tx1,0,2 / tb1,0,ty1,0,0,-2 / fn1,tz1,0,0,0,1);
		var _this12 = this.P;
		var m6 = iron_object_LightObject.m;
		_this12.self._00 = m6.self._00;
		_this12.self._01 = m6.self._01;
		_this12.self._02 = m6.self._02;
		_this12.self._03 = m6.self._03;
		_this12.self._10 = m6.self._10;
		_this12.self._11 = m6.self._11;
		_this12.self._12 = m6.self._12;
		_this12.self._13 = m6.self._13;
		_this12.self._20 = m6.self._20;
		_this12.self._21 = m6.self._21;
		_this12.self._22 = m6.self._22;
		_this12.self._23 = m6.self._23;
		_this12.self._30 = m6.self._30;
		_this12.self._31 = m6.self._31;
		_this12.self._32 = m6.self._32;
		_this12.self._33 = m6.self._33;
		this.updateViewFrustum(camera);
	}
	,updateViewFrustum: function(camera) {
		var _this = this.VP;
		var b = this.P;
		var a = this.V;
		var a00 = a.self._00;
		var a01 = a.self._01;
		var a02 = a.self._02;
		var a03 = a.self._03;
		var a10 = a.self._10;
		var a11 = a.self._11;
		var a12 = a.self._12;
		var a13 = a.self._13;
		var a20 = a.self._20;
		var a21 = a.self._21;
		var a22 = a.self._22;
		var a23 = a.self._23;
		var a30 = a.self._30;
		var a31 = a.self._31;
		var a32 = a.self._32;
		var a33 = a.self._33;
		var b0 = b.self._00;
		var b1 = b.self._10;
		var b2 = b.self._20;
		var b3 = b.self._30;
		_this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._01;
		b1 = b.self._11;
		b2 = b.self._21;
		b3 = b.self._31;
		_this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._02;
		b1 = b.self._12;
		b2 = b.self._22;
		b3 = b.self._32;
		_this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._03;
		b1 = b.self._13;
		b2 = b.self._23;
		b3 = b.self._33;
		_this.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		if(camera.data.raw.frustum_culling) {
			if(this.frustumPlanes == null) {
				this.frustumPlanes = [];
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
			}
			iron_object_CameraObject.buildViewFrustum(this.VP,this.frustumPlanes);
		}
	}
	,setCubeFace: function(face,camera) {
		var _this = iron_object_LightObject.eye;
		_this.x = this.transform.world.self._30;
		_this.y = this.transform.world.self._31;
		_this.z = this.transform.world.self._32;
		_this.w = 1.0;
		var flip = face == 2 || face == 3;
		iron_object_CameraObject.setCubeFace(this.V,iron_object_LightObject.eye,face,flip);
		this.updateViewFrustum(camera);
	}
	,__class__: iron_object_LightObject
});
var iron_object_MeshObject = function(data,materials) {
	this.prevMatrix = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.force_context = null;
	this.skip_context = null;
	this.tilesheet = null;
	this.frustumCulling = true;
	this.screenSize = 0.0;
	this.particleIndex = -1;
	this.particleOwner = null;
	this.particleChildren = null;
	this.particleSystems = null;
	this.materialIndex = 0;
	this.data = null;
	iron_object_Object.call(this);
	this.materials = materials;
	this.setData(data);
	iron_Scene.active.meshes.push(this);
};
$hxClasses["iron.object.MeshObject"] = iron_object_MeshObject;
iron_object_MeshObject.__name__ = "iron.object.MeshObject";
iron_object_MeshObject.__super__ = iron_object_Object;
iron_object_MeshObject.prototype = $extend(iron_object_Object.prototype,{
	setData: function(data) {
		this.data = data;
		data.refcount++;
		data.geom.build();
		this.transform.scaleWorld = data.scalePos;
	}
	,remove: function() {
		if(this.particleChildren != null) {
			var _g = 0;
			var _g1 = this.particleChildren;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.remove();
			}
			this.particleChildren = null;
		}
		if(this.particleSystems != null) {
			var _g2 = 0;
			var _g11 = this.particleSystems;
			while(_g2 < _g11.length) {
				var psys = _g11[_g2];
				++_g2;
				psys.remove();
			}
			this.particleSystems = null;
		}
		if(this.tilesheet != null) {
			this.tilesheet.remove();
		}
		if(iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.meshes,this);
		}
		this.data.refcount--;
		iron_object_Object.prototype.remove.call(this);
	}
	,setupAnimation: function(oactions) {
		iron_object_Object.prototype.setupAnimation.call(this,oactions);
	}
	,setupParticleSystem: function(sceneName,pref) {
		if(this.particleSystems == null) {
			this.particleSystems = [];
		}
		var psys = new iron_object_ParticleSystem(sceneName,pref);
		this.particleSystems.push(psys);
	}
	,setupTilesheet: function(sceneName,tilesheet_ref,tilesheet_action_ref) {
		this.tilesheet = new iron_object_Tilesheet(sceneName,tilesheet_ref,tilesheet_action_ref);
	}
	,setCulled: function(isShadow,b) {
		if(isShadow) {
			this.culledShadow = b;
		} else {
			this.culledMesh = b;
		}
		this.culled = this.culledMesh && this.culledShadow;
		return b;
	}
	,cullMaterial: function(context) {
		var mats = this.materials;
		if(!(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true) && !this.validContext(mats,context)) {
			return true;
		}
		var isShadow = context == "shadowmap";
		if(!this.visibleMesh && !isShadow) {
			return this.setCulled(isShadow,true);
		}
		if(!this.visibleShadow && isShadow) {
			return this.setCulled(isShadow,true);
		}
		if(this.skip_context == context) {
			return this.setCulled(isShadow,true);
		}
		if(this.force_context != null && this.force_context != context) {
			return this.setCulled(isShadow,true);
		}
		return this.setCulled(isShadow,false);
	}
	,cullMesh: function(context,camera,light) {
		if(camera == null) {
			return false;
		}
		if(camera.data.raw.frustum_culling && this.frustumCulling) {
			var radiusScale = this.data.isSkinned ? 2.0 : 1.0;
			if(this.particleSystems != null || this.particleOwner != null) {
				radiusScale *= 1000;
			}
			if(context == "voxel") {
				radiusScale *= 100;
			}
			if(this.data.geom.instanced) {
				radiusScale *= 100;
			}
			var isShadow = context == "shadowmap";
			var frustumPlanes = isShadow ? light.frustumPlanes : camera.frustumPlanes;
			if(isShadow && light.data.raw.type != "sun") {
				light.transform.radius = light.data.raw.far_plane;
				if(!iron_object_CameraObject.sphereInFrustum(camera.frustumPlanes,light.transform)) {
					return this.setCulled(isShadow,true);
				}
			}
			if(!iron_object_CameraObject.sphereInFrustum(frustumPlanes,this.transform,radiusScale)) {
				return this.setCulled(isShadow,true);
			}
		}
		this.culled = false;
		return this.culled;
	}
	,skipContext: function(context,mat) {
		if(mat.raw.skip_context != null && mat.raw.skip_context == context) {
			return true;
		}
		return false;
	}
	,getContexts: function(context,materials,materialContexts,shaderContexts) {
		var _g = 0;
		while(_g < materials.length) {
			var mat = materials[_g];
			++_g;
			var found = false;
			var _g1 = 0;
			var _g2 = mat.raw.contexts.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(HxOverrides.substr(mat.raw.contexts[i].name,0,context.length) == context) {
					materialContexts.push(mat.contexts[i]);
					shaderContexts.push(mat.shader.getContext(context));
					found = true;
					break;
				}
			}
			if(!found) {
				materialContexts.push(null);
				shaderContexts.push(null);
			}
		}
	}
	,render: function(g,context,bindParams) {
		var _gthis = this;
		if(this.data == null || !this.data.geom.ready) {
			return;
		}
		if(!this.visible) {
			return;
		}
		if(this.cullMesh(context,iron_Scene.active.camera,iron_RenderPath.active.light)) {
			return;
		}
		var meshContext = this.raw != null && context == "mesh";
		if(this.raw != null && this.raw.is_particle && this.particleOwner == null) {
			return;
		}
		if(this.particleSystems != null && meshContext) {
			if(this.particleChildren == null) {
				this.particleChildren = [];
				var _g = 0;
				var _g1 = this.particleSystems;
				while(_g < _g1.length) {
					var psys = _g1[_g];
					++_g;
					iron_Scene.active.spawnObject(psys.data.raw.instance_object,null,function(o) {
						if(o != null) {
							var c = o;
							_gthis.particleChildren.push(c);
							c.particleOwner = _gthis;
							c.particleIndex = _gthis.particleChildren.length - 1;
						}
					});
				}
			}
			var _g2 = 0;
			var _g11 = this.particleSystems.length;
			while(_g2 < _g11) {
				var i = _g2++;
				this.particleSystems[i].update(this.particleChildren[i],this);
			}
		}
		if(this.particleSystems != null && this.particleSystems.length > 0 && !this.particleSystems[0].data.raw.render_emitter) {
			return;
		}
		if(this.tilesheet != null) {
			this.tilesheet.update();
		}
		if(this.cullMaterial(context)) {
			return;
		}
		var mats = this.materials;
		var lod = this;
		if(this.raw != null && this.raw.lods != null && this.raw.lods.length > 0) {
			var camera = iron_Scene.active.camera;
			var tr = this.transform;
			var volume = tr.dim.x * tr.dim.y * tr.dim.z;
			this.screenSize = volume * (1.0 / this.cameraDistance);
			this.screenSize = this.screenSize > 1.0 ? 1.0 : this.screenSize;
			if(this.lods == null) {
				this.lods = [];
				var _g3 = 0;
				var _g12 = this.raw.lods;
				while(_g3 < _g12.length) {
					var l = _g12[_g3];
					++_g3;
					if(l.object_ref == "") {
						this.lods.push(null);
					} else {
						this.lods.push(iron_Scene.active.getChild(l.object_ref));
					}
				}
			}
			if(context == "voxel") {
				lod = this.lods[this.lods.length - 1];
			} else {
				var _g4 = 0;
				var _g13 = this.raw.lods.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					if(this.screenSize > this.raw.lods[i1].screen_size) {
						break;
					}
					lod = this.lods[i1];
					if(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true) {
						mats = lod.materials;
					}
				}
			}
			if(lod == null) {
				return;
			}
		}
		if(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true && !this.validContext(mats,context)) {
			return;
		}
		var materialContexts = [];
		var shaderContexts = [];
		this.getContexts(context,mats,materialContexts,shaderContexts);
		iron_object_Uniforms.posUnpack = this.data.scalePos;
		iron_object_Uniforms.texUnpack = this.data.scaleTex;
		this.transform.update();
		var ldata = lod.data;
		var _g5 = 0;
		var _g14 = ldata.geom.indexBuffers.length;
		while(_g5 < _g14) {
			var i2 = _g5++;
			var mi = ldata.geom.materialIndices[i2];
			if(shaderContexts.length <= mi || shaderContexts[mi] == null) {
				continue;
			}
			this.materialIndex = mi;
			if(this.materials.length > mi && this.skipContext(context,this.materials[mi])) {
				continue;
			}
			var scontext = shaderContexts[mi];
			if(scontext == null) {
				continue;
			}
			var elems = scontext.raw.vertex_elements;
			if(scontext.pipeState != iron_object_MeshObject.lastPipeline) {
				g.setPipeline(scontext.pipeState);
				iron_object_MeshObject.lastPipeline = scontext.pipeState;
			}
			iron_object_Uniforms.setContextConstants(g,scontext,bindParams);
			iron_object_Uniforms.setObjectConstants(g,scontext,this);
			if(materialContexts.length > mi) {
				iron_object_Uniforms.setMaterialConstants(g,scontext,materialContexts[mi]);
			}
			if(ldata.geom.instanced) {
				g.setVertexBuffers([ldata.geom.get(elems),ldata.geom.instancedVB]);
			} else {
				g.setVertexBuffer(ldata.geom.get(elems));
			}
			g.setIndexBuffer(ldata.geom.indexBuffers[i2]);
			if(ldata.geom.instanced) {
				g.drawIndexedVerticesInstanced(ldata.geom.instanceCount,ldata.geom.start,ldata.geom.count);
			} else {
				g.drawIndexedVertices(ldata.geom.start,ldata.geom.count);
			}
		}
		var _this = this.prevMatrix;
		var m = this.transform.worldUnpack;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
	}
	,validContext: function(mats,context) {
		var _g = 0;
		while(_g < mats.length) {
			var mat = mats[_g];
			++_g;
			if(mat.getContext(context) != null) {
				return true;
			}
		}
		return false;
	}
	,__class__: iron_object_MeshObject
});
var iron_object_ObjectAnimation = function(object,oactions) {
	this.object = object;
	this.oactions = oactions;
	this.isSkinned = false;
	iron_object_Animation.call(this);
};
$hxClasses["iron.object.ObjectAnimation"] = iron_object_ObjectAnimation;
iron_object_ObjectAnimation.__name__ = "iron.object.ObjectAnimation";
iron_object_ObjectAnimation.__super__ = iron_object_Animation;
iron_object_ObjectAnimation.prototype = $extend(iron_object_Animation.prototype,{
	getAction: function(action) {
		var _g = 0;
		var _g1 = this.oactions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a != null && a.objects[0].name == action) {
				return a.objects[0];
			}
		}
		return null;
	}
	,play: function(action,onComplete,blendTime,speed,loop) {
		if(loop == null) {
			loop = true;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(blendTime == null) {
			blendTime = 0.0;
		}
		if(action == null) {
			action = "";
		}
		iron_object_Animation.prototype.play.call(this,action,onComplete,blendTime,speed,loop);
		if(this.action == "" && this.oactions[0] != null) {
			this.action = this.oactions[0].objects[0].name;
		}
		this.oaction = this.getAction(this.action);
		if(this.oaction != null) {
			this.isSampled = this.oaction.sampled != null && this.oaction.sampled;
		}
	}
	,update: function(delta) {
		if(!this.object.visible || this.object.culled || this.oaction == null) {
			return;
		}
		iron_object_Animation.prototype.update.call(this,delta);
		if(this.paused) {
			return;
		}
		if(!this.isSkinned) {
			this.updateObjectAnim();
		}
	}
	,updateObjectAnim: function() {
		this.updateTransformAnim(this.oaction.anim,this.object.transform);
		this.object.transform.buildMatrix();
	}
	,updateTransformAnim: function(anim,transform) {
		if(anim == null) {
			return;
		}
		var total = anim.end * this.frameTime - anim.begin * this.frameTime;
		if(anim.has_delta) {
			var t = transform;
			if(t.dloc == null) {
				t.dloc = new iron_math_Vec4();
				t.drot = new iron_math_Quat();
				t.dscale = new iron_math_Vec4();
			}
			var _this = t.dloc;
			_this.x = 0;
			_this.y = 0;
			_this.z = 0;
			_this.w = 1.0;
			var _this1 = t.dscale;
			_this1.x = 0;
			_this1.y = 0;
			_this1.z = 0;
			_this1.w = 1.0;
			t._deulerX = t._deulerY = t._deulerZ = 0.0;
		}
		var _g = 0;
		var _g1 = anim.tracks;
		while(_g < _g1.length) {
			var track = _g1[_g];
			++_g;
			if(this.frameIndex == -1) {
				this.rewind(track);
			}
			var sign = this.speed > 0 ? 1 : -1;
			var t1 = this.time + anim.begin * this.frameTime;
			while(true) {
				var frameValues = track.frames;
				if(!(this.speed > 0 ? this.frameIndex < frameValues.length - 2 && t1 > frameValues[this.frameIndex + 1] * this.frameTime : this.frameIndex > 1 && t1 > frameValues[this.frameIndex - 1] * this.frameTime)) {
					break;
				}
				this.frameIndex += sign;
			}
			if(this.frameIndex >= track.frames.length) {
				continue;
			}
			if(this.time > total) {
				if(this.onComplete != null) {
					this.onComplete();
				}
				if(this.loop) {
					this.rewind(track);
				} else {
					this.frameIndex -= sign;
					this.paused = true;
				}
				return;
			}
			var ti = this.frameIndex;
			var t11 = track.frames[ti] * this.frameTime;
			var t2 = track.frames[ti + sign] * this.frameTime;
			var v1 = track.values[ti];
			var v2 = track.values[ti + sign];
			var s = (t1 - t11) / (t2 - t11);
			var value = (1.0 - s) * v1 + s * v2;
			switch(track.target) {
			case "dqwrot":
				transform.drot.w = value;
				break;
			case "dqxrot":
				transform.drot.x = value;
				break;
			case "dqyrot":
				transform.drot.y = value;
				break;
			case "dqzrot":
				transform.drot.z = value;
				break;
			case "dxloc":
				transform.dloc.x = value;
				break;
			case "dxrot":
				transform._deulerX = value;
				break;
			case "dxscl":
				transform.dscale.x = value;
				break;
			case "dyloc":
				transform.dloc.y = value;
				break;
			case "dyrot":
				transform._deulerY = value;
				break;
			case "dyscl":
				transform.dscale.y = value;
				break;
			case "dzloc":
				transform.dloc.z = value;
				break;
			case "dzrot":
				transform._deulerZ = value;
				break;
			case "dzscl":
				transform.dscale.z = value;
				break;
			case "qwrot":
				transform.rot.w = value;
				break;
			case "qxrot":
				transform.rot.x = value;
				break;
			case "qyrot":
				transform.rot.y = value;
				break;
			case "qzrot":
				transform.rot.z = value;
				break;
			case "xloc":
				transform.loc.x = value;
				break;
			case "xrot":
				transform.setRotation(value,transform._eulerY,transform._eulerZ);
				break;
			case "xscl":
				transform.scale.x = value;
				break;
			case "yloc":
				transform.loc.y = value;
				break;
			case "yrot":
				transform.setRotation(transform._eulerX,value,transform._eulerZ);
				break;
			case "yscl":
				transform.scale.y = value;
				break;
			case "zloc":
				transform.loc.z = value;
				break;
			case "zrot":
				transform.setRotation(transform._eulerX,transform._eulerY,value);
				break;
			case "zscl":
				transform.scale.z = value;
				break;
			}
		}
	}
	,__class__: iron_object_ObjectAnimation
});
var iron_object_ParticleSystem = function(sceneName,pref) {
	this.m = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.lapTime = 0.0;
	this.lap = 0;
	this.count = 0;
	this.seed = 0;
	this.spawnRate = 0.0;
	this.time = 0.0;
	this.animtime = 0.0;
	this.lifetime = 0.0;
	this.frameRate = 24;
	this.speed = 1.0;
	var _gthis = this;
	this.seed = pref.seed;
	this.particles = [];
	this.ready = false;
	iron_data_Data.getParticle(sceneName,pref.particle,function(b) {
		_gthis.data = b;
		_gthis.r = _gthis.data.raw;
		if(iron_Scene.active.raw.gravity != null) {
			_gthis.gx = iron_Scene.active.raw.gravity[0] * _gthis.r.weight_gravity;
			_gthis.gy = iron_Scene.active.raw.gravity[1] * _gthis.r.weight_gravity;
			_gthis.gz = iron_Scene.active.raw.gravity[2] * _gthis.r.weight_gravity;
		} else {
			_gthis.gx = 0;
			_gthis.gy = 0;
			_gthis.gz = -9.81 * _gthis.r.weight_gravity;
		}
		_gthis.alignx = _gthis.r.object_align_factor[0] / 2;
		_gthis.aligny = _gthis.r.object_align_factor[1] / 2;
		_gthis.alignz = _gthis.r.object_align_factor[2] / 2;
		_gthis.lifetime = _gthis.r.lifetime / _gthis.frameRate;
		_gthis.animtime = (_gthis.r.frame_end - _gthis.r.frame_start) / _gthis.frameRate;
		_gthis.spawnRate = (_gthis.r.frame_end - _gthis.r.frame_start) / _gthis.r.count / _gthis.frameRate;
		var _g = 0;
		var _g1 = _gthis.r.count;
		while(_g < _g1) {
			var i = _g++;
			_gthis.particles.push(new iron_object_Particle(i));
		}
		_gthis.ready = true;
	});
};
$hxClasses["iron.object.ParticleSystem"] = iron_object_ParticleSystem;
iron_object_ParticleSystem.__name__ = "iron.object.ParticleSystem";
iron_object_ParticleSystem.prototype = {
	update: function(object,owner) {
		if(!this.ready || object == null || this.speed == 0.0) {
			return;
		}
		object.transform.loc = owner.transform.loc;
		object.transform.rot = owner.transform.rot;
		object.transform.buildMatrix();
		owner.transform.buildMatrix();
		var _this = object.transform.dim;
		var v = owner.transform.dim;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		this.dimx = object.transform.dim.x;
		this.dimy = object.transform.dim.y;
		if(object.tilesheet != null) {
			this.tilesx = object.tilesheet.raw.tilesx;
			this.tilesy = object.tilesheet.raw.tilesy;
			this.tilesFramerate = object.tilesheet.raw.framerate;
		}
		this.time += iron_system_Time.realDelta * this.speed;
		this.lap = this.time / this.animtime | 0;
		this.lapTime = this.time - this.lap * this.animtime;
		this.count = this.lapTime / this.spawnRate | 0;
		this.updateGpu(object,owner);
	}
	,getData: function() {
		var hair = this.r.type == 1;
		this.m.self._00 = this.r.loop ? this.animtime : -this.animtime;
		this.m.self._01 = hair ? 1 / this.particles.length : this.spawnRate;
		this.m.self._02 = hair ? 1 : this.lifetime;
		this.m.self._03 = this.particles.length;
		this.m.self._10 = hair ? 0 : this.alignx;
		this.m.self._11 = hair ? 0 : this.aligny;
		this.m.self._12 = hair ? 0 : this.alignz;
		this.m.self._13 = hair ? 0 : this.r.factor_random;
		this.m.self._20 = hair ? 0 : this.gx * this.r.mass;
		this.m.self._21 = hair ? 0 : this.gy * this.r.mass;
		this.m.self._22 = hair ? 0 : this.gz * this.r.mass;
		this.m.self._23 = hair ? 0 : this.r.lifetime_random;
		this.m.self._30 = this.tilesx;
		this.m.self._31 = this.tilesy;
		this.m.self._32 = 1 / this.tilesFramerate;
		this.m.self._33 = hair ? 1 : this.lapTime;
		return this.m;
	}
	,updateGpu: function(object,owner) {
		if(!object.data.geom.instanced) {
			this.setupGeomGpu(object,owner);
		}
	}
	,setupGeomGpu: function(object,owner) {
		var this1 = new Float32Array(this.particles.length * 3);
		var instancedData = this1;
		var i = 0;
		if(this.r.emit_from == 0) {
			var pa = owner.data.geom.positions;
			var sc = owner.data.scalePos;
			var _g = 0;
			var _g1 = this.particles;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var j = this.fhash(i) * (pa.values.length / pa.size) | 0;
				instancedData[i] = pa.values[j * pa.size] / 32767 * sc;
				++i;
				instancedData[i] = pa.values[j * pa.size + 1] / 32767 * sc;
				++i;
				instancedData[i] = pa.values[j * pa.size + 2] / 32767 * sc;
				++i;
			}
		} else {
			var _g2 = 0;
			var _g11 = this.particles;
			while(_g2 < _g11.length) {
				var p1 = _g11[_g2];
				++_g2;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.x / 2.0);
				++i;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.y / 2.0);
				++i;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.z / 2.0);
				++i;
			}
		}
		if(this.r.particle_size != 1.0) {
			object.data.geom.applyScale(this.r.particle_size,this.r.particle_size,this.r.particle_size);
		}
		object.data.geom.setupInstanced(instancedData,1,0);
	}
	,fhash: function(n) {
		var s = n + 1.0;
		s *= 9301.0 % s;
		s = (s * 9301.0 + 49297.0) % 233280.0;
		return s / 233280.0;
	}
	,remove: function() {
	}
	,__class__: iron_object_ParticleSystem
};
var iron_object_Particle = function(i) {
	this.i = i;
};
$hxClasses["iron.object.Particle"] = iron_object_Particle;
iron_object_Particle.__name__ = "iron.object.Particle";
iron_object_Particle.prototype = {
	__class__: iron_object_Particle
};
var iron_object_Tilesheet = function(sceneName,tilesheet_ref,tilesheet_action_ref) {
	this.onActionComplete = null;
	this.time = 0.0;
	this.frame = 0;
	this.paused = false;
	this.action = null;
	this.tileY = 0.0;
	this.tileX = 0.0;
	var _gthis = this;
	this.ready = false;
	iron_data_Data.getSceneRaw(sceneName,function(format) {
		var _g = 0;
		var _g1 = format.tilesheet_datas;
		while(_g < _g1.length) {
			var ts = _g1[_g];
			++_g;
			if(ts.name == tilesheet_ref) {
				_gthis.raw = ts;
				_gthis.play(tilesheet_action_ref);
				_gthis.ready = true;
				break;
			}
		}
	});
};
$hxClasses["iron.object.Tilesheet"] = iron_object_Tilesheet;
iron_object_Tilesheet.__name__ = "iron.object.Tilesheet";
iron_object_Tilesheet.prototype = {
	play: function(action_ref,onActionComplete) {
		this.onActionComplete = onActionComplete;
		var _g = 0;
		var _g1 = this.raw.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.name == action_ref) {
				this.action = a;
				break;
			}
		}
		this.setFrame(this.action.start);
		this.paused = false;
	}
	,remove: function() {
	}
	,update: function() {
		if(!this.ready || this.paused || this.action.start >= this.action.end) {
			return;
		}
		this.time += 0.016666666666666666 * iron_system_Time.scale;
		if(this.time >= 1 / this.raw.framerate) {
			this.setFrame(this.frame + 1);
		}
	}
	,setFrame: function(f) {
		this.frame = f;
		this.time = 0;
		var tx = this.frame % this.raw.tilesx;
		var ty = this.frame / this.raw.tilesx | 0;
		this.tileX = tx * (1 / this.raw.tilesx);
		this.tileY = ty * (1 / this.raw.tilesy);
		if(this.frame >= this.action.end && this.action.start < this.action.end) {
			if(this.onActionComplete != null) {
				this.onActionComplete();
			}
			if(this.action.loop) {
				this.setFrame(this.action.start);
			} else {
				this.paused = true;
			}
		}
	}
	,__class__: iron_object_Tilesheet
};
var iron_object_Transform = function(object) {
	this.dscale = null;
	this.drot = null;
	this.dloc = null;
	this.boneParent = null;
	this.scaleWorld = 1.0;
	this.localOnly = false;
	this.object = object;
	this.reset();
};
$hxClasses["iron.object.Transform"] = iron_object_Transform;
iron_object_Transform.__name__ = "iron.object.Transform";
iron_object_Transform.prototype = {
	reset: function() {
		this.world = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.worldUnpack = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.local = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.loc = new iron_math_Vec4();
		this.rot = new iron_math_Quat();
		this.scale = new iron_math_Vec4(1.0,1.0,1.0);
		this.dim = new iron_math_Vec4(2.0,2.0,2.0);
		this.radius = 1.0;
		this.dirty = true;
	}
	,update: function() {
		if(this.dirty) {
			this.buildMatrix();
		}
	}
	,composeDelta: function() {
		var _this = this.dloc;
		var a = this.loc;
		var b = this.dloc;
		_this.x = a.x + b.x;
		_this.y = a.y + b.y;
		_this.z = a.z + b.z;
		var _this1 = this.dscale;
		var a1 = this.dscale;
		var b1 = this.scale;
		_this1.x = a1.x + b1.x;
		_this1.y = a1.y + b1.y;
		_this1.z = a1.z + b1.z;
		var _this2 = this.drot;
		var f = this._deulerX / 2;
		var c1 = Math.cos(f);
		var s1 = Math.sin(f);
		f = this._deulerY / 2;
		var c2 = Math.cos(f);
		var s2 = Math.sin(f);
		f = this._deulerZ / 2;
		var c3 = Math.cos(f);
		var s3 = Math.sin(f);
		_this2.x = s1 * c2 * c3 + c1 * s2 * s3;
		_this2.y = c1 * s2 * c3 + s1 * c2 * s3;
		_this2.z = c1 * c2 * s3 - s1 * s2 * c3;
		_this2.w = c1 * c2 * c3 - s1 * s2 * s3;
		var _this3 = this.drot;
		var q1 = this.rot;
		var q2 = this.drot;
		var q1x = q1.x;
		var q1y = q1.y;
		var q1z = q1.z;
		var q1w = q1.w;
		var q2x = q2.x;
		var q2y = q2.y;
		var q2z = q2.z;
		var q2w = q2.w;
		_this3.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;
		_this3.y = q1w * q2y - q1x * q2z + q1y * q2w + q1z * q2x;
		_this3.z = q1w * q2z + q1x * q2y - q1y * q2x + q1z * q2w;
		_this3.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
		var _this4 = this.local;
		var loc = this.dloc;
		var quat = this.drot;
		var sc = this.dscale;
		var x = quat.x;
		var y = quat.y;
		var z = quat.z;
		var w = quat.w;
		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;
		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this4.self._00 = 1.0 - (yy + zz);
		_this4.self._10 = xy - wz;
		_this4.self._20 = xz + wy;
		_this4.self._01 = xy + wz;
		_this4.self._11 = 1.0 - (xx + zz);
		_this4.self._21 = yz - wx;
		_this4.self._02 = xz - wy;
		_this4.self._12 = yz + wx;
		_this4.self._22 = 1.0 - (xx + yy);
		_this4.self._03 = 0.0;
		_this4.self._13 = 0.0;
		_this4.self._23 = 0.0;
		_this4.self._30 = 0.0;
		_this4.self._31 = 0.0;
		_this4.self._32 = 0.0;
		_this4.self._33 = 1.0;
		var x1 = sc.x;
		var y1 = sc.y;
		var z1 = sc.z;
		_this4.self._00 *= x1;
		_this4.self._01 *= x1;
		_this4.self._02 *= x1;
		_this4.self._03 *= x1;
		_this4.self._10 *= y1;
		_this4.self._11 *= y1;
		_this4.self._12 *= y1;
		_this4.self._13 *= y1;
		_this4.self._20 *= z1;
		_this4.self._21 *= z1;
		_this4.self._22 *= z1;
		_this4.self._23 *= z1;
		_this4.self._30 = loc.x;
		_this4.self._31 = loc.y;
		_this4.self._32 = loc.z;
	}
	,buildMatrix: function() {
		if(this.dloc == null) {
			var _this = this.local;
			var loc = this.loc;
			var quat = this.rot;
			var sc = this.scale;
			var x = quat.x;
			var y = quat.y;
			var z = quat.z;
			var w = quat.w;
			var x2 = x + x;
			var y2 = y + y;
			var z2 = z + z;
			var xx = x * x2;
			var xy = x * y2;
			var xz = x * z2;
			var yy = y * y2;
			var yz = y * z2;
			var zz = z * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			_this.self._00 = 1.0 - (yy + zz);
			_this.self._10 = xy - wz;
			_this.self._20 = xz + wy;
			_this.self._01 = xy + wz;
			_this.self._11 = 1.0 - (xx + zz);
			_this.self._21 = yz - wx;
			_this.self._02 = xz - wy;
			_this.self._12 = yz + wx;
			_this.self._22 = 1.0 - (xx + yy);
			_this.self._03 = 0.0;
			_this.self._13 = 0.0;
			_this.self._23 = 0.0;
			_this.self._30 = 0.0;
			_this.self._31 = 0.0;
			_this.self._32 = 0.0;
			_this.self._33 = 1.0;
			var x1 = sc.x;
			var y1 = sc.y;
			var z1 = sc.z;
			_this.self._00 *= x1;
			_this.self._01 *= x1;
			_this.self._02 *= x1;
			_this.self._03 *= x1;
			_this.self._10 *= y1;
			_this.self._11 *= y1;
			_this.self._12 *= y1;
			_this.self._13 *= y1;
			_this.self._20 *= z1;
			_this.self._21 *= z1;
			_this.self._22 *= z1;
			_this.self._23 *= z1;
			_this.self._30 = loc.x;
			_this.self._31 = loc.y;
			_this.self._32 = loc.z;
		} else {
			this.composeDelta();
		}
		if(this.boneParent != null) {
			var _this1 = this.local;
			var b = this.boneParent;
			var a = this.local;
			var a00 = a.self._00;
			var a01 = a.self._01;
			var a02 = a.self._02;
			var a03 = a.self._03;
			var a10 = a.self._10;
			var a11 = a.self._11;
			var a12 = a.self._12;
			var a13 = a.self._13;
			var a20 = a.self._20;
			var a21 = a.self._21;
			var a22 = a.self._22;
			var a23 = a.self._23;
			var a30 = a.self._30;
			var a31 = a.self._31;
			var a32 = a.self._32;
			var a33 = a.self._33;
			var b0 = b.self._00;
			var b1 = b.self._10;
			var b2 = b.self._20;
			var b3 = b.self._30;
			_this1.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this1.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this1.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this1.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._01;
			b1 = b.self._11;
			b2 = b.self._21;
			b3 = b.self._31;
			_this1.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this1.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this1.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this1.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._02;
			b1 = b.self._12;
			b2 = b.self._22;
			b3 = b.self._32;
			_this1.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this1.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this1.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this1.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._03;
			b1 = b.self._13;
			b2 = b.self._23;
			b3 = b.self._33;
			_this1.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this1.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this1.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this1.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		}
		if(this.object.parent != null && !this.localOnly) {
			var _this2 = this.world;
			var a1 = this.local;
			var b4 = this.object.parent.transform.world;
			var a001 = a1.self._00;
			var a011 = a1.self._01;
			var a021 = a1.self._02;
			var a031 = a1.self._03;
			var a101 = a1.self._10;
			var a111 = a1.self._11;
			var a121 = a1.self._12;
			var a131 = a1.self._13;
			var a201 = a1.self._20;
			var a211 = a1.self._21;
			var a221 = a1.self._22;
			var a231 = a1.self._23;
			var a301 = a1.self._30;
			var a311 = a1.self._31;
			var a321 = a1.self._32;
			var a331 = a1.self._33;
			var b01 = b4.self._00;
			var b11 = b4.self._10;
			var b21 = b4.self._20;
			var b31 = b4.self._30;
			_this2.self._00 = a001 * b01 + a011 * b11 + a021 * b21 + a031 * b31;
			_this2.self._10 = a101 * b01 + a111 * b11 + a121 * b21 + a131 * b31;
			_this2.self._20 = a201 * b01 + a211 * b11 + a221 * b21 + a231 * b31;
			_this2.self._30 = a301 * b01 + a311 * b11 + a321 * b21 + a331 * b31;
			b01 = b4.self._01;
			b11 = b4.self._11;
			b21 = b4.self._21;
			b31 = b4.self._31;
			_this2.self._01 = a001 * b01 + a011 * b11 + a021 * b21 + a031 * b31;
			_this2.self._11 = a101 * b01 + a111 * b11 + a121 * b21 + a131 * b31;
			_this2.self._21 = a201 * b01 + a211 * b11 + a221 * b21 + a231 * b31;
			_this2.self._31 = a301 * b01 + a311 * b11 + a321 * b21 + a331 * b31;
			b01 = b4.self._02;
			b11 = b4.self._12;
			b21 = b4.self._22;
			b31 = b4.self._32;
			_this2.self._02 = a001 * b01 + a011 * b11 + a021 * b21 + a031 * b31;
			_this2.self._12 = a101 * b01 + a111 * b11 + a121 * b21 + a131 * b31;
			_this2.self._22 = a201 * b01 + a211 * b11 + a221 * b21 + a231 * b31;
			_this2.self._32 = a301 * b01 + a311 * b11 + a321 * b21 + a331 * b31;
			_this2.self._03 = 0;
			_this2.self._13 = 0;
			_this2.self._23 = 0;
			_this2.self._33 = 1;
		} else {
			var _this3 = this.world;
			var m = this.local;
			_this3.self._00 = m.self._00;
			_this3.self._01 = m.self._01;
			_this3.self._02 = m.self._02;
			_this3.self._03 = m.self._03;
			_this3.self._10 = m.self._10;
			_this3.self._11 = m.self._11;
			_this3.self._12 = m.self._12;
			_this3.self._13 = m.self._13;
			_this3.self._20 = m.self._20;
			_this3.self._21 = m.self._21;
			_this3.self._22 = m.self._22;
			_this3.self._23 = m.self._23;
			_this3.self._30 = m.self._30;
			_this3.self._31 = m.self._31;
			_this3.self._32 = m.self._32;
			_this3.self._33 = m.self._33;
		}
		var _this4 = this.worldUnpack;
		var m1 = this.world;
		_this4.self._00 = m1.self._00;
		_this4.self._01 = m1.self._01;
		_this4.self._02 = m1.self._02;
		_this4.self._03 = m1.self._03;
		_this4.self._10 = m1.self._10;
		_this4.self._11 = m1.self._11;
		_this4.self._12 = m1.self._12;
		_this4.self._13 = m1.self._13;
		_this4.self._20 = m1.self._20;
		_this4.self._21 = m1.self._21;
		_this4.self._22 = m1.self._22;
		_this4.self._23 = m1.self._23;
		_this4.self._30 = m1.self._30;
		_this4.self._31 = m1.self._31;
		_this4.self._32 = m1.self._32;
		_this4.self._33 = m1.self._33;
		if(this.scaleWorld != 1.0) {
			this.worldUnpack.self._00 *= this.scaleWorld;
			this.worldUnpack.self._01 *= this.scaleWorld;
			this.worldUnpack.self._02 *= this.scaleWorld;
			this.worldUnpack.self._03 *= this.scaleWorld;
			this.worldUnpack.self._10 *= this.scaleWorld;
			this.worldUnpack.self._11 *= this.scaleWorld;
			this.worldUnpack.self._12 *= this.scaleWorld;
			this.worldUnpack.self._13 *= this.scaleWorld;
			this.worldUnpack.self._20 *= this.scaleWorld;
			this.worldUnpack.self._21 *= this.scaleWorld;
			this.worldUnpack.self._22 *= this.scaleWorld;
			this.worldUnpack.self._23 *= this.scaleWorld;
		}
		if(this.object.constraints != null) {
			var _g = 0;
			var _g1 = this.object.constraints;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.apply(this);
			}
		}
		this.computeDim();
		var _g2 = 0;
		var _g11 = this.object.children;
		while(_g2 < _g11.length) {
			var n = _g11[_g2];
			++_g2;
			n.transform.buildMatrix();
		}
		this.dirty = false;
	}
	,translate: function(x,y,z) {
		this.loc.x += x;
		this.loc.y += y;
		this.loc.z += z;
		this.buildMatrix();
	}
	,setMatrix: function(mat) {
		var _this = this.local;
		_this.self._00 = mat.self._00;
		_this.self._01 = mat.self._01;
		_this.self._02 = mat.self._02;
		_this.self._03 = mat.self._03;
		_this.self._10 = mat.self._10;
		_this.self._11 = mat.self._11;
		_this.self._12 = mat.self._12;
		_this.self._13 = mat.self._13;
		_this.self._20 = mat.self._20;
		_this.self._21 = mat.self._21;
		_this.self._22 = mat.self._22;
		_this.self._23 = mat.self._23;
		_this.self._30 = mat.self._30;
		_this.self._31 = mat.self._31;
		_this.self._32 = mat.self._32;
		_this.self._33 = mat.self._33;
		this.decompose();
		this.buildMatrix();
	}
	,decompose: function() {
		var _this = this.local;
		var loc = this.loc;
		var quat = this.rot;
		var scale = this.scale;
		loc.x = _this.self._30;
		loc.y = _this.self._31;
		loc.z = _this.self._32;
		var _this1 = iron_math_Mat4.helpVec;
		_this1.x = _this.self._00;
		_this1.y = _this.self._01;
		_this1.z = _this.self._02;
		_this1.w = 1.0;
		var _this2 = _this1;
		scale.x = Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y + _this2.z * _this2.z);
		var _this3 = iron_math_Mat4.helpVec;
		_this3.x = _this.self._10;
		_this3.y = _this.self._11;
		_this3.z = _this.self._12;
		_this3.w = 1.0;
		var _this4 = _this3;
		scale.y = Math.sqrt(_this4.x * _this4.x + _this4.y * _this4.y + _this4.z * _this4.z);
		var _this5 = iron_math_Mat4.helpVec;
		_this5.x = _this.self._20;
		_this5.y = _this.self._21;
		_this5.z = _this.self._22;
		_this5.w = 1.0;
		var _this6 = _this5;
		scale.z = Math.sqrt(_this6.x * _this6.x + _this6.y * _this6.y + _this6.z * _this6.z);
		var _this7 = _this.self;
		var m3 = _this7._12;
		var m4 = _this7._22;
		var m5 = _this7._32;
		var m6 = _this7._13;
		var m7 = _this7._23;
		var m8 = _this7._33;
		var c00 = _this7._11 * (m4 * m8 - m5 * m7) - _this7._21 * (m3 * m8 - m5 * m6) + _this7._31 * (m3 * m7 - m4 * m6);
		var m31 = _this7._12;
		var m41 = _this7._22;
		var m51 = _this7._32;
		var m61 = _this7._13;
		var m71 = _this7._23;
		var m81 = _this7._33;
		var c01 = _this7._10 * (m41 * m81 - m51 * m71) - _this7._20 * (m31 * m81 - m51 * m61) + _this7._30 * (m31 * m71 - m41 * m61);
		var m32 = _this7._11;
		var m42 = _this7._21;
		var m52 = _this7._31;
		var m62 = _this7._13;
		var m72 = _this7._23;
		var m82 = _this7._33;
		var c02 = _this7._10 * (m42 * m82 - m52 * m72) - _this7._20 * (m32 * m82 - m52 * m62) + _this7._30 * (m32 * m72 - m42 * m62);
		var m33 = _this7._11;
		var m43 = _this7._21;
		var m53 = _this7._31;
		var m63 = _this7._12;
		var m73 = _this7._22;
		var m83 = _this7._32;
		var c03 = _this7._10 * (m43 * m83 - m53 * m73) - _this7._20 * (m33 * m83 - m53 * m63) + _this7._30 * (m33 * m73 - m43 * m63);
		if(_this7._00 * c00 - _this7._01 * c01 + _this7._02 * c02 - _this7._03 * c03 < 0.0) {
			scale.x = -scale.x;
		}
		var invs = 1.0 / scale.x;
		iron_math_Mat4.helpMat.self._00 = _this.self._00 * invs;
		iron_math_Mat4.helpMat.self._01 = _this.self._01 * invs;
		iron_math_Mat4.helpMat.self._02 = _this.self._02 * invs;
		invs = 1.0 / scale.y;
		iron_math_Mat4.helpMat.self._10 = _this.self._10 * invs;
		iron_math_Mat4.helpMat.self._11 = _this.self._11 * invs;
		iron_math_Mat4.helpMat.self._12 = _this.self._12 * invs;
		invs = 1.0 / scale.z;
		iron_math_Mat4.helpMat.self._20 = _this.self._20 * invs;
		iron_math_Mat4.helpMat.self._21 = _this.self._21 * invs;
		iron_math_Mat4.helpMat.self._22 = _this.self._22 * invs;
		var m = iron_math_Mat4.helpMat;
		var m11 = m.self._00;
		var m12 = m.self._10;
		var m13 = m.self._20;
		var m21 = m.self._01;
		var m22 = m.self._11;
		var m23 = m.self._21;
		var m311 = m.self._02;
		var m321 = m.self._12;
		var m331 = m.self._22;
		var tr = m11 + m22 + m331;
		var s = 0.0;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			quat.w = 0.25 / s;
			quat.x = (m321 - m23) * s;
			quat.y = (m13 - m311) * s;
			quat.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m331) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
			quat.w = (m321 - m23) / s;
			quat.x = 0.25 * s;
			quat.y = (m12 + m21) / s;
			quat.z = (m13 + m311) / s;
		} else if(m22 > m331) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
			quat.w = (m13 - m311) / s;
			quat.x = (m12 + m21) / s;
			quat.y = 0.25 * s;
			quat.z = (m23 + m321) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
			quat.w = (m21 - m12) / s;
			quat.x = (m13 + m311) / s;
			quat.y = (m23 + m321) / s;
			quat.z = 0.25 * s;
		}
	}
	,rotate: function(axis,f) {
		var _this = iron_object_Transform.q;
		var s = Math.sin(f * 0.5);
		_this.x = axis.x * s;
		_this.y = axis.y * s;
		_this.z = axis.z * s;
		_this.w = Math.cos(f * 0.5);
		var l = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z + _this.w * _this.w);
		if(l == 0.0) {
			_this.x = 0;
			_this.y = 0;
			_this.z = 0;
			_this.w = 0;
		} else {
			l = 1.0 / l;
			_this.x *= l;
			_this.y *= l;
			_this.z *= l;
			_this.w *= l;
		}
		var _this1 = this.rot;
		var q1 = iron_object_Transform.q;
		var q2 = this.rot;
		var q1x = q1.x;
		var q1y = q1.y;
		var q1z = q1.z;
		var q1w = q1.w;
		var q2x = q2.x;
		var q2y = q2.y;
		var q2z = q2.z;
		var q2w = q2.w;
		_this1.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;
		_this1.y = q1w * q2y - q1x * q2z + q1y * q2w + q1z * q2x;
		_this1.z = q1w * q2z + q1x * q2y - q1y * q2x + q1z * q2w;
		_this1.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
		this.buildMatrix();
	}
	,move: function(axis,f) {
		if(f == null) {
			f = 1.0;
		}
		var _this = this.loc;
		_this.x += axis.x * f;
		_this.y += axis.y * f;
		_this.z += axis.z * f;
		this.buildMatrix();
	}
	,setRotation: function(x,y,z) {
		var _this = this.rot;
		var f = x / 2;
		var c1 = Math.cos(f);
		var s1 = Math.sin(f);
		f = y / 2;
		var c2 = Math.cos(f);
		var s2 = Math.sin(f);
		f = z / 2;
		var c3 = Math.cos(f);
		var s3 = Math.sin(f);
		_this.x = s1 * c2 * c3 + c1 * s2 * s3;
		_this.y = c1 * s2 * c3 + s1 * c2 * s3;
		_this.z = c1 * c2 * s3 - s1 * s2 * c3;
		_this.w = c1 * c2 * c3 - s1 * s2 * s3;
		this._eulerX = x;
		this._eulerY = y;
		this._eulerZ = z;
		this.dirty = true;
	}
	,computeRadius: function() {
		this.radius = Math.sqrt(this.dim.x * this.dim.x + this.dim.y * this.dim.y + this.dim.z * this.dim.z);
	}
	,computeDim: function() {
		if(this.object.raw == null) {
			this.computeRadius();
			return;
		}
		var d = this.object.raw.dimensions;
		if(d == null) {
			var _this = this.dim;
			_this.x = 2 * this.scale.x;
			_this.y = 2 * this.scale.y;
			_this.z = 2 * this.scale.z;
			_this.w = 1.0;
		} else {
			var _this1 = this.dim;
			var y = d[1] * this.scale.y;
			var z = d[2] * this.scale.z;
			_this1.x = d[0] * this.scale.x;
			_this1.y = y;
			_this1.z = z;
			_this1.w = 1.0;
		}
		this.computeRadius();
	}
	,applyParentInverse: function() {
		var pt = this.object.parent.transform;
		pt.buildMatrix();
		var _this = iron_object_Transform.temp;
		var m = pt.world;
		var a00 = m.self._00;
		var a01 = m.self._01;
		var a02 = m.self._02;
		var a03 = m.self._03;
		var a10 = m.self._10;
		var a11 = m.self._11;
		var a12 = m.self._12;
		var a13 = m.self._13;
		var a20 = m.self._20;
		var a21 = m.self._21;
		var a22 = m.self._22;
		var a23 = m.self._23;
		var a30 = m.self._30;
		var a31 = m.self._31;
		var a32 = m.self._32;
		var a33 = m.self._33;
		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			_this.self._00 = 1.0;
			_this.self._01 = 0.0;
			_this.self._02 = 0.0;
			_this.self._03 = 0.0;
			_this.self._10 = 0.0;
			_this.self._11 = 1.0;
			_this.self._12 = 0.0;
			_this.self._13 = 0.0;
			_this.self._20 = 0.0;
			_this.self._21 = 0.0;
			_this.self._22 = 1.0;
			_this.self._23 = 0.0;
			_this.self._30 = 0.0;
			_this.self._31 = 0.0;
			_this.self._32 = 0.0;
			_this.self._33 = 1.0;
		} else {
			det = 1.0 / det;
			_this.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
			_this.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
			_this.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
			_this.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
			_this.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
			_this.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
			_this.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
			_this.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
			_this.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
			_this.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
			_this.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
			_this.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
			_this.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
			_this.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
			_this.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
			_this.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
		}
		var _this1 = this.local;
		var m1 = iron_object_Transform.temp;
		var a001 = _this1.self._00;
		var a011 = _this1.self._01;
		var a021 = _this1.self._02;
		var a031 = _this1.self._03;
		var a101 = _this1.self._10;
		var a111 = _this1.self._11;
		var a121 = _this1.self._12;
		var a131 = _this1.self._13;
		var a201 = _this1.self._20;
		var a211 = _this1.self._21;
		var a221 = _this1.self._22;
		var a231 = _this1.self._23;
		var a301 = _this1.self._30;
		var a311 = _this1.self._31;
		var a321 = _this1.self._32;
		var a331 = _this1.self._33;
		var b0 = m1.self._00;
		var b1 = m1.self._10;
		var b2 = m1.self._20;
		var b3 = m1.self._30;
		_this1.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this1.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this1.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this1.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m1.self._01;
		b1 = m1.self._11;
		b2 = m1.self._21;
		b3 = m1.self._31;
		_this1.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this1.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this1.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this1.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m1.self._02;
		b1 = m1.self._12;
		b2 = m1.self._22;
		b3 = m1.self._32;
		_this1.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this1.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this1.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this1.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m1.self._03;
		b1 = m1.self._13;
		b2 = m1.self._23;
		b3 = m1.self._33;
		_this1.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this1.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this1.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this1.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		this.decompose();
		this.buildMatrix();
	}
	,__class__: iron_object_Transform
};
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = "kha.math.FastMatrix3";
kha_math_FastMatrix3.prototype = {
	__class__: kha_math_FastMatrix3
};
var iron_object_Uniforms = function() { };
$hxClasses["iron.object.Uniforms"] = iron_object_Uniforms;
iron_object_Uniforms.__name__ = "iron.object.Uniforms";
iron_object_Uniforms.setContextConstants = function(g,context,bindParams) {
	if(context.raw.constants != null) {
		var _g = 0;
		var _g1 = context.raw.constants.length;
		while(_g < _g1) {
			var i = _g++;
			var c = context.raw.constants[i];
			iron_object_Uniforms.setContextConstant(g,context.constants[i],c);
		}
	}
	if(bindParams != null) {
		var _g2 = 0;
		var _g11 = bindParams.length / 2 | 0;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var pos = i1 * 2;
			var rtID = bindParams[pos];
			var samplerID = bindParams[pos + 1];
			var attachDepth = false;
			var char = rtID.charAt(0);
			if(char == "_") {
				attachDepth = true;
				rtID = HxOverrides.substr(rtID,1,null);
			}
			var rt;
			if(attachDepth) {
				var _this = iron_RenderPath.active.depthToRenderTarget;
				rt = __map_reserved[rtID] != null ? _this.getReserved(rtID) : _this.h[rtID];
			} else {
				var _this1 = iron_RenderPath.active.renderTargets;
				rt = __map_reserved[rtID] != null ? _this1.getReserved(rtID) : _this1.h[rtID];
			}
			iron_object_Uniforms.bindRenderTarget(g,rt,context,samplerID,attachDepth);
		}
	}
	if(context.raw.texture_units != null) {
		var _g3 = 0;
		var _g12 = context.raw.texture_units.length;
		while(_g3 < _g12) {
			var j = _g3++;
			var tulink = context.raw.texture_units[j].link;
			if(tulink == null) {
				continue;
			}
			if(tulink.charAt(0) == "$") {
				var key = HxOverrides.substr(tulink,1,null);
				var _this2 = iron_Scene.active.embedded;
				g.setTexture(context.textureUnits[j],__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]);
				if(StringTools.endsWith(tulink,".raw")) {
					g.setTexture3DParameters(context.textureUnits[j],0,0,0,1,1,0);
				} else {
					g.setTextureParameters(context.textureUnits[j],0,0,1,1,0);
				}
			} else if(tulink == "_envmapRadiance") {
				var w = iron_Scene.active.world;
				if(w != null) {
					g.setTexture(context.textureUnits[j],w.probe.radiance);
					g.setTextureParameters(context.textureUnits[j],0,0,1,1,2);
				}
			} else if(tulink == "_envmap") {
				var w1 = iron_Scene.active.world;
				if(w1 != null) {
					g.setTexture(context.textureUnits[j],w1.envmap);
				}
			}
		}
	}
};
iron_object_Uniforms.setObjectConstants = function(g,context,object) {
	if(context.raw.constants != null) {
		var _g = 0;
		var _g1 = context.raw.constants.length;
		while(_g < _g1) {
			var i = _g++;
			var c = context.raw.constants[i];
			iron_object_Uniforms.setObjectConstant(g,object,context.constants[i],c);
		}
	}
	if(iron_object_Uniforms.externalTextureLinks != null) {
		if(context.raw.texture_units != null) {
			var _g2 = 0;
			var _g11 = context.raw.texture_units.length;
			while(_g2 < _g11) {
				var j = _g2++;
				var tulink = context.raw.texture_units[j].link;
				if(tulink == null) {
					continue;
				}
				var _g3 = 0;
				var _g12 = iron_object_Uniforms.externalTextureLinks;
				while(_g3 < _g12.length) {
					var f = _g12[_g3];
					++_g3;
					var image = f(object,iron_object_Uniforms.currentMat(object),tulink);
					if(image != null) {
						g.setTexture(context.textureUnits[j],image);
						break;
					}
				}
			}
		}
	}
};
iron_object_Uniforms.bindRenderTarget = function(g,rt,context,samplerID,attachDepth) {
	if(rt != null) {
		var tus = context.raw.texture_units;
		var _g = 0;
		var _g1 = tus.length;
		while(_g < _g1) {
			var j = _g++;
			if(samplerID == tus[j].name) {
				var isImage = tus[j].is_image != null && tus[j].is_image;
				var paramsSet = false;
				if(rt.raw.depth > 1) {
					g.setTexture3DParameters(context.textureUnits[j],2,2,2,1,2,2);
					paramsSet = true;
				}
				if(isImage) {
					g.setImageTexture(context.textureUnits[j],rt.image);
					g.setTexture3DParameters(context.textureUnits[j],2,2,2,1,0,2);
					paramsSet = true;
				} else if(rt.isCubeMap) {
					if(attachDepth) {
						g.setCubeMapDepth(context.textureUnits[j],rt.cubeMap);
					} else {
						g.setCubeMap(context.textureUnits[j],rt.cubeMap);
					}
				} else if(attachDepth) {
					g.setTextureDepth(context.textureUnits[j],rt.image);
				} else {
					g.setTexture(context.textureUnits[j],rt.image);
				}
				if(!paramsSet && rt.raw.mipmaps != null && rt.raw.mipmaps == true && !isImage) {
					g.setTextureParameters(context.textureUnits[j],2,2,1,1,2);
					paramsSet = true;
				}
				if(!paramsSet) {
					if(StringTools.startsWith(samplerID,"shadowMap")) {
						if(rt.isCubeMap) {
							g.setCubeMapCompareMode(context.textureUnits[j],true);
						} else {
							g.setTextureParameters(context.textureUnits[j],2,2,1,1,0);
							g.setTextureCompareMode(context.textureUnits[j],true);
						}
						paramsSet = true;
					} else if(attachDepth) {
						g.setTextureParameters(context.textureUnits[j],2,2,0,0,0);
						paramsSet = true;
					}
				}
				if(!paramsSet) {
					var oc = context.overrideContext;
					var allowParams = oc == null || oc.shared_sampler == null || oc.shared_sampler == samplerID;
					if(allowParams) {
						var addressing = oc != null && oc.addressing == "repeat" ? 0 : 2;
						var filter = oc != null && oc.filter == "point" ? 0 : iron_object_Uniforms.defaultFilter;
						g.setTextureParameters(context.textureUnits[j],addressing,addressing,filter,filter,0);
					}
					paramsSet = true;
				}
			}
		}
	}
};
iron_object_Uniforms.setContextConstant = function(g,location,c) {
	if(c.link == null) {
		return true;
	}
	var camera = iron_Scene.active.camera;
	var light = iron_RenderPath.active.light;
	if(c.type == "mat4") {
		var m = null;
		if(c.link == "_viewMatrix") {
			m = camera.V;
		} else if(c.link == "_transposeViewMatrix") {
			var _this = iron_object_Uniforms.helpMat;
			var m1 = camera.V;
			_this.self._00 = m1.self._00;
			_this.self._01 = m1.self._01;
			_this.self._02 = m1.self._02;
			_this.self._03 = m1.self._03;
			_this.self._10 = m1.self._10;
			_this.self._11 = m1.self._11;
			_this.self._12 = m1.self._12;
			_this.self._13 = m1.self._13;
			_this.self._20 = m1.self._20;
			_this.self._21 = m1.self._21;
			_this.self._22 = m1.self._22;
			_this.self._23 = m1.self._23;
			_this.self._30 = m1.self._30;
			_this.self._31 = m1.self._31;
			_this.self._32 = m1.self._32;
			_this.self._33 = m1.self._33;
			var _this1 = iron_object_Uniforms.helpMat;
			var f = _this1.self._01;
			_this1.self._01 = _this1.self._10;
			_this1.self._10 = f;
			f = _this1.self._02;
			_this1.self._02 = _this1.self._20;
			_this1.self._20 = f;
			f = _this1.self._12;
			_this1.self._12 = _this1.self._21;
			_this1.self._21 = f;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_projectionMatrix") {
			m = camera.P;
		} else if(c.link == "_inverseProjectionMatrix") {
			var _this2 = iron_object_Uniforms.helpMat;
			var m2 = camera.P;
			var a00 = m2.self._00;
			var a01 = m2.self._01;
			var a02 = m2.self._02;
			var a03 = m2.self._03;
			var a10 = m2.self._10;
			var a11 = m2.self._11;
			var a12 = m2.self._12;
			var a13 = m2.self._13;
			var a20 = m2.self._20;
			var a21 = m2.self._21;
			var a22 = m2.self._22;
			var a23 = m2.self._23;
			var a30 = m2.self._30;
			var a31 = m2.self._31;
			var a32 = m2.self._32;
			var a33 = m2.self._33;
			var b00 = a00 * a11 - a01 * a10;
			var b01 = a00 * a12 - a02 * a10;
			var b02 = a00 * a13 - a03 * a10;
			var b03 = a01 * a12 - a02 * a11;
			var b04 = a01 * a13 - a03 * a11;
			var b05 = a02 * a13 - a03 * a12;
			var b06 = a20 * a31 - a21 * a30;
			var b07 = a20 * a32 - a22 * a30;
			var b08 = a20 * a33 - a23 * a30;
			var b09 = a21 * a32 - a22 * a31;
			var b10 = a21 * a33 - a23 * a31;
			var b11 = a22 * a33 - a23 * a32;
			var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
			if(det == 0.0) {
				_this2.self._00 = 1.0;
				_this2.self._01 = 0.0;
				_this2.self._02 = 0.0;
				_this2.self._03 = 0.0;
				_this2.self._10 = 0.0;
				_this2.self._11 = 1.0;
				_this2.self._12 = 0.0;
				_this2.self._13 = 0.0;
				_this2.self._20 = 0.0;
				_this2.self._21 = 0.0;
				_this2.self._22 = 1.0;
				_this2.self._23 = 0.0;
				_this2.self._30 = 0.0;
				_this2.self._31 = 0.0;
				_this2.self._32 = 0.0;
				_this2.self._33 = 1.0;
			} else {
				det = 1.0 / det;
				_this2.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
				_this2.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
				_this2.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
				_this2.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
				_this2.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
				_this2.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
				_this2.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
				_this2.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
				_this2.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
				_this2.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
				_this2.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
				_this2.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
				_this2.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
				_this2.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
				_this2.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
				_this2.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
			}
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_inverseViewProjectionMatrix") {
			var _this3 = iron_object_Uniforms.helpMat;
			var m3 = camera.V;
			_this3.self._00 = m3.self._00;
			_this3.self._01 = m3.self._01;
			_this3.self._02 = m3.self._02;
			_this3.self._03 = m3.self._03;
			_this3.self._10 = m3.self._10;
			_this3.self._11 = m3.self._11;
			_this3.self._12 = m3.self._12;
			_this3.self._13 = m3.self._13;
			_this3.self._20 = m3.self._20;
			_this3.self._21 = m3.self._21;
			_this3.self._22 = m3.self._22;
			_this3.self._23 = m3.self._23;
			_this3.self._30 = m3.self._30;
			_this3.self._31 = m3.self._31;
			_this3.self._32 = m3.self._32;
			_this3.self._33 = m3.self._33;
			var _this4 = iron_object_Uniforms.helpMat;
			var m4 = camera.P;
			var a001 = _this4.self._00;
			var a011 = _this4.self._01;
			var a021 = _this4.self._02;
			var a031 = _this4.self._03;
			var a101 = _this4.self._10;
			var a111 = _this4.self._11;
			var a121 = _this4.self._12;
			var a131 = _this4.self._13;
			var a201 = _this4.self._20;
			var a211 = _this4.self._21;
			var a221 = _this4.self._22;
			var a231 = _this4.self._23;
			var a301 = _this4.self._30;
			var a311 = _this4.self._31;
			var a321 = _this4.self._32;
			var a331 = _this4.self._33;
			var b0 = m4.self._00;
			var b1 = m4.self._10;
			var b2 = m4.self._20;
			var b3 = m4.self._30;
			_this4.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this4.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this4.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this4.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m4.self._01;
			b1 = m4.self._11;
			b2 = m4.self._21;
			b3 = m4.self._31;
			_this4.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this4.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this4.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this4.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m4.self._02;
			b1 = m4.self._12;
			b2 = m4.self._22;
			b3 = m4.self._32;
			_this4.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this4.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this4.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this4.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m4.self._03;
			b1 = m4.self._13;
			b2 = m4.self._23;
			b3 = m4.self._33;
			_this4.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this4.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this4.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this4.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			var _this5 = iron_object_Uniforms.helpMat;
			var m5 = iron_object_Uniforms.helpMat;
			var a002 = m5.self._00;
			var a012 = m5.self._01;
			var a022 = m5.self._02;
			var a032 = m5.self._03;
			var a102 = m5.self._10;
			var a112 = m5.self._11;
			var a122 = m5.self._12;
			var a132 = m5.self._13;
			var a202 = m5.self._20;
			var a212 = m5.self._21;
			var a222 = m5.self._22;
			var a232 = m5.self._23;
			var a302 = m5.self._30;
			var a312 = m5.self._31;
			var a322 = m5.self._32;
			var a332 = m5.self._33;
			var b001 = a002 * a112 - a012 * a102;
			var b011 = a002 * a122 - a022 * a102;
			var b021 = a002 * a132 - a032 * a102;
			var b031 = a012 * a122 - a022 * a112;
			var b041 = a012 * a132 - a032 * a112;
			var b051 = a022 * a132 - a032 * a122;
			var b061 = a202 * a312 - a212 * a302;
			var b071 = a202 * a322 - a222 * a302;
			var b081 = a202 * a332 - a232 * a302;
			var b091 = a212 * a322 - a222 * a312;
			var b101 = a212 * a332 - a232 * a312;
			var b111 = a222 * a332 - a232 * a322;
			var det1 = b001 * b111 - b011 * b101 + b021 * b091 + b031 * b081 - b041 * b071 + b051 * b061;
			if(det1 == 0.0) {
				_this5.self._00 = 1.0;
				_this5.self._01 = 0.0;
				_this5.self._02 = 0.0;
				_this5.self._03 = 0.0;
				_this5.self._10 = 0.0;
				_this5.self._11 = 1.0;
				_this5.self._12 = 0.0;
				_this5.self._13 = 0.0;
				_this5.self._20 = 0.0;
				_this5.self._21 = 0.0;
				_this5.self._22 = 1.0;
				_this5.self._23 = 0.0;
				_this5.self._30 = 0.0;
				_this5.self._31 = 0.0;
				_this5.self._32 = 0.0;
				_this5.self._33 = 1.0;
			} else {
				det1 = 1.0 / det1;
				_this5.self._00 = (a112 * b111 - a122 * b101 + a132 * b091) * det1;
				_this5.self._01 = (a022 * b101 - a012 * b111 - a032 * b091) * det1;
				_this5.self._02 = (a312 * b051 - a322 * b041 + a332 * b031) * det1;
				_this5.self._03 = (a222 * b041 - a212 * b051 - a232 * b031) * det1;
				_this5.self._10 = (a122 * b081 - a102 * b111 - a132 * b071) * det1;
				_this5.self._11 = (a002 * b111 - a022 * b081 + a032 * b071) * det1;
				_this5.self._12 = (a322 * b021 - a302 * b051 - a332 * b011) * det1;
				_this5.self._13 = (a202 * b051 - a222 * b021 + a232 * b011) * det1;
				_this5.self._20 = (a102 * b101 - a112 * b081 + a132 * b061) * det1;
				_this5.self._21 = (a012 * b081 - a002 * b101 - a032 * b061) * det1;
				_this5.self._22 = (a302 * b041 - a312 * b021 + a332 * b001) * det1;
				_this5.self._23 = (a212 * b021 - a202 * b041 - a232 * b001) * det1;
				_this5.self._30 = (a112 * b071 - a102 * b091 - a122 * b061) * det1;
				_this5.self._31 = (a002 * b091 - a012 * b071 + a022 * b061) * det1;
				_this5.self._32 = (a312 * b011 - a302 * b031 - a322 * b001) * det1;
				_this5.self._33 = (a202 * b031 - a212 * b011 + a222 * b001) * det1;
			}
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_viewProjectionMatrix") {
			m = camera.VP;
		} else if(c.link == "_prevViewProjectionMatrix") {
			var _this6 = iron_object_Uniforms.helpMat;
			var m6 = camera.prevV;
			_this6.self._00 = m6.self._00;
			_this6.self._01 = m6.self._01;
			_this6.self._02 = m6.self._02;
			_this6.self._03 = m6.self._03;
			_this6.self._10 = m6.self._10;
			_this6.self._11 = m6.self._11;
			_this6.self._12 = m6.self._12;
			_this6.self._13 = m6.self._13;
			_this6.self._20 = m6.self._20;
			_this6.self._21 = m6.self._21;
			_this6.self._22 = m6.self._22;
			_this6.self._23 = m6.self._23;
			_this6.self._30 = m6.self._30;
			_this6.self._31 = m6.self._31;
			_this6.self._32 = m6.self._32;
			_this6.self._33 = m6.self._33;
			var _this7 = iron_object_Uniforms.helpMat;
			var m7 = camera.P;
			var a003 = _this7.self._00;
			var a013 = _this7.self._01;
			var a023 = _this7.self._02;
			var a033 = _this7.self._03;
			var a103 = _this7.self._10;
			var a113 = _this7.self._11;
			var a123 = _this7.self._12;
			var a133 = _this7.self._13;
			var a203 = _this7.self._20;
			var a213 = _this7.self._21;
			var a223 = _this7.self._22;
			var a233 = _this7.self._23;
			var a303 = _this7.self._30;
			var a313 = _this7.self._31;
			var a323 = _this7.self._32;
			var a333 = _this7.self._33;
			var b010 = m7.self._00;
			var b12 = m7.self._10;
			var b21 = m7.self._20;
			var b31 = m7.self._30;
			_this7.self._00 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
			_this7.self._10 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
			_this7.self._20 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
			_this7.self._30 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
			b010 = m7.self._01;
			b12 = m7.self._11;
			b21 = m7.self._21;
			b31 = m7.self._31;
			_this7.self._01 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
			_this7.self._11 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
			_this7.self._21 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
			_this7.self._31 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
			b010 = m7.self._02;
			b12 = m7.self._12;
			b21 = m7.self._22;
			b31 = m7.self._32;
			_this7.self._02 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
			_this7.self._12 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
			_this7.self._22 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
			_this7.self._32 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
			b010 = m7.self._03;
			b12 = m7.self._13;
			b21 = m7.self._23;
			b31 = m7.self._33;
			_this7.self._03 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
			_this7.self._13 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
			_this7.self._23 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
			_this7.self._33 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_lightViewProjectionMatrix") {
			if(light != null) {
				m = light.VP;
			}
		} else if(c.link == "_biasLightViewProjectionMatrix") {
			if(light != null) {
				var _this8 = iron_object_Uniforms.helpMat;
				var m8 = light.VP;
				_this8.self._00 = m8.self._00;
				_this8.self._01 = m8.self._01;
				_this8.self._02 = m8.self._02;
				_this8.self._03 = m8.self._03;
				_this8.self._10 = m8.self._10;
				_this8.self._11 = m8.self._11;
				_this8.self._12 = m8.self._12;
				_this8.self._13 = m8.self._13;
				_this8.self._20 = m8.self._20;
				_this8.self._21 = m8.self._21;
				_this8.self._22 = m8.self._22;
				_this8.self._23 = m8.self._23;
				_this8.self._30 = m8.self._30;
				_this8.self._31 = m8.self._31;
				_this8.self._32 = m8.self._32;
				_this8.self._33 = m8.self._33;
				var _this9 = iron_object_Uniforms.helpMat;
				var m9 = iron_object_Uniforms.biasMat;
				var a004 = _this9.self._00;
				var a014 = _this9.self._01;
				var a024 = _this9.self._02;
				var a034 = _this9.self._03;
				var a104 = _this9.self._10;
				var a114 = _this9.self._11;
				var a124 = _this9.self._12;
				var a134 = _this9.self._13;
				var a204 = _this9.self._20;
				var a214 = _this9.self._21;
				var a224 = _this9.self._22;
				var a234 = _this9.self._23;
				var a304 = _this9.self._30;
				var a314 = _this9.self._31;
				var a324 = _this9.self._32;
				var a334 = _this9.self._33;
				var b012 = m9.self._00;
				var b13 = m9.self._10;
				var b22 = m9.self._20;
				var b32 = m9.self._30;
				_this9.self._00 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				_this9.self._10 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				_this9.self._20 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				_this9.self._30 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m9.self._01;
				b13 = m9.self._11;
				b22 = m9.self._21;
				b32 = m9.self._31;
				_this9.self._01 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				_this9.self._11 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				_this9.self._21 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				_this9.self._31 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m9.self._02;
				b13 = m9.self._12;
				b22 = m9.self._22;
				b32 = m9.self._32;
				_this9.self._02 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				_this9.self._12 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				_this9.self._22 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				_this9.self._32 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m9.self._03;
				b13 = m9.self._13;
				b22 = m9.self._23;
				b32 = m9.self._33;
				_this9.self._03 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				_this9.self._13 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				_this9.self._23 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				_this9.self._33 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_skydomeMatrix") {
			var tr = camera.transform;
			var _this10 = iron_object_Uniforms.helpVec;
			_this10.x = tr.world.self._30;
			_this10.y = tr.world.self._31;
			_this10.z = tr.world.self._32 - 3.5;
			_this10.w = 1.0;
			var bounds = camera.data.raw.far_plane * 0.95;
			var _this11 = iron_object_Uniforms.helpVec2;
			_this11.x = bounds;
			_this11.y = bounds;
			_this11.z = bounds;
			_this11.w = 1.0;
			var _this12 = iron_object_Uniforms.helpMat;
			var loc = iron_object_Uniforms.helpVec;
			var quat = iron_object_Uniforms.helpQuat;
			var sc = iron_object_Uniforms.helpVec2;
			var x = quat.x;
			var y = quat.y;
			var z = quat.z;
			var w = quat.w;
			var x2 = x + x;
			var y2 = y + y;
			var z2 = z + z;
			var xx = x * x2;
			var xy = x * y2;
			var xz = x * z2;
			var yy = y * y2;
			var yz = y * z2;
			var zz = z * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			_this12.self._00 = 1.0 - (yy + zz);
			_this12.self._10 = xy - wz;
			_this12.self._20 = xz + wy;
			_this12.self._01 = xy + wz;
			_this12.self._11 = 1.0 - (xx + zz);
			_this12.self._21 = yz - wx;
			_this12.self._02 = xz - wy;
			_this12.self._12 = yz + wx;
			_this12.self._22 = 1.0 - (xx + yy);
			_this12.self._03 = 0.0;
			_this12.self._13 = 0.0;
			_this12.self._23 = 0.0;
			_this12.self._30 = 0.0;
			_this12.self._31 = 0.0;
			_this12.self._32 = 0.0;
			_this12.self._33 = 1.0;
			var x1 = sc.x;
			var y1 = sc.y;
			var z1 = sc.z;
			_this12.self._00 *= x1;
			_this12.self._01 *= x1;
			_this12.self._02 *= x1;
			_this12.self._03 *= x1;
			_this12.self._10 *= y1;
			_this12.self._11 *= y1;
			_this12.self._12 *= y1;
			_this12.self._13 *= y1;
			_this12.self._20 *= z1;
			_this12.self._21 *= z1;
			_this12.self._22 *= z1;
			_this12.self._23 *= z1;
			_this12.self._30 = loc.x;
			_this12.self._31 = loc.y;
			_this12.self._32 = loc.z;
			var _this13 = iron_object_Uniforms.helpMat;
			var m10 = camera.V;
			var a005 = _this13.self._00;
			var a015 = _this13.self._01;
			var a025 = _this13.self._02;
			var a035 = _this13.self._03;
			var a105 = _this13.self._10;
			var a115 = _this13.self._11;
			var a125 = _this13.self._12;
			var a135 = _this13.self._13;
			var a205 = _this13.self._20;
			var a215 = _this13.self._21;
			var a225 = _this13.self._22;
			var a235 = _this13.self._23;
			var a305 = _this13.self._30;
			var a315 = _this13.self._31;
			var a325 = _this13.self._32;
			var a335 = _this13.self._33;
			var b013 = m10.self._00;
			var b14 = m10.self._10;
			var b23 = m10.self._20;
			var b33 = m10.self._30;
			_this13.self._00 = a005 * b013 + a015 * b14 + a025 * b23 + a035 * b33;
			_this13.self._10 = a105 * b013 + a115 * b14 + a125 * b23 + a135 * b33;
			_this13.self._20 = a205 * b013 + a215 * b14 + a225 * b23 + a235 * b33;
			_this13.self._30 = a305 * b013 + a315 * b14 + a325 * b23 + a335 * b33;
			b013 = m10.self._01;
			b14 = m10.self._11;
			b23 = m10.self._21;
			b33 = m10.self._31;
			_this13.self._01 = a005 * b013 + a015 * b14 + a025 * b23 + a035 * b33;
			_this13.self._11 = a105 * b013 + a115 * b14 + a125 * b23 + a135 * b33;
			_this13.self._21 = a205 * b013 + a215 * b14 + a225 * b23 + a235 * b33;
			_this13.self._31 = a305 * b013 + a315 * b14 + a325 * b23 + a335 * b33;
			b013 = m10.self._02;
			b14 = m10.self._12;
			b23 = m10.self._22;
			b33 = m10.self._32;
			_this13.self._02 = a005 * b013 + a015 * b14 + a025 * b23 + a035 * b33;
			_this13.self._12 = a105 * b013 + a115 * b14 + a125 * b23 + a135 * b33;
			_this13.self._22 = a205 * b013 + a215 * b14 + a225 * b23 + a235 * b33;
			_this13.self._32 = a305 * b013 + a315 * b14 + a325 * b23 + a335 * b33;
			b013 = m10.self._03;
			b14 = m10.self._13;
			b23 = m10.self._23;
			b33 = m10.self._33;
			_this13.self._03 = a005 * b013 + a015 * b14 + a025 * b23 + a035 * b33;
			_this13.self._13 = a105 * b013 + a115 * b14 + a125 * b23 + a135 * b33;
			_this13.self._23 = a205 * b013 + a215 * b14 + a225 * b23 + a235 * b33;
			_this13.self._33 = a305 * b013 + a315 * b14 + a325 * b23 + a335 * b33;
			var _this14 = iron_object_Uniforms.helpMat;
			var m11 = camera.P;
			var a006 = _this14.self._00;
			var a016 = _this14.self._01;
			var a026 = _this14.self._02;
			var a036 = _this14.self._03;
			var a106 = _this14.self._10;
			var a116 = _this14.self._11;
			var a126 = _this14.self._12;
			var a136 = _this14.self._13;
			var a206 = _this14.self._20;
			var a216 = _this14.self._21;
			var a226 = _this14.self._22;
			var a236 = _this14.self._23;
			var a306 = _this14.self._30;
			var a316 = _this14.self._31;
			var a326 = _this14.self._32;
			var a336 = _this14.self._33;
			var b014 = m11.self._00;
			var b15 = m11.self._10;
			var b24 = m11.self._20;
			var b34 = m11.self._30;
			_this14.self._00 = a006 * b014 + a016 * b15 + a026 * b24 + a036 * b34;
			_this14.self._10 = a106 * b014 + a116 * b15 + a126 * b24 + a136 * b34;
			_this14.self._20 = a206 * b014 + a216 * b15 + a226 * b24 + a236 * b34;
			_this14.self._30 = a306 * b014 + a316 * b15 + a326 * b24 + a336 * b34;
			b014 = m11.self._01;
			b15 = m11.self._11;
			b24 = m11.self._21;
			b34 = m11.self._31;
			_this14.self._01 = a006 * b014 + a016 * b15 + a026 * b24 + a036 * b34;
			_this14.self._11 = a106 * b014 + a116 * b15 + a126 * b24 + a136 * b34;
			_this14.self._21 = a206 * b014 + a216 * b15 + a226 * b24 + a236 * b34;
			_this14.self._31 = a306 * b014 + a316 * b15 + a326 * b24 + a336 * b34;
			b014 = m11.self._02;
			b15 = m11.self._12;
			b24 = m11.self._22;
			b34 = m11.self._32;
			_this14.self._02 = a006 * b014 + a016 * b15 + a026 * b24 + a036 * b34;
			_this14.self._12 = a106 * b014 + a116 * b15 + a126 * b24 + a136 * b34;
			_this14.self._22 = a206 * b014 + a216 * b15 + a226 * b24 + a236 * b34;
			_this14.self._32 = a306 * b014 + a316 * b15 + a326 * b24 + a336 * b34;
			b014 = m11.self._03;
			b15 = m11.self._13;
			b24 = m11.self._23;
			b34 = m11.self._33;
			_this14.self._03 = a006 * b014 + a016 * b15 + a026 * b24 + a036 * b34;
			_this14.self._13 = a106 * b014 + a116 * b15 + a126 * b24 + a136 * b34;
			_this14.self._23 = a206 * b014 + a216 * b15 + a226 * b24 + a236 * b34;
			_this14.self._33 = a306 * b014 + a316 * b15 + a326 * b24 + a336 * b34;
			m = iron_object_Uniforms.helpMat;
		}
		if(m != null) {
			g.setMatrix(location,m.self);
			return true;
		}
	} else if(c.type == "vec4") {
		var v = null;
		var _this15 = iron_object_Uniforms.helpVec;
		_this15.x = 0;
		_this15.y = 0;
		_this15.z = 0;
		_this15.w = 1.0;
		if(v != null) {
			g.setFloat4(location,v.x,v.y,v.z,v.w);
			return true;
		}
	} else if(c.type == "vec3") {
		var v1 = null;
		var _this16 = iron_object_Uniforms.helpVec;
		_this16.x = 0;
		_this16.y = 0;
		_this16.z = 0;
		_this16.w = 1.0;
		if(c.link == "_lightPosition") {
			if(light != null) {
				var _this17 = iron_object_Uniforms.helpVec;
				_this17.x = light.transform.world.self._30;
				_this17.y = light.transform.world.self._31;
				_this17.z = light.transform.world.self._32;
				_this17.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lightDirection") {
			if(light != null) {
				var _this18 = new iron_math_Vec4(light.V.self._02,light.V.self._12,light.V.self._22);
				var n = Math.sqrt(_this18.x * _this18.x + _this18.y * _this18.y + _this18.z * _this18.z);
				if(n > 0.0) {
					var invN = 1.0 / n;
					_this18.x *= invN;
					_this18.y *= invN;
					_this18.z *= invN;
				}
				iron_object_Uniforms.helpVec = _this18;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_sunDirection") {
			var sun = iron_RenderPath.active.sun;
			if(sun != null) {
				var _this19 = new iron_math_Vec4(sun.V.self._02,sun.V.self._12,sun.V.self._22);
				var n1 = Math.sqrt(_this19.x * _this19.x + _this19.y * _this19.y + _this19.z * _this19.z);
				if(n1 > 0.0) {
					var invN1 = 1.0 / n1;
					_this19.x *= invN1;
					_this19.y *= invN1;
					_this19.z *= invN1;
				}
				iron_object_Uniforms.helpVec = _this19;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_sunColor") {
			var sun1 = iron_RenderPath.active.sun;
			if(sun1 != null) {
				var str = sun1.visible ? sun1.data.raw.strength : 0.0;
				var _this20 = iron_object_Uniforms.helpVec;
				var y3 = sun1.data.raw.color[1] * str;
				var z3 = sun1.data.raw.color[2] * str;
				_this20.x = sun1.data.raw.color[0] * str;
				_this20.y = y3;
				_this20.z = z3;
				_this20.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_pointPosition") {
			var point = iron_RenderPath.active.point;
			if(point != null) {
				var _this21 = iron_object_Uniforms.helpVec;
				_this21.x = point.transform.world.self._30;
				_this21.y = point.transform.world.self._31;
				_this21.z = point.transform.world.self._32;
				_this21.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_spotDirection") {
			var point1 = iron_RenderPath.active.point;
			if(point1 != null) {
				var _this22 = new iron_math_Vec4(point1.V.self._02,point1.V.self._12,point1.V.self._22);
				var n2 = Math.sqrt(_this22.x * _this22.x + _this22.y * _this22.y + _this22.z * _this22.z);
				if(n2 > 0.0) {
					var invN2 = 1.0 / n2;
					_this22.x *= invN2;
					_this22.y *= invN2;
					_this22.z *= invN2;
				}
				iron_object_Uniforms.helpVec = _this22;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_pointColor") {
			var point2 = iron_RenderPath.active.point;
			if(point2 != null) {
				var str1 = point2.visible ? point2.data.raw.strength : 0.0;
				var _this23 = iron_object_Uniforms.helpVec;
				var y4 = point2.data.raw.color[1] * str1;
				var z4 = point2.data.raw.color[2] * str1;
				_this23.x = point2.data.raw.color[0] * str1;
				_this23.y = y4;
				_this23.z = z4;
				_this23.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lightArea0") {
			if(light != null && light.data.raw.size != null) {
				var f2 = 0.5;
				var sx = light.data.raw.size * f2;
				var sy = light.data.raw.size_y * f2;
				var _this24 = iron_object_Uniforms.helpVec;
				_this24.x = -sx;
				_this24.y = sy;
				_this24.z = 0.0;
				_this24.w = 1.0;
				var _this25 = iron_object_Uniforms.helpVec;
				var m12 = light.transform.world;
				var x3 = _this25.x;
				var y5 = _this25.y;
				var z5 = _this25.z;
				_this25.x = m12.self._00 * x3 + m12.self._10 * y5 + m12.self._20 * z5 + m12.self._30;
				_this25.y = m12.self._01 * x3 + m12.self._11 * y5 + m12.self._21 * z5 + m12.self._31;
				_this25.z = m12.self._02 * x3 + m12.self._12 * y5 + m12.self._22 * z5 + m12.self._32;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lightArea1") {
			if(light != null && light.data.raw.size != null) {
				var f21 = 0.5;
				var sx1 = light.data.raw.size * f21;
				var sy1 = light.data.raw.size_y * f21;
				var _this26 = iron_object_Uniforms.helpVec;
				_this26.x = sx1;
				_this26.y = sy1;
				_this26.z = 0.0;
				_this26.w = 1.0;
				var _this27 = iron_object_Uniforms.helpVec;
				var m13 = light.transform.world;
				var x4 = _this27.x;
				var y6 = _this27.y;
				var z6 = _this27.z;
				_this27.x = m13.self._00 * x4 + m13.self._10 * y6 + m13.self._20 * z6 + m13.self._30;
				_this27.y = m13.self._01 * x4 + m13.self._11 * y6 + m13.self._21 * z6 + m13.self._31;
				_this27.z = m13.self._02 * x4 + m13.self._12 * y6 + m13.self._22 * z6 + m13.self._32;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lightArea2") {
			if(light != null && light.data.raw.size != null) {
				var f22 = 0.5;
				var sx2 = light.data.raw.size * f22;
				var sy2 = light.data.raw.size_y * f22;
				var _this28 = iron_object_Uniforms.helpVec;
				_this28.x = sx2;
				_this28.y = -sy2;
				_this28.z = 0.0;
				_this28.w = 1.0;
				var _this29 = iron_object_Uniforms.helpVec;
				var m14 = light.transform.world;
				var x5 = _this29.x;
				var y7 = _this29.y;
				var z7 = _this29.z;
				_this29.x = m14.self._00 * x5 + m14.self._10 * y7 + m14.self._20 * z7 + m14.self._30;
				_this29.y = m14.self._01 * x5 + m14.self._11 * y7 + m14.self._21 * z7 + m14.self._31;
				_this29.z = m14.self._02 * x5 + m14.self._12 * y7 + m14.self._22 * z7 + m14.self._32;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lightArea3") {
			if(light != null && light.data.raw.size != null) {
				var f23 = 0.5;
				var sx3 = light.data.raw.size * f23;
				var sy3 = light.data.raw.size_y * f23;
				var _this30 = iron_object_Uniforms.helpVec;
				_this30.x = -sx3;
				_this30.y = -sy3;
				_this30.z = 0.0;
				_this30.w = 1.0;
				var _this31 = iron_object_Uniforms.helpVec;
				var m15 = light.transform.world;
				var x6 = _this31.x;
				var y8 = _this31.y;
				var z8 = _this31.z;
				_this31.x = m15.self._00 * x6 + m15.self._10 * y8 + m15.self._20 * z8 + m15.self._30;
				_this31.y = m15.self._01 * x6 + m15.self._11 * y8 + m15.self._21 * z8 + m15.self._31;
				_this31.z = m15.self._02 * x6 + m15.self._12 * y8 + m15.self._22 * z8 + m15.self._32;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_cameraPosition") {
			var _this32 = iron_object_Uniforms.helpVec;
			_this32.x = camera.transform.world.self._30;
			_this32.y = camera.transform.world.self._31;
			_this32.z = camera.transform.world.self._32;
			_this32.w = 1.0;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_cameraLook") {
			var _this33 = new iron_math_Vec4(-camera.transform.world.self._20,-camera.transform.world.self._21,-camera.transform.world.self._22);
			var n3 = Math.sqrt(_this33.x * _this33.x + _this33.y * _this33.y + _this33.z * _this33.z);
			if(n3 > 0.0) {
				var invN3 = 1.0 / n3;
				_this33.x *= invN3;
				_this33.y *= invN3;
				_this33.z *= invN3;
			}
			iron_object_Uniforms.helpVec = _this33;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_cameraUp") {
			var _this34 = new iron_math_Vec4(camera.transform.world.self._10,camera.transform.world.self._11,camera.transform.world.self._12);
			var n4 = Math.sqrt(_this34.x * _this34.x + _this34.y * _this34.y + _this34.z * _this34.z);
			if(n4 > 0.0) {
				var invN4 = 1.0 / n4;
				_this34.x *= invN4;
				_this34.y *= invN4;
				_this34.z *= invN4;
			}
			iron_object_Uniforms.helpVec = _this34;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_cameraRight") {
			var _this35 = new iron_math_Vec4(camera.transform.world.self._00,camera.transform.world.self._01,camera.transform.world.self._02);
			var n5 = Math.sqrt(_this35.x * _this35.x + _this35.y * _this35.y + _this35.z * _this35.z);
			if(n5 > 0.0) {
				var invN5 = 1.0 / n5;
				_this35.x *= invN5;
				_this35.y *= invN5;
				_this35.z *= invN5;
			}
			iron_object_Uniforms.helpVec = _this35;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_backgroundCol") {
			if(camera.data.raw.clear_color != null) {
				var _this36 = iron_object_Uniforms.helpVec;
				var y9 = camera.data.raw.clear_color[1];
				var z9 = camera.data.raw.clear_color[2];
				_this36.x = camera.data.raw.clear_color[0];
				_this36.y = y9;
				_this36.z = z9;
				_this36.w = 1.0;
			}
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_hosekSunDirection") {
			var w1 = iron_Scene.active.world;
			if(w1 != null) {
				var _this37 = iron_object_Uniforms.helpVec;
				var y10 = w1.raw.sun_direction[1];
				var z10 = w1.raw.sun_direction[2] > 0 ? w1.raw.sun_direction[2] : 0;
				_this37.x = w1.raw.sun_direction[0];
				_this37.y = y10;
				_this37.z = z10;
				_this37.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		}
		if(v1 != null) {
			g.setFloat3(location,v1.x,v1.y,v1.z);
			return true;
		}
	} else if(c.type == "vec2") {
		var v2 = null;
		var _this38 = iron_object_Uniforms.helpVec;
		_this38.x = 0;
		_this38.y = 0;
		_this38.z = 0;
		_this38.w = 1.0;
		if(c.link == "_vec2x") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0;
			v2.y = 0.0;
		} else if(c.link == "_vec2xInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0 / iron_RenderPath.active.currentW;
			v2.y = 0.0;
		} else if(c.link == "_vec2x2") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 2.0;
			v2.y = 0.0;
		} else if(c.link == "_vec2x2Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 2.0 / iron_RenderPath.active.currentW;
			v2.y = 0.0;
		} else if(c.link == "_vec2y") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 1.0;
		} else if(c.link == "_vec2yInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 1.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_vec2y2") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 2.0;
		} else if(c.link == "_vec2y2Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 2.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_vec2y3") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 3.0;
		} else if(c.link == "_vec2y3Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 3.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_windowSize") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = arm_App.w();
			v2.y = arm_App.h();
		} else if(c.link == "_screenSize") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = iron_RenderPath.active.currentW;
			v2.y = iron_RenderPath.active.currentH;
		} else if(c.link == "_screenSizeInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0 / iron_RenderPath.active.currentW;
			v2.y = 1.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_aspectRatio") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = iron_RenderPath.active.currentH / iron_RenderPath.active.currentW;
			v2.y = iron_RenderPath.active.currentW / iron_RenderPath.active.currentH;
			v2.x = v2.x > 1.0 ? 1.0 : v2.x;
			v2.y = v2.y > 1.0 ? 1.0 : v2.y;
		} else if(c.link == "_cameraPlane") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = camera.data.raw.near_plane;
			v2.y = camera.data.raw.far_plane;
		} else if(c.link == "_cameraPlaneProj") {
			var near = camera.data.raw.near_plane;
			var far = camera.data.raw.far_plane;
			v2 = iron_object_Uniforms.helpVec;
			v2.x = far / (far - near);
			v2.y = -far * near / (far - near);
		} else if(c.link == "_lightPlane") {
			if(light != null) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = light.data.raw.near_plane;
				v2.y = light.data.raw.far_plane;
			}
		} else if(c.link == "_lightPlaneProj") {
			if(light != null) {
				var near1 = light.data.raw.near_plane;
				var far1 = light.data.raw.far_plane;
				var a = far1 + near1;
				var b = far1 - near1;
				var f24 = 2.0;
				var c1 = f24 * far1 * near1;
				v2 = iron_object_Uniforms.helpVec;
				v2.x = a / b;
				v2.y = c1 / b;
			}
		} else if(c.link == "_spotData") {
			var point3 = iron_RenderPath.active.point;
			if(point3 != null) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = point3.data.raw.spot_size;
				v2.y = v2.x - point3.data.raw.spot_blend;
			}
		} else if(c.link == "_shadowMapSize") {
			if(light != null && light.data.raw.cast_shadow) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = v2.y = light.data.raw.shadowmap_size;
			}
		}
		if(v2 != null) {
			g.setFloat2(location,v2.x,v2.y);
			return true;
		}
	} else if(c.type == "float") {
		var f1 = null;
		if(c.link == "_time") {
			f1 = kha_Scheduler.time();
		} else if(c.link == "_sunShadowsBias") {
			var sun2 = iron_RenderPath.active.sun;
			f1 = sun2 == null ? 0.0 : sun2.data.raw.shadows_bias;
		} else if(c.link == "_pointShadowsBias") {
			var point4 = iron_RenderPath.active.point;
			f1 = point4 == null ? 0.0 : point4.data.raw.shadows_bias;
		} else if(c.link == "_envmapStrength") {
			f1 = iron_Scene.active.world == null ? 0.0 : iron_Scene.active.world.probe.raw.strength;
		} else if(c.link == "_aspectRatioF") {
			f1 = iron_RenderPath.active.currentW / iron_RenderPath.active.currentH;
		} else if(c.link == "_aspectRatioWindowF") {
			f1 = arm_App.w() / arm_App.h();
		} else if(c.link == "_frameScale") {
			f1 = iron_RenderPath.active.frameTime / (0.016666666666666666 * iron_system_Time.scale);
		} else if(c.link == "_fieldOfView") {
			f1 = camera.data.raw.fov;
		}
		if(f1 != null) {
			g.setFloat(location,f1);
			return true;
		}
	} else if(c.type == "floats") {
		var fa = null;
		if(c.link == "_envmapIrradiance") {
			fa = iron_Scene.active.world == null ? iron_data_WorldData.getEmptyIrradiance() : iron_Scene.active.world.probe.irradiance;
		}
		if(fa != null) {
			g.setFloats(location,fa);
			return true;
		}
	} else if(c.type == "int") {
		var i = null;
		if(c.link == "_envmapNumMipmaps") {
			var w2 = iron_Scene.active.world;
			i = w2 != null ? w2.probe.raw.radiance_mipmaps + 1 - 2 : 1;
		}
		if(i != null) {
			g.setInt(location,i);
			return true;
		}
	}
	return false;
};
iron_object_Uniforms.setObjectConstant = function(g,object,location,c) {
	if(c.link == null) {
		return;
	}
	var camera = iron_Scene.active.camera;
	var light = iron_RenderPath.active.light;
	if(c.type == "mat4") {
		var m = null;
		if(c.link == "_worldMatrix") {
			m = object.transform.worldUnpack;
		} else if(c.link == "_inverseWorldMatrix") {
			var _this = iron_object_Uniforms.helpMat;
			var m1 = object.transform.worldUnpack;
			var a00 = m1.self._00;
			var a01 = m1.self._01;
			var a02 = m1.self._02;
			var a03 = m1.self._03;
			var a10 = m1.self._10;
			var a11 = m1.self._11;
			var a12 = m1.self._12;
			var a13 = m1.self._13;
			var a20 = m1.self._20;
			var a21 = m1.self._21;
			var a22 = m1.self._22;
			var a23 = m1.self._23;
			var a30 = m1.self._30;
			var a31 = m1.self._31;
			var a32 = m1.self._32;
			var a33 = m1.self._33;
			var b00 = a00 * a11 - a01 * a10;
			var b01 = a00 * a12 - a02 * a10;
			var b02 = a00 * a13 - a03 * a10;
			var b03 = a01 * a12 - a02 * a11;
			var b04 = a01 * a13 - a03 * a11;
			var b05 = a02 * a13 - a03 * a12;
			var b06 = a20 * a31 - a21 * a30;
			var b07 = a20 * a32 - a22 * a30;
			var b08 = a20 * a33 - a23 * a30;
			var b09 = a21 * a32 - a22 * a31;
			var b10 = a21 * a33 - a23 * a31;
			var b11 = a22 * a33 - a23 * a32;
			var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
			if(det == 0.0) {
				_this.self._00 = 1.0;
				_this.self._01 = 0.0;
				_this.self._02 = 0.0;
				_this.self._03 = 0.0;
				_this.self._10 = 0.0;
				_this.self._11 = 1.0;
				_this.self._12 = 0.0;
				_this.self._13 = 0.0;
				_this.self._20 = 0.0;
				_this.self._21 = 0.0;
				_this.self._22 = 1.0;
				_this.self._23 = 0.0;
				_this.self._30 = 0.0;
				_this.self._31 = 0.0;
				_this.self._32 = 0.0;
				_this.self._33 = 1.0;
			} else {
				det = 1.0 / det;
				_this.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
				_this.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
				_this.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
				_this.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
				_this.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
				_this.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
				_this.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
				_this.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
				_this.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
				_this.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
				_this.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
				_this.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
				_this.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
				_this.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
				_this.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
				_this.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
			}
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrix") {
			var _this1 = iron_object_Uniforms.helpMat;
			var m2 = object.transform.worldUnpack;
			_this1.self._00 = m2.self._00;
			_this1.self._01 = m2.self._01;
			_this1.self._02 = m2.self._02;
			_this1.self._03 = m2.self._03;
			_this1.self._10 = m2.self._10;
			_this1.self._11 = m2.self._11;
			_this1.self._12 = m2.self._12;
			_this1.self._13 = m2.self._13;
			_this1.self._20 = m2.self._20;
			_this1.self._21 = m2.self._21;
			_this1.self._22 = m2.self._22;
			_this1.self._23 = m2.self._23;
			_this1.self._30 = m2.self._30;
			_this1.self._31 = m2.self._31;
			_this1.self._32 = m2.self._32;
			_this1.self._33 = m2.self._33;
			var _this2 = iron_object_Uniforms.helpMat;
			var m3 = camera.V;
			var a001 = _this2.self._00;
			var a011 = _this2.self._01;
			var a021 = _this2.self._02;
			var a031 = _this2.self._03;
			var a101 = _this2.self._10;
			var a111 = _this2.self._11;
			var a121 = _this2.self._12;
			var a131 = _this2.self._13;
			var a201 = _this2.self._20;
			var a211 = _this2.self._21;
			var a221 = _this2.self._22;
			var a231 = _this2.self._23;
			var a301 = _this2.self._30;
			var a311 = _this2.self._31;
			var a321 = _this2.self._32;
			var a331 = _this2.self._33;
			var b0 = m3.self._00;
			var b1 = m3.self._10;
			var b2 = m3.self._20;
			var b3 = m3.self._30;
			_this2.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this2.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this2.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this2.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m3.self._01;
			b1 = m3.self._11;
			b2 = m3.self._21;
			b3 = m3.self._31;
			_this2.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this2.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this2.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this2.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m3.self._02;
			b1 = m3.self._12;
			b2 = m3.self._22;
			b3 = m3.self._32;
			_this2.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this2.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this2.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this2.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m3.self._03;
			b1 = m3.self._13;
			b2 = m3.self._23;
			b3 = m3.self._33;
			_this2.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this2.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this2.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this2.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			var _this3 = iron_object_Uniforms.helpMat;
			var m4 = camera.P;
			var a002 = _this3.self._00;
			var a012 = _this3.self._01;
			var a022 = _this3.self._02;
			var a032 = _this3.self._03;
			var a102 = _this3.self._10;
			var a112 = _this3.self._11;
			var a122 = _this3.self._12;
			var a132 = _this3.self._13;
			var a202 = _this3.self._20;
			var a212 = _this3.self._21;
			var a222 = _this3.self._22;
			var a232 = _this3.self._23;
			var a302 = _this3.self._30;
			var a312 = _this3.self._31;
			var a322 = _this3.self._32;
			var a332 = _this3.self._33;
			var b010 = m4.self._00;
			var b12 = m4.self._10;
			var b21 = m4.self._20;
			var b31 = m4.self._30;
			_this3.self._00 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
			_this3.self._10 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
			_this3.self._20 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
			_this3.self._30 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
			b010 = m4.self._01;
			b12 = m4.self._11;
			b21 = m4.self._21;
			b31 = m4.self._31;
			_this3.self._01 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
			_this3.self._11 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
			_this3.self._21 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
			_this3.self._31 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
			b010 = m4.self._02;
			b12 = m4.self._12;
			b21 = m4.self._22;
			b31 = m4.self._32;
			_this3.self._02 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
			_this3.self._12 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
			_this3.self._22 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
			_this3.self._32 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
			b010 = m4.self._03;
			b12 = m4.self._13;
			b21 = m4.self._23;
			b31 = m4.self._33;
			_this3.self._03 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
			_this3.self._13 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
			_this3.self._23 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
			_this3.self._33 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrixSphere") {
			var t = object.transform;
			var _this4 = iron_object_Uniforms.helpMat;
			var m5 = t.worldUnpack;
			_this4.self._00 = m5.self._00;
			_this4.self._01 = m5.self._01;
			_this4.self._02 = m5.self._02;
			_this4.self._03 = m5.self._03;
			_this4.self._10 = m5.self._10;
			_this4.self._11 = m5.self._11;
			_this4.self._12 = m5.self._12;
			_this4.self._13 = m5.self._13;
			_this4.self._20 = m5.self._20;
			_this4.self._21 = m5.self._21;
			_this4.self._22 = m5.self._22;
			_this4.self._23 = m5.self._23;
			_this4.self._30 = m5.self._30;
			_this4.self._31 = m5.self._31;
			_this4.self._32 = m5.self._32;
			_this4.self._33 = m5.self._33;
			var _this5 = iron_object_Uniforms.helpMat;
			var m6 = camera.V;
			var a003 = _this5.self._00;
			var a013 = _this5.self._01;
			var a023 = _this5.self._02;
			var a033 = _this5.self._03;
			var a103 = _this5.self._10;
			var a113 = _this5.self._11;
			var a123 = _this5.self._12;
			var a133 = _this5.self._13;
			var a203 = _this5.self._20;
			var a213 = _this5.self._21;
			var a223 = _this5.self._22;
			var a233 = _this5.self._23;
			var a303 = _this5.self._30;
			var a313 = _this5.self._31;
			var a323 = _this5.self._32;
			var a333 = _this5.self._33;
			var b011 = m6.self._00;
			var b13 = m6.self._10;
			var b22 = m6.self._20;
			var b32 = m6.self._30;
			_this5.self._00 = a003 * b011 + a013 * b13 + a023 * b22 + a033 * b32;
			_this5.self._10 = a103 * b011 + a113 * b13 + a123 * b22 + a133 * b32;
			_this5.self._20 = a203 * b011 + a213 * b13 + a223 * b22 + a233 * b32;
			_this5.self._30 = a303 * b011 + a313 * b13 + a323 * b22 + a333 * b32;
			b011 = m6.self._01;
			b13 = m6.self._11;
			b22 = m6.self._21;
			b32 = m6.self._31;
			_this5.self._01 = a003 * b011 + a013 * b13 + a023 * b22 + a033 * b32;
			_this5.self._11 = a103 * b011 + a113 * b13 + a123 * b22 + a133 * b32;
			_this5.self._21 = a203 * b011 + a213 * b13 + a223 * b22 + a233 * b32;
			_this5.self._31 = a303 * b011 + a313 * b13 + a323 * b22 + a333 * b32;
			b011 = m6.self._02;
			b13 = m6.self._12;
			b22 = m6.self._22;
			b32 = m6.self._32;
			_this5.self._02 = a003 * b011 + a013 * b13 + a023 * b22 + a033 * b32;
			_this5.self._12 = a103 * b011 + a113 * b13 + a123 * b22 + a133 * b32;
			_this5.self._22 = a203 * b011 + a213 * b13 + a223 * b22 + a233 * b32;
			_this5.self._32 = a303 * b011 + a313 * b13 + a323 * b22 + a333 * b32;
			b011 = m6.self._03;
			b13 = m6.self._13;
			b22 = m6.self._23;
			b32 = m6.self._33;
			_this5.self._03 = a003 * b011 + a013 * b13 + a023 * b22 + a033 * b32;
			_this5.self._13 = a103 * b011 + a113 * b13 + a123 * b22 + a133 * b32;
			_this5.self._23 = a203 * b011 + a213 * b13 + a223 * b22 + a233 * b32;
			_this5.self._33 = a303 * b011 + a313 * b13 + a323 * b22 + a333 * b32;
			iron_object_Uniforms.helpMat.self._00 = t.scale.x;
			iron_object_Uniforms.helpMat.self._10 = 0.0;
			iron_object_Uniforms.helpMat.self._20 = 0.0;
			iron_object_Uniforms.helpMat.self._01 = 0.0;
			iron_object_Uniforms.helpMat.self._11 = t.scale.y;
			iron_object_Uniforms.helpMat.self._21 = 0.0;
			iron_object_Uniforms.helpMat.self._02 = 0.0;
			iron_object_Uniforms.helpMat.self._12 = 0.0;
			iron_object_Uniforms.helpMat.self._22 = t.scale.z;
			var _this6 = iron_object_Uniforms.helpMat;
			var m7 = camera.P;
			var a004 = _this6.self._00;
			var a014 = _this6.self._01;
			var a024 = _this6.self._02;
			var a034 = _this6.self._03;
			var a104 = _this6.self._10;
			var a114 = _this6.self._11;
			var a124 = _this6.self._12;
			var a134 = _this6.self._13;
			var a204 = _this6.self._20;
			var a214 = _this6.self._21;
			var a224 = _this6.self._22;
			var a234 = _this6.self._23;
			var a304 = _this6.self._30;
			var a314 = _this6.self._31;
			var a324 = _this6.self._32;
			var a334 = _this6.self._33;
			var b012 = m7.self._00;
			var b14 = m7.self._10;
			var b23 = m7.self._20;
			var b33 = m7.self._30;
			_this6.self._00 = a004 * b012 + a014 * b14 + a024 * b23 + a034 * b33;
			_this6.self._10 = a104 * b012 + a114 * b14 + a124 * b23 + a134 * b33;
			_this6.self._20 = a204 * b012 + a214 * b14 + a224 * b23 + a234 * b33;
			_this6.self._30 = a304 * b012 + a314 * b14 + a324 * b23 + a334 * b33;
			b012 = m7.self._01;
			b14 = m7.self._11;
			b23 = m7.self._21;
			b33 = m7.self._31;
			_this6.self._01 = a004 * b012 + a014 * b14 + a024 * b23 + a034 * b33;
			_this6.self._11 = a104 * b012 + a114 * b14 + a124 * b23 + a134 * b33;
			_this6.self._21 = a204 * b012 + a214 * b14 + a224 * b23 + a234 * b33;
			_this6.self._31 = a304 * b012 + a314 * b14 + a324 * b23 + a334 * b33;
			b012 = m7.self._02;
			b14 = m7.self._12;
			b23 = m7.self._22;
			b33 = m7.self._32;
			_this6.self._02 = a004 * b012 + a014 * b14 + a024 * b23 + a034 * b33;
			_this6.self._12 = a104 * b012 + a114 * b14 + a124 * b23 + a134 * b33;
			_this6.self._22 = a204 * b012 + a214 * b14 + a224 * b23 + a234 * b33;
			_this6.self._32 = a304 * b012 + a314 * b14 + a324 * b23 + a334 * b33;
			b012 = m7.self._03;
			b14 = m7.self._13;
			b23 = m7.self._23;
			b33 = m7.self._33;
			_this6.self._03 = a004 * b012 + a014 * b14 + a024 * b23 + a034 * b33;
			_this6.self._13 = a104 * b012 + a114 * b14 + a124 * b23 + a134 * b33;
			_this6.self._23 = a204 * b012 + a214 * b14 + a224 * b23 + a234 * b33;
			_this6.self._33 = a304 * b012 + a314 * b14 + a324 * b23 + a334 * b33;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrixCylinder") {
			var t1 = object.transform;
			var _this7 = iron_object_Uniforms.helpMat;
			var m8 = t1.worldUnpack;
			_this7.self._00 = m8.self._00;
			_this7.self._01 = m8.self._01;
			_this7.self._02 = m8.self._02;
			_this7.self._03 = m8.self._03;
			_this7.self._10 = m8.self._10;
			_this7.self._11 = m8.self._11;
			_this7.self._12 = m8.self._12;
			_this7.self._13 = m8.self._13;
			_this7.self._20 = m8.self._20;
			_this7.self._21 = m8.self._21;
			_this7.self._22 = m8.self._22;
			_this7.self._23 = m8.self._23;
			_this7.self._30 = m8.self._30;
			_this7.self._31 = m8.self._31;
			_this7.self._32 = m8.self._32;
			_this7.self._33 = m8.self._33;
			var _this8 = iron_object_Uniforms.helpMat;
			var m9 = camera.V;
			var a005 = _this8.self._00;
			var a015 = _this8.self._01;
			var a025 = _this8.self._02;
			var a035 = _this8.self._03;
			var a105 = _this8.self._10;
			var a115 = _this8.self._11;
			var a125 = _this8.self._12;
			var a135 = _this8.self._13;
			var a205 = _this8.self._20;
			var a215 = _this8.self._21;
			var a225 = _this8.self._22;
			var a235 = _this8.self._23;
			var a305 = _this8.self._30;
			var a315 = _this8.self._31;
			var a325 = _this8.self._32;
			var a335 = _this8.self._33;
			var b013 = m9.self._00;
			var b15 = m9.self._10;
			var b24 = m9.self._20;
			var b34 = m9.self._30;
			_this8.self._00 = a005 * b013 + a015 * b15 + a025 * b24 + a035 * b34;
			_this8.self._10 = a105 * b013 + a115 * b15 + a125 * b24 + a135 * b34;
			_this8.self._20 = a205 * b013 + a215 * b15 + a225 * b24 + a235 * b34;
			_this8.self._30 = a305 * b013 + a315 * b15 + a325 * b24 + a335 * b34;
			b013 = m9.self._01;
			b15 = m9.self._11;
			b24 = m9.self._21;
			b34 = m9.self._31;
			_this8.self._01 = a005 * b013 + a015 * b15 + a025 * b24 + a035 * b34;
			_this8.self._11 = a105 * b013 + a115 * b15 + a125 * b24 + a135 * b34;
			_this8.self._21 = a205 * b013 + a215 * b15 + a225 * b24 + a235 * b34;
			_this8.self._31 = a305 * b013 + a315 * b15 + a325 * b24 + a335 * b34;
			b013 = m9.self._02;
			b15 = m9.self._12;
			b24 = m9.self._22;
			b34 = m9.self._32;
			_this8.self._02 = a005 * b013 + a015 * b15 + a025 * b24 + a035 * b34;
			_this8.self._12 = a105 * b013 + a115 * b15 + a125 * b24 + a135 * b34;
			_this8.self._22 = a205 * b013 + a215 * b15 + a225 * b24 + a235 * b34;
			_this8.self._32 = a305 * b013 + a315 * b15 + a325 * b24 + a335 * b34;
			b013 = m9.self._03;
			b15 = m9.self._13;
			b24 = m9.self._23;
			b34 = m9.self._33;
			_this8.self._03 = a005 * b013 + a015 * b15 + a025 * b24 + a035 * b34;
			_this8.self._13 = a105 * b013 + a115 * b15 + a125 * b24 + a135 * b34;
			_this8.self._23 = a205 * b013 + a215 * b15 + a225 * b24 + a235 * b34;
			_this8.self._33 = a305 * b013 + a315 * b15 + a325 * b24 + a335 * b34;
			iron_object_Uniforms.helpMat.self._00 = t1.scale.x;
			iron_object_Uniforms.helpMat.self._20 = 0.0;
			iron_object_Uniforms.helpMat.self._01 = 0.0;
			iron_object_Uniforms.helpMat.self._21 = 0.0;
			iron_object_Uniforms.helpMat.self._02 = 0.0;
			iron_object_Uniforms.helpMat.self._22 = t1.scale.z;
			var _this9 = iron_object_Uniforms.helpMat;
			var m10 = camera.P;
			var a006 = _this9.self._00;
			var a016 = _this9.self._01;
			var a026 = _this9.self._02;
			var a036 = _this9.self._03;
			var a106 = _this9.self._10;
			var a116 = _this9.self._11;
			var a126 = _this9.self._12;
			var a136 = _this9.self._13;
			var a206 = _this9.self._20;
			var a216 = _this9.self._21;
			var a226 = _this9.self._22;
			var a236 = _this9.self._23;
			var a306 = _this9.self._30;
			var a316 = _this9.self._31;
			var a326 = _this9.self._32;
			var a336 = _this9.self._33;
			var b014 = m10.self._00;
			var b16 = m10.self._10;
			var b25 = m10.self._20;
			var b35 = m10.self._30;
			_this9.self._00 = a006 * b014 + a016 * b16 + a026 * b25 + a036 * b35;
			_this9.self._10 = a106 * b014 + a116 * b16 + a126 * b25 + a136 * b35;
			_this9.self._20 = a206 * b014 + a216 * b16 + a226 * b25 + a236 * b35;
			_this9.self._30 = a306 * b014 + a316 * b16 + a326 * b25 + a336 * b35;
			b014 = m10.self._01;
			b16 = m10.self._11;
			b25 = m10.self._21;
			b35 = m10.self._31;
			_this9.self._01 = a006 * b014 + a016 * b16 + a026 * b25 + a036 * b35;
			_this9.self._11 = a106 * b014 + a116 * b16 + a126 * b25 + a136 * b35;
			_this9.self._21 = a206 * b014 + a216 * b16 + a226 * b25 + a236 * b35;
			_this9.self._31 = a306 * b014 + a316 * b16 + a326 * b25 + a336 * b35;
			b014 = m10.self._02;
			b16 = m10.self._12;
			b25 = m10.self._22;
			b35 = m10.self._32;
			_this9.self._02 = a006 * b014 + a016 * b16 + a026 * b25 + a036 * b35;
			_this9.self._12 = a106 * b014 + a116 * b16 + a126 * b25 + a136 * b35;
			_this9.self._22 = a206 * b014 + a216 * b16 + a226 * b25 + a236 * b35;
			_this9.self._32 = a306 * b014 + a316 * b16 + a326 * b25 + a336 * b35;
			b014 = m10.self._03;
			b16 = m10.self._13;
			b25 = m10.self._23;
			b35 = m10.self._33;
			_this9.self._03 = a006 * b014 + a016 * b16 + a026 * b25 + a036 * b35;
			_this9.self._13 = a106 * b014 + a116 * b16 + a126 * b25 + a136 * b35;
			_this9.self._23 = a206 * b014 + a216 * b16 + a226 * b25 + a236 * b35;
			_this9.self._33 = a306 * b014 + a316 * b16 + a326 * b25 + a336 * b35;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewMatrix") {
			var _this10 = iron_object_Uniforms.helpMat;
			var m11 = object.transform.worldUnpack;
			_this10.self._00 = m11.self._00;
			_this10.self._01 = m11.self._01;
			_this10.self._02 = m11.self._02;
			_this10.self._03 = m11.self._03;
			_this10.self._10 = m11.self._10;
			_this10.self._11 = m11.self._11;
			_this10.self._12 = m11.self._12;
			_this10.self._13 = m11.self._13;
			_this10.self._20 = m11.self._20;
			_this10.self._21 = m11.self._21;
			_this10.self._22 = m11.self._22;
			_this10.self._23 = m11.self._23;
			_this10.self._30 = m11.self._30;
			_this10.self._31 = m11.self._31;
			_this10.self._32 = m11.self._32;
			_this10.self._33 = m11.self._33;
			var _this11 = iron_object_Uniforms.helpMat;
			var m12 = camera.V;
			var a007 = _this11.self._00;
			var a017 = _this11.self._01;
			var a027 = _this11.self._02;
			var a037 = _this11.self._03;
			var a107 = _this11.self._10;
			var a117 = _this11.self._11;
			var a127 = _this11.self._12;
			var a137 = _this11.self._13;
			var a207 = _this11.self._20;
			var a217 = _this11.self._21;
			var a227 = _this11.self._22;
			var a237 = _this11.self._23;
			var a307 = _this11.self._30;
			var a317 = _this11.self._31;
			var a327 = _this11.self._32;
			var a337 = _this11.self._33;
			var b015 = m12.self._00;
			var b17 = m12.self._10;
			var b26 = m12.self._20;
			var b36 = m12.self._30;
			_this11.self._00 = a007 * b015 + a017 * b17 + a027 * b26 + a037 * b36;
			_this11.self._10 = a107 * b015 + a117 * b17 + a127 * b26 + a137 * b36;
			_this11.self._20 = a207 * b015 + a217 * b17 + a227 * b26 + a237 * b36;
			_this11.self._30 = a307 * b015 + a317 * b17 + a327 * b26 + a337 * b36;
			b015 = m12.self._01;
			b17 = m12.self._11;
			b26 = m12.self._21;
			b36 = m12.self._31;
			_this11.self._01 = a007 * b015 + a017 * b17 + a027 * b26 + a037 * b36;
			_this11.self._11 = a107 * b015 + a117 * b17 + a127 * b26 + a137 * b36;
			_this11.self._21 = a207 * b015 + a217 * b17 + a227 * b26 + a237 * b36;
			_this11.self._31 = a307 * b015 + a317 * b17 + a327 * b26 + a337 * b36;
			b015 = m12.self._02;
			b17 = m12.self._12;
			b26 = m12.self._22;
			b36 = m12.self._32;
			_this11.self._02 = a007 * b015 + a017 * b17 + a027 * b26 + a037 * b36;
			_this11.self._12 = a107 * b015 + a117 * b17 + a127 * b26 + a137 * b36;
			_this11.self._22 = a207 * b015 + a217 * b17 + a227 * b26 + a237 * b36;
			_this11.self._32 = a307 * b015 + a317 * b17 + a327 * b26 + a337 * b36;
			b015 = m12.self._03;
			b17 = m12.self._13;
			b26 = m12.self._23;
			b36 = m12.self._33;
			_this11.self._03 = a007 * b015 + a017 * b17 + a027 * b26 + a037 * b36;
			_this11.self._13 = a107 * b015 + a117 * b17 + a127 * b26 + a137 * b36;
			_this11.self._23 = a207 * b015 + a217 * b17 + a227 * b26 + a237 * b36;
			_this11.self._33 = a307 * b015 + a317 * b17 + a327 * b26 + a337 * b36;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_prevWorldViewProjectionMatrix") {
			var _this12 = iron_object_Uniforms.helpMat;
			var m13 = (js_Boot.__cast(object , iron_object_MeshObject)).prevMatrix;
			_this12.self._00 = m13.self._00;
			_this12.self._01 = m13.self._01;
			_this12.self._02 = m13.self._02;
			_this12.self._03 = m13.self._03;
			_this12.self._10 = m13.self._10;
			_this12.self._11 = m13.self._11;
			_this12.self._12 = m13.self._12;
			_this12.self._13 = m13.self._13;
			_this12.self._20 = m13.self._20;
			_this12.self._21 = m13.self._21;
			_this12.self._22 = m13.self._22;
			_this12.self._23 = m13.self._23;
			_this12.self._30 = m13.self._30;
			_this12.self._31 = m13.self._31;
			_this12.self._32 = m13.self._32;
			_this12.self._33 = m13.self._33;
			var _this13 = iron_object_Uniforms.helpMat;
			var m14 = camera.prevV;
			var a008 = _this13.self._00;
			var a018 = _this13.self._01;
			var a028 = _this13.self._02;
			var a038 = _this13.self._03;
			var a108 = _this13.self._10;
			var a118 = _this13.self._11;
			var a128 = _this13.self._12;
			var a138 = _this13.self._13;
			var a208 = _this13.self._20;
			var a218 = _this13.self._21;
			var a228 = _this13.self._22;
			var a238 = _this13.self._23;
			var a308 = _this13.self._30;
			var a318 = _this13.self._31;
			var a328 = _this13.self._32;
			var a338 = _this13.self._33;
			var b016 = m14.self._00;
			var b18 = m14.self._10;
			var b27 = m14.self._20;
			var b37 = m14.self._30;
			_this13.self._00 = a008 * b016 + a018 * b18 + a028 * b27 + a038 * b37;
			_this13.self._10 = a108 * b016 + a118 * b18 + a128 * b27 + a138 * b37;
			_this13.self._20 = a208 * b016 + a218 * b18 + a228 * b27 + a238 * b37;
			_this13.self._30 = a308 * b016 + a318 * b18 + a328 * b27 + a338 * b37;
			b016 = m14.self._01;
			b18 = m14.self._11;
			b27 = m14.self._21;
			b37 = m14.self._31;
			_this13.self._01 = a008 * b016 + a018 * b18 + a028 * b27 + a038 * b37;
			_this13.self._11 = a108 * b016 + a118 * b18 + a128 * b27 + a138 * b37;
			_this13.self._21 = a208 * b016 + a218 * b18 + a228 * b27 + a238 * b37;
			_this13.self._31 = a308 * b016 + a318 * b18 + a328 * b27 + a338 * b37;
			b016 = m14.self._02;
			b18 = m14.self._12;
			b27 = m14.self._22;
			b37 = m14.self._32;
			_this13.self._02 = a008 * b016 + a018 * b18 + a028 * b27 + a038 * b37;
			_this13.self._12 = a108 * b016 + a118 * b18 + a128 * b27 + a138 * b37;
			_this13.self._22 = a208 * b016 + a218 * b18 + a228 * b27 + a238 * b37;
			_this13.self._32 = a308 * b016 + a318 * b18 + a328 * b27 + a338 * b37;
			b016 = m14.self._03;
			b18 = m14.self._13;
			b27 = m14.self._23;
			b37 = m14.self._33;
			_this13.self._03 = a008 * b016 + a018 * b18 + a028 * b27 + a038 * b37;
			_this13.self._13 = a108 * b016 + a118 * b18 + a128 * b27 + a138 * b37;
			_this13.self._23 = a208 * b016 + a218 * b18 + a228 * b27 + a238 * b37;
			_this13.self._33 = a308 * b016 + a318 * b18 + a328 * b27 + a338 * b37;
			var _this14 = iron_object_Uniforms.helpMat;
			var m15 = camera.P;
			var a009 = _this14.self._00;
			var a019 = _this14.self._01;
			var a029 = _this14.self._02;
			var a039 = _this14.self._03;
			var a109 = _this14.self._10;
			var a119 = _this14.self._11;
			var a129 = _this14.self._12;
			var a139 = _this14.self._13;
			var a209 = _this14.self._20;
			var a219 = _this14.self._21;
			var a229 = _this14.self._22;
			var a239 = _this14.self._23;
			var a309 = _this14.self._30;
			var a319 = _this14.self._31;
			var a329 = _this14.self._32;
			var a339 = _this14.self._33;
			var b017 = m15.self._00;
			var b19 = m15.self._10;
			var b28 = m15.self._20;
			var b38 = m15.self._30;
			_this14.self._00 = a009 * b017 + a019 * b19 + a029 * b28 + a039 * b38;
			_this14.self._10 = a109 * b017 + a119 * b19 + a129 * b28 + a139 * b38;
			_this14.self._20 = a209 * b017 + a219 * b19 + a229 * b28 + a239 * b38;
			_this14.self._30 = a309 * b017 + a319 * b19 + a329 * b28 + a339 * b38;
			b017 = m15.self._01;
			b19 = m15.self._11;
			b28 = m15.self._21;
			b38 = m15.self._31;
			_this14.self._01 = a009 * b017 + a019 * b19 + a029 * b28 + a039 * b38;
			_this14.self._11 = a109 * b017 + a119 * b19 + a129 * b28 + a139 * b38;
			_this14.self._21 = a209 * b017 + a219 * b19 + a229 * b28 + a239 * b38;
			_this14.self._31 = a309 * b017 + a319 * b19 + a329 * b28 + a339 * b38;
			b017 = m15.self._02;
			b19 = m15.self._12;
			b28 = m15.self._22;
			b38 = m15.self._32;
			_this14.self._02 = a009 * b017 + a019 * b19 + a029 * b28 + a039 * b38;
			_this14.self._12 = a109 * b017 + a119 * b19 + a129 * b28 + a139 * b38;
			_this14.self._22 = a209 * b017 + a219 * b19 + a229 * b28 + a239 * b38;
			_this14.self._32 = a309 * b017 + a319 * b19 + a329 * b28 + a339 * b38;
			b017 = m15.self._03;
			b19 = m15.self._13;
			b28 = m15.self._23;
			b38 = m15.self._33;
			_this14.self._03 = a009 * b017 + a019 * b19 + a029 * b28 + a039 * b38;
			_this14.self._13 = a109 * b017 + a119 * b19 + a129 * b28 + a139 * b38;
			_this14.self._23 = a209 * b017 + a219 * b19 + a229 * b28 + a239 * b38;
			_this14.self._33 = a309 * b017 + a319 * b19 + a329 * b28 + a339 * b38;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_prevWorldMatrix") {
			m = (js_Boot.__cast(object , iron_object_MeshObject)).prevMatrix;
		} else if(c.link == "_lightWorldViewProjectionMatrix") {
			if(light != null) {
				if(object == null) {
					var _this15 = iron_object_Uniforms.helpMat;
					_this15.self._00 = 1.0;
					_this15.self._01 = 0.0;
					_this15.self._02 = 0.0;
					_this15.self._03 = 0.0;
					_this15.self._10 = 0.0;
					_this15.self._11 = 1.0;
					_this15.self._12 = 0.0;
					_this15.self._13 = 0.0;
					_this15.self._20 = 0.0;
					_this15.self._21 = 0.0;
					_this15.self._22 = 1.0;
					_this15.self._23 = 0.0;
					_this15.self._30 = 0.0;
					_this15.self._31 = 0.0;
					_this15.self._32 = 0.0;
					_this15.self._33 = 1.0;
				} else {
					var _this16 = iron_object_Uniforms.helpMat;
					var m16 = object.transform.worldUnpack;
					_this16.self._00 = m16.self._00;
					_this16.self._01 = m16.self._01;
					_this16.self._02 = m16.self._02;
					_this16.self._03 = m16.self._03;
					_this16.self._10 = m16.self._10;
					_this16.self._11 = m16.self._11;
					_this16.self._12 = m16.self._12;
					_this16.self._13 = m16.self._13;
					_this16.self._20 = m16.self._20;
					_this16.self._21 = m16.self._21;
					_this16.self._22 = m16.self._22;
					_this16.self._23 = m16.self._23;
					_this16.self._30 = m16.self._30;
					_this16.self._31 = m16.self._31;
					_this16.self._32 = m16.self._32;
					_this16.self._33 = m16.self._33;
				}
				var _this17 = iron_object_Uniforms.helpMat;
				var m17 = light.VP;
				var a0010 = _this17.self._00;
				var a0110 = _this17.self._01;
				var a0210 = _this17.self._02;
				var a0310 = _this17.self._03;
				var a1010 = _this17.self._10;
				var a1110 = _this17.self._11;
				var a1210 = _this17.self._12;
				var a1310 = _this17.self._13;
				var a2010 = _this17.self._20;
				var a2110 = _this17.self._21;
				var a2210 = _this17.self._22;
				var a2310 = _this17.self._23;
				var a3010 = _this17.self._30;
				var a3110 = _this17.self._31;
				var a3210 = _this17.self._32;
				var a3310 = _this17.self._33;
				var b018 = m17.self._00;
				var b110 = m17.self._10;
				var b29 = m17.self._20;
				var b39 = m17.self._30;
				_this17.self._00 = a0010 * b018 + a0110 * b110 + a0210 * b29 + a0310 * b39;
				_this17.self._10 = a1010 * b018 + a1110 * b110 + a1210 * b29 + a1310 * b39;
				_this17.self._20 = a2010 * b018 + a2110 * b110 + a2210 * b29 + a2310 * b39;
				_this17.self._30 = a3010 * b018 + a3110 * b110 + a3210 * b29 + a3310 * b39;
				b018 = m17.self._01;
				b110 = m17.self._11;
				b29 = m17.self._21;
				b39 = m17.self._31;
				_this17.self._01 = a0010 * b018 + a0110 * b110 + a0210 * b29 + a0310 * b39;
				_this17.self._11 = a1010 * b018 + a1110 * b110 + a1210 * b29 + a1310 * b39;
				_this17.self._21 = a2010 * b018 + a2110 * b110 + a2210 * b29 + a2310 * b39;
				_this17.self._31 = a3010 * b018 + a3110 * b110 + a3210 * b29 + a3310 * b39;
				b018 = m17.self._02;
				b110 = m17.self._12;
				b29 = m17.self._22;
				b39 = m17.self._32;
				_this17.self._02 = a0010 * b018 + a0110 * b110 + a0210 * b29 + a0310 * b39;
				_this17.self._12 = a1010 * b018 + a1110 * b110 + a1210 * b29 + a1310 * b39;
				_this17.self._22 = a2010 * b018 + a2110 * b110 + a2210 * b29 + a2310 * b39;
				_this17.self._32 = a3010 * b018 + a3110 * b110 + a3210 * b29 + a3310 * b39;
				b018 = m17.self._03;
				b110 = m17.self._13;
				b29 = m17.self._23;
				b39 = m17.self._33;
				_this17.self._03 = a0010 * b018 + a0110 * b110 + a0210 * b29 + a0310 * b39;
				_this17.self._13 = a1010 * b018 + a1110 * b110 + a1210 * b29 + a1310 * b39;
				_this17.self._23 = a2010 * b018 + a2110 * b110 + a2210 * b29 + a2310 * b39;
				_this17.self._33 = a3010 * b018 + a3110 * b110 + a3210 * b29 + a3310 * b39;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_lightWorldViewProjectionMatrixSphere") {
			if(light != null) {
				var _this18 = iron_object_Uniforms.helpMat;
				var m18 = object.transform.worldUnpack;
				_this18.self._00 = m18.self._00;
				_this18.self._01 = m18.self._01;
				_this18.self._02 = m18.self._02;
				_this18.self._03 = m18.self._03;
				_this18.self._10 = m18.self._10;
				_this18.self._11 = m18.self._11;
				_this18.self._12 = m18.self._12;
				_this18.self._13 = m18.self._13;
				_this18.self._20 = m18.self._20;
				_this18.self._21 = m18.self._21;
				_this18.self._22 = m18.self._22;
				_this18.self._23 = m18.self._23;
				_this18.self._30 = m18.self._30;
				_this18.self._31 = m18.self._31;
				_this18.self._32 = m18.self._32;
				_this18.self._33 = m18.self._33;
				var _this19 = iron_object_Uniforms.helpMat;
				var m19 = camera.V;
				var a0011 = _this19.self._00;
				var a0111 = _this19.self._01;
				var a0211 = _this19.self._02;
				var a0311 = _this19.self._03;
				var a1011 = _this19.self._10;
				var a1111 = _this19.self._11;
				var a1211 = _this19.self._12;
				var a1311 = _this19.self._13;
				var a2011 = _this19.self._20;
				var a2111 = _this19.self._21;
				var a2211 = _this19.self._22;
				var a2311 = _this19.self._23;
				var a3011 = _this19.self._30;
				var a3111 = _this19.self._31;
				var a3211 = _this19.self._32;
				var a3311 = _this19.self._33;
				var b019 = m19.self._00;
				var b111 = m19.self._10;
				var b210 = m19.self._20;
				var b310 = m19.self._30;
				_this19.self._00 = a0011 * b019 + a0111 * b111 + a0211 * b210 + a0311 * b310;
				_this19.self._10 = a1011 * b019 + a1111 * b111 + a1211 * b210 + a1311 * b310;
				_this19.self._20 = a2011 * b019 + a2111 * b111 + a2211 * b210 + a2311 * b310;
				_this19.self._30 = a3011 * b019 + a3111 * b111 + a3211 * b210 + a3311 * b310;
				b019 = m19.self._01;
				b111 = m19.self._11;
				b210 = m19.self._21;
				b310 = m19.self._31;
				_this19.self._01 = a0011 * b019 + a0111 * b111 + a0211 * b210 + a0311 * b310;
				_this19.self._11 = a1011 * b019 + a1111 * b111 + a1211 * b210 + a1311 * b310;
				_this19.self._21 = a2011 * b019 + a2111 * b111 + a2211 * b210 + a2311 * b310;
				_this19.self._31 = a3011 * b019 + a3111 * b111 + a3211 * b210 + a3311 * b310;
				b019 = m19.self._02;
				b111 = m19.self._12;
				b210 = m19.self._22;
				b310 = m19.self._32;
				_this19.self._02 = a0011 * b019 + a0111 * b111 + a0211 * b210 + a0311 * b310;
				_this19.self._12 = a1011 * b019 + a1111 * b111 + a1211 * b210 + a1311 * b310;
				_this19.self._22 = a2011 * b019 + a2111 * b111 + a2211 * b210 + a2311 * b310;
				_this19.self._32 = a3011 * b019 + a3111 * b111 + a3211 * b210 + a3311 * b310;
				b019 = m19.self._03;
				b111 = m19.self._13;
				b210 = m19.self._23;
				b310 = m19.self._33;
				_this19.self._03 = a0011 * b019 + a0111 * b111 + a0211 * b210 + a0311 * b310;
				_this19.self._13 = a1011 * b019 + a1111 * b111 + a1211 * b210 + a1311 * b310;
				_this19.self._23 = a2011 * b019 + a2111 * b111 + a2211 * b210 + a2311 * b310;
				_this19.self._33 = a3011 * b019 + a3111 * b111 + a3211 * b210 + a3311 * b310;
				iron_object_Uniforms.helpMat.self._00 = 1.0;
				iron_object_Uniforms.helpMat.self._10 = 0.0;
				iron_object_Uniforms.helpMat.self._20 = 0.0;
				iron_object_Uniforms.helpMat.self._01 = 0.0;
				iron_object_Uniforms.helpMat.self._11 = 1.0;
				iron_object_Uniforms.helpMat.self._21 = 0.0;
				iron_object_Uniforms.helpMat.self._02 = 0.0;
				iron_object_Uniforms.helpMat.self._12 = 0.0;
				iron_object_Uniforms.helpMat.self._22 = 1.0;
				var _this20 = iron_object_Uniforms.helpMat2;
				var m20 = camera.V;
				var a0012 = m20.self._00;
				var a0112 = m20.self._01;
				var a0212 = m20.self._02;
				var a0312 = m20.self._03;
				var a1012 = m20.self._10;
				var a1112 = m20.self._11;
				var a1212 = m20.self._12;
				var a1312 = m20.self._13;
				var a2012 = m20.self._20;
				var a2112 = m20.self._21;
				var a2212 = m20.self._22;
				var a2312 = m20.self._23;
				var a3012 = m20.self._30;
				var a3112 = m20.self._31;
				var a3212 = m20.self._32;
				var a3312 = m20.self._33;
				var b001 = a0012 * a1112 - a0112 * a1012;
				var b0110 = a0012 * a1212 - a0212 * a1012;
				var b021 = a0012 * a1312 - a0312 * a1012;
				var b031 = a0112 * a1212 - a0212 * a1112;
				var b041 = a0112 * a1312 - a0312 * a1112;
				var b051 = a0212 * a1312 - a0312 * a1212;
				var b061 = a2012 * a3112 - a2112 * a3012;
				var b071 = a2012 * a3212 - a2212 * a3012;
				var b081 = a2012 * a3312 - a2312 * a3012;
				var b091 = a2112 * a3212 - a2212 * a3112;
				var b101 = a2112 * a3312 - a2312 * a3112;
				var b112 = a2212 * a3312 - a2312 * a3212;
				var det1 = b001 * b112 - b0110 * b101 + b021 * b091 + b031 * b081 - b041 * b071 + b051 * b061;
				if(det1 == 0.0) {
					_this20.self._00 = 1.0;
					_this20.self._01 = 0.0;
					_this20.self._02 = 0.0;
					_this20.self._03 = 0.0;
					_this20.self._10 = 0.0;
					_this20.self._11 = 1.0;
					_this20.self._12 = 0.0;
					_this20.self._13 = 0.0;
					_this20.self._20 = 0.0;
					_this20.self._21 = 0.0;
					_this20.self._22 = 1.0;
					_this20.self._23 = 0.0;
					_this20.self._30 = 0.0;
					_this20.self._31 = 0.0;
					_this20.self._32 = 0.0;
					_this20.self._33 = 1.0;
				} else {
					det1 = 1.0 / det1;
					_this20.self._00 = (a1112 * b112 - a1212 * b101 + a1312 * b091) * det1;
					_this20.self._01 = (a0212 * b101 - a0112 * b112 - a0312 * b091) * det1;
					_this20.self._02 = (a3112 * b051 - a3212 * b041 + a3312 * b031) * det1;
					_this20.self._03 = (a2212 * b041 - a2112 * b051 - a2312 * b031) * det1;
					_this20.self._10 = (a1212 * b081 - a1012 * b112 - a1312 * b071) * det1;
					_this20.self._11 = (a0012 * b112 - a0212 * b081 + a0312 * b071) * det1;
					_this20.self._12 = (a3212 * b021 - a3012 * b051 - a3312 * b0110) * det1;
					_this20.self._13 = (a2012 * b051 - a2212 * b021 + a2312 * b0110) * det1;
					_this20.self._20 = (a1012 * b101 - a1112 * b081 + a1312 * b061) * det1;
					_this20.self._21 = (a0112 * b081 - a0012 * b101 - a0312 * b061) * det1;
					_this20.self._22 = (a3012 * b041 - a3112 * b021 + a3312 * b001) * det1;
					_this20.self._23 = (a2112 * b021 - a2012 * b041 - a2312 * b001) * det1;
					_this20.self._30 = (a1112 * b071 - a1012 * b091 - a1212 * b061) * det1;
					_this20.self._31 = (a0012 * b091 - a0112 * b071 + a0212 * b061) * det1;
					_this20.self._32 = (a3112 * b0110 - a3012 * b031 - a3212 * b001) * det1;
					_this20.self._33 = (a2012 * b031 - a2112 * b0110 + a2212 * b001) * det1;
				}
				var _this21 = iron_object_Uniforms.helpMat;
				var m21 = iron_object_Uniforms.helpMat2;
				var a0013 = _this21.self._00;
				var a0113 = _this21.self._01;
				var a0213 = _this21.self._02;
				var a0313 = _this21.self._03;
				var a1013 = _this21.self._10;
				var a1113 = _this21.self._11;
				var a1213 = _this21.self._12;
				var a1313 = _this21.self._13;
				var a2013 = _this21.self._20;
				var a2113 = _this21.self._21;
				var a2213 = _this21.self._22;
				var a2313 = _this21.self._23;
				var a3013 = _this21.self._30;
				var a3113 = _this21.self._31;
				var a3213 = _this21.self._32;
				var a3313 = _this21.self._33;
				var b020 = m21.self._00;
				var b113 = m21.self._10;
				var b211 = m21.self._20;
				var b311 = m21.self._30;
				_this21.self._00 = a0013 * b020 + a0113 * b113 + a0213 * b211 + a0313 * b311;
				_this21.self._10 = a1013 * b020 + a1113 * b113 + a1213 * b211 + a1313 * b311;
				_this21.self._20 = a2013 * b020 + a2113 * b113 + a2213 * b211 + a2313 * b311;
				_this21.self._30 = a3013 * b020 + a3113 * b113 + a3213 * b211 + a3313 * b311;
				b020 = m21.self._01;
				b113 = m21.self._11;
				b211 = m21.self._21;
				b311 = m21.self._31;
				_this21.self._01 = a0013 * b020 + a0113 * b113 + a0213 * b211 + a0313 * b311;
				_this21.self._11 = a1013 * b020 + a1113 * b113 + a1213 * b211 + a1313 * b311;
				_this21.self._21 = a2013 * b020 + a2113 * b113 + a2213 * b211 + a2313 * b311;
				_this21.self._31 = a3013 * b020 + a3113 * b113 + a3213 * b211 + a3313 * b311;
				b020 = m21.self._02;
				b113 = m21.self._12;
				b211 = m21.self._22;
				b311 = m21.self._32;
				_this21.self._02 = a0013 * b020 + a0113 * b113 + a0213 * b211 + a0313 * b311;
				_this21.self._12 = a1013 * b020 + a1113 * b113 + a1213 * b211 + a1313 * b311;
				_this21.self._22 = a2013 * b020 + a2113 * b113 + a2213 * b211 + a2313 * b311;
				_this21.self._32 = a3013 * b020 + a3113 * b113 + a3213 * b211 + a3313 * b311;
				b020 = m21.self._03;
				b113 = m21.self._13;
				b211 = m21.self._23;
				b311 = m21.self._33;
				_this21.self._03 = a0013 * b020 + a0113 * b113 + a0213 * b211 + a0313 * b311;
				_this21.self._13 = a1013 * b020 + a1113 * b113 + a1213 * b211 + a1313 * b311;
				_this21.self._23 = a2013 * b020 + a2113 * b113 + a2213 * b211 + a2313 * b311;
				_this21.self._33 = a3013 * b020 + a3113 * b113 + a3213 * b211 + a3313 * b311;
				var _this22 = iron_object_Uniforms.helpMat;
				var m22 = light.VP;
				var a0014 = _this22.self._00;
				var a0114 = _this22.self._01;
				var a0214 = _this22.self._02;
				var a0314 = _this22.self._03;
				var a1014 = _this22.self._10;
				var a1114 = _this22.self._11;
				var a1214 = _this22.self._12;
				var a1314 = _this22.self._13;
				var a2014 = _this22.self._20;
				var a2114 = _this22.self._21;
				var a2214 = _this22.self._22;
				var a2314 = _this22.self._23;
				var a3014 = _this22.self._30;
				var a3114 = _this22.self._31;
				var a3214 = _this22.self._32;
				var a3314 = _this22.self._33;
				var b022 = m22.self._00;
				var b114 = m22.self._10;
				var b212 = m22.self._20;
				var b312 = m22.self._30;
				_this22.self._00 = a0014 * b022 + a0114 * b114 + a0214 * b212 + a0314 * b312;
				_this22.self._10 = a1014 * b022 + a1114 * b114 + a1214 * b212 + a1314 * b312;
				_this22.self._20 = a2014 * b022 + a2114 * b114 + a2214 * b212 + a2314 * b312;
				_this22.self._30 = a3014 * b022 + a3114 * b114 + a3214 * b212 + a3314 * b312;
				b022 = m22.self._01;
				b114 = m22.self._11;
				b212 = m22.self._21;
				b312 = m22.self._31;
				_this22.self._01 = a0014 * b022 + a0114 * b114 + a0214 * b212 + a0314 * b312;
				_this22.self._11 = a1014 * b022 + a1114 * b114 + a1214 * b212 + a1314 * b312;
				_this22.self._21 = a2014 * b022 + a2114 * b114 + a2214 * b212 + a2314 * b312;
				_this22.self._31 = a3014 * b022 + a3114 * b114 + a3214 * b212 + a3314 * b312;
				b022 = m22.self._02;
				b114 = m22.self._12;
				b212 = m22.self._22;
				b312 = m22.self._32;
				_this22.self._02 = a0014 * b022 + a0114 * b114 + a0214 * b212 + a0314 * b312;
				_this22.self._12 = a1014 * b022 + a1114 * b114 + a1214 * b212 + a1314 * b312;
				_this22.self._22 = a2014 * b022 + a2114 * b114 + a2214 * b212 + a2314 * b312;
				_this22.self._32 = a3014 * b022 + a3114 * b114 + a3214 * b212 + a3314 * b312;
				b022 = m22.self._03;
				b114 = m22.self._13;
				b212 = m22.self._23;
				b312 = m22.self._33;
				_this22.self._03 = a0014 * b022 + a0114 * b114 + a0214 * b212 + a0314 * b312;
				_this22.self._13 = a1014 * b022 + a1114 * b114 + a1214 * b212 + a1314 * b312;
				_this22.self._23 = a2014 * b022 + a2114 * b114 + a2214 * b212 + a2314 * b312;
				_this22.self._33 = a3014 * b022 + a3114 * b114 + a3214 * b212 + a3314 * b312;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_lightWorldViewProjectionMatrixCylinder") {
			if(light != null) {
				var _this23 = iron_object_Uniforms.helpMat;
				var m23 = object.transform.worldUnpack;
				_this23.self._00 = m23.self._00;
				_this23.self._01 = m23.self._01;
				_this23.self._02 = m23.self._02;
				_this23.self._03 = m23.self._03;
				_this23.self._10 = m23.self._10;
				_this23.self._11 = m23.self._11;
				_this23.self._12 = m23.self._12;
				_this23.self._13 = m23.self._13;
				_this23.self._20 = m23.self._20;
				_this23.self._21 = m23.self._21;
				_this23.self._22 = m23.self._22;
				_this23.self._23 = m23.self._23;
				_this23.self._30 = m23.self._30;
				_this23.self._31 = m23.self._31;
				_this23.self._32 = m23.self._32;
				_this23.self._33 = m23.self._33;
				var _this24 = iron_object_Uniforms.helpMat;
				var m24 = camera.V;
				var a0015 = _this24.self._00;
				var a0115 = _this24.self._01;
				var a0215 = _this24.self._02;
				var a0315 = _this24.self._03;
				var a1015 = _this24.self._10;
				var a1115 = _this24.self._11;
				var a1215 = _this24.self._12;
				var a1315 = _this24.self._13;
				var a2015 = _this24.self._20;
				var a2115 = _this24.self._21;
				var a2215 = _this24.self._22;
				var a2315 = _this24.self._23;
				var a3015 = _this24.self._30;
				var a3115 = _this24.self._31;
				var a3215 = _this24.self._32;
				var a3315 = _this24.self._33;
				var b023 = m24.self._00;
				var b115 = m24.self._10;
				var b213 = m24.self._20;
				var b313 = m24.self._30;
				_this24.self._00 = a0015 * b023 + a0115 * b115 + a0215 * b213 + a0315 * b313;
				_this24.self._10 = a1015 * b023 + a1115 * b115 + a1215 * b213 + a1315 * b313;
				_this24.self._20 = a2015 * b023 + a2115 * b115 + a2215 * b213 + a2315 * b313;
				_this24.self._30 = a3015 * b023 + a3115 * b115 + a3215 * b213 + a3315 * b313;
				b023 = m24.self._01;
				b115 = m24.self._11;
				b213 = m24.self._21;
				b313 = m24.self._31;
				_this24.self._01 = a0015 * b023 + a0115 * b115 + a0215 * b213 + a0315 * b313;
				_this24.self._11 = a1015 * b023 + a1115 * b115 + a1215 * b213 + a1315 * b313;
				_this24.self._21 = a2015 * b023 + a2115 * b115 + a2215 * b213 + a2315 * b313;
				_this24.self._31 = a3015 * b023 + a3115 * b115 + a3215 * b213 + a3315 * b313;
				b023 = m24.self._02;
				b115 = m24.self._12;
				b213 = m24.self._22;
				b313 = m24.self._32;
				_this24.self._02 = a0015 * b023 + a0115 * b115 + a0215 * b213 + a0315 * b313;
				_this24.self._12 = a1015 * b023 + a1115 * b115 + a1215 * b213 + a1315 * b313;
				_this24.self._22 = a2015 * b023 + a2115 * b115 + a2215 * b213 + a2315 * b313;
				_this24.self._32 = a3015 * b023 + a3115 * b115 + a3215 * b213 + a3315 * b313;
				b023 = m24.self._03;
				b115 = m24.self._13;
				b213 = m24.self._23;
				b313 = m24.self._33;
				_this24.self._03 = a0015 * b023 + a0115 * b115 + a0215 * b213 + a0315 * b313;
				_this24.self._13 = a1015 * b023 + a1115 * b115 + a1215 * b213 + a1315 * b313;
				_this24.self._23 = a2015 * b023 + a2115 * b115 + a2215 * b213 + a2315 * b313;
				_this24.self._33 = a3015 * b023 + a3115 * b115 + a3215 * b213 + a3315 * b313;
				iron_object_Uniforms.helpMat.self._00 = 1.0;
				iron_object_Uniforms.helpMat.self._20 = 0.0;
				iron_object_Uniforms.helpMat.self._01 = 0.0;
				iron_object_Uniforms.helpMat.self._21 = 0.0;
				iron_object_Uniforms.helpMat.self._02 = 0.0;
				iron_object_Uniforms.helpMat.self._22 = 1.0;
				var _this25 = iron_object_Uniforms.helpMat2;
				var m25 = camera.V;
				var a0016 = m25.self._00;
				var a0116 = m25.self._01;
				var a0216 = m25.self._02;
				var a0316 = m25.self._03;
				var a1016 = m25.self._10;
				var a1116 = m25.self._11;
				var a1216 = m25.self._12;
				var a1316 = m25.self._13;
				var a2016 = m25.self._20;
				var a2116 = m25.self._21;
				var a2216 = m25.self._22;
				var a2316 = m25.self._23;
				var a3016 = m25.self._30;
				var a3116 = m25.self._31;
				var a3216 = m25.self._32;
				var a3316 = m25.self._33;
				var b002 = a0016 * a1116 - a0116 * a1016;
				var b0111 = a0016 * a1216 - a0216 * a1016;
				var b024 = a0016 * a1316 - a0316 * a1016;
				var b032 = a0116 * a1216 - a0216 * a1116;
				var b042 = a0116 * a1316 - a0316 * a1116;
				var b052 = a0216 * a1316 - a0316 * a1216;
				var b062 = a2016 * a3116 - a2116 * a3016;
				var b072 = a2016 * a3216 - a2216 * a3016;
				var b082 = a2016 * a3316 - a2316 * a3016;
				var b092 = a2116 * a3216 - a2216 * a3116;
				var b102 = a2116 * a3316 - a2316 * a3116;
				var b116 = a2216 * a3316 - a2316 * a3216;
				var det2 = b002 * b116 - b0111 * b102 + b024 * b092 + b032 * b082 - b042 * b072 + b052 * b062;
				if(det2 == 0.0) {
					_this25.self._00 = 1.0;
					_this25.self._01 = 0.0;
					_this25.self._02 = 0.0;
					_this25.self._03 = 0.0;
					_this25.self._10 = 0.0;
					_this25.self._11 = 1.0;
					_this25.self._12 = 0.0;
					_this25.self._13 = 0.0;
					_this25.self._20 = 0.0;
					_this25.self._21 = 0.0;
					_this25.self._22 = 1.0;
					_this25.self._23 = 0.0;
					_this25.self._30 = 0.0;
					_this25.self._31 = 0.0;
					_this25.self._32 = 0.0;
					_this25.self._33 = 1.0;
				} else {
					det2 = 1.0 / det2;
					_this25.self._00 = (a1116 * b116 - a1216 * b102 + a1316 * b092) * det2;
					_this25.self._01 = (a0216 * b102 - a0116 * b116 - a0316 * b092) * det2;
					_this25.self._02 = (a3116 * b052 - a3216 * b042 + a3316 * b032) * det2;
					_this25.self._03 = (a2216 * b042 - a2116 * b052 - a2316 * b032) * det2;
					_this25.self._10 = (a1216 * b082 - a1016 * b116 - a1316 * b072) * det2;
					_this25.self._11 = (a0016 * b116 - a0216 * b082 + a0316 * b072) * det2;
					_this25.self._12 = (a3216 * b024 - a3016 * b052 - a3316 * b0111) * det2;
					_this25.self._13 = (a2016 * b052 - a2216 * b024 + a2316 * b0111) * det2;
					_this25.self._20 = (a1016 * b102 - a1116 * b082 + a1316 * b062) * det2;
					_this25.self._21 = (a0116 * b082 - a0016 * b102 - a0316 * b062) * det2;
					_this25.self._22 = (a3016 * b042 - a3116 * b024 + a3316 * b002) * det2;
					_this25.self._23 = (a2116 * b024 - a2016 * b042 - a2316 * b002) * det2;
					_this25.self._30 = (a1116 * b072 - a1016 * b092 - a1216 * b062) * det2;
					_this25.self._31 = (a0016 * b092 - a0116 * b072 + a0216 * b062) * det2;
					_this25.self._32 = (a3116 * b0111 - a3016 * b032 - a3216 * b002) * det2;
					_this25.self._33 = (a2016 * b032 - a2116 * b0111 + a2216 * b002) * det2;
				}
				var _this26 = iron_object_Uniforms.helpMat;
				var m26 = iron_object_Uniforms.helpMat2;
				var a0017 = _this26.self._00;
				var a0117 = _this26.self._01;
				var a0217 = _this26.self._02;
				var a0317 = _this26.self._03;
				var a1017 = _this26.self._10;
				var a1117 = _this26.self._11;
				var a1217 = _this26.self._12;
				var a1317 = _this26.self._13;
				var a2017 = _this26.self._20;
				var a2117 = _this26.self._21;
				var a2217 = _this26.self._22;
				var a2317 = _this26.self._23;
				var a3017 = _this26.self._30;
				var a3117 = _this26.self._31;
				var a3217 = _this26.self._32;
				var a3317 = _this26.self._33;
				var b025 = m26.self._00;
				var b117 = m26.self._10;
				var b214 = m26.self._20;
				var b314 = m26.self._30;
				_this26.self._00 = a0017 * b025 + a0117 * b117 + a0217 * b214 + a0317 * b314;
				_this26.self._10 = a1017 * b025 + a1117 * b117 + a1217 * b214 + a1317 * b314;
				_this26.self._20 = a2017 * b025 + a2117 * b117 + a2217 * b214 + a2317 * b314;
				_this26.self._30 = a3017 * b025 + a3117 * b117 + a3217 * b214 + a3317 * b314;
				b025 = m26.self._01;
				b117 = m26.self._11;
				b214 = m26.self._21;
				b314 = m26.self._31;
				_this26.self._01 = a0017 * b025 + a0117 * b117 + a0217 * b214 + a0317 * b314;
				_this26.self._11 = a1017 * b025 + a1117 * b117 + a1217 * b214 + a1317 * b314;
				_this26.self._21 = a2017 * b025 + a2117 * b117 + a2217 * b214 + a2317 * b314;
				_this26.self._31 = a3017 * b025 + a3117 * b117 + a3217 * b214 + a3317 * b314;
				b025 = m26.self._02;
				b117 = m26.self._12;
				b214 = m26.self._22;
				b314 = m26.self._32;
				_this26.self._02 = a0017 * b025 + a0117 * b117 + a0217 * b214 + a0317 * b314;
				_this26.self._12 = a1017 * b025 + a1117 * b117 + a1217 * b214 + a1317 * b314;
				_this26.self._22 = a2017 * b025 + a2117 * b117 + a2217 * b214 + a2317 * b314;
				_this26.self._32 = a3017 * b025 + a3117 * b117 + a3217 * b214 + a3317 * b314;
				b025 = m26.self._03;
				b117 = m26.self._13;
				b214 = m26.self._23;
				b314 = m26.self._33;
				_this26.self._03 = a0017 * b025 + a0117 * b117 + a0217 * b214 + a0317 * b314;
				_this26.self._13 = a1017 * b025 + a1117 * b117 + a1217 * b214 + a1317 * b314;
				_this26.self._23 = a2017 * b025 + a2117 * b117 + a2217 * b214 + a2317 * b314;
				_this26.self._33 = a3017 * b025 + a3117 * b117 + a3217 * b214 + a3317 * b314;
				var _this27 = iron_object_Uniforms.helpMat;
				var m27 = light.VP;
				var a0018 = _this27.self._00;
				var a0118 = _this27.self._01;
				var a0218 = _this27.self._02;
				var a0318 = _this27.self._03;
				var a1018 = _this27.self._10;
				var a1118 = _this27.self._11;
				var a1218 = _this27.self._12;
				var a1318 = _this27.self._13;
				var a2018 = _this27.self._20;
				var a2118 = _this27.self._21;
				var a2218 = _this27.self._22;
				var a2318 = _this27.self._23;
				var a3018 = _this27.self._30;
				var a3118 = _this27.self._31;
				var a3218 = _this27.self._32;
				var a3318 = _this27.self._33;
				var b026 = m27.self._00;
				var b118 = m27.self._10;
				var b215 = m27.self._20;
				var b315 = m27.self._30;
				_this27.self._00 = a0018 * b026 + a0118 * b118 + a0218 * b215 + a0318 * b315;
				_this27.self._10 = a1018 * b026 + a1118 * b118 + a1218 * b215 + a1318 * b315;
				_this27.self._20 = a2018 * b026 + a2118 * b118 + a2218 * b215 + a2318 * b315;
				_this27.self._30 = a3018 * b026 + a3118 * b118 + a3218 * b215 + a3318 * b315;
				b026 = m27.self._01;
				b118 = m27.self._11;
				b215 = m27.self._21;
				b315 = m27.self._31;
				_this27.self._01 = a0018 * b026 + a0118 * b118 + a0218 * b215 + a0318 * b315;
				_this27.self._11 = a1018 * b026 + a1118 * b118 + a1218 * b215 + a1318 * b315;
				_this27.self._21 = a2018 * b026 + a2118 * b118 + a2218 * b215 + a2318 * b315;
				_this27.self._31 = a3018 * b026 + a3118 * b118 + a3218 * b215 + a3318 * b315;
				b026 = m27.self._02;
				b118 = m27.self._12;
				b215 = m27.self._22;
				b315 = m27.self._32;
				_this27.self._02 = a0018 * b026 + a0118 * b118 + a0218 * b215 + a0318 * b315;
				_this27.self._12 = a1018 * b026 + a1118 * b118 + a1218 * b215 + a1318 * b315;
				_this27.self._22 = a2018 * b026 + a2118 * b118 + a2218 * b215 + a2318 * b315;
				_this27.self._32 = a3018 * b026 + a3118 * b118 + a3218 * b215 + a3318 * b315;
				b026 = m27.self._03;
				b118 = m27.self._13;
				b215 = m27.self._23;
				b315 = m27.self._33;
				_this27.self._03 = a0018 * b026 + a0118 * b118 + a0218 * b215 + a0318 * b315;
				_this27.self._13 = a1018 * b026 + a1118 * b118 + a1218 * b215 + a1318 * b315;
				_this27.self._23 = a2018 * b026 + a2118 * b118 + a2218 * b215 + a2318 * b315;
				_this27.self._33 = a3018 * b026 + a3118 * b118 + a3218 * b215 + a3318 * b315;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_biasLightWorldViewProjectionMatrix") {
			if(light != null) {
				if(object == null) {
					var _this28 = iron_object_Uniforms.helpMat;
					_this28.self._00 = 1.0;
					_this28.self._01 = 0.0;
					_this28.self._02 = 0.0;
					_this28.self._03 = 0.0;
					_this28.self._10 = 0.0;
					_this28.self._11 = 1.0;
					_this28.self._12 = 0.0;
					_this28.self._13 = 0.0;
					_this28.self._20 = 0.0;
					_this28.self._21 = 0.0;
					_this28.self._22 = 1.0;
					_this28.self._23 = 0.0;
					_this28.self._30 = 0.0;
					_this28.self._31 = 0.0;
					_this28.self._32 = 0.0;
					_this28.self._33 = 1.0;
				} else {
					var _this29 = iron_object_Uniforms.helpMat;
					var m28 = object.transform.worldUnpack;
					_this29.self._00 = m28.self._00;
					_this29.self._01 = m28.self._01;
					_this29.self._02 = m28.self._02;
					_this29.self._03 = m28.self._03;
					_this29.self._10 = m28.self._10;
					_this29.self._11 = m28.self._11;
					_this29.self._12 = m28.self._12;
					_this29.self._13 = m28.self._13;
					_this29.self._20 = m28.self._20;
					_this29.self._21 = m28.self._21;
					_this29.self._22 = m28.self._22;
					_this29.self._23 = m28.self._23;
					_this29.self._30 = m28.self._30;
					_this29.self._31 = m28.self._31;
					_this29.self._32 = m28.self._32;
					_this29.self._33 = m28.self._33;
				}
				var _this30 = iron_object_Uniforms.helpMat;
				var m29 = light.VP;
				var a0019 = _this30.self._00;
				var a0119 = _this30.self._01;
				var a0219 = _this30.self._02;
				var a0319 = _this30.self._03;
				var a1019 = _this30.self._10;
				var a1119 = _this30.self._11;
				var a1219 = _this30.self._12;
				var a1319 = _this30.self._13;
				var a2019 = _this30.self._20;
				var a2119 = _this30.self._21;
				var a2219 = _this30.self._22;
				var a2319 = _this30.self._23;
				var a3019 = _this30.self._30;
				var a3119 = _this30.self._31;
				var a3219 = _this30.self._32;
				var a3319 = _this30.self._33;
				var b027 = m29.self._00;
				var b119 = m29.self._10;
				var b216 = m29.self._20;
				var b316 = m29.self._30;
				_this30.self._00 = a0019 * b027 + a0119 * b119 + a0219 * b216 + a0319 * b316;
				_this30.self._10 = a1019 * b027 + a1119 * b119 + a1219 * b216 + a1319 * b316;
				_this30.self._20 = a2019 * b027 + a2119 * b119 + a2219 * b216 + a2319 * b316;
				_this30.self._30 = a3019 * b027 + a3119 * b119 + a3219 * b216 + a3319 * b316;
				b027 = m29.self._01;
				b119 = m29.self._11;
				b216 = m29.self._21;
				b316 = m29.self._31;
				_this30.self._01 = a0019 * b027 + a0119 * b119 + a0219 * b216 + a0319 * b316;
				_this30.self._11 = a1019 * b027 + a1119 * b119 + a1219 * b216 + a1319 * b316;
				_this30.self._21 = a2019 * b027 + a2119 * b119 + a2219 * b216 + a2319 * b316;
				_this30.self._31 = a3019 * b027 + a3119 * b119 + a3219 * b216 + a3319 * b316;
				b027 = m29.self._02;
				b119 = m29.self._12;
				b216 = m29.self._22;
				b316 = m29.self._32;
				_this30.self._02 = a0019 * b027 + a0119 * b119 + a0219 * b216 + a0319 * b316;
				_this30.self._12 = a1019 * b027 + a1119 * b119 + a1219 * b216 + a1319 * b316;
				_this30.self._22 = a2019 * b027 + a2119 * b119 + a2219 * b216 + a2319 * b316;
				_this30.self._32 = a3019 * b027 + a3119 * b119 + a3219 * b216 + a3319 * b316;
				b027 = m29.self._03;
				b119 = m29.self._13;
				b216 = m29.self._23;
				b316 = m29.self._33;
				_this30.self._03 = a0019 * b027 + a0119 * b119 + a0219 * b216 + a0319 * b316;
				_this30.self._13 = a1019 * b027 + a1119 * b119 + a1219 * b216 + a1319 * b316;
				_this30.self._23 = a2019 * b027 + a2119 * b119 + a2219 * b216 + a2319 * b316;
				_this30.self._33 = a3019 * b027 + a3119 * b119 + a3219 * b216 + a3319 * b316;
				var _this31 = iron_object_Uniforms.helpMat;
				var m30 = iron_object_Uniforms.biasMat;
				var a0020 = _this31.self._00;
				var a0120 = _this31.self._01;
				var a0220 = _this31.self._02;
				var a0320 = _this31.self._03;
				var a1020 = _this31.self._10;
				var a1120 = _this31.self._11;
				var a1220 = _this31.self._12;
				var a1320 = _this31.self._13;
				var a2020 = _this31.self._20;
				var a2120 = _this31.self._21;
				var a2220 = _this31.self._22;
				var a2320 = _this31.self._23;
				var a3020 = _this31.self._30;
				var a3120 = _this31.self._31;
				var a3220 = _this31.self._32;
				var a3320 = _this31.self._33;
				var b028 = m30.self._00;
				var b120 = m30.self._10;
				var b217 = m30.self._20;
				var b317 = m30.self._30;
				_this31.self._00 = a0020 * b028 + a0120 * b120 + a0220 * b217 + a0320 * b317;
				_this31.self._10 = a1020 * b028 + a1120 * b120 + a1220 * b217 + a1320 * b317;
				_this31.self._20 = a2020 * b028 + a2120 * b120 + a2220 * b217 + a2320 * b317;
				_this31.self._30 = a3020 * b028 + a3120 * b120 + a3220 * b217 + a3320 * b317;
				b028 = m30.self._01;
				b120 = m30.self._11;
				b217 = m30.self._21;
				b317 = m30.self._31;
				_this31.self._01 = a0020 * b028 + a0120 * b120 + a0220 * b217 + a0320 * b317;
				_this31.self._11 = a1020 * b028 + a1120 * b120 + a1220 * b217 + a1320 * b317;
				_this31.self._21 = a2020 * b028 + a2120 * b120 + a2220 * b217 + a2320 * b317;
				_this31.self._31 = a3020 * b028 + a3120 * b120 + a3220 * b217 + a3320 * b317;
				b028 = m30.self._02;
				b120 = m30.self._12;
				b217 = m30.self._22;
				b317 = m30.self._32;
				_this31.self._02 = a0020 * b028 + a0120 * b120 + a0220 * b217 + a0320 * b317;
				_this31.self._12 = a1020 * b028 + a1120 * b120 + a1220 * b217 + a1320 * b317;
				_this31.self._22 = a2020 * b028 + a2120 * b120 + a2220 * b217 + a2320 * b317;
				_this31.self._32 = a3020 * b028 + a3120 * b120 + a3220 * b217 + a3320 * b317;
				b028 = m30.self._03;
				b120 = m30.self._13;
				b217 = m30.self._23;
				b317 = m30.self._33;
				_this31.self._03 = a0020 * b028 + a0120 * b120 + a0220 * b217 + a0320 * b317;
				_this31.self._13 = a1020 * b028 + a1120 * b120 + a1220 * b217 + a1320 * b317;
				_this31.self._23 = a2020 * b028 + a2120 * b120 + a2220 * b217 + a2320 * b317;
				_this31.self._33 = a3020 * b028 + a3120 * b120 + a3220 * b217 + a3320 * b317;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(StringTools.startsWith(c.link,"_biasLightWorldViewProjectionMatrixSpot")) {
			var light1 = iron_object_Uniforms.getSpot(HxOverrides.cca(c.link,c.link.length - 1) - 48);
			if(light1 != null) {
				if(object == null) {
					var _this32 = iron_object_Uniforms.helpMat;
					_this32.self._00 = 1.0;
					_this32.self._01 = 0.0;
					_this32.self._02 = 0.0;
					_this32.self._03 = 0.0;
					_this32.self._10 = 0.0;
					_this32.self._11 = 1.0;
					_this32.self._12 = 0.0;
					_this32.self._13 = 0.0;
					_this32.self._20 = 0.0;
					_this32.self._21 = 0.0;
					_this32.self._22 = 1.0;
					_this32.self._23 = 0.0;
					_this32.self._30 = 0.0;
					_this32.self._31 = 0.0;
					_this32.self._32 = 0.0;
					_this32.self._33 = 1.0;
				} else {
					var _this33 = iron_object_Uniforms.helpMat;
					var m31 = object.transform.worldUnpack;
					_this33.self._00 = m31.self._00;
					_this33.self._01 = m31.self._01;
					_this33.self._02 = m31.self._02;
					_this33.self._03 = m31.self._03;
					_this33.self._10 = m31.self._10;
					_this33.self._11 = m31.self._11;
					_this33.self._12 = m31.self._12;
					_this33.self._13 = m31.self._13;
					_this33.self._20 = m31.self._20;
					_this33.self._21 = m31.self._21;
					_this33.self._22 = m31.self._22;
					_this33.self._23 = m31.self._23;
					_this33.self._30 = m31.self._30;
					_this33.self._31 = m31.self._31;
					_this33.self._32 = m31.self._32;
					_this33.self._33 = m31.self._33;
				}
				var _this34 = iron_object_Uniforms.helpMat;
				var m32 = light1.VP;
				var a0021 = _this34.self._00;
				var a0121 = _this34.self._01;
				var a0221 = _this34.self._02;
				var a0321 = _this34.self._03;
				var a1021 = _this34.self._10;
				var a1121 = _this34.self._11;
				var a1221 = _this34.self._12;
				var a1321 = _this34.self._13;
				var a2021 = _this34.self._20;
				var a2121 = _this34.self._21;
				var a2221 = _this34.self._22;
				var a2321 = _this34.self._23;
				var a3021 = _this34.self._30;
				var a3121 = _this34.self._31;
				var a3221 = _this34.self._32;
				var a3321 = _this34.self._33;
				var b029 = m32.self._00;
				var b121 = m32.self._10;
				var b218 = m32.self._20;
				var b318 = m32.self._30;
				_this34.self._00 = a0021 * b029 + a0121 * b121 + a0221 * b218 + a0321 * b318;
				_this34.self._10 = a1021 * b029 + a1121 * b121 + a1221 * b218 + a1321 * b318;
				_this34.self._20 = a2021 * b029 + a2121 * b121 + a2221 * b218 + a2321 * b318;
				_this34.self._30 = a3021 * b029 + a3121 * b121 + a3221 * b218 + a3321 * b318;
				b029 = m32.self._01;
				b121 = m32.self._11;
				b218 = m32.self._21;
				b318 = m32.self._31;
				_this34.self._01 = a0021 * b029 + a0121 * b121 + a0221 * b218 + a0321 * b318;
				_this34.self._11 = a1021 * b029 + a1121 * b121 + a1221 * b218 + a1321 * b318;
				_this34.self._21 = a2021 * b029 + a2121 * b121 + a2221 * b218 + a2321 * b318;
				_this34.self._31 = a3021 * b029 + a3121 * b121 + a3221 * b218 + a3321 * b318;
				b029 = m32.self._02;
				b121 = m32.self._12;
				b218 = m32.self._22;
				b318 = m32.self._32;
				_this34.self._02 = a0021 * b029 + a0121 * b121 + a0221 * b218 + a0321 * b318;
				_this34.self._12 = a1021 * b029 + a1121 * b121 + a1221 * b218 + a1321 * b318;
				_this34.self._22 = a2021 * b029 + a2121 * b121 + a2221 * b218 + a2321 * b318;
				_this34.self._32 = a3021 * b029 + a3121 * b121 + a3221 * b218 + a3321 * b318;
				b029 = m32.self._03;
				b121 = m32.self._13;
				b218 = m32.self._23;
				b318 = m32.self._33;
				_this34.self._03 = a0021 * b029 + a0121 * b121 + a0221 * b218 + a0321 * b318;
				_this34.self._13 = a1021 * b029 + a1121 * b121 + a1221 * b218 + a1321 * b318;
				_this34.self._23 = a2021 * b029 + a2121 * b121 + a2221 * b218 + a2321 * b318;
				_this34.self._33 = a3021 * b029 + a3121 * b121 + a3221 * b218 + a3321 * b318;
				var _this35 = iron_object_Uniforms.helpMat;
				var m33 = iron_object_Uniforms.biasMat;
				var a0022 = _this35.self._00;
				var a0122 = _this35.self._01;
				var a0222 = _this35.self._02;
				var a0322 = _this35.self._03;
				var a1022 = _this35.self._10;
				var a1122 = _this35.self._11;
				var a1222 = _this35.self._12;
				var a1322 = _this35.self._13;
				var a2022 = _this35.self._20;
				var a2122 = _this35.self._21;
				var a2222 = _this35.self._22;
				var a2322 = _this35.self._23;
				var a3022 = _this35.self._30;
				var a3122 = _this35.self._31;
				var a3222 = _this35.self._32;
				var a3322 = _this35.self._33;
				var b030 = m33.self._00;
				var b122 = m33.self._10;
				var b219 = m33.self._20;
				var b319 = m33.self._30;
				_this35.self._00 = a0022 * b030 + a0122 * b122 + a0222 * b219 + a0322 * b319;
				_this35.self._10 = a1022 * b030 + a1122 * b122 + a1222 * b219 + a1322 * b319;
				_this35.self._20 = a2022 * b030 + a2122 * b122 + a2222 * b219 + a2322 * b319;
				_this35.self._30 = a3022 * b030 + a3122 * b122 + a3222 * b219 + a3322 * b319;
				b030 = m33.self._01;
				b122 = m33.self._11;
				b219 = m33.self._21;
				b319 = m33.self._31;
				_this35.self._01 = a0022 * b030 + a0122 * b122 + a0222 * b219 + a0322 * b319;
				_this35.self._11 = a1022 * b030 + a1122 * b122 + a1222 * b219 + a1322 * b319;
				_this35.self._21 = a2022 * b030 + a2122 * b122 + a2222 * b219 + a2322 * b319;
				_this35.self._31 = a3022 * b030 + a3122 * b122 + a3222 * b219 + a3322 * b319;
				b030 = m33.self._02;
				b122 = m33.self._12;
				b219 = m33.self._22;
				b319 = m33.self._32;
				_this35.self._02 = a0022 * b030 + a0122 * b122 + a0222 * b219 + a0322 * b319;
				_this35.self._12 = a1022 * b030 + a1122 * b122 + a1222 * b219 + a1322 * b319;
				_this35.self._22 = a2022 * b030 + a2122 * b122 + a2222 * b219 + a2322 * b319;
				_this35.self._32 = a3022 * b030 + a3122 * b122 + a3222 * b219 + a3322 * b319;
				b030 = m33.self._03;
				b122 = m33.self._13;
				b219 = m33.self._23;
				b319 = m33.self._33;
				_this35.self._03 = a0022 * b030 + a0122 * b122 + a0222 * b219 + a0322 * b319;
				_this35.self._13 = a1022 * b030 + a1122 * b122 + a1222 * b219 + a1322 * b319;
				_this35.self._23 = a2022 * b030 + a2122 * b122 + a2222 * b219 + a2322 * b319;
				_this35.self._33 = a3022 * b030 + a3122 * b122 + a3222 * b219 + a3322 * b319;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(StringTools.startsWith(c.link,"_biasLightViewProjectionMatrixSpot")) {
			var light2 = iron_object_Uniforms.getSpot(HxOverrides.cca(c.link,c.link.length - 1) - 48);
			if(light2 != null) {
				var _this36 = iron_object_Uniforms.helpMat;
				var m34 = light2.VP;
				_this36.self._00 = m34.self._00;
				_this36.self._01 = m34.self._01;
				_this36.self._02 = m34.self._02;
				_this36.self._03 = m34.self._03;
				_this36.self._10 = m34.self._10;
				_this36.self._11 = m34.self._11;
				_this36.self._12 = m34.self._12;
				_this36.self._13 = m34.self._13;
				_this36.self._20 = m34.self._20;
				_this36.self._21 = m34.self._21;
				_this36.self._22 = m34.self._22;
				_this36.self._23 = m34.self._23;
				_this36.self._30 = m34.self._30;
				_this36.self._31 = m34.self._31;
				_this36.self._32 = m34.self._32;
				_this36.self._33 = m34.self._33;
				var _this37 = iron_object_Uniforms.helpMat;
				var m35 = iron_object_Uniforms.biasMat;
				var a0023 = _this37.self._00;
				var a0123 = _this37.self._01;
				var a0223 = _this37.self._02;
				var a0323 = _this37.self._03;
				var a1023 = _this37.self._10;
				var a1123 = _this37.self._11;
				var a1223 = _this37.self._12;
				var a1323 = _this37.self._13;
				var a2023 = _this37.self._20;
				var a2123 = _this37.self._21;
				var a2223 = _this37.self._22;
				var a2323 = _this37.self._23;
				var a3023 = _this37.self._30;
				var a3123 = _this37.self._31;
				var a3223 = _this37.self._32;
				var a3323 = _this37.self._33;
				var b033 = m35.self._00;
				var b123 = m35.self._10;
				var b220 = m35.self._20;
				var b320 = m35.self._30;
				_this37.self._00 = a0023 * b033 + a0123 * b123 + a0223 * b220 + a0323 * b320;
				_this37.self._10 = a1023 * b033 + a1123 * b123 + a1223 * b220 + a1323 * b320;
				_this37.self._20 = a2023 * b033 + a2123 * b123 + a2223 * b220 + a2323 * b320;
				_this37.self._30 = a3023 * b033 + a3123 * b123 + a3223 * b220 + a3323 * b320;
				b033 = m35.self._01;
				b123 = m35.self._11;
				b220 = m35.self._21;
				b320 = m35.self._31;
				_this37.self._01 = a0023 * b033 + a0123 * b123 + a0223 * b220 + a0323 * b320;
				_this37.self._11 = a1023 * b033 + a1123 * b123 + a1223 * b220 + a1323 * b320;
				_this37.self._21 = a2023 * b033 + a2123 * b123 + a2223 * b220 + a2323 * b320;
				_this37.self._31 = a3023 * b033 + a3123 * b123 + a3223 * b220 + a3323 * b320;
				b033 = m35.self._02;
				b123 = m35.self._12;
				b220 = m35.self._22;
				b320 = m35.self._32;
				_this37.self._02 = a0023 * b033 + a0123 * b123 + a0223 * b220 + a0323 * b320;
				_this37.self._12 = a1023 * b033 + a1123 * b123 + a1223 * b220 + a1323 * b320;
				_this37.self._22 = a2023 * b033 + a2123 * b123 + a2223 * b220 + a2323 * b320;
				_this37.self._32 = a3023 * b033 + a3123 * b123 + a3223 * b220 + a3323 * b320;
				b033 = m35.self._03;
				b123 = m35.self._13;
				b220 = m35.self._23;
				b320 = m35.self._33;
				_this37.self._03 = a0023 * b033 + a0123 * b123 + a0223 * b220 + a0323 * b320;
				_this37.self._13 = a1023 * b033 + a1123 * b123 + a1223 * b220 + a1323 * b320;
				_this37.self._23 = a2023 * b033 + a2123 * b123 + a2223 * b220 + a2323 * b320;
				_this37.self._33 = a3023 * b033 + a3123 * b123 + a3223 * b220 + a3323 * b320;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_particleData") {
			var mo = js_Boot.__cast(object , iron_object_MeshObject);
			if(mo.particleOwner != null && mo.particleOwner.particleSystems != null) {
				m = mo.particleOwner.particleSystems[mo.particleIndex].getData();
			}
		} else if(iron_object_Uniforms.externalMat4Links != null) {
			var _g = 0;
			var _g1 = iron_object_Uniforms.externalMat4Links;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				m = fn(object,iron_object_Uniforms.currentMat(object),c.link);
				if(m != null) {
					break;
				}
			}
		}
		if(m == null) {
			return;
		}
		g.setMatrix(location,m.self);
	} else if(c.type == "mat3") {
		var m36 = null;
		if(c.link == "_normalMatrix") {
			var _this38 = iron_object_Uniforms.helpMat;
			var m37 = object.transform.world;
			var a0024 = m37.self._00;
			var a0124 = m37.self._01;
			var a0224 = m37.self._02;
			var a0324 = m37.self._03;
			var a1024 = m37.self._10;
			var a1124 = m37.self._11;
			var a1224 = m37.self._12;
			var a1324 = m37.self._13;
			var a2024 = m37.self._20;
			var a2124 = m37.self._21;
			var a2224 = m37.self._22;
			var a2324 = m37.self._23;
			var a3024 = m37.self._30;
			var a3124 = m37.self._31;
			var a3224 = m37.self._32;
			var a3324 = m37.self._33;
			var b003 = a0024 * a1124 - a0124 * a1024;
			var b0112 = a0024 * a1224 - a0224 * a1024;
			var b0210 = a0024 * a1324 - a0324 * a1024;
			var b034 = a0124 * a1224 - a0224 * a1124;
			var b043 = a0124 * a1324 - a0324 * a1124;
			var b053 = a0224 * a1324 - a0324 * a1224;
			var b063 = a2024 * a3124 - a2124 * a3024;
			var b073 = a2024 * a3224 - a2224 * a3024;
			var b083 = a2024 * a3324 - a2324 * a3024;
			var b093 = a2124 * a3224 - a2224 * a3124;
			var b103 = a2124 * a3324 - a2324 * a3124;
			var b1110 = a2224 * a3324 - a2324 * a3224;
			var det3 = b003 * b1110 - b0112 * b103 + b0210 * b093 + b034 * b083 - b043 * b073 + b053 * b063;
			if(det3 == 0.0) {
				_this38.self._00 = 1.0;
				_this38.self._01 = 0.0;
				_this38.self._02 = 0.0;
				_this38.self._03 = 0.0;
				_this38.self._10 = 0.0;
				_this38.self._11 = 1.0;
				_this38.self._12 = 0.0;
				_this38.self._13 = 0.0;
				_this38.self._20 = 0.0;
				_this38.self._21 = 0.0;
				_this38.self._22 = 1.0;
				_this38.self._23 = 0.0;
				_this38.self._30 = 0.0;
				_this38.self._31 = 0.0;
				_this38.self._32 = 0.0;
				_this38.self._33 = 1.0;
			} else {
				det3 = 1.0 / det3;
				_this38.self._00 = (a1124 * b1110 - a1224 * b103 + a1324 * b093) * det3;
				_this38.self._01 = (a0224 * b103 - a0124 * b1110 - a0324 * b093) * det3;
				_this38.self._02 = (a3124 * b053 - a3224 * b043 + a3324 * b034) * det3;
				_this38.self._03 = (a2224 * b043 - a2124 * b053 - a2324 * b034) * det3;
				_this38.self._10 = (a1224 * b083 - a1024 * b1110 - a1324 * b073) * det3;
				_this38.self._11 = (a0024 * b1110 - a0224 * b083 + a0324 * b073) * det3;
				_this38.self._12 = (a3224 * b0210 - a3024 * b053 - a3324 * b0112) * det3;
				_this38.self._13 = (a2024 * b053 - a2224 * b0210 + a2324 * b0112) * det3;
				_this38.self._20 = (a1024 * b103 - a1124 * b083 + a1324 * b063) * det3;
				_this38.self._21 = (a0124 * b083 - a0024 * b103 - a0324 * b063) * det3;
				_this38.self._22 = (a3024 * b043 - a3124 * b0210 + a3324 * b003) * det3;
				_this38.self._23 = (a2124 * b0210 - a2024 * b043 - a2324 * b003) * det3;
				_this38.self._30 = (a1124 * b073 - a1024 * b093 - a1224 * b063) * det3;
				_this38.self._31 = (a0024 * b093 - a0124 * b073 + a0224 * b063) * det3;
				_this38.self._32 = (a3124 * b0112 - a3024 * b034 - a3224 * b003) * det3;
				_this38.self._33 = (a2024 * b034 - a2124 * b0112 + a2224 * b003) * det3;
			}
			var _this39 = iron_object_Uniforms.helpMat;
			var f = _this39.self._01;
			_this39.self._01 = _this39.self._10;
			_this39.self._10 = f;
			f = _this39.self._02;
			_this39.self._02 = _this39.self._20;
			_this39.self._20 = f;
			f = _this39.self._12;
			_this39.self._12 = _this39.self._21;
			_this39.self._21 = f;
			var _this40 = iron_object_Uniforms.helpMat3;
			var m38 = iron_object_Uniforms.helpMat;
			_this40.self._00 = m38.self._00;
			_this40.self._01 = m38.self._01;
			_this40.self._02 = m38.self._02;
			_this40.self._10 = m38.self._10;
			_this40.self._11 = m38.self._11;
			_this40.self._12 = m38.self._12;
			_this40.self._20 = m38.self._20;
			_this40.self._21 = m38.self._21;
			_this40.self._22 = m38.self._22;
			m36 = iron_object_Uniforms.helpMat3;
		}
		if(c.link == "_viewMatrix3") {
			var _this41 = iron_object_Uniforms.helpMat3;
			var m39 = camera.V;
			_this41.self._00 = m39.self._00;
			_this41.self._01 = m39.self._01;
			_this41.self._02 = m39.self._02;
			_this41.self._10 = m39.self._10;
			_this41.self._11 = m39.self._11;
			_this41.self._12 = m39.self._12;
			_this41.self._20 = m39.self._20;
			_this41.self._21 = m39.self._21;
			_this41.self._22 = m39.self._22;
			m36 = iron_object_Uniforms.helpMat3;
		}
		if(m36 == null) {
			return;
		}
		g.setMatrix3(location,m36.self);
	} else if(c.type == "vec4") {
		var v = null;
		var _this42 = iron_object_Uniforms.helpVec;
		_this42.x = 0;
		_this42.y = 0;
		_this42.z = 0;
		_this42.w = 1.0;
		if(iron_object_Uniforms.externalVec4Links != null) {
			var _g2 = 0;
			var _g11 = iron_object_Uniforms.externalVec4Links;
			while(_g2 < _g11.length) {
				var fn1 = _g11[_g2];
				++_g2;
				v = fn1(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v != null) {
					break;
				}
			}
		}
		if(v == null) {
			return;
		}
		g.setFloat4(location,v.x,v.y,v.z,v.w);
	} else if(c.type == "vec3") {
		var v1 = null;
		var _this43 = iron_object_Uniforms.helpVec;
		_this43.x = 0;
		_this43.y = 0;
		_this43.z = 0;
		_this43.w = 1.0;
		if(c.link == "_dim") {
			var d = object.transform.dim;
			var s = object.transform.scale;
			var _this44 = iron_object_Uniforms.helpVec;
			_this44.x = d.x / s.x;
			_this44.y = d.y / s.y;
			_this44.z = d.z / s.z;
			_this44.w = 1.0;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_halfDim") {
			var d1 = object.transform.dim;
			var s1 = object.transform.scale;
			var _this45 = iron_object_Uniforms.helpVec;
			_this45.x = d1.x / s1.x / 2;
			_this45.y = d1.y / s1.y / 2;
			_this45.z = d1.z / s1.z / 2;
			_this45.w = 1.0;
			v1 = iron_object_Uniforms.helpVec;
		} else if(iron_object_Uniforms.externalVec3Links != null) {
			var _g3 = 0;
			var _g12 = iron_object_Uniforms.externalVec3Links;
			while(_g3 < _g12.length) {
				var f1 = _g12[_g3];
				++_g3;
				v1 = f1(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v1 != null) {
					break;
				}
			}
		}
		if(v1 == null) {
			return;
		}
		g.setFloat3(location,v1.x,v1.y,v1.z);
	} else if(c.type == "vec2") {
		var vx = null;
		var vy = 0;
		if(c.link == "_tilesheetOffset") {
			var ts = (js_Boot.__cast(object , iron_object_MeshObject)).tilesheet;
			vx = ts.tileX;
			vy = ts.tileY;
		} else if(iron_object_Uniforms.externalVec2Links != null) {
			var _g4 = 0;
			var _g13 = iron_object_Uniforms.externalVec2Links;
			while(_g4 < _g13.length) {
				var fn2 = _g13[_g4];
				++_g4;
				var v2 = fn2(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v2 != null) {
					vx = v2.x;
					vy = v2.y;
					break;
				}
			}
		}
		if(vx == null) {
			return;
		}
		g.setFloat2(location,vx,vy);
	} else if(c.type == "float") {
		var f2 = null;
		if(c.link == "_objectInfoIndex") {
			f2 = object.uid;
		} else if(c.link == "_objectInfoMaterialIndex") {
			f2 = iron_object_Uniforms.currentMat(object).uid;
		} else if(c.link == "_objectInfoRandom") {
			f2 = object.urandom;
		} else if(c.link == "_posUnpack") {
			f2 = iron_object_Uniforms.posUnpack != null ? iron_object_Uniforms.posUnpack : 1.0;
		} else if(c.link == "_texUnpack") {
			f2 = iron_object_Uniforms.texUnpack != null ? iron_object_Uniforms.texUnpack : 1.0;
		} else if(iron_object_Uniforms.externalFloatLinks != null) {
			var _g5 = 0;
			var _g14 = iron_object_Uniforms.externalFloatLinks;
			while(_g5 < _g14.length) {
				var fn3 = _g14[_g5];
				++_g5;
				var res = fn3(object,iron_object_Uniforms.currentMat(object),c.link);
				if(res != null) {
					f2 = res;
					break;
				}
			}
		}
		if(f2 == null) {
			return;
		}
		g.setFloat(location,f2);
	} else if(c.type == "floats") {
		var fa = null;
		if(fa == null && iron_object_Uniforms.externalFloatsLinks != null) {
			var _g6 = 0;
			var _g15 = iron_object_Uniforms.externalFloatsLinks;
			while(_g6 < _g15.length) {
				var fn4 = _g15[_g6];
				++_g6;
				fa = fn4(object,iron_object_Uniforms.currentMat(object),c.link);
				if(fa != null) {
					break;
				}
			}
		}
		if(fa == null) {
			return;
		}
		g.setFloats(location,fa);
	} else if(c.type == "int") {
		var i = null;
		if(c.link == "_uid") {
			i = object.uid;
		} else if(iron_object_Uniforms.externalIntLinks != null) {
			var _g7 = 0;
			var _g16 = iron_object_Uniforms.externalIntLinks;
			while(_g7 < _g16.length) {
				var fn5 = _g16[_g7];
				++_g7;
				var res1 = fn5(object,iron_object_Uniforms.currentMat(object),c.link);
				if(res1 != null) {
					i = res1;
					break;
				}
			}
		}
		if(i == null) {
			return;
		}
		g.setInt(location,i);
	}
};
iron_object_Uniforms.setMaterialConstants = function(g,context,materialContext) {
	if(materialContext.raw.bind_constants != null) {
		var _g = 0;
		var _g1 = materialContext.raw.bind_constants.length;
		while(_g < _g1) {
			var i = _g++;
			var matc = materialContext.raw.bind_constants[i];
			var pos = -1;
			var _g2 = 0;
			var _g11 = context.raw.constants.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				if(context.raw.constants[i1].name == matc.name) {
					pos = i1;
					break;
				}
			}
			if(pos == -1) {
				continue;
			}
			var c = context.raw.constants[pos];
			iron_object_Uniforms.setMaterialConstant(g,context.constants[pos],c,matc);
		}
	}
	if(materialContext.textures != null) {
		var _g3 = 0;
		var _g12 = materialContext.textures.length;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var mname = materialContext.raw.bind_textures[i2].name;
			var _g4 = 0;
			var _g13 = context.textureUnits.length;
			while(_g4 < _g13) {
				var j = _g4++;
				var sname = context.raw.texture_units[j].name;
				if(mname == sname) {
					g.setTexture(context.textureUnits[j],materialContext.textures[i2]);
					materialContext.setTextureParameters(g,i2,context,j);
					break;
				}
			}
		}
	}
};
iron_object_Uniforms.getSpot = function(index) {
	var i = 0;
	var _g = 0;
	var _g1 = iron_Scene.active.lights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.data.raw.type != "spot" && l.data.raw.type != "area") {
			continue;
		}
		if(i == index) {
			return l;
		}
		++i;
	}
	return null;
};
iron_object_Uniforms.currentMat = function(object) {
	if(object != null && ((object) instanceof iron_object_MeshObject)) {
		var mo = js_Boot.__cast(object , iron_object_MeshObject);
		return mo.materials[mo.materialIndex];
	}
	return null;
};
iron_object_Uniforms.setMaterialConstant = function(g,location,c,matc) {
	switch(c.type) {
	case "bool":
		g.setBool(location,matc.bool);
		break;
	case "float":
		g.setFloat(location,matc.float);
		break;
	case "int":
		g.setInt(location,matc.int);
		break;
	case "vec2":
		g.setFloat2(location,matc.vec2[0],matc.vec2[1]);
		break;
	case "vec3":
		g.setFloat3(location,matc.vec3[0],matc.vec3[1],matc.vec3[2]);
		break;
	case "vec4":
		g.setFloat4(location,matc.vec4[0],matc.vec4[1],matc.vec4[2],matc.vec4[3]);
		break;
	}
};
var iron_system_VirtualButton = function() {
	this.down = false;
	this.released = false;
	this.started = false;
};
$hxClasses["iron.system.VirtualButton"] = iron_system_VirtualButton;
iron_system_VirtualButton.__name__ = "iron.system.VirtualButton";
iron_system_VirtualButton.prototype = {
	__class__: iron_system_VirtualButton
};
var iron_system_VirtualInput = function() {
	this.virtualButtons = null;
};
$hxClasses["iron.system.VirtualInput"] = iron_system_VirtualInput;
iron_system_VirtualInput.__name__ = "iron.system.VirtualInput";
iron_system_VirtualInput.prototype = {
	downVirtual: function(button) {
		if(this.virtualButtons != null) {
			var _this = this.virtualButtons;
			var vb = __map_reserved[button] != null ? _this.getReserved(button) : _this.h[button];
			if(vb != null) {
				vb.down = true;
				vb.started = true;
			}
		}
	}
	,upVirtual: function(button) {
		if(this.virtualButtons != null) {
			var _this = this.virtualButtons;
			var vb = __map_reserved[button] != null ? _this.getReserved(button) : _this.h[button];
			if(vb != null) {
				vb.down = false;
				vb.released = true;
			}
		}
	}
	,__class__: iron_system_VirtualInput
};
var iron_system_Mouse = function() {
	this.lastY = -1.0;
	this.lastX = -1.0;
	this.hidden = false;
	this.locked = false;
	this.wheelDelta = 0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false,false,false];
	this.buttonsStarted = [false,false,false];
	this.buttonsDown = [false,false,false];
	iron_system_VirtualInput.call(this);
	kha_input_Mouse.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener),$bind(this,this.wheelListener));
};
$hxClasses["iron.system.Mouse"] = iron_system_Mouse;
iron_system_Mouse.__name__ = "iron.system.Mouse";
iron_system_Mouse.__super__ = iron_system_VirtualInput;
iron_system_Mouse.prototype = $extend(iron_system_VirtualInput.prototype,{
	endFrame: function() {
		var tmp = this.buttonsStarted[1] = this.buttonsStarted[2] = false;
		this.buttonsStarted[0] = tmp;
		var tmp1 = this.buttonsReleased[1] = this.buttonsReleased[2] = false;
		this.buttonsReleased[0] = tmp1;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
		this.wheelDelta = 0;
	}
	,reset: function() {
		var tmp = this.buttonsDown[1] = this.buttonsDown[2] = false;
		this.buttonsDown[0] = tmp;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		if(button == "left") {
			return 0;
		} else if(button == "right") {
			return 1;
		} else {
			return 2;
		}
	}
	,down: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,lock: function() {
		if(kha_input_Mouse.get().canLock()) {
			kha_input_Mouse.get().lock();
			this.locked = true;
			this.hidden = true;
		}
	}
	,unlock: function() {
		if(kha_input_Mouse.get().canLock()) {
			kha_input_Mouse.get().unlock();
			this.locked = false;
			this.hidden = false;
		}
	}
	,downListener: function(index,x,y) {
		this.buttonsDown[index] = true;
		this.buttonsStarted[index] = true;
		this.x = x;
		this.y = y;
		this.downVirtual(iron_system_Mouse.buttons[index]);
	}
	,upListener: function(index,x,y) {
		this.buttonsDown[index] = false;
		this.buttonsReleased[index] = true;
		this.x = x;
		this.y = y;
		this.upVirtual(iron_system_Mouse.buttons[index]);
	}
	,moveListener: function(x,y,movementX,movementY) {
		if(this.lastX == -1.0 && this.lastY == -1.0) {
			this.lastX = x;
			this.lastY = y;
		}
		if(this.locked) {
			this.movementX += movementX;
			this.movementY += movementY;
		} else {
			this.movementX += x - this.lastX;
			this.movementY += y - this.lastY;
		}
		this.lastX = x;
		this.lastY = y;
		this.x = x;
		this.y = y;
		this.moved = true;
	}
	,wheelListener: function(delta) {
		this.wheelDelta = delta;
	}
	,__class__: iron_system_Mouse
});
var iron_system_Pen = function() {
	this.lastY = -1.0;
	this.lastX = -1.0;
	this.connected = false;
	this.pressure = 0.0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false];
	this.buttonsStarted = [false];
	this.buttonsDown = [false];
	iron_system_VirtualInput.call(this);
	kha_input_Pen.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener));
};
$hxClasses["iron.system.Pen"] = iron_system_Pen;
iron_system_Pen.__name__ = "iron.system.Pen";
iron_system_Pen.__super__ = iron_system_VirtualInput;
iron_system_Pen.prototype = $extend(iron_system_VirtualInput.prototype,{
	endFrame: function() {
		this.buttonsStarted[0] = false;
		this.buttonsReleased[0] = false;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
	}
	,reset: function() {
		this.buttonsDown[0] = false;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		return 0;
	}
	,down: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,downListener: function(x,y,pressure) {
		this.buttonsDown[0] = true;
		this.buttonsStarted[0] = true;
		this.x = x;
		this.y = y;
		this.pressure = pressure;
	}
	,upListener: function(x,y,pressure) {
		this.buttonsDown[0] = false;
		this.buttonsReleased[0] = true;
		this.x = x;
		this.y = y;
		this.pressure = pressure;
	}
	,moveListener: function(x,y,pressure) {
		if(this.lastX == -1.0 && this.lastY == -1.0) {
			this.lastX = x;
			this.lastY = y;
		}
		this.movementX = x - this.lastX;
		this.movementY = y - this.lastY;
		this.lastX = x;
		this.lastY = y;
		this.x = x;
		this.y = y;
		this.moved = true;
		this.pressure = pressure;
		this.connected = true;
	}
	,__class__: iron_system_Pen
});
var iron_system_Keyboard = function() {
	this.repeatTime = 0.0;
	this.repeatKey = false;
	this.keysFrame = [];
	this.keysReleased = new haxe_ds_StringMap();
	this.keysStarted = new haxe_ds_StringMap();
	this.keysDown = new haxe_ds_StringMap();
	iron_system_VirtualInput.call(this);
	this.reset();
	kha_input_Keyboard.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.pressListener));
};
$hxClasses["iron.system.Keyboard"] = iron_system_Keyboard;
iron_system_Keyboard.__name__ = "iron.system.Keyboard";
iron_system_Keyboard.keyCode = function(key) {
	if(key == 32) {
		return "space";
	} else if(key == 8) {
		return "backspace";
	} else if(key == 9) {
		return "tab";
	} else if(key == 13) {
		return "enter";
	} else if(key == 16) {
		return "shift";
	} else if(key == 17) {
		return "control";
	} else if(key == 18) {
		return "alt";
	} else if(key == 27) {
		return "escape";
	} else if(key == 46) {
		return "delete";
	} else if(key == 38) {
		return "up";
	} else if(key == 40) {
		return "down";
	} else if(key == 37) {
		return "left";
	} else if(key == 39) {
		return "right";
	} else if(key == 1) {
		return "back";
	} else if(key == 188) {
		return ",";
	} else if(key == 190) {
		return ".";
	} else if(key == 58) {
		return ":";
	} else if(key == 59) {
		return ";";
	} else if(key == 60) {
		return "<";
	} else if(key == 61) {
		return "=";
	} else if(key == 62) {
		return ">";
	} else if(key == 63) {
		return "?";
	} else if(key == 161) {
		return "!";
	} else if(key == 162) {
		return "\"";
	} else if(key == 163) {
		return "#";
	} else if(key == 164) {
		return "$";
	} else if(key == 165) {
		return "%";
	} else if(key == 166) {
		return "&";
	} else if(key == 167) {
		return "_";
	} else if(key == 168) {
		return "(";
	} else if(key == 169) {
		return ")";
	} else if(key == 170) {
		return "*";
	} else if(key == 172) {
		return "|";
	} else if(key == 174) {
		return "{";
	} else if(key == 175) {
		return "}";
	} else if(key == 219) {
		return "[";
	} else if(key == 221) {
		return "]";
	} else if(key == 176) {
		return "~";
	} else if(key == 192) {
		return "`";
	} else if(key == 191) {
		return "/";
	} else if(key == 220) {
		return "\\";
	} else if(key == 64) {
		return "@";
	} else if(key == 107) {
		return "+";
	} else if(key == 171) {
		return "+";
	} else if(key == 109) {
		return "-";
	} else if(key == 173) {
		return "-";
	} else if(key == 106) {
		return "*";
	} else if(key == 111) {
		return "/";
	} else if(key == 110) {
		return ".";
	} else if(key == 48) {
		return "0";
	} else if(key == 96) {
		return "0";
	} else if(key == 49) {
		return "1";
	} else if(key == 97) {
		return "1";
	} else if(key == 50) {
		return "2";
	} else if(key == 98) {
		return "2";
	} else if(key == 51) {
		return "3";
	} else if(key == 99) {
		return "3";
	} else if(key == 52) {
		return "4";
	} else if(key == 100) {
		return "4";
	} else if(key == 53) {
		return "5";
	} else if(key == 101) {
		return "5";
	} else if(key == 54) {
		return "6";
	} else if(key == 102) {
		return "6";
	} else if(key == 55) {
		return "7";
	} else if(key == 103) {
		return "7";
	} else if(key == 56) {
		return "8";
	} else if(key == 104) {
		return "8";
	} else if(key == 57) {
		return "9";
	} else if(key == 105) {
		return "9";
	} else if(key == 112) {
		return "f1";
	} else if(key == 113) {
		return "f2";
	} else if(key == 114) {
		return "f3";
	} else if(key == 115) {
		return "f4";
	} else if(key == 116) {
		return "f5";
	} else if(key == 117) {
		return "f6";
	} else if(key == 118) {
		return "f7";
	} else if(key == 119) {
		return "f8";
	} else if(key == 120) {
		return "f9";
	} else if(key == 121) {
		return "f10";
	} else if(key == 122) {
		return "f11";
	} else if(key == 123) {
		return "f12";
	} else {
		return String.fromCodePoint(key).toLowerCase();
	}
};
iron_system_Keyboard.__super__ = iron_system_VirtualInput;
iron_system_Keyboard.prototype = $extend(iron_system_VirtualInput.prototype,{
	endFrame: function() {
		if(this.keysFrame.length > 0) {
			var _g = 0;
			var _g1 = this.keysFrame;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _this = this.keysStarted;
				if(__map_reserved[s] != null) {
					_this.setReserved(s,false);
				} else {
					_this.h[s] = false;
				}
				var _this1 = this.keysReleased;
				if(__map_reserved[s] != null) {
					_this1.setReserved(s,false);
				} else {
					_this1.h[s] = false;
				}
			}
			this.keysFrame.splice(0,this.keysFrame.length);
		}
		if(kha_Scheduler.time() - this.repeatTime > 0.05) {
			this.repeatTime = kha_Scheduler.time();
			this.repeatKey = true;
		} else {
			this.repeatKey = false;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = iron_system_Keyboard.keys;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _this = this.keysDown;
			if(__map_reserved[s] != null) {
				_this.setReserved(s,false);
			} else {
				_this.h[s] = false;
			}
			var _this1 = this.keysStarted;
			if(__map_reserved[s] != null) {
				_this1.setReserved(s,false);
			} else {
				_this1.h[s] = false;
			}
			var _this2 = this.keysReleased;
			if(__map_reserved[s] != null) {
				_this2.setReserved(s,false);
			} else {
				_this2.h[s] = false;
			}
		}
		this.endFrame();
	}
	,down: function(key) {
		var _this = this.keysDown;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,started: function(key) {
		var _this = this.keysStarted;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,released: function(key) {
		var _this = this.keysReleased;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,repeat: function(key) {
		var _this = this.keysStarted;
		if(!(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key])) {
			if(this.repeatKey) {
				var _this1 = this.keysDown;
				if(__map_reserved[key] != null) {
					return _this1.getReserved(key);
				} else {
					return _this1.h[key];
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,downListener: function(code) {
		var s = iron_system_Keyboard.keyCode(code);
		this.keysFrame.push(s);
		var _this = this.keysStarted;
		if(__map_reserved[s] != null) {
			_this.setReserved(s,true);
		} else {
			_this.h[s] = true;
		}
		var _this1 = this.keysDown;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,true);
		} else {
			_this1.h[s] = true;
		}
		this.repeatTime = kha_Scheduler.time() + 0.4;
		this.downVirtual(s);
	}
	,upListener: function(code) {
		var s = iron_system_Keyboard.keyCode(code);
		this.keysFrame.push(s);
		var _this = this.keysReleased;
		if(__map_reserved[s] != null) {
			_this.setReserved(s,true);
		} else {
			_this.h[s] = true;
		}
		var _this1 = this.keysDown;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,false);
		} else {
			_this1.h[s] = false;
		}
		this.upVirtual(s);
	}
	,pressListener: function(char) {
	}
	,__class__: iron_system_Keyboard
});
var iron_system_GamepadStick = function() {
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.lastY = 0.0;
	this.lastX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["iron.system.GamepadStick"] = iron_system_GamepadStick;
iron_system_GamepadStick.__name__ = "iron.system.GamepadStick";
iron_system_GamepadStick.prototype = {
	__class__: iron_system_GamepadStick
};
var iron_system_Gamepad = function(i,virtual) {
	if(virtual == null) {
		virtual = false;
	}
	this.num = 0;
	this.connected = false;
	this.rightStick = new iron_system_GamepadStick();
	this.leftStick = new iron_system_GamepadStick();
	this.buttonsFrame = [];
	this.buttonsReleased = [];
	this.buttonsStarted = [];
	this.buttonsDown = [];
	iron_system_VirtualInput.call(this);
	var _g = 0;
	var _g1 = iron_system_Gamepad.buttons;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		this.buttonsDown.push(0.0);
		this.buttonsStarted.push(false);
		this.buttonsReleased.push(false);
	}
	this.num = i;
	this.reset();
	if(virtual) {
		this.connected = true;
	} else {
		this.connect();
	}
};
$hxClasses["iron.system.Gamepad"] = iron_system_Gamepad;
iron_system_Gamepad.__name__ = "iron.system.Gamepad";
iron_system_Gamepad.__super__ = iron_system_VirtualInput;
iron_system_Gamepad.prototype = $extend(iron_system_VirtualInput.prototype,{
	connect: function() {
		var gamepad = kha_input_Gamepad.get(this.num);
		if(gamepad == null) {
			return;
		}
		this.connected = true;
		gamepad.notify($bind(this,this.axisListener),$bind(this,this.buttonListener));
	}
	,endFrame: function() {
		if(this.buttonsFrame.length > 0) {
			var _g = 0;
			var _g1 = this.buttonsFrame;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				this.buttonsStarted[i] = false;
				this.buttonsReleased[i] = false;
			}
			this.buttonsFrame.splice(0,this.buttonsFrame.length);
		}
		this.leftStick.moved = false;
		this.leftStick.movementX = 0;
		this.leftStick.movementY = 0;
		this.rightStick.moved = false;
		this.rightStick.movementX = 0;
		this.rightStick.movementY = 0;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.buttonsDown.length;
		while(_g < _g1) {
			var i = _g++;
			this.buttonsDown[i] = 0.0;
			this.buttonsStarted[i] = false;
			this.buttonsReleased[i] = false;
		}
		this.endFrame();
	}
	,axisListener: function(axis,value) {
		var stick = axis <= 1 ? this.leftStick : this.rightStick;
		if(axis == 0 || axis == 2) {
			stick.lastX = stick.x;
			stick.x = value;
			stick.movementX = stick.x - stick.lastX;
		} else if(axis == 1 || axis == 3) {
			stick.lastY = stick.y;
			stick.y = value;
			stick.movementY = stick.y - stick.lastY;
		}
		stick.moved = true;
	}
	,buttonListener: function(button,value) {
		this.buttonsFrame.push(button);
		this.buttonsDown[button] = value;
		if(value > 0) {
			this.buttonsStarted[button] = true;
		} else {
			this.buttonsReleased[button] = true;
		}
		if(value == 0.0) {
			this.upVirtual(iron_system_Gamepad.buttons[button]);
		} else if(value == 1.0) {
			this.downVirtual(iron_system_Gamepad.buttons[button]);
		}
	}
	,__class__: iron_system_Gamepad
});
var iron_system_Tween = function() { };
$hxClasses["iron.system.Tween"] = iron_system_Tween;
iron_system_Tween.__name__ = "iron.system.Tween";
iron_system_Tween.to = function(anim) {
	if(!iron_system_Tween.registered) {
		iron_system_Tween.registered = true;
		iron_App.notifyOnUpdate(iron_system_Tween.update);
		iron_App.notifyOnReset(function() {
			iron_App.notifyOnUpdate(iron_system_Tween.update);
			iron_system_Tween.reset();
		});
	}
	anim._time = 0;
	anim.isPlaying = anim.delay != null && anim.delay > 0.0 ? false : true;
	if(anim.ease == null) {
		anim.ease = 0;
	}
	if(anim.target != null && anim.props != null) {
		anim._comps = [];
		anim._x = [];
		anim._y = [];
		anim._z = [];
		anim._w = [];
		anim._normalize = [];
		var _g = 0;
		var _g1 = Reflect.fields(anim.props);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var val = Reflect.getProperty(anim.target,p);
			if(((val) instanceof iron_math_Vec4) || ((val) instanceof iron_math_Quat)) {
				anim._comps.push(4);
				anim._x.push(val.x);
				anim._y.push(val.y);
				anim._z.push(val.z);
				anim._w.push(val.w);
				anim._normalize.push(((val) instanceof iron_math_Quat));
			} else {
				anim._comps.push(1);
				anim._x.push(val);
				anim._y.push(0);
				anim._z.push(0);
				anim._w.push(0);
			}
		}
	}
	iron_system_Tween.anims.push(anim);
	return anim;
};
iron_system_Tween.timer = function(delay,done) {
	return iron_system_Tween.to({ target : null, props : null, duration : 0, delay : delay, done : done});
};
iron_system_Tween.reset = function() {
	iron_system_Tween.anims = [];
};
iron_system_Tween.update = function() {
	var d = 0.016666666666666666 * iron_system_Time.scale;
	var i = iron_system_Tween.anims.length;
	while(i-- > 0 && iron_system_Tween.anims.length > 0) {
		var a = iron_system_Tween.anims[i];
		if(a.delay > 0) {
			a.delay -= d;
			if(a.delay > 0) {
				continue;
			}
		}
		a._time += d;
		a.isPlaying = a._time < a.duration;
		if(a.target != null) {
			if(((a.target) instanceof iron_object_Transform)) {
				a.target.dirty = true;
			}
			var ps = Reflect.fields(a.props);
			var _g = 0;
			var _g1 = ps.length;
			while(_g < _g1) {
				var i1 = _g++;
				var p = ps[i1];
				var k = a._time / a.duration;
				if(k > 1) {
					k = 1;
				}
				if(a._comps[i1] == 1) {
					var fromVal = a._x[i1];
					var toVal = Reflect.getProperty(a.props,p);
					var val = fromVal + (toVal - fromVal) * iron_system_Tween.eases[a.ease](k);
					Reflect.setProperty(a.target,p,val);
				} else {
					var obj = Reflect.getProperty(a.props,p);
					var toX = Reflect.getProperty(obj,"x");
					var toY = Reflect.getProperty(obj,"y");
					var toZ = Reflect.getProperty(obj,"z");
					var toW = Reflect.getProperty(obj,"w");
					if(a._normalize[i1]) {
						var qdot = a._x[i1] * toX + a._y[i1] * toY + a._z[i1] * toZ + a._w[i1] * toW;
						if(qdot < 0.0) {
							toX = -toX;
							toY = -toY;
							toZ = -toZ;
							toW = -toW;
						}
					}
					var x = a._x[i1] + (toX - a._x[i1]) * iron_system_Tween.eases[a.ease](k);
					var y = a._y[i1] + (toY - a._y[i1]) * iron_system_Tween.eases[a.ease](k);
					var z = a._z[i1] + (toZ - a._z[i1]) * iron_system_Tween.eases[a.ease](k);
					var w = a._w[i1] + (toW - a._w[i1]) * iron_system_Tween.eases[a.ease](k);
					if(a._normalize[i1]) {
						var l = Math.sqrt(x * x + y * y + z * z + w * w);
						if(l > 0.0) {
							l = 1.0 / l;
							x *= l;
							y *= l;
							z *= l;
							w *= l;
						}
					}
					var t = Reflect.getProperty(a.target,p);
					Reflect.setProperty(t,"x",x);
					Reflect.setProperty(t,"y",y);
					Reflect.setProperty(t,"z",z);
					Reflect.setProperty(t,"w",w);
				}
			}
		}
		if(a.isPlaying) {
			if(a.tick != null) {
				a.tick();
			}
		} else {
			iron_system_Tween.anims.splice(i,1);
			--i;
			a.isPlaying = false;
			if(a.done != null) {
				a.done();
			}
		}
	}
};
iron_system_Tween.easeLinear = function(k) {
	return k;
};
iron_system_Tween.easeSineIn = function(k) {
	if(k == 0) {
		return 0;
	} else if(k == 1) {
		return 1;
	} else {
		return 1 - Math.cos(k * Math.PI / 2);
	}
};
iron_system_Tween.easeSineOut = function(k) {
	if(k == 0) {
		return 0;
	} else if(k == 1) {
		return 1;
	} else {
		return Math.sin(k * (Math.PI * 0.5));
	}
};
iron_system_Tween.easeSineInOut = function(k) {
	if(k == 0) {
		return 0;
	} else if(k == 1) {
		return 1;
	} else {
		return -0.5 * (Math.cos(Math.PI * k) - 1);
	}
};
iron_system_Tween.easeQuadIn = function(k) {
	return k * k;
};
iron_system_Tween.easeQuadOut = function(k) {
	return -k * (k - 2);
};
iron_system_Tween.easeQuadInOut = function(k) {
	if(k < 0.5) {
		return 2 * k * k;
	} else {
		return -2 * (--k * k) + 1;
	}
};
iron_system_Tween.easeCubicIn = function(k) {
	return k * k * k;
};
iron_system_Tween.easeCubicOut = function(k) {
	return --k * k * k + 1;
};
iron_system_Tween.easeCubicInOut = function(k) {
	if((k *= 2) < 1) {
		return 0.5 * k * k * k;
	} else {
		return 0.5 * ((k -= 2) * k * k + 2);
	}
};
iron_system_Tween.easeQuartIn = function(k) {
	return (k *= k) * k;
};
iron_system_Tween.easeQuartOut = function(k) {
	k = --k * k;
	return 1 - k * k;
};
iron_system_Tween.easeQuartInOut = function(k) {
	if((k *= 2) < 1) {
		return 0.5 * (k *= k) * k;
	} else {
		k = (k -= 2) * k;
		return -0.5 * (k * k - 2);
	}
};
iron_system_Tween.easeQuintIn = function(k) {
	return k * (k *= k) * k;
};
iron_system_Tween.easeQuintOut = function(k) {
	return --k * (k *= k) * k + 1;
};
iron_system_Tween.easeQuintInOut = function(k) {
	if((k *= 2) < 1) {
		return 0.5 * k * (k *= k) * k;
	} else {
		return 0.5 * (k -= 2) * (k *= k) * k + 1;
	}
};
iron_system_Tween.easeExpoIn = function(k) {
	if(k == 0) {
		return 0;
	} else {
		return Math.pow(2,10 * (k - 1));
	}
};
iron_system_Tween.easeExpoOut = function(k) {
	if(k == 1) {
		return 1;
	} else {
		return 1 - Math.pow(2,-10 * k);
	}
};
iron_system_Tween.easeExpoInOut = function(k) {
	if(k == 0) {
		return 0;
	}
	if(k == 1) {
		return 1;
	}
	if((k /= 0.5) < 1.0) {
		return 0.5 * Math.pow(2,10 * (k - 1));
	}
	return 0.5 * (2 - Math.pow(2,-10 * --k));
};
iron_system_Tween.easeCircIn = function(k) {
	return -(Math.sqrt(1 - k * k) - 1);
};
iron_system_Tween.easeCircOut = function(k) {
	return Math.sqrt(1 - (k - 1) * (k - 1));
};
iron_system_Tween.easeCircInOut = function(k) {
	if(k <= .5) {
		return (Math.sqrt(1 - k * k * 4) - 1) / -2;
	} else {
		return (Math.sqrt(1 - (k * 2 - 2) * (k * 2 - 2)) + 1) / 2;
	}
};
iron_system_Tween.easeBackIn = function(k) {
	if(k == 0) {
		return 0;
	} else if(k == 1) {
		return 1;
	} else {
		return k * k * (2.70158 * k - 1.70158);
	}
};
iron_system_Tween.easeBackOut = function(k) {
	if(k == 0) {
		return 0;
	} else if(k == 1) {
		return 1;
	} else {
		return --k * k * (2.70158 * k + 1.70158) + 1;
	}
};
iron_system_Tween.easeBackInOut = function(k) {
	if(k == 0) {
		return 0;
	} else if(k == 1) {
		return 1;
	} else if((k *= 2) < 1) {
		return 0.5 * (k * k * (3.5949095 * k - 2.5949095));
	} else {
		return 0.5 * ((k -= 2) * k * (3.5949095 * k + 2.5949095) + 2);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = "kha.Assets";
kha_Assets.loadImageFromPath = function(path,readable,done) {
	var description = { files : [path], readable : readable};
	kha_LoaderImpl.loadImageFromDescription(description,done);
};
kha_Assets.loadBlobFromPath = function(path,done) {
	var description = { files : [path]};
	kha_LoaderImpl.loadBlobFromDescription(description,done);
};
kha_Assets.loadFontFromPath = function(path,done) {
	var description = { files : [path]};
	kha_LoaderImpl.loadFontFromDescription(description,done);
	return;
};
var kha__$Color_Color_$Impl_$ = $hx_exports["kha"]["_Color"]["Color_Impl_"] = {};
$hxClasses["kha._Color.Color_Impl_"] = kha__$Color_Color_$Impl_$;
kha__$Color_Color_$Impl_$.__name__ = "kha._Color.Color_Impl_";
kha__$Color_Color_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value",set_A:"set_A",get_A:"get_A",set_B:"set_B",get_B:"get_B",set_G:"set_G",get_G:"get_G",set_R:"set_R",get_R:"get_R",set_Ab:"set_Ab",get_Ab:"get_Ab",set_Bb:"set_Bb",get_Bb:"get_Bb",set_Gb:"set_Gb",get_Gb:"get_Gb",set_Rb:"set_Rb",get_Rb:"get_Rb"};
kha__$Color_Color_$Impl_$.fromValue = function(value) {
	return kha__$Color_Color_$Impl_$._new(value);
};
kha__$Color_Color_$Impl_$.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
};
kha__$Color_Color_$Impl_$.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha__$Color_Color_$Impl_$._new((a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0));
};
kha__$Color_Color_$Impl_$.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && value.charCodeAt(0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha__$Color_Color_$Impl_$._new(colorValue);
	} else {
		throw new js__$Boot_HaxeError("Invalid Color string: '" + value + "'");
	}
};
kha__$Color_Color_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_value = function(this1) {
	return this1;
};
kha__$Color_Color_$Impl_$.set_value = function(this1,value) {
	this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha__$Color_Color_$Impl_$.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha__$Color_Color_$Impl_$.get_Bb = function(this1) {
	return this1 & 255;
};
kha__$Color_Color_$Impl_$.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha__$Color_Color_$Impl_$.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha__$Color_Color_$Impl_$.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.set_R = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_G = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_B = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_A = function(this1,f) {
	this1 = (f * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
var kha_Display = function(num,isPrimary) {
	this.num = num;
	this.isPrimary = isPrimary;
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = "kha.Display";
kha_Display.__properties__ = {get_primary:"get_primary"};
kha_Display.init = function() {
	var _g = 0;
	var _g1 = Krom.displayCount();
	while(_g < _g1) {
		var i = _g++;
		kha_Display.displays.push(new kha_Display(i,Krom.displayIsPrimary(i)));
	}
};
kha_Display.get_primary = function() {
	kha_Display.init();
	var _g = 0;
	var _g1 = kha_Display.displays;
	while(_g < _g1.length) {
		var display = _g1[_g];
		++_g;
		if(display.isPrimary) {
			return display;
		}
	}
	return null;
};
kha_Display.prototype = {
	get_width: function() {
		return Krom.displayWidth(this.num);
	}
	,get_height: function() {
		return Krom.displayHeight(this.num);
	}
	,get_frequency: function() {
		return 60;
	}
	,__class__: kha_Display
	,__properties__: {get_frequency:"get_frequency",get_height:"get_height",get_width:"get_width"}
};
var kha_DisplayMode = function() { };
$hxClasses["kha.DisplayMode"] = kha_DisplayMode;
kha_DisplayMode.__name__ = "kha.DisplayMode";
var kha_Framebuffer = function($window,g2,g4) {
	this.window = $window;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = "kha.Framebuffer";
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	init: function(g2,g4) {
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
	,__properties__: {get_height:"get_height",get_width:"get_width",get_g4:"get_g4",get_g2:"get_g2"}
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = "kha.FramebufferOptions";
kha_FramebufferOptions.prototype = {
	__class__: kha_FramebufferOptions
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = "kha.AlignedQuad";
kha_AlignedQuad.prototype = {
	__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) {
		var char = chars[_g];
		++_g;
		char.yoff += this.baseline;
	}
	this.texture = kha_Image.fromBytes(pixels.toBytes(),width,height,1);
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = "kha.KravurImage";
kha_KravurImage.prototype = {
	getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = kha_KravurImage.charBlocks.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var prevEnd = kha_KravurImage.charBlocks[i * 2 - 1];
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - prevEnd;
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var c = _g++;
			width += this.getCharWidth(HxOverrides.cca(str,c));
		}
		return width;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = "kha.Kravur";
kha_Kravur.prototype = {
	_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var this1 = new Array(glyphs.length);
			var baked = this1;
			var _g2 = 0;
			var _g11 = baked.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				baked[i1] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			}
			var pixels = null;
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_Blob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,0,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,0);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var ascent = Math.round(metrics.ascent * scale);
			var descent = Math.round(metrics.descent * scale);
			var lineGap = Math.round(metrics.lineGap * scale);
			var image = new kha_KravurImage(fontSize | 0,ascent,descent,lineGap,width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = "kha.LoaderImpl";
kha_LoaderImpl.loadImageFromDescription = function(desc,done) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	done(kha_Image._fromTexture(Krom.loadImage(desc.files[0],readable)));
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done) {
	done(new kha_Blob(haxe_io_Bytes.ofData(Krom.loadBlob(desc.files[0]))));
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	});
};
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = "kha.TimeTask";
kha_TimeTask.prototype = {
	__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = "kha.FrameTask";
kha_FrameTask.prototype = {
	__class__: kha_FrameTask
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = "kha.Shaders";
kha_Shaders.init = function() {
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"Gizmo_overlay_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_Blob.fromBytes(bytes));
	kha_Shaders.Gizmo_overlay_frag = new kha_graphics4_FragmentShader(blobs,["Gizmo_overlay.frag.d3d11"]);
	var blobs1 = [];
	var data1 = Reflect.field(kha_Shaders,"Gizmo_overlay_vertData" + 0);
	var bytes1 = haxe_Unserializer.run(data1);
	blobs1.push(kha_Blob.fromBytes(bytes1));
	kha_Shaders.Gizmo_overlay_vert = new kha_graphics4_VertexShader(blobs1,["Gizmo_overlay.vert.d3d11"]);
	var blobs2 = [];
	var data2 = Reflect.field(kha_Shaders,"Material2_mesh_fragData" + 0);
	var bytes2 = haxe_Unserializer.run(data2);
	blobs2.push(kha_Blob.fromBytes(bytes2));
	kha_Shaders.Material2_mesh_frag = new kha_graphics4_FragmentShader(blobs2,["Material2_mesh.frag.d3d11"]);
	var blobs3 = [];
	var data3 = Reflect.field(kha_Shaders,"Material_mesh_fragData" + 0);
	var bytes3 = haxe_Unserializer.run(data3);
	blobs3.push(kha_Blob.fromBytes(bytes3));
	kha_Shaders.Material_mesh_frag = new kha_graphics4_FragmentShader(blobs3,["Material_mesh.frag.d3d11"]);
	var blobs4 = [];
	var data4 = Reflect.field(kha_Shaders,"Material_mesh_vertData" + 0);
	var bytes4 = haxe_Unserializer.run(data4);
	blobs4.push(kha_Blob.fromBytes(bytes4));
	kha_Shaders.Material_mesh_vert = new kha_graphics4_VertexShader(blobs4,["Material_mesh.vert.d3d11"]);
	var blobs5 = [];
	var data5 = Reflect.field(kha_Shaders,"armdefault_mesh_fragData" + 0);
	var bytes5 = haxe_Unserializer.run(data5);
	blobs5.push(kha_Blob.fromBytes(bytes5));
	kha_Shaders.armdefault_mesh_frag = new kha_graphics4_FragmentShader(blobs5,["armdefault_mesh.frag.d3d11"]);
	var blobs6 = [];
	var data6 = Reflect.field(kha_Shaders,"armdefault_mesh_vertData" + 0);
	var bytes6 = haxe_Unserializer.run(data6);
	blobs6.push(kha_Blob.fromBytes(bytes6));
	kha_Shaders.armdefault_mesh_vert = new kha_graphics4_VertexShader(blobs6,["armdefault_mesh.vert.d3d11"]);
	var blobs7 = [];
	var data7 = Reflect.field(kha_Shaders,"armdefault_voxel_fragData" + 0);
	var bytes7 = haxe_Unserializer.run(data7);
	blobs7.push(kha_Blob.fromBytes(bytes7));
	kha_Shaders.armdefault_voxel_frag = new kha_graphics4_FragmentShader(blobs7,["armdefault_voxel.frag.d3d11"]);
	var blobs8 = [];
	var data8 = Reflect.field(kha_Shaders,"armdefault_voxel_geomData" + 0);
	var bytes8 = haxe_Unserializer.run(data8);
	blobs8.push(kha_Blob.fromBytes(bytes8));
	kha_Shaders.armdefault_voxel_geom = new kha_graphics4_GeometryShader(blobs8,["armdefault_voxel.geom.d3d11"]);
	var blobs9 = [];
	var data9 = Reflect.field(kha_Shaders,"armdefault_voxel_vertData" + 0);
	var bytes9 = haxe_Unserializer.run(data9);
	blobs9.push(kha_Blob.fromBytes(bytes9));
	kha_Shaders.armdefault_voxel_vert = new kha_graphics4_VertexShader(blobs9,["armdefault_voxel.vert.d3d11"]);
	var blobs10 = [];
	var data10 = Reflect.field(kha_Shaders,"bloom_pass_fragData" + 0);
	var bytes10 = haxe_Unserializer.run(data10);
	blobs10.push(kha_Blob.fromBytes(bytes10));
	kha_Shaders.bloom_pass_frag = new kha_graphics4_FragmentShader(blobs10,["bloom_pass.frag.d3d11"]);
	var blobs11 = [];
	var data11 = Reflect.field(kha_Shaders,"blur_adaptive_pass_fragData" + 0);
	var bytes11 = haxe_Unserializer.run(data11);
	blobs11.push(kha_Blob.fromBytes(bytes11));
	kha_Shaders.blur_adaptive_pass_frag = new kha_graphics4_FragmentShader(blobs11,["blur_adaptive_pass.frag.d3d11"]);
	var blobs12 = [];
	var data12 = Reflect.field(kha_Shaders,"blur_edge_pass_fragData" + 0);
	var bytes12 = haxe_Unserializer.run(data12);
	blobs12.push(kha_Blob.fromBytes(bytes12));
	kha_Shaders.blur_edge_pass_frag = new kha_graphics4_FragmentShader(blobs12,["blur_edge_pass.frag.d3d11"]);
	var blobs13 = [];
	var data13 = Reflect.field(kha_Shaders,"blur_gaus_pass_fragData" + 0);
	var bytes13 = haxe_Unserializer.run(data13);
	blobs13.push(kha_Blob.fromBytes(bytes13));
	kha_Shaders.blur_gaus_pass_frag = new kha_graphics4_FragmentShader(blobs13,["blur_gaus_pass.frag.d3d11"]);
	var blobs14 = [];
	var data14 = Reflect.field(kha_Shaders,"compositor_pass_fragData" + 0);
	var bytes14 = haxe_Unserializer.run(data14);
	blobs14.push(kha_Blob.fromBytes(bytes14));
	kha_Shaders.compositor_pass_frag = new kha_graphics4_FragmentShader(blobs14,["compositor_pass.frag.d3d11"]);
	var blobs15 = [];
	var data15 = Reflect.field(kha_Shaders,"compositor_pass_vertData" + 0);
	var bytes15 = haxe_Unserializer.run(data15);
	blobs15.push(kha_Blob.fromBytes(bytes15));
	kha_Shaders.compositor_pass_vert = new kha_graphics4_VertexShader(blobs15,["compositor_pass.vert.d3d11"]);
	var blobs16 = [];
	var data16 = Reflect.field(kha_Shaders,"copy_mrt3_pass_fragData" + 0);
	var bytes16 = haxe_Unserializer.run(data16);
	blobs16.push(kha_Blob.fromBytes(bytes16));
	kha_Shaders.copy_mrt3_pass_frag = new kha_graphics4_FragmentShader(blobs16,["copy_mrt3_pass.frag.d3d11"]);
	var blobs17 = [];
	var data17 = Reflect.field(kha_Shaders,"cursor_fragData" + 0);
	var bytes17 = haxe_Unserializer.run(data17);
	blobs17.push(kha_Blob.fromBytes(bytes17));
	kha_Shaders.cursor_frag = new kha_graphics4_FragmentShader(blobs17,["cursor.frag.d3d11"]);
	var blobs18 = [];
	var data18 = Reflect.field(kha_Shaders,"cursor_vertData" + 0);
	var bytes18 = haxe_Unserializer.run(data18);
	blobs18.push(kha_Blob.fromBytes(bytes18));
	kha_Shaders.cursor_vert = new kha_graphics4_VertexShader(blobs18,["cursor.vert.d3d11"]);
	var blobs19 = [];
	var data19 = Reflect.field(kha_Shaders,"deferred_light_fragData" + 0);
	var bytes19 = haxe_Unserializer.run(data19);
	blobs19.push(kha_Blob.fromBytes(bytes19));
	kha_Shaders.deferred_light_frag = new kha_graphics4_FragmentShader(blobs19,["deferred_light.frag.d3d11"]);
	var blobs20 = [];
	var data20 = Reflect.field(kha_Shaders,"deferred_light_voxel_fragData" + 0);
	var bytes20 = haxe_Unserializer.run(data20);
	blobs20.push(kha_Blob.fromBytes(bytes20));
	kha_Shaders.deferred_light_voxel_frag = new kha_graphics4_FragmentShader(blobs20,["deferred_light_voxel.frag.d3d11"]);
	var blobs21 = [];
	var data21 = Reflect.field(kha_Shaders,"deferred_light_voxel_vertData" + 0);
	var bytes21 = haxe_Unserializer.run(data21);
	blobs21.push(kha_Blob.fromBytes(bytes21));
	kha_Shaders.deferred_light_voxel_vert = new kha_graphics4_VertexShader(blobs21,["deferred_light_voxel.vert.d3d11"]);
	var blobs22 = [];
	var data22 = Reflect.field(kha_Shaders,"dilate_pass_fragData" + 0);
	var bytes22 = haxe_Unserializer.run(data22);
	blobs22.push(kha_Blob.fromBytes(bytes22));
	kha_Shaders.dilate_pass_frag = new kha_graphics4_FragmentShader(blobs22,["dilate_pass.frag.d3d11"]);
	var blobs23 = [];
	var data23 = Reflect.field(kha_Shaders,"histogram_pass_fragData" + 0);
	var bytes23 = haxe_Unserializer.run(data23);
	blobs23.push(kha_Blob.fromBytes(bytes23));
	kha_Shaders.histogram_pass_frag = new kha_graphics4_FragmentShader(blobs23,["histogram_pass.frag.d3d11"]);
	var blobs24 = [];
	var data24 = Reflect.field(kha_Shaders,"layer_copy_fragData" + 0);
	var bytes24 = haxe_Unserializer.run(data24);
	blobs24.push(kha_Blob.fromBytes(bytes24));
	kha_Shaders.layer_copy_frag = new kha_graphics4_FragmentShader(blobs24,["layer_copy.frag.d3d11"]);
	var blobs25 = [];
	var data25 = Reflect.field(kha_Shaders,"layer_merge_fragData" + 0);
	var bytes25 = haxe_Unserializer.run(data25);
	blobs25.push(kha_Blob.fromBytes(bytes25));
	kha_Shaders.layer_merge_frag = new kha_graphics4_FragmentShader(blobs25,["layer_merge.frag.d3d11"]);
	var blobs26 = [];
	var data26 = Reflect.field(kha_Shaders,"layer_merge_vertData" + 0);
	var bytes26 = haxe_Unserializer.run(data26);
	blobs26.push(kha_Blob.fromBytes(bytes26));
	kha_Shaders.layer_merge_vert = new kha_graphics4_VertexShader(blobs26,["layer_merge.vert.d3d11"]);
	var blobs27 = [];
	var data27 = Reflect.field(kha_Shaders,"layer_view_fragData" + 0);
	var bytes27 = haxe_Unserializer.run(data27);
	blobs27.push(kha_Blob.fromBytes(bytes27));
	kha_Shaders.layer_view_frag = new kha_graphics4_FragmentShader(blobs27,["layer_view.frag.d3d11"]);
	var blobs28 = [];
	var data28 = Reflect.field(kha_Shaders,"layer_view_vertData" + 0);
	var bytes28 = haxe_Unserializer.run(data28);
	blobs28.push(kha_Blob.fromBytes(bytes28));
	kha_Shaders.layer_view_vert = new kha_graphics4_VertexShader(blobs28,["layer_view.vert.d3d11"]);
	var blobs29 = [];
	var data29 = Reflect.field(kha_Shaders,"mask_merge_fragData" + 0);
	var bytes29 = haxe_Unserializer.run(data29);
	blobs29.push(kha_Blob.fromBytes(bytes29));
	kha_Shaders.mask_merge_frag = new kha_graphics4_FragmentShader(blobs29,["mask_merge.frag.d3d11"]);
	var blobs30 = [];
	var data30 = Reflect.field(kha_Shaders,"painter_colored_fragData" + 0);
	var bytes30 = haxe_Unserializer.run(data30);
	blobs30.push(kha_Blob.fromBytes(bytes30));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs30,["painter-colored.frag.d3d11"]);
	var blobs31 = [];
	var data31 = Reflect.field(kha_Shaders,"painter_colored_vertData" + 0);
	var bytes31 = haxe_Unserializer.run(data31);
	blobs31.push(kha_Blob.fromBytes(bytes31));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs31,["painter-colored.vert.d3d11"]);
	var blobs32 = [];
	var data32 = Reflect.field(kha_Shaders,"painter_image_fragData" + 0);
	var bytes32 = haxe_Unserializer.run(data32);
	blobs32.push(kha_Blob.fromBytes(bytes32));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs32,["painter-image.frag.d3d11"]);
	var blobs33 = [];
	var data33 = Reflect.field(kha_Shaders,"painter_image_vertData" + 0);
	var bytes33 = haxe_Unserializer.run(data33);
	blobs33.push(kha_Blob.fromBytes(bytes33));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs33,["painter-image.vert.d3d11"]);
	var blobs34 = [];
	var data34 = Reflect.field(kha_Shaders,"painter_text_fragData" + 0);
	var bytes34 = haxe_Unserializer.run(data34);
	blobs34.push(kha_Blob.fromBytes(bytes34));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs34,["painter-text.frag.d3d11"]);
	var blobs35 = [];
	var data35 = Reflect.field(kha_Shaders,"painter_text_vertData" + 0);
	var bytes35 = haxe_Unserializer.run(data35);
	blobs35.push(kha_Blob.fromBytes(bytes35));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs35,["painter-text.vert.d3d11"]);
	var blobs36 = [];
	var data36 = Reflect.field(kha_Shaders,"painter_video_fragData" + 0);
	var bytes36 = haxe_Unserializer.run(data36);
	blobs36.push(kha_Blob.fromBytes(bytes36));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs36,["painter-video.frag.d3d11"]);
	var blobs37 = [];
	var data37 = Reflect.field(kha_Shaders,"painter_video_vertData" + 0);
	var bytes37 = haxe_Unserializer.run(data37);
	blobs37.push(kha_Blob.fromBytes(bytes37));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs37,["painter-video.vert.d3d11"]);
	var blobs38 = [];
	var data38 = Reflect.field(kha_Shaders,"pass_copy_fragData" + 0);
	var bytes38 = haxe_Unserializer.run(data38);
	blobs38.push(kha_Blob.fromBytes(bytes38));
	kha_Shaders.pass_copy_frag = new kha_graphics4_FragmentShader(blobs38,["pass_copy.frag.d3d11"]);
	var blobs39 = [];
	var data39 = Reflect.field(kha_Shaders,"pass_vertData" + 0);
	var bytes39 = haxe_Unserializer.run(data39);
	blobs39.push(kha_Blob.fromBytes(bytes39));
	kha_Shaders.pass_vert = new kha_graphics4_VertexShader(blobs39,["pass.vert.d3d11"]);
	var blobs40 = [];
	var data40 = Reflect.field(kha_Shaders,"pass_viewray2_vertData" + 0);
	var bytes40 = haxe_Unserializer.run(data40);
	blobs40.push(kha_Blob.fromBytes(bytes40));
	kha_Shaders.pass_viewray2_vert = new kha_graphics4_VertexShader(blobs40,["pass_viewray2.vert.d3d11"]);
	var blobs41 = [];
	var data41 = Reflect.field(kha_Shaders,"pass_viewray_vertData" + 0);
	var bytes41 = haxe_Unserializer.run(data41);
	blobs41.push(kha_Blob.fromBytes(bytes41));
	kha_Shaders.pass_viewray_vert = new kha_graphics4_VertexShader(blobs41,["pass_viewray.vert.d3d11"]);
	var blobs42 = [];
	var data42 = Reflect.field(kha_Shaders,"smaa_blend_weight_fragData" + 0);
	var bytes42 = haxe_Unserializer.run(data42);
	blobs42.push(kha_Blob.fromBytes(bytes42));
	kha_Shaders.smaa_blend_weight_frag = new kha_graphics4_FragmentShader(blobs42,["smaa_blend_weight.frag.d3d11"]);
	var blobs43 = [];
	var data43 = Reflect.field(kha_Shaders,"smaa_blend_weight_vertData" + 0);
	var bytes43 = haxe_Unserializer.run(data43);
	blobs43.push(kha_Blob.fromBytes(bytes43));
	kha_Shaders.smaa_blend_weight_vert = new kha_graphics4_VertexShader(blobs43,["smaa_blend_weight.vert.d3d11"]);
	var blobs44 = [];
	var data44 = Reflect.field(kha_Shaders,"smaa_edge_detect_fragData" + 0);
	var bytes44 = haxe_Unserializer.run(data44);
	blobs44.push(kha_Blob.fromBytes(bytes44));
	kha_Shaders.smaa_edge_detect_frag = new kha_graphics4_FragmentShader(blobs44,["smaa_edge_detect.frag.d3d11"]);
	var blobs45 = [];
	var data45 = Reflect.field(kha_Shaders,"smaa_edge_detect_vertData" + 0);
	var bytes45 = haxe_Unserializer.run(data45);
	blobs45.push(kha_Blob.fromBytes(bytes45));
	kha_Shaders.smaa_edge_detect_vert = new kha_graphics4_VertexShader(blobs45,["smaa_edge_detect.vert.d3d11"]);
	var blobs46 = [];
	var data46 = Reflect.field(kha_Shaders,"smaa_neighborhood_blend_fragData" + 0);
	var bytes46 = haxe_Unserializer.run(data46);
	blobs46.push(kha_Blob.fromBytes(bytes46));
	kha_Shaders.smaa_neighborhood_blend_frag = new kha_graphics4_FragmentShader(blobs46,["smaa_neighborhood_blend.frag.d3d11"]);
	var blobs47 = [];
	var data47 = Reflect.field(kha_Shaders,"smaa_neighborhood_blend_vertData" + 0);
	var bytes47 = haxe_Unserializer.run(data47);
	blobs47.push(kha_Blob.fromBytes(bytes47));
	kha_Shaders.smaa_neighborhood_blend_vert = new kha_graphics4_VertexShader(blobs47,["smaa_neighborhood_blend.vert.d3d11"]);
	var blobs48 = [];
	var data48 = Reflect.field(kha_Shaders,"ssgi_pass_fragData" + 0);
	var bytes48 = haxe_Unserializer.run(data48);
	blobs48.push(kha_Blob.fromBytes(bytes48));
	kha_Shaders.ssgi_pass_frag = new kha_graphics4_FragmentShader(blobs48,["ssgi_pass.frag.d3d11"]);
	var blobs49 = [];
	var data49 = Reflect.field(kha_Shaders,"ssr_pass_fragData" + 0);
	var bytes49 = haxe_Unserializer.run(data49);
	blobs49.push(kha_Blob.fromBytes(bytes49));
	kha_Shaders.ssr_pass_frag = new kha_graphics4_FragmentShader(blobs49,["ssr_pass.frag.d3d11"]);
	var blobs50 = [];
	var data50 = Reflect.field(kha_Shaders,"supersample_resolve_fragData" + 0);
	var bytes50 = haxe_Unserializer.run(data50);
	blobs50.push(kha_Blob.fromBytes(bytes50));
	kha_Shaders.supersample_resolve_frag = new kha_graphics4_FragmentShader(blobs50,["supersample_resolve.frag.d3d11"]);
	var blobs51 = [];
	var data51 = Reflect.field(kha_Shaders,"taa_pass_fragData" + 0);
	var bytes51 = haxe_Unserializer.run(data51);
	blobs51.push(kha_Blob.fromBytes(bytes51));
	kha_Shaders.taa_pass_frag = new kha_graphics4_FragmentShader(blobs51,["taa_pass.frag.d3d11"]);
	var blobs52 = [];
	var data52 = Reflect.field(kha_Shaders,"world_pass_fragData" + 0);
	var bytes52 = haxe_Unserializer.run(data52);
	blobs52.push(kha_Blob.fromBytes(bytes52));
	kha_Shaders.world_pass_frag = new kha_graphics4_FragmentShader(blobs52,["world_pass.frag.d3d11"]);
	var blobs53 = [];
	var data53 = Reflect.field(kha_Shaders,"world_pass_vertData" + 0);
	var bytes53 = haxe_Unserializer.run(data53);
	blobs53.push(kha_Blob.fromBytes(bytes53));
	kha_Shaders.world_pass_vert = new kha_graphics4_VertexShader(blobs53,["world_pass.vert.d3d11"]);
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,null,null,null,null,null,null,null,null) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(null,null,null,null,null,null) : framebuffer;
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = "kha.SystemOptions";
kha_SystemOptions.prototype = {
	__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = "kha.System";
kha_System.__properties__ = {get_systemId:"get_systemId",get_time:"get_time"};
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(framebuffers);
	}
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(filePath);
	}
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get_all()[$window].get_height();
};
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.stop = function() {
	return kha_SystemImpl.requestShutdown();
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = "kha.SystemImpl";
kha_SystemImpl.renderCallback = function() {
	kha_Scheduler.executeFrame();
	kha_System.render([kha_SystemImpl.framebuffer]);
};
kha_SystemImpl.dropFilesCallback = function(filePath) {
	kha_System.dropFiles(filePath);
};
kha_SystemImpl.copyCallback = function() {
	if(kha_System.copyListener != null) {
		return kha_System.copyListener();
	} else {
		return null;
	}
};
kha_SystemImpl.cutCallback = function() {
	if(kha_System.cutListener != null) {
		return kha_System.cutListener();
	} else {
		return null;
	}
};
kha_SystemImpl.pasteCallback = function(data) {
	if(kha_System.pasteListener != null) {
		kha_System.pasteListener(data);
	}
};
kha_SystemImpl.foregroundCallback = function() {
	kha_System.foreground();
};
kha_SystemImpl.resumeCallback = function() {
	kha_System.resume();
};
kha_SystemImpl.pauseCallback = function() {
	kha_System.pause();
};
kha_SystemImpl.backgroundCallback = function() {
	kha_System.background();
};
kha_SystemImpl.shutdownCallback = function() {
	kha_System.shutdown();
};
kha_SystemImpl.keyboardDownCallback = function(code) {
	kha_SystemImpl.keyboard.sendDownEvent(code);
};
kha_SystemImpl.keyboardUpCallback = function(code) {
	kha_SystemImpl.keyboard.sendUpEvent(code);
};
kha_SystemImpl.keyboardPressCallback = function(charCode) {
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(charCode));
};
kha_SystemImpl.mouseDownCallback = function(button,x,y) {
	kha_SystemImpl.mouse.sendDownEvent(0,button,x,y);
};
kha_SystemImpl.mouseUpCallback = function(button,x,y) {
	kha_SystemImpl.mouse.sendUpEvent(0,button,x,y);
};
kha_SystemImpl.mouseMoveCallback = function(x,y,mx,my) {
	kha_SystemImpl.mouse.sendMoveEvent(0,x,y,mx,my);
};
kha_SystemImpl.mouseWheelCallback = function(delta) {
	kha_SystemImpl.mouse.sendWheelEvent(0,delta);
};
kha_SystemImpl.touchDownCallback = function(index,x,y) {
	kha_SystemImpl.surface.sendTouchStartEvent(index,x,y);
};
kha_SystemImpl.touchUpCallback = function(index,x,y) {
	kha_SystemImpl.surface.sendTouchEndEvent(index,x,y);
};
kha_SystemImpl.touchMoveCallback = function(index,x,y) {
	kha_SystemImpl.surface.sendMoveEvent(index,x,y);
};
kha_SystemImpl.penDownCallback = function(x,y,pressure) {
	kha_SystemImpl.pen.sendDownEvent(0,x,y,pressure);
};
kha_SystemImpl.penUpCallback = function(x,y,pressure) {
	kha_SystemImpl.pen.sendUpEvent(0,x,y,pressure);
};
kha_SystemImpl.penMoveCallback = function(x,y,pressure) {
	kha_SystemImpl.pen.sendMoveEvent(0,x,y,pressure);
};
kha_SystemImpl.gamepadAxisCallback = function(gamepad,axis,value) {
	kha_SystemImpl.gamepads[gamepad].sendAxisEvent(axis,value);
};
kha_SystemImpl.gamepadButtonCallback = function(gamepad,button,value) {
	kha_SystemImpl.gamepads[gamepad].sendButtonEvent(button,value);
};
kha_SystemImpl.init = function(options,callback) {
	Krom.init(options.title,options.width,options.height,options.framebuffer.samplesPerPixel,options.framebuffer.verticalSync,options.window.mode,options.window.windowFeatures,3,options.window.x,options.window.y);
	kha_SystemImpl.start = Krom.getTime();
	haxe_Log.trace = function(v,infos) {
		var message = infos != null ? infos.className + ":" + infos.lineNumber + ": " + Std.string(v) : Std.string(v);
		Krom.log(HxOverrides.substr(message,0,511));
	};
	new kha_Window(0);
	kha_Scheduler.init();
	kha_Shaders.init();
	var g4 = new kha_krom_Graphics();
	kha_SystemImpl.framebuffer = new kha_Framebuffer(0,null,g4);
	kha_SystemImpl.framebuffer.init(new kha_graphics4_Graphics2(kha_SystemImpl.framebuffer),g4);
	Krom.setCallback(kha_SystemImpl.renderCallback);
	Krom.setDropFilesCallback(kha_SystemImpl.dropFilesCallback);
	Krom.setCutCopyPasteCallback(kha_SystemImpl.cutCallback,kha_SystemImpl.copyCallback,kha_SystemImpl.pasteCallback);
	Krom.setApplicationStateCallback(kha_SystemImpl.foregroundCallback,kha_SystemImpl.resumeCallback,kha_SystemImpl.pauseCallback,kha_SystemImpl.backgroundCallback,kha_SystemImpl.shutdownCallback);
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.pen = new kha_input_Pen();
	kha_SystemImpl.gamepads = [];
	var _g = 0;
	var _g1 = kha_SystemImpl.maxGamepads;
	while(_g < _g1) {
		var i = _g++;
		kha_SystemImpl.gamepads[i] = new kha_input_Gamepad(i);
	}
	Krom.setKeyboardDownCallback(kha_SystemImpl.keyboardDownCallback);
	Krom.setKeyboardUpCallback(kha_SystemImpl.keyboardUpCallback);
	Krom.setKeyboardPressCallback(kha_SystemImpl.keyboardPressCallback);
	Krom.setMouseDownCallback(kha_SystemImpl.mouseDownCallback);
	Krom.setMouseUpCallback(kha_SystemImpl.mouseUpCallback);
	Krom.setMouseMoveCallback(kha_SystemImpl.mouseMoveCallback);
	Krom.setMouseWheelCallback(kha_SystemImpl.mouseWheelCallback);
	Krom.setTouchDownCallback(kha_SystemImpl.touchDownCallback);
	Krom.setTouchUpCallback(kha_SystemImpl.touchUpCallback);
	Krom.setTouchMoveCallback(kha_SystemImpl.touchMoveCallback);
	Krom.setPenDownCallback(kha_SystemImpl.penDownCallback);
	Krom.setPenUpCallback(kha_SystemImpl.penUpCallback);
	Krom.setPenMoveCallback(kha_SystemImpl.penMoveCallback);
	Krom.setGamepadAxisCallback(kha_SystemImpl.gamepadAxisCallback);
	Krom.setGamepadButtonCallback(kha_SystemImpl.gamepadButtonCallback);
	kha_Scheduler.start();
	callback(kha_Window.get(0));
};
kha_SystemImpl.getTime = function() {
	return Krom.getTime() - kha_SystemImpl.start;
};
kha_SystemImpl.getSystemId = function() {
	return Krom.systemId();
};
kha_SystemImpl.requestShutdown = function() {
	Krom.requestShutdown();
	return true;
};
kha_SystemImpl.getMouse = function(num) {
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getPen = function(num) {
	return kha_SystemImpl.pen;
};
kha_SystemImpl.getKeyboard = function(num) {
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.showKeyboard = function() {
	Krom.showKeyboard(true);
};
kha_SystemImpl.hideKeyboard = function() {
	Krom.showKeyboard(false);
};
kha_SystemImpl.lockMouse = function() {
	if(!kha_SystemImpl.isMouseLocked()) {
		Krom.lockMouse();
		var _g = 0;
		var _g1 = kha_SystemImpl.mouseLockListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(kha_SystemImpl.isMouseLocked()) {
		Krom.unlockMouse();
		var _g = 0;
		var _g1 = kha_SystemImpl.mouseLockListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
	}
};
kha_SystemImpl.canLockMouse = function() {
	return Krom.canLockMouse();
};
kha_SystemImpl.isMouseLocked = function() {
	return Krom.isMouseLocked();
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	if(kha_SystemImpl.canLockMouse() && func != null) {
		kha_SystemImpl.mouseLockListeners.push(func);
	}
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	if(kha_SystemImpl.canLockMouse() && func != null) {
		HxOverrides.remove(kha_SystemImpl.mouseLockListeners,func);
	}
};
kha_SystemImpl.hideSystemCursor = function() {
	Krom.showMouse(false);
};
kha_SystemImpl.showSystemCursor = function() {
	Krom.showMouse(true);
};
kha_SystemImpl.getGamepadId = function(index) {
	return "unkown";
};
var kha_Window = function(num) {
	this.num = num;
	kha_Window.windows.push(this);
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = "kha.Window";
kha_Window.__properties__ = {get_all:"get_all"};
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.get_all = function() {
	return kha_Window.windows;
};
kha_Window.prototype = {
	get_x: function() {
		return Krom.windowX(this.num);
	}
	,get_y: function() {
		return Krom.windowY(this.num);
	}
	,get_width: function() {
		return Krom.windowWidth(this.num);
	}
	,get_height: function() {
		return Krom.windowHeight(this.num);
	}
	,set_title: function(value) {
		Krom.setWindowTitle(this.num,value);
		this.windowTitle = value;
		return this.windowTitle;
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
	,__properties__: {get_vSynced:"get_vSynced",set_title:"set_title",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = "kha.WindowOptions";
kha_WindowOptions.prototype = {
	__class__: kha_WindowOptions
};
var kha_audio2_ogg_vorbis_data_Header = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = "kha.audio2.ogg.vorbis.data.Header";
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = "kha.graphics2.Graphics";
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,set_imageScaleQuality: function(value) {
		return kha_graphics2_ImageScaleQuality.High;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,popTransformation: function() {
		this.transformationIndex--;
		this.setTransformation(this.transformations[this.transformationIndex]);
		return this.transformations[this.transformationIndex + 1];
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__001 = 1;
		var m__101 = 0;
		var m__201 = -centerx;
		var m__011 = 0;
		var m__111 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _this__002 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		var _this__102 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		var _this__202 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		var _this__012 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		var _this__112 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		var _this__212 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		var _this__022 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		var _this__122 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		var _this__222 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__002 * m._00 + _this__102 * m._01 + _this__202 * m._02;
		var trans__10 = _this__002 * m._10 + _this__102 * m._11 + _this__202 * m._12;
		var trans__20 = _this__002 * m._20 + _this__102 * m._21 + _this__202 * m._22;
		var trans__01 = _this__012 * m._00 + _this__112 * m._01 + _this__212 * m._02;
		var trans__11 = _this__012 * m._10 + _this__112 * m._11 + _this__212 * m._12;
		var trans__21 = _this__012 * m._20 + _this__112 * m._21 + _this__212 * m._22;
		var trans__02 = _this__022 * m._00 + _this__122 * m._01 + _this__222 * m._02;
		var trans__12 = _this__022 * m._10 + _this__122 * m._11 + _this__222 * m._12;
		var trans__22 = _this__022 * m._20 + _this__122 * m._21 + _this__222 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		this.setOpacity(opacity);
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
	,__properties__: {set_pipeline:"set_pipeline",set_opacity:"set_opacity",get_opacity:"get_opacity",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_font:"set_font",get_font:"get_font",set_color:"set_color",get_color:"get_color",set_imageScaleQuality:"set_imageScaleQuality"}
};
var kha_graphics2_GraphicsExtension = function() { };
$hxClasses["kha.graphics2.GraphicsExtension"] = kha_graphics2_GraphicsExtension;
kha_graphics2_GraphicsExtension.__name__ = "kha.graphics2.GraphicsExtension";
kha_graphics2_GraphicsExtension.fillCircle = function(g2,cx,cy,radius,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,cx,cy);
	}
};
var kha_graphics2_ImageScaleQuality = $hxEnums["kha.graphics2.ImageScaleQuality"] = { __ename__ : true, __constructs__ : ["Low","High"]
	,Low: {_hx_index:0,__enum__:"kha.graphics2.ImageScaleQuality",toString:$estr}
	,High: {_hx_index:1,__enum__:"kha.graphics2.ImageScaleQuality",toString:$estr}
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = "kha.graphics2.truetype.VectorOfIntPointer";
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = "kha.graphics2.truetype.Stbtt_temp_rect";
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics";
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_font_v_metrics";
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = "kha.graphics2.truetype.Stbtt_bakedchar";
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = "kha.graphics2.truetype.Stbtt_fontinfo";
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = "kha.graphics2.truetype.Stbtt_vertex";
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = "kha.graphics2.truetype.Stbtt__bitmap";
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = "kha.graphics2.truetype.Stbtt__edge";
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = "kha.graphics2.truetype.Stbtt__active_edge";
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = "kha.graphics2.truetype.Stbtt__point";
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = "kha.graphics2.truetype.StbTruetype";
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var num_tables = ch2 | ch1 << 8;
	var tabledir = fontstart + 12;
	var _g = 0;
	var _g1 = num_tables;
	while(_g < _g1) {
		var i = _g++;
		var loc = tabledir + 16 * i;
		var c0 = HxOverrides.cca(tag,0);
		var c1 = HxOverrides.cca(tag,1);
		var c2 = HxOverrides.cca(tag,2);
		var c3 = HxOverrides.cca(tag,3);
		if(data.readU8(loc) == c0 && data.readU8(loc + 1) == c1 && data.readU8(loc + 2) == c2 && data.readU8(loc + 3) == c3) {
			var pos1 = loc + 8;
			if(pos1 == null) {
				pos1 = 0;
			}
			var pos2 = pos1;
			if(pos2 == null) {
				pos2 = 0;
			}
			var ch11 = data.readU8(pos2);
			var ch21 = data.readU8(pos2 + 1);
			var ch3 = data.readU8(pos2 + 2);
			var ch4 = data.readU8(pos2 + 3);
			return ch4 | ch3 << 8 | ch21 << 16 | ch11 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	if(cmap == 0 || info.loca == 0 || info.head == 0 || info.glyf == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		info.numGlyphs = ch2 | ch1 << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos1 = cmap + 2;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = data.readU8(pos1);
	var ch21 = data.readU8(pos1 + 1);
	var numTables = ch21 | ch11 << 8;
	info.index_map = 0;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var encoding_record = cmap + 4 + 8 * i;
		var pos2 = encoding_record;
		if(pos2 == null) {
			pos2 = 0;
		}
		var ch12 = data.readU8(pos2);
		var ch22 = data.readU8(pos2 + 1);
		switch(ch22 | ch12 << 8) {
		case 0:
			var pos3 = encoding_record + 4;
			if(pos3 == null) {
				pos3 = 0;
			}
			var pos4 = pos3;
			if(pos4 == null) {
				pos4 = 0;
			}
			var ch13 = data.readU8(pos4);
			var ch23 = data.readU8(pos4 + 1);
			var ch3 = data.readU8(pos4 + 2);
			var ch4 = data.readU8(pos4 + 3);
			info.index_map = cmap + (ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24);
			break;
		case 3:
			var pos5 = encoding_record + 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			var ch14 = data.readU8(pos5);
			var ch24 = data.readU8(pos5 + 1);
			switch(ch24 | ch14 << 8) {
			case 1:case 10:
				var pos6 = encoding_record + 4;
				if(pos6 == null) {
					pos6 = 0;
				}
				var pos7 = pos6;
				if(pos7 == null) {
					pos7 = 0;
				}
				var ch15 = data.readU8(pos7);
				var ch25 = data.readU8(pos7 + 1);
				var ch31 = data.readU8(pos7 + 2);
				var ch41 = data.readU8(pos7 + 3);
				info.index_map = cmap + (ch41 | ch31 << 8 | ch25 << 16 | ch15 << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos8 = info.head + 50;
	if(pos8 == null) {
		pos8 = 0;
	}
	var ch16 = data.readU8(pos8);
	var ch26 = data.readU8(pos8 + 1);
	info.indexToLocFormat = ch26 | ch16 << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var pos = index_map;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var format = ch2 | ch1 << 8;
	if(format == 0) {
		var pos1 = index_map + 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch11 = data.readU8(pos1);
		var ch21 = data.readU8(pos1 + 1);
		var bytes = ch21 | ch11 << 8;
		if(unicode_codepoint < bytes - 6) {
			var pos2 = index_map + 6 + unicode_codepoint;
			if(pos2 == null) {
				pos2 = 0;
			}
			return data.readU8(pos2);
		}
		return 0;
	} else if(format == 6) {
		var pos3 = index_map + 6;
		if(pos3 == null) {
			pos3 = 0;
		}
		var ch12 = data.readU8(pos3);
		var ch22 = data.readU8(pos3 + 1);
		var first = ch22 | ch12 << 8;
		var pos4 = index_map + 8;
		if(pos4 == null) {
			pos4 = 0;
		}
		var ch13 = data.readU8(pos4);
		var ch23 = data.readU8(pos4 + 1);
		var count = ch23 | ch13 << 8;
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			var pos5 = index_map + 10 + (unicode_codepoint - first) * 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			var ch14 = data.readU8(pos5);
			var ch24 = data.readU8(pos5 + 1);
			return ch24 | ch14 << 8;
		}
		return 0;
	} else if(format == 2) {
		throw new js__$Boot_HaxeError("Error");
	} else if(format == 4) {
		var pos6 = index_map + 6;
		if(pos6 == null) {
			pos6 = 0;
		}
		var ch15 = data.readU8(pos6);
		var ch25 = data.readU8(pos6 + 1);
		var segcount = (ch25 | ch15 << 8) >> 1;
		var pos7 = index_map + 8;
		if(pos7 == null) {
			pos7 = 0;
		}
		var ch16 = data.readU8(pos7);
		var ch26 = data.readU8(pos7 + 1);
		var searchRange = (ch26 | ch16 << 8) >> 1;
		var pos8 = index_map + 10;
		if(pos8 == null) {
			pos8 = 0;
		}
		var ch17 = data.readU8(pos8);
		var ch27 = data.readU8(pos8 + 1);
		var entrySelector = ch27 | ch17 << 8;
		var pos9 = index_map + 12;
		if(pos9 == null) {
			pos9 = 0;
		}
		var ch18 = data.readU8(pos9);
		var ch28 = data.readU8(pos9 + 1);
		var rangeShift = (ch28 | ch18 << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos10 = search + rangeShift * 2;
		if(pos10 == null) {
			pos10 = 0;
		}
		var ch19 = data.readU8(pos10);
		var ch29 = data.readU8(pos10 + 1);
		if(unicode_codepoint >= (ch29 | ch19 << 8)) {
			search += rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var pos11 = search + searchRange * 2;
			if(pos11 == null) {
				pos11 = 0;
			}
			var ch110 = data.readU8(pos11);
			var ch210 = data.readU8(pos11 + 1);
			var end = ch210 | ch110 << 8;
			if(unicode_codepoint > end) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1 & 65535;
		var pos12 = endCount + 2 * item;
		if(pos12 == null) {
			pos12 = 0;
		}
		var ch111 = data.readU8(pos12);
		var ch211 = data.readU8(pos12 + 1);
		if(unicode_codepoint > (ch211 | ch111 << 8)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var pos13 = index_map + 14 + segcount * 2 + 2 + 2 * item;
		if(pos13 == null) {
			pos13 = 0;
		}
		var ch112 = data.readU8(pos13);
		var ch212 = data.readU8(pos13 + 1);
		var start = ch212 | ch112 << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos14 = index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos14 == null) {
			pos14 = 0;
		}
		var ch113 = data.readU8(pos14);
		var ch213 = data.readU8(pos14 + 1);
		var offset = ch213 | ch113 << 8;
		if(offset == 0) {
			var pos15 = index_map + 14 + segcount * 4 + 2 + 2 * item;
			if(pos15 == null) {
				pos15 = 0;
			}
			var ch114 = data.readU8(pos15);
			var ch214 = data.readU8(pos15 + 1);
			var n = ch214 | ch114 << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n) & 65535;
		}
		var pos16 = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos16 == null) {
			pos16 = 0;
		}
		var ch115 = data.readU8(pos16);
		var ch215 = data.readU8(pos16 + 1);
		return ch215 | ch115 << 8;
	} else if(format == 12 || format == 13) {
		var pos17 = index_map + 12;
		if(pos17 == null) {
			pos17 = 0;
		}
		var pos18 = pos17;
		if(pos18 == null) {
			pos18 = 0;
		}
		var ch116 = data.readU8(pos18);
		var ch216 = data.readU8(pos18 + 1);
		var ch3 = data.readU8(pos18 + 2);
		var ch4 = data.readU8(pos18 + 3);
		var ngroups = ch4 | ch3 << 8 | ch216 << 16 | ch116 << 24;
		var low = 0;
		var high = ngroups;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos19 = index_map + 16 + mid * 12;
			if(pos19 == null) {
				pos19 = 0;
			}
			var pos20 = pos19;
			if(pos20 == null) {
				pos20 = 0;
			}
			var ch117 = data.readU8(pos20);
			var ch217 = data.readU8(pos20 + 1);
			var ch31 = data.readU8(pos20 + 2);
			var ch41 = data.readU8(pos20 + 3);
			var start_char = ch41 | ch31 << 8 | ch217 << 16 | ch117 << 24;
			var pos21 = index_map + 16 + mid * 12 + 4;
			if(pos21 == null) {
				pos21 = 0;
			}
			var pos22 = pos21;
			if(pos22 == null) {
				pos22 = 0;
			}
			var ch118 = data.readU8(pos22);
			var ch218 = data.readU8(pos22 + 1);
			var ch32 = data.readU8(pos22 + 2);
			var ch42 = data.readU8(pos22 + 3);
			var end_char = ch42 | ch32 << 8 | ch218 << 16 | ch118 << 24;
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var pos23 = index_map + 16 + mid * 12 + 8;
				if(pos23 == null) {
					pos23 = 0;
				}
				var pos24 = pos23;
				if(pos24 == null) {
					pos24 = 0;
				}
				var ch119 = data.readU8(pos24);
				var ch219 = data.readU8(pos24 + 1);
				var ch33 = data.readU8(pos24 + 2);
				var ch43 = data.readU8(pos24 + 3);
				var start_glyph = ch43 | ch33 << 8 | ch219 << 16 | ch119 << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw new js__$Boot_HaxeError("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g1 = info1 + (ch2 | ch1 << 8) * 2;
		var info2 = info.glyf;
		var p1 = info.data;
		var pos1 = info.loca + glyph_index * 2 + 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		g2 = info2 + (ch21 | ch11 << 8) * 2;
	} else {
		var info3 = info.glyf;
		var p2 = info.data;
		var pos2 = info.loca + glyph_index * 4;
		if(pos2 == null) {
			pos2 = 0;
		}
		var pos3 = pos2;
		if(pos3 == null) {
			pos3 = 0;
		}
		var ch12 = p2.readU8(pos3);
		var ch22 = p2.readU8(pos3 + 1);
		var ch3 = p2.readU8(pos3 + 2);
		var ch4 = p2.readU8(pos3 + 3);
		g1 = info3 + (ch4 | ch3 << 8 | ch22 << 16 | ch12 << 24);
		var info4 = info.glyf;
		var p3 = info.data;
		var pos4 = info.loca + glyph_index * 4 + 4;
		if(pos4 == null) {
			pos4 = 0;
		}
		var pos5 = pos4;
		if(pos5 == null) {
			pos5 = 0;
		}
		var ch13 = p3.readU8(pos5);
		var ch23 = p3.readU8(pos5 + 1);
		var ch31 = p3.readU8(pos5 + 2);
		var ch41 = p3.readU8(pos5 + 3);
		g2 = info4 + (ch41 | ch31 << 8 | ch23 << 16 | ch13 << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return false;
	}
	var p = info.data;
	var pos = g + 2;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = g + 4;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = g + 6;
	if(pos2 == null) {
		pos2 = 0;
	}
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = g + 8;
	if(pos3 == null) {
		pos3 = 0;
	}
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var pos = g;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var pos1 = endPtsOfContoursOffset + numberOfContours * 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch11 = data.readU8(pos1);
		var ch21 = data.readU8(pos1 + 1);
		var ins = ch21 | ch11 << 8;
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + ins;
		var pos2 = endPtsOfContoursOffset + numberOfContours * 2 - 2;
		if(pos2 == null) {
			pos2 = 0;
		}
		var ch12 = data.readU8(pos2);
		var ch22 = data.readU8(pos2 + 1);
		var n1 = 1 + (ch22 | ch12 << 8);
		var m = n1 + 2 * numberOfContours;
		var this1 = new Array(m);
		vertices = this1;
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) {
				var i = _g++;
				vertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
			}
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n1;
		var _g2 = 0;
		var _g11 = n1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i1].type = flags;
		}
		var x = 0;
		var _g21 = 0;
		var _g3 = n1;
		while(_g21 < _g3) {
			var i2 = _g21++;
			flags = vertices[off + i2].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch13 = data.readU8(pointsIndex);
				var ch23 = data.readU8(pointsIndex + 1);
				var n2 = ch23 | ch13 << 8;
				if((n2 & 32768) != 0) {
					value = n2 - 65536;
				} else {
					value = n2;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i2].x = x;
		}
		var y = 0;
		var _g4 = 0;
		var _g5 = n1;
		while(_g4 < _g5) {
			var i3 = _g4++;
			flags = vertices[off + i3].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value1;
				var ch14 = data.readU8(pointsIndex);
				var ch24 = data.readU8(pointsIndex + 1);
				var n3 = ch24 | ch14 << 8;
				if((n3 & 32768) != 0) {
					value1 = n3 - 65536;
				} else {
					value1 = n3;
				}
				y += value1;
				pointsIndex += 2;
			}
			vertices[off + i3].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = scy;
		var cy = scx;
		var cx = cy;
		var sy = cx;
		var sx = sy;
		var i4 = 0;
		while(i4 < n1) {
			flags = vertices[off + i4].type;
			x = vertices[off + i4].x;
			y = vertices[off + i4].y;
			if(next_move == i4) {
				if(i4 != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i4 + 1].type & 1) == 0) {
						sx = x + vertices[off + i4 + 1].x >> 1;
						sy = y + vertices[off + i4 + 1].y >> 1;
					} else {
						sx = vertices[off + i4 + 1].x;
						sy = vertices[off + i4 + 1].y;
						++i4;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos3 = endPtsOfContoursOffset + j * 2;
				if(pos3 == null) {
					pos3 = 0;
				}
				var ch15 = data.readU8(pos3);
				var ch25 = data.readU8(pos3 + 1);
				next_move = 1 + (ch25 | ch15 << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i4;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours == -1) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var i5;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var pos4 = compIndex;
			if(pos4 == null) {
				pos4 = 0;
			}
			var ch16 = data.readU8(pos4);
			var ch26 = data.readU8(pos4 + 1);
			var n4 = ch26 | ch16 << 8;
			var flags1 = (n4 & 32768) != 0 ? n4 - 65536 : n4;
			var pos5 = compIndex += 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			var ch17 = data.readU8(pos5);
			var ch27 = data.readU8(pos5 + 1);
			var n5 = ch27 | ch17 << 8;
			var gidx = (n5 & 32768) != 0 ? n5 - 65536 : n5;
			compIndex += 2;
			if((flags1 & 2) != 0) {
				if((flags1 & 1) != 0) {
					var pos6 = compIndex;
					if(pos6 == null) {
						pos6 = 0;
					}
					var ch18 = data.readU8(pos6);
					var ch28 = data.readU8(pos6 + 1);
					var n6 = ch28 | ch18 << 8;
					mtx4 = (n6 & 32768) != 0 ? n6 - 65536 : n6;
					var pos7 = compIndex += 2;
					if(pos7 == null) {
						pos7 = 0;
					}
					var ch19 = data.readU8(pos7);
					var ch29 = data.readU8(pos7 + 1);
					var n7 = ch29 | ch19 << 8;
					mtx5 = (n7 & 32768) != 0 ? n7 - 65536 : n7;
					compIndex += 2;
				} else {
					var pos8 = compIndex;
					if(pos8 == null) {
						pos8 = 0;
					}
					var n8 = data.readU8(pos8);
					mtx4 = n8 >= 128 ? n8 - 256 : n8;
					var pos9 = ++compIndex;
					if(pos9 == null) {
						pos9 = 0;
					}
					var n9 = data.readU8(pos9);
					mtx5 = n9 >= 128 ? n9 - 256 : n9;
					++compIndex;
				}
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			if((flags1 & 8) != 0) {
				var pos10 = compIndex;
				if(pos10 == null) {
					pos10 = 0;
				}
				var ch110 = data.readU8(pos10);
				var ch210 = data.readU8(pos10 + 1);
				var n10 = ch210 | ch110 << 8;
				mtx3 = ((n10 & 32768) != 0 ? n10 - 65536 : n10) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags1 & 64) != 0) {
				var pos11 = compIndex;
				if(pos11 == null) {
					pos11 = 0;
				}
				var ch111 = data.readU8(pos11);
				var ch211 = data.readU8(pos11 + 1);
				var n11 = ch211 | ch111 << 8;
				mtx0 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var pos12 = compIndex;
				if(pos12 == null) {
					pos12 = 0;
				}
				var ch112 = data.readU8(pos12);
				var ch212 = data.readU8(pos12 + 1);
				var n12 = ch212 | ch112 << 8;
				mtx3 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
			} else if((flags1 & 128) != 0) {
				var pos13 = compIndex;
				if(pos13 == null) {
					pos13 = 0;
				}
				var ch113 = data.readU8(pos13);
				var ch213 = data.readU8(pos13 + 1);
				var n13 = ch213 | ch113 << 8;
				mtx0 = ((n13 & 32768) != 0 ? n13 - 65536 : n13) / 16384.0;
				var pos14 = compIndex += 2;
				if(pos14 == null) {
					pos14 = 0;
				}
				var ch114 = data.readU8(pos14);
				var ch214 = data.readU8(pos14 + 1);
				var n14 = ch214 | ch114 << 8;
				mtx1 = ((n14 & 32768) != 0 ? n14 - 65536 : n14) / 16384.0;
				var pos15 = compIndex += 2;
				if(pos15 == null) {
					pos15 = 0;
				}
				var ch115 = data.readU8(pos15);
				var ch215 = data.readU8(pos15 + 1);
				var n15 = ch215 | ch115 << 8;
				mtx2 = ((n15 & 32768) != 0 ? n15 - 65536 : n15) / 16384.0;
				var pos16 = compIndex += 2;
				if(pos16 == null) {
					pos16 = 0;
				}
				var ch116 = data.readU8(pos16);
				var ch216 = data.readU8(pos16 + 1);
				var n16 = ch216 | ch116 << 8;
				mtx3 = ((n16 & 32768) != 0 ? n16 - 65536 : n16) / 16384.0;
				compIndex += 2;
			}
			var m1 = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n17 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,gidx);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g6 = 0;
				var _g12 = comp_num_verts;
				while(_g6 < _g12) {
					var i6 = _g6++;
					var v = comp_verts[i6];
					var x1 = v.x;
					var y1 = v.y;
					v.x = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.y = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
					x1 = v.cx;
					y1 = v.cy;
					v.cx = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.cy = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
				}
				var this2 = new Array(num_vertices + comp_num_verts);
				tmp = this2;
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags1 & 32;
		}
	} else if(numberOfContours < 0) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(num_vertices < vertices.length) {
		var this3 = new Array(num_vertices);
		var tmp1 = this3;
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp1,0,num_vertices);
		return tmp1;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var numOfLongHorMetrics = ch2 | ch1 << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p1 = info.data;
		var pos1 = info.hmtx + 4 * glyph_index;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		var n = ch21 | ch11 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p2 = info.data;
		var pos2 = info.hmtx + 4 * glyph_index + 2;
		if(pos2 == null) {
			pos2 = 0;
		}
		var ch12 = p2.readU8(pos2);
		var ch22 = p2.readU8(pos2 + 1);
		var n1 = ch22 | ch12 << 8;
		metrics.leftSideBearing = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	} else {
		var p3 = info.data;
		var pos3 = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		if(pos3 == null) {
			pos3 = 0;
		}
		var ch13 = p3.readU8(pos3);
		var ch23 = p3.readU8(pos3 + 1);
		var n2 = ch23 | ch13 << 8;
		metrics.advanceWidth = (n2 & 32768) != 0 ? n2 - 65536 : n2;
		var p4 = info.data;
		var pos4 = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		if(pos4 == null) {
			pos4 = 0;
		}
		var ch14 = p4.readU8(pos4);
		var ch24 = p4.readU8(pos4 + 1);
		var n3 = ch24 | ch14 << 8;
		metrics.leftSideBearing = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	metrics.descent = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.hhea + 8;
	if(pos2 == null) {
		pos2 = 0;
	}
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	metrics.lineGap = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	var fheight = ((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1);
	return height / fheight;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var x0 = rect.x0;
		var x1 = rect.x1;
		var y0 = rect.y0;
		var y1 = rect.y1;
		rect.x0 = Math.floor(x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(x0 <= x && x1 <= x) {
		var _g = scanlineIndex + x;
		var _g1 = scanline;
		_g1[_g] = _g1[_g] + e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g2 = scanlineIndex + x;
		var _g11 = scanline;
		_g11[_g2] = _g11[_g2] + e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var x = x_top | 0;
					var height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g = x;
					var _g1 = scanline;
					_g1[_g] = _g1[_g] + e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					var _g2 = scanline_fillIndex + x;
					var _g11 = scanline_fill;
					_g11[_g2] = _g11[_g2] + e.direction * height;
				} else {
					var x1;
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					var x11 = x_top | 0;
					var x2 = x_bottom | 0;
					var y_crossing = (x11 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					var _g3 = x11;
					var _g12 = scanline;
					_g12[_g3] = _g12[_g3] + area * (1 - (x_top - x11 + (x11 + 1 - x11)) / 2);
					var step = sign * dy;
					var _g4 = x11 + 1;
					var _g13 = x2;
					while(_g4 < _g13) {
						var x3 = _g4++;
						var _g5 = x3;
						var _g14 = scanline;
						_g14[_g5] = _g14[_g5] + (area + step / 2);
						area += step;
					}
					y_crossing += dy * (x2 - (x11 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g21 = x2;
					var _g31 = scanline;
					_g31[_g21] = _g31[_g21] + (area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing));
					var _g22 = scanline_fillIndex + x2;
					var _g32 = scanline_fill;
					_g32[_g22] = _g32[_g22] + sign * (sy1 - sy0);
				}
			} else {
				var _g6 = 0;
				var _g15 = len;
				while(_g6 < _g15) {
					var x4 = _g6++;
					var y0 = y_top;
					var x12 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y3 = y_bottom;
					var y1 = (x4 - x01) / dx + y_top;
					var y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x12 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x12 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x12 && x31 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x31 < x12 && x01 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		var this1 = new Array(result.w * 2 + 1);
		scanline = this1;
	} else {
		var this2 = new Array(129);
		scanline = this2;
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[eIndex + n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) {
			var i = _g++;
			scanline[i] = 0;
		}
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			scanline2[scanline2Index + i1] = 0;
		}
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw new js__$Boot_HaxeError("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw new js__$Boot_HaxeError("Error");
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i2 = _g4++;
			sum += scanline2[scanline2Index + i2];
			var k = scanline[i2] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i2,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var i;
	var j;
	var _g = 1;
	var _g1 = n;
	while(_g < _g1) {
		var i1 = _g++;
		var t = p[i1];
		var a = t;
		j = i1;
		while(j > 0) {
			var b = p[j - 1];
			var c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(a,b);
			if(!c) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i1 != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c01 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]);
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(c01 != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var i;
	var j;
	var k;
	var vsubsample = 1;
	var ptsIndex = 0;
	var n = 0;
	var _g = 0;
	var _g1 = windings;
	while(_g < _g1) {
		var i1 = _g++;
		n += wcount[i1];
	}
	var this1 = new Array(n + 1);
	var e = this1;
	if(e == null) {
		return;
	} else {
		var _g2 = 0;
		var _g3 = e.length;
		while(_g2 < _g3) {
			var i2 = _g2++;
			e[i2] = new kha_graphics2_truetype_Stbtt_$_$edge();
		}
	}
	n = 0;
	var m = 0;
	var _g21 = 0;
	var _g31 = windings;
	while(_g21 < _g31) {
		var i3 = _g21++;
		var p = pts;
		var pIndex = ptsIndex + m;
		m += wcount[i3];
		j = wcount[i3] - 1;
		var _g22 = 0;
		var _g32 = wcount[i3];
		while(_g22 < _g32) {
			var k1 = _g22++;
			var a = k1;
			var b = j;
			if(p[pIndex + j].y == p[pIndex + k1].y) {
				j = k1;
				continue;
			}
			e[n].invert = false;
			if(invert ? p[pIndex + j].y > p[pIndex + k1].y : p[pIndex + j].y < p[pIndex + k1].y) {
				e[n].invert = true;
				a = j;
				b = k1;
			}
			e[n].x0 = p[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = (p[pIndex + a].y * y_scale_inv + shift_y) * vsubsample;
			e[n].x1 = p[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = (p[pIndex + b].y * y_scale_inv + shift_y) * vsubsample;
			++n;
			j = k1;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var i;
	var n = 0;
	var start = 0;
	var pass;
	var _g = 0;
	var _g1 = num_verts;
	while(_g < _g1) {
		var i1 = _g++;
		if(vertices[i1].type == 1) {
			++n;
		}
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	var this1 = new Array(n);
	contour_lengths.value = this1;
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g2 = 0;
	while(_g2 < 2) {
		var pass1 = _g2++;
		var x = 0;
		var y = 0;
		if(pass1 == 1) {
			var this2 = new Array(num_points);
			points = this2;
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g21 = 0;
				var _g3 = points.length;
				while(_g21 < _g3) {
					var i2 = _g21++;
					points[i2] = new kha_graphics2_truetype_Stbtt_$_$point();
				}
			}
		}
		num_points = 0;
		n = -1;
		var _g22 = 0;
		var _g31 = num_verts;
		while(_g22 < _g31) {
			var i3 = _g22++;
			switch(vertices[i3].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i3].cx,vertices[i3].cy,vertices[i3].x,vertices[i3].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i3].x;
				y = vertices[i3].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var scale = scale_x > scale_y ? scale_y : scale_x;
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : winding_count};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / scale,winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = y;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var index = chars[_g];
		++_g;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g);
		var advance = metrics.advanceWidth;
		var lsb = metrics.leftSideBearing;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var x1 = rect.x1;
		var y1 = rect.y1;
		var gw = x1 - x0;
		var gh = y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		if(x + gw >= pw) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(y + gh >= ph) {
			throw new js__$Boot_HaxeError("Error");
		}
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g1 = 0;
	var _g2 = pw * ph;
	while(_g1 < _g2) {
		var i1 = _g1++;
		pixels.writeU8(i1,0);
	}
	i = 0;
	var ch;
	var _g3 = 0;
	while(_g3 < chars.length) {
		var index1 = chars[_g3];
		++_g3;
		var g1 = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index1);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g1);
		++i;
	}
	return bottom_y;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = "kha.graphics4.ConstantLocation";
kha_graphics4_ConstantLocation.__isInterface__ = true;
var kha_graphics4_CubeMap = function(texture) {
	this.texture_ = texture;
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = "kha.graphics4.CubeMap";
kha_graphics4_CubeMap.__interfaces__ = [kha_Canvas];
kha_graphics4_CubeMap.getRenderTargetFormat = function(format) {
	switch(format) {
	case 0:
		return 0;
	case 2:
		return 3;
	case 3:
		return 4;
	case 4:
		return 1;
	default:
		return 0;
	}
};
kha_graphics4_CubeMap.getDepthBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return 24;
	case 2:
		return 24;
	case 3:
		return 24;
	case 4:
		return 32;
	case 5:
		return 16;
	}
};
kha_graphics4_CubeMap.getStencilBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return -1;
	case 2:
		return 8;
	case 3:
		return 8;
	case 4:
		return 8;
	case 5:
		return 0;
	}
};
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	var cubeMap = new kha_graphics4_CubeMap(null);
	cubeMap.format = format;
	cubeMap.renderTarget_ = Krom.createRenderTargetCubeMap(size,kha_graphics4_CubeMap.getDepthBufferBits(depthStencil),kha_graphics4_CubeMap.getRenderTargetFormat(format),kha_graphics4_CubeMap.getStencilBufferBits(depthStencil),contextId);
	return cubeMap;
};
kha_graphics4_CubeMap.prototype = {
	unload: function() {
	}
	,get_width: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.width;
		}
	}
	,get_height: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.height;
		}
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_krom_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
	,__properties__: {get_g4:"get_g4",get_height:"get_height",get_width:"get_width"}
};
var kha_graphics4_FragmentShader = function(sources,names) {
	if(sources != null) {
		this.shader = Krom.createFragmentShader(sources[0].bytes.b.bufferValue,names[0]);
	}
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = "kha.graphics4.FragmentShader";
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader(null,null);
	shader.shader = Krom.createFragmentShaderFromSource(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function(sources,names) {
	this.shader = Krom.createGeometryShader(sources[0].bytes.b.bufferValue,names[0]);
};
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = "kha.graphics4.GeometryShader";
kha_graphics4_GeometryShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = "kha.graphics4.Graphics";
kha_graphics4_Graphics.__isInterface__ = true;
kha_graphics4_Graphics.prototype = {
	__class__: kha_graphics4_Graphics
};
var kha_graphics4_PipelineCache = function(pipeline) {
	this.pipeline = pipeline;
	this.projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	this.textureLocation = pipeline.getTextureUnit("tex");
};
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = "kha.graphics4.PipelineCache";
kha_graphics4_PipelineCache.prototype = {
	__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = "kha.graphics4.ImageShaderPainter";
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ImageShaderPainter.standardImagePipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,drawBuffer: function() {
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ImageShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ImageShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_ImageShaderPainter.bufferIndex = 0;
		kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
	,__properties__: {set_pipeline:"set_pipeline"}
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = "kha.graphics4.ColoredShaderPainter";
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ColoredShaderPainter.standardColorPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g1 = 0;
			while(_g1 < 1000) {
				var i1 = _g1++;
				triIndices[i1 * 3] = i1 * 3;
				triIndices[i1 * 3 + 1] = i1 * 3 + 1;
				triIndices[i1 * 3 + 2] = i1 * 3 + 2;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 7] = topleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 8] = toplefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 14] = toprightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 15] = toprighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 16] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 21] = bottomrightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 22] = bottomrighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 20] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 24] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 25] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 26] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex] = x1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 1] = y1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 7] = x2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 8] = y2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 14] = x3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 15] = y3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,__class__: kha_graphics4_ColoredShaderPainter
	,__properties__: {set_pipeline:"set_pipeline"}
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = "kha.graphics4.TextShaderPainter";
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var glyphs = kha_graphics2_Graphics.fontGlyphs;
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_TextShaderPainter.standardTextPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var charCode = text.charCodeAt(i);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x1 = q.x0;
				var y1 = q.y1;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var value_x = x1;
				var value_y = y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x2 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y2 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x3 = x2;
				var y3 = y2;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var p0_x = x3;
				var p0_y = y3;
				var x4 = q.x0;
				var y4 = q.y0;
				if(y4 == null) {
					y4 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				var value_x1 = x4;
				var value_y1 = y4;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x5 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y5 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x6 = x5;
				var y6 = y5;
				if(y6 == null) {
					y6 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var p1_x = x6;
				var p1_y = y6;
				var x7 = q.x1;
				var y7 = q.y0;
				if(y7 == null) {
					y7 = 0;
				}
				if(x7 == null) {
					x7 = 0;
				}
				var value_x2 = x7;
				var value_y2 = y7;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x8 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y8 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x9 = x8;
				var y9 = y8;
				if(y9 == null) {
					y9 = 0;
				}
				if(x9 == null) {
					x9 = 0;
				}
				var p2_x = x9;
				var p2_y = y9;
				var x10 = q.x1;
				var y10 = q.y1;
				if(y10 == null) {
					y10 = 0;
				}
				if(x10 == null) {
					x10 = 0;
				}
				var value_x3 = x10;
				var value_y3 = y10;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x11 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y11 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x12 = x11;
				var y12 = y11;
				if(y12 == null) {
					y12 = 0;
				}
				if(x12 == null) {
					x12 = 0;
				}
				var p3_x = x12;
				var p3_y = y12;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
	,__properties__: {set_pipeline:"set_pipeline"}
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.lastPipeline = null;
	this.pipelineCache = new haxe_ds_ObjectMap();
	this.myImageScaleQuality = kha_graphics2_ImageScaleQuality.Low;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = "kha.graphics4.Graphics2";
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			var tx = -width / width;
			var ty = -height / (0 - height);
			var tz = -1.0002000200020003;
			var m__00 = 2 / width;
			var m__10 = 0;
			var m__20 = 0;
			var m__30 = tx;
			var m__01 = 0;
			var m__11 = 2.0 / (0 - height);
			var m__21 = 0;
			var m__31 = ty;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = -0.002000200020002;
			var m__32 = tz;
			var m__03 = 0;
			var m__13 = 0;
			var m__23 = 0;
			var m__33 = 1;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(this.g.renderTargetsInvertedY()) {
				var _this1 = this.projectionMatrix;
				var tx1 = -width / width;
				var ty1 = -height / height;
				var tz1 = -1.0002000200020003;
				var m__001 = 2 / width;
				var m__101 = 0;
				var m__201 = 0;
				var m__301 = tx1;
				var m__011 = 0;
				var m__111 = 2.0 / height;
				var m__211 = 0;
				var m__311 = ty1;
				var m__021 = 0;
				var m__121 = 0;
				var m__221 = -0.002000200020002;
				var m__321 = tz1;
				var m__031 = 0;
				var m__131 = 0;
				var m__231 = 0;
				var m__331 = 1;
				_this1._00 = m__001;
				_this1._10 = m__101;
				_this1._20 = m__201;
				_this1._30 = m__301;
				_this1._01 = m__011;
				_this1._11 = m__111;
				_this1._21 = m__211;
				_this1._31 = m__311;
				_this1._02 = m__021;
				_this1._12 = m__121;
				_this1._22 = m__221;
				_this1._32 = m__321;
				_this1._03 = m__031;
				_this1._13 = m__131;
				_this1._23 = m__231;
				_this1._33 = m__331;
			} else {
				var _this2 = this.projectionMatrix;
				var tx2 = -width / width;
				var ty2 = -height / (0 - height);
				var tz2 = -1.0002000200020003;
				var m__002 = 2 / width;
				var m__102 = 0;
				var m__202 = 0;
				var m__302 = tx2;
				var m__012 = 0;
				var m__112 = 2.0 / (0 - height);
				var m__212 = 0;
				var m__312 = ty2;
				var m__022 = 0;
				var m__122 = 0;
				var m__222 = -0.002000200020002;
				var m__322 = tz2;
				var m__032 = 0;
				var m__132 = 0;
				var m__232 = 0;
				var m__332 = 1;
				_this2._00 = m__002;
				_this2._10 = m__102;
				_this2._20 = m__202;
				_this2._30 = m__302;
				_this2._01 = m__012;
				_this2._11 = m__112;
				_this2._21 = m__212;
				_this2._31 = m__312;
				_this2._02 = m__022;
				_this2._12 = m__122;
				_this2._22 = m__222;
				_this2._32 = m__322;
				_this2._03 = m__032;
				_this2._13 = m__132;
				_this2._23 = m__232;
				_this2._33 = m__332;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this1 = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = yh;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x2 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y2 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p1_x = x3;
		var p1_y = y3;
		var _this2 = this.transformations[this.transformationIndex];
		var x4 = x;
		var y4 = y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x5 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y5 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var p2_x = x6;
		var p2_y = y6;
		var _this3 = this.transformations[this.transformationIndex];
		var x7 = xw;
		var y7 = y;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x8 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y8 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var p3_x = x9;
		var p3_y = y9;
		var _this4 = this.transformations[this.transformationIndex];
		var x10 = xw;
		var y10 = yh;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x11 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y11 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y12 == null) {
			y12 = 0;
		}
		if(x12 == null) {
			x12 = 0;
		}
		var p4_x = x12;
		var p4_y = y12;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this5.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var _this1 = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x1 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y1 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p1_x = x2;
		var p1_y = y2;
		var _this2 = this.transformations[this.transformationIndex];
		var x3 = dx;
		var y3 = dy;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var value_x1 = x3;
		var value_y1 = y3;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x4 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y4 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var x5 = x4;
		var y5 = y4;
		if(y5 == null) {
			y5 = 0;
		}
		if(x5 == null) {
			x5 = 0;
		}
		var p2_x = x5;
		var p2_y = y5;
		var _this3 = this.transformations[this.transformationIndex];
		var x6 = dx + dw;
		var y6 = dy;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var value_x2 = x6;
		var value_y2 = y6;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x7 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y7 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var x8 = x7;
		var y8 = y7;
		if(y8 == null) {
			y8 = 0;
		}
		if(x8 == null) {
			x8 = 0;
		}
		var p3_x = x8;
		var p3_y = y8;
		var _this4 = this.transformations[this.transformationIndex];
		var x9 = dx + dw;
		var y9 = dy + dh;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var value_x3 = x9;
		var value_y3 = y9;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x10 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y10 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var x11 = x10;
		var y11 = y10;
		if(y11 == null) {
			y11 = 0;
		}
		if(x11 == null) {
			x11 = 0;
		}
		var p4_x = x11;
		var p4_y = y11;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this5.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x2 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y2 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p1_x = x3;
		var p1_y = y3;
		var _this1 = this.transformations[this.transformationIndex];
		var x4 = x - strength / 2;
		var y4 = y - strength / 2;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x5 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y5 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var p2_x = x6;
		var p2_y = y6;
		var _this2 = this.transformations[this.transformationIndex];
		var x7 = x + width + strength / 2;
		var y7 = y - strength / 2;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x8 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y8 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var p3_x = x9;
		var p3_y = y9;
		var _this3 = this.transformations[this.transformationIndex];
		var x10 = x + width + strength / 2;
		var y10 = y + strength / 2;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x11 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y11 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y12 == null) {
			y12 = 0;
		}
		if(x12 == null) {
			x12 = 0;
		}
		var p4_x = x12;
		var p4_y = y12;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this4 = this.transformations[this.transformationIndex];
		var x13 = x - strength / 2;
		var y13 = y + height - strength / 2;
		if(y13 == null) {
			y13 = 0;
		}
		if(x13 == null) {
			x13 = 0;
		}
		var value_x4 = x13;
		var value_y4 = y13;
		var w4 = _this4._02 * value_x4 + _this4._12 * value_y4 + _this4._22;
		var x14 = (_this4._00 * value_x4 + _this4._10 * value_y4 + _this4._20) / w4;
		var y14 = (_this4._01 * value_x4 + _this4._11 * value_y4 + _this4._21) / w4;
		var x15 = x14;
		var y15 = y14;
		if(y15 == null) {
			y15 = 0;
		}
		if(x15 == null) {
			x15 = 0;
		}
		var v_x = x15;
		var v_y = y15;
		p1_x = v_x;
		p1_y = v_y;
		var _this5 = this.transformations[this.transformationIndex];
		var x16 = x - strength / 2;
		var y16 = y + strength / 2;
		if(y16 == null) {
			y16 = 0;
		}
		if(x16 == null) {
			x16 = 0;
		}
		var value_x5 = x16;
		var value_y5 = y16;
		var w5 = _this5._02 * value_x5 + _this5._12 * value_y5 + _this5._22;
		var x17 = (_this5._00 * value_x5 + _this5._10 * value_y5 + _this5._20) / w5;
		var y17 = (_this5._01 * value_x5 + _this5._11 * value_y5 + _this5._21) / w5;
		var x18 = x17;
		var y18 = y17;
		if(y18 == null) {
			y18 = 0;
		}
		if(x18 == null) {
			x18 = 0;
		}
		var v_x1 = x18;
		var v_y1 = y18;
		p2_x = v_x1;
		p2_y = v_y1;
		var _this6 = this.transformations[this.transformationIndex];
		var x19 = x + strength / 2;
		var y19 = y + strength / 2;
		if(y19 == null) {
			y19 = 0;
		}
		if(x19 == null) {
			x19 = 0;
		}
		var value_x6 = x19;
		var value_y6 = y19;
		var w6 = _this6._02 * value_x6 + _this6._12 * value_y6 + _this6._22;
		var x20 = (_this6._00 * value_x6 + _this6._10 * value_y6 + _this6._20) / w6;
		var y20 = (_this6._01 * value_x6 + _this6._11 * value_y6 + _this6._21) / w6;
		var x21 = x20;
		var y21 = y20;
		if(y21 == null) {
			y21 = 0;
		}
		if(x21 == null) {
			x21 = 0;
		}
		var v_x2 = x21;
		var v_y2 = y21;
		p3_x = v_x2;
		p3_y = v_y2;
		var _this7 = this.transformations[this.transformationIndex];
		var x22 = x + strength / 2;
		var y22 = y + height - strength / 2;
		if(y22 == null) {
			y22 = 0;
		}
		if(x22 == null) {
			x22 = 0;
		}
		var value_x7 = x22;
		var value_y7 = y22;
		var w7 = _this7._02 * value_x7 + _this7._12 * value_y7 + _this7._22;
		var x23 = (_this7._00 * value_x7 + _this7._10 * value_y7 + _this7._20) / w7;
		var y23 = (_this7._01 * value_x7 + _this7._11 * value_y7 + _this7._21) / w7;
		var x24 = x23;
		var y24 = y23;
		if(y24 == null) {
			y24 = 0;
		}
		if(x24 == null) {
			x24 = 0;
		}
		var v_x3 = x24;
		var v_y3 = y24;
		p4_x = v_x3;
		p4_y = v_y3;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this8 = this.transformations[this.transformationIndex];
		var x25 = x - strength / 2;
		var y25 = y + height + strength / 2;
		if(y25 == null) {
			y25 = 0;
		}
		if(x25 == null) {
			x25 = 0;
		}
		var value_x8 = x25;
		var value_y8 = y25;
		var w8 = _this8._02 * value_x8 + _this8._12 * value_y8 + _this8._22;
		var x26 = (_this8._00 * value_x8 + _this8._10 * value_y8 + _this8._20) / w8;
		var y26 = (_this8._01 * value_x8 + _this8._11 * value_y8 + _this8._21) / w8;
		var x27 = x26;
		var y27 = y26;
		if(y27 == null) {
			y27 = 0;
		}
		if(x27 == null) {
			x27 = 0;
		}
		var v_x4 = x27;
		var v_y4 = y27;
		p1_x = v_x4;
		p1_y = v_y4;
		var _this9 = this.transformations[this.transformationIndex];
		var x28 = x - strength / 2;
		var y28 = y + height - strength / 2;
		if(y28 == null) {
			y28 = 0;
		}
		if(x28 == null) {
			x28 = 0;
		}
		var value_x9 = x28;
		var value_y9 = y28;
		var w9 = _this9._02 * value_x9 + _this9._12 * value_y9 + _this9._22;
		var x29 = (_this9._00 * value_x9 + _this9._10 * value_y9 + _this9._20) / w9;
		var y29 = (_this9._01 * value_x9 + _this9._11 * value_y9 + _this9._21) / w9;
		var x30 = x29;
		var y30 = y29;
		if(y30 == null) {
			y30 = 0;
		}
		if(x30 == null) {
			x30 = 0;
		}
		var v_x5 = x30;
		var v_y5 = y30;
		p2_x = v_x5;
		p2_y = v_y5;
		var _this10 = this.transformations[this.transformationIndex];
		var x31 = x + width + strength / 2;
		var y31 = y + height - strength / 2;
		if(y31 == null) {
			y31 = 0;
		}
		if(x31 == null) {
			x31 = 0;
		}
		var value_x10 = x31;
		var value_y10 = y31;
		var w10 = _this10._02 * value_x10 + _this10._12 * value_y10 + _this10._22;
		var x32 = (_this10._00 * value_x10 + _this10._10 * value_y10 + _this10._20) / w10;
		var y32 = (_this10._01 * value_x10 + _this10._11 * value_y10 + _this10._21) / w10;
		var x33 = x32;
		var y33 = y32;
		if(y33 == null) {
			y33 = 0;
		}
		if(x33 == null) {
			x33 = 0;
		}
		var v_x6 = x33;
		var v_y6 = y33;
		p3_x = v_x6;
		p3_y = v_y6;
		var _this11 = this.transformations[this.transformationIndex];
		var x34 = x + width + strength / 2;
		var y34 = y + height + strength / 2;
		if(y34 == null) {
			y34 = 0;
		}
		if(x34 == null) {
			x34 = 0;
		}
		var value_x11 = x34;
		var value_y11 = y34;
		var w11 = _this11._02 * value_x11 + _this11._12 * value_y11 + _this11._22;
		var x35 = (_this11._00 * value_x11 + _this11._10 * value_y11 + _this11._20) / w11;
		var y35 = (_this11._01 * value_x11 + _this11._11 * value_y11 + _this11._21) / w11;
		var x36 = x35;
		var y36 = y35;
		if(y36 == null) {
			y36 = 0;
		}
		if(x36 == null) {
			x36 = 0;
		}
		var v_x7 = x36;
		var v_y7 = y36;
		p4_x = v_x7;
		p4_y = v_y7;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this12 = this.transformations[this.transformationIndex];
		var x37 = x + width - strength / 2;
		var y37 = y + height - strength / 2;
		if(y37 == null) {
			y37 = 0;
		}
		if(x37 == null) {
			x37 = 0;
		}
		var value_x12 = x37;
		var value_y12 = y37;
		var w12 = _this12._02 * value_x12 + _this12._12 * value_y12 + _this12._22;
		var x38 = (_this12._00 * value_x12 + _this12._10 * value_y12 + _this12._20) / w12;
		var y38 = (_this12._01 * value_x12 + _this12._11 * value_y12 + _this12._21) / w12;
		var x39 = x38;
		var y39 = y38;
		if(y39 == null) {
			y39 = 0;
		}
		if(x39 == null) {
			x39 = 0;
		}
		var v_x8 = x39;
		var v_y8 = y39;
		p1_x = v_x8;
		p1_y = v_y8;
		var _this13 = this.transformations[this.transformationIndex];
		var x40 = x + width - strength / 2;
		var y40 = y + strength / 2;
		if(y40 == null) {
			y40 = 0;
		}
		if(x40 == null) {
			x40 = 0;
		}
		var value_x13 = x40;
		var value_y13 = y40;
		var w13 = _this13._02 * value_x13 + _this13._12 * value_y13 + _this13._22;
		var x41 = (_this13._00 * value_x13 + _this13._10 * value_y13 + _this13._20) / w13;
		var y41 = (_this13._01 * value_x13 + _this13._11 * value_y13 + _this13._21) / w13;
		var x42 = x41;
		var y42 = y41;
		if(y42 == null) {
			y42 = 0;
		}
		if(x42 == null) {
			x42 = 0;
		}
		var v_x9 = x42;
		var v_y9 = y42;
		p2_x = v_x9;
		p2_y = v_y9;
		var _this14 = this.transformations[this.transformationIndex];
		var x43 = x + width + strength / 2;
		var y43 = y + strength / 2;
		if(y43 == null) {
			y43 = 0;
		}
		if(x43 == null) {
			x43 = 0;
		}
		var value_x14 = x43;
		var value_y14 = y43;
		var w14 = _this14._02 * value_x14 + _this14._12 * value_y14 + _this14._22;
		var x44 = (_this14._00 * value_x14 + _this14._10 * value_y14 + _this14._20) / w14;
		var y44 = (_this14._01 * value_x14 + _this14._11 * value_y14 + _this14._21) / w14;
		var x45 = x44;
		var y45 = y44;
		if(y45 == null) {
			y45 = 0;
		}
		if(x45 == null) {
			x45 = 0;
		}
		var v_x10 = x45;
		var v_y10 = y45;
		p3_x = v_x10;
		p3_y = v_y10;
		var _this15 = this.transformations[this.transformationIndex];
		var x46 = x + width + strength / 2;
		var y46 = y + height - strength / 2;
		if(y46 == null) {
			y46 = 0;
		}
		if(x46 == null) {
			x46 = 0;
		}
		var value_x15 = x46;
		var value_y15 = y46;
		var w15 = _this15._02 * value_x15 + _this15._12 * value_y15 + _this15._22;
		var x47 = (_this15._00 * value_x15 + _this15._10 * value_y15 + _this15._20) / w15;
		var y47 = (_this15._01 * value_x15 + _this15._11 * value_y15 + _this15._21) / w15;
		var x48 = x47;
		var y48 = y47;
		if(y48 == null) {
			y48 = 0;
		}
		if(x48 == null) {
			x48 = 0;
		}
		var v_x11 = x48;
		var v_y11 = y48;
		p4_x = v_x11;
		p4_y = v_y11;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x2 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y2 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p1_x = x3;
		var p1_y = y3;
		var _this1 = this.transformations[this.transformationIndex];
		var x4 = x;
		var y4 = y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x5 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y5 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var p2_x = x6;
		var p2_y = y6;
		var _this2 = this.transformations[this.transformationIndex];
		var x7 = x + width;
		var y7 = y;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x8 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y8 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var p3_x = x9;
		var p3_y = y9;
		var _this3 = this.transformations[this.transformationIndex];
		var x10 = x + width;
		var y10 = y + height;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x11 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y11 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y12 == null) {
			y12 = 0;
		}
		if(x12 == null) {
			x12 = 0;
		}
		var p4_x = x12;
		var p4_y = y12;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec_x = 0;
		var vec_y = 0;
		if(y2 == y1) {
			var x = 0;
			var y = -1;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			vec_x = v_x;
			vec_y = v_y;
		} else {
			var x3 = 1;
			var y3 = -(x2 - x1) / (y2 - y1);
			if(y3 == null) {
				y3 = 0;
			}
			if(x3 == null) {
				x3 = 0;
			}
			var v_x1 = x3;
			var v_y1 = y3;
			vec_x = v_x1;
			vec_y = v_y1;
		}
		var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
		if(currentLength != 0) {
			var mul = strength / currentLength;
			vec_x *= mul;
			vec_y *= mul;
		}
		var x4 = x1 + 0.5 * vec_x;
		var y4 = y1 + 0.5 * vec_y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var p1_x = x4;
		var p1_y = y4;
		var x5 = x2 + 0.5 * vec_x;
		var y5 = y2 + 0.5 * vec_y;
		if(y5 == null) {
			y5 = 0;
		}
		if(x5 == null) {
			x5 = 0;
		}
		var p2_x = x5;
		var p2_y = y5;
		var x6 = p1_x - vec_x;
		var y6 = p1_y - vec_y;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var p3_x = x6;
		var p3_y = y6;
		var x7 = p2_x - vec_x;
		var y7 = p2_y - vec_y;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var p4_x = x7;
		var p4_y = y7;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p1_x + _this._12 * p1_y + _this._22;
		var x8 = (_this._00 * p1_x + _this._10 * p1_y + _this._20) / w;
		var y8 = (_this._01 * p1_x + _this._11 * p1_y + _this._21) / w;
		var x9 = x8;
		var y9 = y8;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var v_x2 = x9;
		var v_y2 = y9;
		p1_x = v_x2;
		p1_y = v_y2;
		var _this1 = this.transformations[this.transformationIndex];
		var w1 = _this1._02 * p2_x + _this1._12 * p2_y + _this1._22;
		var x10 = (_this1._00 * p2_x + _this1._10 * p2_y + _this1._20) / w1;
		var y10 = (_this1._01 * p2_x + _this1._11 * p2_y + _this1._21) / w1;
		var x11 = x10;
		var y11 = y10;
		if(y11 == null) {
			y11 = 0;
		}
		if(x11 == null) {
			x11 = 0;
		}
		var v_x3 = x11;
		var v_y3 = y11;
		p2_x = v_x3;
		p2_y = v_y3;
		var _this2 = this.transformations[this.transformationIndex];
		var w2 = _this2._02 * p3_x + _this2._12 * p3_y + _this2._22;
		var x12 = (_this2._00 * p3_x + _this2._10 * p3_y + _this2._20) / w2;
		var y12 = (_this2._01 * p3_x + _this2._11 * p3_y + _this2._21) / w2;
		var x13 = x12;
		var y13 = y12;
		if(y13 == null) {
			y13 = 0;
		}
		if(x13 == null) {
			x13 = 0;
		}
		var v_x4 = x13;
		var v_y4 = y13;
		p3_x = v_x4;
		p3_y = v_y4;
		var _this3 = this.transformations[this.transformationIndex];
		var w3 = _this3._02 * p4_x + _this3._12 * p4_y + _this3._22;
		var x14 = (_this3._00 * p4_x + _this3._10 * p4_y + _this3._20) / w3;
		var y14 = (_this3._01 * p4_x + _this3._11 * p4_y + _this3._21) / w3;
		var x15 = x14;
		var y15 = y14;
		if(y15 == null) {
			y15 = 0;
		}
		if(x15 == null) {
			x15 = 0;
		}
		var v_x5 = x15;
		var v_y5 = y15;
		p4_x = v_x5;
		p4_y = v_y5;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = x1;
		var y = y1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x4 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y4 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x5 = x4;
		var y5 = y4;
		if(y5 == null) {
			y5 = 0;
		}
		if(x5 == null) {
			x5 = 0;
		}
		var p1_x = x5;
		var p1_y = y5;
		var _this1 = this.transformations[this.transformationIndex];
		var x6 = x2;
		var y6 = y2;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var value_x1 = x6;
		var value_y1 = y6;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x7 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y7 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x8 = x7;
		var y8 = y7;
		if(y8 == null) {
			y8 = 0;
		}
		if(x8 == null) {
			x8 = 0;
		}
		var p2_x = x8;
		var p2_y = y8;
		var _this2 = this.transformations[this.transformationIndex];
		var x9 = x3;
		var y9 = y3;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var value_x2 = x9;
		var value_y2 = y9;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x10 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y10 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x11 = x10;
		var y11 = y10;
		if(y11 == null) {
			y11 = 0;
		}
		if(x11 == null) {
			x11 = 0;
		}
		var p3_x = x11;
		var p3_y = y11;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	}
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == kha_graphics2_ImageScaleQuality.High);
		this.textPainter.setBilinearFilter(value == kha_graphics2_ImageScaleQuality.High);
		return this.myImageScaleQuality = value;
	}
	,setPipeline: function(pipeline) {
		if(pipeline == this.lastPipeline) {
			return;
		}
		this.lastPipeline = pipeline;
		this.flush();
		if(pipeline == null) {
			this.imagePainter.set_pipeline(null);
			this.coloredPainter.set_pipeline(null);
			this.textPainter.set_pipeline(null);
		} else {
			var cache = this.pipelineCache.h[pipeline.__id__];
			if(cache == null) {
				cache = new kha_graphics4_PipelineCache(pipeline);
				this.pipelineCache.set(pipeline,cache);
			}
			this.imagePainter.set_pipeline(cache);
			this.coloredPainter.set_pipeline(cache);
			this.textPainter.set_pipeline(cache);
		}
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else if(!kha_graphics4_Graphics2.thrown) {
			kha_graphics4_Graphics2.thrown = true;
			throw new js__$Boot_HaxeError("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else if(!kha_graphics4_Graphics2.thrown) {
			kha_graphics4_Graphics2.thrown = true;
			throw new js__$Boot_HaxeError("Begin before you end");
		}
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.indexCount = indexCount;
	this.buffer = Krom.createIndexBuffer(indexCount);
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = "kha.graphics4.IndexBuffer";
kha_graphics4_IndexBuffer.prototype = {
	'delete': function() {
		Krom.deleteIndexBuffer(this.buffer);
		this.buffer = null;
	}
	,lock: function(start,count) {
		this._data = Krom.lockIndexBuffer(this.buffer);
		if(start == null) {
			start = 0;
		}
		if(count == null) {
			count = this.indexCount;
		}
		return this._data.subarray(start,start + count);
	}
	,unlock: function() {
		Krom.unlockIndexBuffer(this.buffer);
	}
	,set: function() {
		Krom.setIndexBuffer(this.buffer);
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilMode = 0;
	this.stencilBothPass = 0;
	this.stencilDepthFail = 0;
	this.stencilFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = "kha.graphics4.PipelineStateBase";
kha_graphics4_PipelineStateBase.prototype = {
	__class__: kha_graphics4_PipelineStateBase
};
var kha_graphics4_PipelineState = function() {
	kha_graphics4_PipelineStateBase.call(this);
	this.pipeline = Krom.createPipeline();
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = "kha.graphics4.PipelineState";
kha_graphics4_PipelineState.convertCullMode = function(mode) {
	switch(mode) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	}
};
kha_graphics4_PipelineState.convertCompareMode = function(mode) {
	switch(mode) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	}
};
kha_graphics4_PipelineState.convertStencilAction = function(action) {
	switch(action) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	}
};
kha_graphics4_PipelineState.convertBlendingFactor = function(factor) {
	switch(factor) {
	case 0:case 1:
		return 0;
	case 2:
		return 1;
	case 3:
		return 2;
	case 4:
		return 3;
	case 5:
		return 4;
	case 6:
		return 5;
	case 7:
		return 6;
	case 8:
		return 7;
	case 9:
		return 8;
	case 10:
		return 9;
	}
};
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	'delete': function() {
		Krom.deletePipeline(this.pipeline);
		this.pipeline = null;
	}
	,compile: function() {
		var structure0 = this.inputLayout.length > 0 ? this.inputLayout[0] : null;
		var structure1 = this.inputLayout.length > 1 ? this.inputLayout[1] : null;
		var structure2 = this.inputLayout.length > 2 ? this.inputLayout[2] : null;
		var structure3 = this.inputLayout.length > 3 ? this.inputLayout[3] : null;
		var gs = this.geometryShader != null ? this.geometryShader.shader : null;
		var tcs = this.tessellationControlShader != null ? this.tessellationControlShader.shader : null;
		var tes = this.tessellationEvaluationShader != null ? this.tessellationEvaluationShader.shader : null;
		var stencilReferenceValue = 0;
		var _g = this.stencilReferenceValue;
		if(_g._hx_index == 1) {
			var value = _g.value;
			stencilReferenceValue = value;
		}
		Krom.compilePipeline(this.pipeline,structure0,structure1,structure2,structure3,this.inputLayout.length,this.vertexShader.shader,this.fragmentShader.shader,gs,tcs,tes,{ cullMode : kha_graphics4_PipelineState.convertCullMode(this.cullMode), depthWrite : this.depthWrite, depthMode : kha_graphics4_PipelineState.convertCompareMode(this.depthMode), stencilMode : kha_graphics4_PipelineState.convertCompareMode(this.stencilMode), stencilBothPass : kha_graphics4_PipelineState.convertStencilAction(this.stencilBothPass), stencilDepthFail : kha_graphics4_PipelineState.convertStencilAction(this.stencilDepthFail), stencilFail : kha_graphics4_PipelineState.convertStencilAction(this.stencilFail), stencilReferenceValue : stencilReferenceValue, stencilReadMask : this.stencilReadMask, stencilWriteMask : this.stencilWriteMask, blendSource : kha_graphics4_PipelineState.convertBlendingFactor(this.blendSource), blendDestination : kha_graphics4_PipelineState.convertBlendingFactor(this.blendDestination), alphaBlendSource : kha_graphics4_PipelineState.convertBlendingFactor(this.alphaBlendSource), alphaBlendDestination : kha_graphics4_PipelineState.convertBlendingFactor(this.alphaBlendDestination), colorWriteMaskRed : this.colorWriteMasksRed, colorWriteMaskGreen : this.colorWriteMasksGreen, colorWriteMaskBlue : this.colorWriteMasksBlue, colorWriteMaskAlpha : this.colorWriteMasksAlpha, conservativeRasterization : this.conservativeRasterization});
	}
	,set: function() {
		Krom.setPipeline(this.pipeline);
	}
	,getConstantLocation: function(name) {
		return Krom.getConstantLocation(this.pipeline,name);
	}
	,getTextureUnit: function(name) {
		return Krom.getTextureUnit(this.pipeline,name);
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__ : true, __constructs__ : ["Dynamic","Static"]
	,Dynamic: {_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var kha_graphics4_TessellationControlShader = function(sources,names) {
	this.shader = Krom.createTessellationControlShader(sources[0].bytes.b.bufferValue,names[0]);
};
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = "kha.graphics4.TessellationControlShader";
kha_graphics4_TessellationControlShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = function(sources,names) {
	this.shader = Krom.createTessellationEvaluationShader(sources[0].bytes.b.bufferValue,names[0]);
};
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = "kha.graphics4.TessellationEvaluationShader";
kha_graphics4_TessellationEvaluationShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = "kha.graphics4.TextureUnit";
kha_graphics4_TextureUnit.__isInterface__ = true;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.vertexCount = vertexCount;
	this.structure = structure;
	this.buffer = Krom.createVertexBuffer(vertexCount,structure.elements,usage,instanceDataStepRate);
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = "kha.graphics4.VertexBuffer";
kha_graphics4_VertexBuffer.prototype = {
	'delete': function() {
		Krom.deleteVertexBuffer(this.buffer);
		this.buffer = null;
	}
	,lock: function(start,count) {
		this._data = Krom.lockVertexBuffer(this.buffer);
		return this._data;
	}
	,lockInt16: function(start,count) {
		var this1 = new Int16Array(this.lock(start,count).buffer);
		return this1;
	}
	,unlock: function(count) {
		Krom.unlockVertexBuffer(this.buffer);
	}
	,set: function(offset) {
		Krom.setVertexBuffer(this.buffer);
		return 0;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = "kha.graphics4.VertexElement";
kha_graphics4_VertexElement.prototype = {
	__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,names) {
	if(sources != null) {
		this.shader = Krom.createVertexShader(sources[0].bytes.b.bufferValue,names[0]);
	}
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = "kha.graphics4.VertexShader";
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader(null,null);
	shader.shader = Krom.createVertexShaderFromSource(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = "kha.graphics4.VertexStructure";
kha_graphics4_VertexStructure.prototype = {
	add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			byteSize += this.dataByteSize(this.elements[i].data);
		}
		return byteSize;
	}
	,dataByteSize: function(data) {
		switch(data) {
		case 0:
			return 4;
		case 1:
			return 8;
		case 2:
			return 12;
		case 3:
			return 16;
		case 4:
			return 64;
		case 5:
			return 4;
		case 6:
			return 8;
		}
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = "kha.input.Gamepad";
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.prototype = {
	notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(axis,value);
		}
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(button,value);
		}
	}
	,__class__: kha_input_Gamepad
	,__properties__: {get_id:"get_id"}
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = "kha.input.Keyboard";
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.prototype = {
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
		kha_SystemImpl.showKeyboard();
	}
	,hide: function() {
		kha_SystemImpl.hideKeyboard();
	}
	,sendDownEvent: function(code) {
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendUpEvent: function(code) {
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendPressEvent: function(char) {
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(char);
		}
	}
	,__class__: kha_input_Keyboard
};
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = "kha.input.Mouse";
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.prototype = {
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 108, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 112, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 122, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 126, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 136, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 140, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 150, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 154, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 164, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 168, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,sendLeaveEvent: function(windowId) {
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,movementX,movementY);
			}
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(delta);
			}
		}
	}
	,__class__: kha_input_Mouse
};
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = "kha.input.MouseImpl";
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.hideSystemCursor();
	}
	,showSystemCursor: function() {
		kha_SystemImpl.showSystemCursor();
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Pen = function() {
	kha_input_Pen.instance = this;
};
$hxClasses["kha.input.Pen"] = kha_input_Pen;
kha_input_Pen.__name__ = "kha.input.Pen";
kha_input_Pen.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getPen(num);
};
kha_input_Pen.prototype = {
	notify: function(downListener,upListener,moveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
	}
	,sendDownEvent: function(windowId,x,y,pressure) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendUpEvent: function(windowId,x,y,pressure) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,pressure) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,__class__: kha_input_Pen
};
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = "kha.input.Surface";
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,__class__: kha_input_Surface
};
var kha_krom_Graphics = function(renderTarget) {
	this.renderTarget = renderTarget;
};
$hxClasses["kha.krom.Graphics"] = kha_krom_Graphics;
kha_krom_Graphics.__name__ = "kha.krom.Graphics";
kha_krom_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_krom_Graphics.prototype = {
	begin: function(additionalRenderTargets) {
		Krom.begin(this.renderTarget,additionalRenderTargets);
	}
	,beginFace: function(face) {
		Krom.beginFace(this.renderTarget,face);
	}
	,end: function() {
		Krom.end();
	}
	,clear: function(color,depth,stencil) {
		var flags = 0;
		if(color != null) {
			flags |= 1;
		}
		if(depth != null) {
			flags |= 2;
		}
		if(stencil != null) {
			flags |= 4;
		}
		Krom.clear(flags,color == null ? 0 : color,depth,stencil);
	}
	,viewport: function(x,y,width,height) {
		Krom.viewport(x,y,width,height);
	}
	,setVertexBuffer: function(vertexBuffer) {
		vertexBuffer.set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		Krom.setVertexBuffers(vertexBuffers);
	}
	,setIndexBuffer: function(indexBuffer) {
		indexBuffer.set();
	}
	,setCubeMap: function(unit,cubeMap) {
		if(cubeMap == null) {
			return;
		}
		if(cubeMap.texture_ != null) {
			Krom.setTexture(unit,cubeMap.texture_);
		} else {
			Krom.setRenderTarget(unit,cubeMap.renderTarget_);
		}
	}
	,setCubeMapDepth: function(unit,cubeMap) {
		if(cubeMap == null) {
			return;
		}
		Krom.setTextureDepth(unit,cubeMap.renderTarget_);
	}
	,setTexture: function(unit,texture) {
		if(texture == null) {
			return;
		}
		if(texture.texture_ != null) {
			Krom.setTexture(unit,texture.texture_);
		} else {
			Krom.setRenderTarget(unit,texture.renderTarget_);
		}
	}
	,setTextureDepth: function(unit,texture) {
		if(texture == null) {
			return;
		}
		Krom.setTextureDepth(unit,texture.renderTarget_);
	}
	,setImageTexture: function(unit,texture) {
		if(texture == null) {
			return;
		}
		Krom.setImageTexture(unit,texture.texture_);
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		Krom.setTextureParameters(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter);
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		Krom.setTexture3DParameters(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter);
	}
	,setTextureCompareMode: function(texunit,enabled) {
		Krom.setTextureCompareMode(texunit,enabled);
	}
	,setCubeMapCompareMode: function(texunit,enabled) {
		Krom.setCubeMapCompareMode(texunit,enabled);
	}
	,setPipeline: function(pipeline) {
		pipeline.set();
	}
	,setBool: function(location,value) {
		Krom.setBool(location,value);
	}
	,setInt: function(location,value) {
		Krom.setInt(location,value);
	}
	,setFloat: function(location,value) {
		Krom.setFloat(location,value);
	}
	,setFloat2: function(location,value1,value2) {
		Krom.setFloat2(location,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		Krom.setFloat3(location,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		Krom.setFloat4(location,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		Krom.setFloats(location,values.buffer);
	}
	,setMatrix: function(location,matrix) {
		kha_krom_Graphics.mat[0] = matrix._00;
		kha_krom_Graphics.mat[1] = matrix._01;
		kha_krom_Graphics.mat[2] = matrix._02;
		kha_krom_Graphics.mat[3] = matrix._03;
		kha_krom_Graphics.mat[4] = matrix._10;
		kha_krom_Graphics.mat[5] = matrix._11;
		kha_krom_Graphics.mat[6] = matrix._12;
		kha_krom_Graphics.mat[7] = matrix._13;
		kha_krom_Graphics.mat[8] = matrix._20;
		kha_krom_Graphics.mat[9] = matrix._21;
		kha_krom_Graphics.mat[10] = matrix._22;
		kha_krom_Graphics.mat[11] = matrix._23;
		kha_krom_Graphics.mat[12] = matrix._30;
		kha_krom_Graphics.mat[13] = matrix._31;
		kha_krom_Graphics.mat[14] = matrix._32;
		kha_krom_Graphics.mat[15] = matrix._33;
		Krom.setMatrix(location,kha_krom_Graphics.mat.buffer);
	}
	,setMatrix3: function(location,matrix) {
		kha_krom_Graphics.mat[0] = matrix._00;
		kha_krom_Graphics.mat[1] = matrix._01;
		kha_krom_Graphics.mat[2] = matrix._02;
		kha_krom_Graphics.mat[3] = matrix._10;
		kha_krom_Graphics.mat[4] = matrix._11;
		kha_krom_Graphics.mat[5] = matrix._12;
		kha_krom_Graphics.mat[6] = matrix._20;
		kha_krom_Graphics.mat[7] = matrix._21;
		kha_krom_Graphics.mat[8] = matrix._22;
		Krom.setMatrix3(location,kha_krom_Graphics.mat.buffer);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		Krom.drawIndexedVertices(start,count);
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		Krom.drawIndexedVerticesInstanced(instanceCount,start,count);
	}
	,scissor: function(x,y,width,height) {
		Krom.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		Krom.disableScissor();
	}
	,renderTargetsInvertedY: function() {
		return Krom.renderTargetsInvertedY();
	}
	,__class__: kha_krom_Graphics
};
var zui_Nodes = function() {
	this.popupCommands = null;
	this.popupH = 0;
	this.popupW = 0;
	this.popupY = 0;
	this.popupX = 0;
	this.nodeId = -1;
	this.lastNodesCount = 0;
	this.handle = new zui_Handle();
	this.snapY = 0.0;
	this.snapX = 0.0;
	this.snapSocket = 0;
	this.snapToId = -1;
	this.snapFromId = -1;
	this.isNewLink = false;
	this.linkDrag = null;
	this.moveOnTop = null;
	this.dragged = false;
	this.ELEMENT_H = 25;
	this.scaleFactor = 1.0;
	this.uih = 0;
	this.uiw = 0;
	this.zoom = 1.0;
	this.panY = 0.0;
	this.panX = 0.0;
	this.nodesSelected = [];
	this.nodesDrag = false;
};
$hxClasses["zui.Nodes"] = zui_Nodes;
zui_Nodes.__name__ = "zui.Nodes";
zui_Nodes.prototype = {
	BUTTONS_H: function(node) {
		var buttonsH = 0.0;
		var _g = 0;
		var _g1 = node.buttons;
		while(_g < _g1.length) {
			var but = _g1[_g];
			++_g;
			if(but.type == "RGBA") {
				buttonsH += 150 * (this.scaleFactor * this.zoom);
			} else if(but.type == "VECTOR") {
				buttonsH += (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 4;
			} else if(but.type == "RAMP") {
				buttonsH += (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 9.5;
			} else if(but.type == "CURVES") {
				buttonsH += (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 8;
			} else {
				buttonsH += this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0;
			}
		}
		return buttonsH | 0;
	}
	,getNode: function(nodes,id) {
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			if(node.id == id) {
				return node;
			}
		}
		return null;
	}
	,getNodeId: function(nodes) {
		if(this.nodeId == -1) {
			var _g = 0;
			while(_g < nodes.length) {
				var n = nodes[_g];
				++_g;
				if(this.nodeId < n.id) {
					this.nodeId = n.id;
				}
			}
		}
		return ++this.nodeId;
	}
	,getLinkId: function(links) {
		var id = 0;
		var _g = 0;
		while(_g < links.length) {
			var l = links[_g];
			++_g;
			if(l.id >= id) {
				id = l.id + 1;
			}
		}
		return id;
	}
	,getSocketId: function(nodes) {
		var id = 0;
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			var _g1 = 0;
			var _g11 = n.inputs;
			while(_g1 < _g11.length) {
				var s = _g11[_g1];
				++_g1;
				if(s.id >= id) {
					id = s.id + 1;
				}
			}
			var _g2 = 0;
			var _g3 = n.outputs;
			while(_g2 < _g3.length) {
				var s1 = _g3[_g2];
				++_g2;
				if(s1.id >= id) {
					id = s1.id + 1;
				}
			}
		}
		return id;
	}
	,bakeElements: function(ui) {
		ui.g.end();
		zui_Nodes.elementsBaked = true;
		zui_Nodes.socketImage = kha_Image.createRenderTarget(24,24);
		var g = zui_Nodes.socketImage.get_g2();
		g.begin(true,0);
		g.set_color(-16777216);
		kha_graphics2_GraphicsExtension.fillCircle(g,12,12,12);
		g.set_color(-1);
		kha_graphics2_GraphicsExtension.fillCircle(g,12,12,9);
		g.end();
		ui.g.begin(false);
	}
	,nodeCanvas: function(ui,canvas) {
		if(!zui_Nodes.elementsBaked) {
			this.bakeElements(ui);
		}
		if(this.lastNodesCount > canvas.nodes.length) {
			ui.changed = true;
		}
		this.lastNodesCount = canvas.nodes.length;
		var wx = ui._windowX;
		var wy = ui._windowY;
		ui.inputEnabled = this.popupCommands == null;
		if(ui.inputEnabled && ui.inputDownR) {
			this.panX += ui.inputDX / (this.scaleFactor * this.zoom);
			this.panY += ui.inputDY / (this.scaleFactor * this.zoom);
		}
		if(ui.inputEnabled && ui.inputWheelDelta != 0) {
			this.zoom += -ui.inputWheelDelta / 10;
			if(this.zoom < 0.1) {
				this.zoom = 0.1;
			} else if(this.zoom > 1.0) {
				this.zoom = 1.0;
			}
			this.zoom = Math.round(this.zoom * 10) / 10;
			this.uiw = ui._w;
			this.uih = ui._h;
		}
		this.scaleFactor = ui.ops.scaleFactor;
		this.ELEMENT_H = ui.t.ELEMENT_H + 2;
		ui.setScale(this.scaleFactor * this.zoom);
		ui.elementsBaked = true;
		ui.g.set_font(ui.ops.font);
		ui.g.set_fontSize(ui.fontSize);
		var _g = 0;
		var _g1 = canvas.links;
		while(_g < _g1.length) {
			var link = _g1[_g];
			++_g;
			var from = this.getNode(canvas.nodes,link.from_id);
			var to = this.getNode(canvas.nodes,link.to_id);
			var fromX;
			if(from == null) {
				fromX = ui.inputX;
			} else {
				var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
				fromX = wx + (from.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan)) + (140 * (this.scaleFactor * this.zoom) | 0);
			}
			var fromY;
			if(from == null) {
				fromY = ui.inputY;
			} else {
				var zoomPan1 = (1.0 - this.zoom) * this.uih / 2.5;
				fromY = wy + (from.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan1)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + link.from_socket * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0));
			}
			var toX;
			if(to == null) {
				toX = ui.inputX;
			} else {
				var zoomPan2 = (1.0 - this.zoom) * this.uiw / 2.5;
				toX = wx + (to.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan2));
			}
			var toY;
			if(to == null) {
				toY = ui.inputY;
			} else {
				var zoomPan3 = (1.0 - this.zoom) * this.uih / 2.5;
				toY = wy + (to.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan3)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + (link.to_socket + to.outputs.length) * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) + this.BUTTONS_H(to);
			}
			var left = toX > fromX ? fromX : toX;
			var right = toX > fromX ? toX : fromX;
			var top = toY > fromY ? fromY : toY;
			var bottom = toY > fromY ? toY : fromY;
			if(right < 0 || left > wx + ui._windowW || bottom < 0 || top > wy + ui._windowH) {
				continue;
			}
			if(this.linkDrag == link) {
				if(this.snapFromId != -1) {
					fromX = this.snapX;
					fromY = this.snapY;
				}
				if(this.snapToId != -1) {
					toX = this.snapX;
					toY = this.snapY;
				}
				this.snapFromId = this.snapToId = -1;
				var _g2 = 0;
				var _g11 = canvas.nodes;
				while(_g2 < _g11.length) {
					var node = _g11[_g2];
					++_g2;
					var inps = node.inputs;
					var outs = node.outputs;
					var nodeh = (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node) | 0;
					var zoomPan4 = (1.0 - this.zoom) * this.uiw / 2.5;
					var rx = wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan4)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
					var zoomPan5 = (1.0 - this.zoom) * this.uih / 2.5;
					var ry = wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan5)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
					var rw = (140 * (this.scaleFactor * this.zoom) | 0) + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0);
					var rh = nodeh + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0);
					if(ui.getInputInRect(rx,ry,rw,rh)) {
						if(from == null && node.id != to.id) {
							var _g3 = 0;
							var _g12 = outs.length;
							while(_g3 < _g12) {
								var i = _g3++;
								var zoomPan6 = (1.0 - this.zoom) * this.uiw / 2.5;
								var sx = wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan6)) + (140 * (this.scaleFactor * this.zoom) | 0);
								var zoomPan7 = (1.0 - this.zoom) * this.uih / 2.5;
								var sy = wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan7)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + i * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0));
								var rx1 = sx - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
								var ry1 = sy - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
								if(ui.getInputInRect(rx1,ry1,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) {
									this.snapX = sx;
									this.snapY = sy;
									this.snapFromId = node.id;
									this.snapSocket = i;
									break;
								}
							}
						} else if(to == null && node.id != from.id) {
							var _g4 = 0;
							var _g13 = inps.length;
							while(_g4 < _g13) {
								var i1 = _g4++;
								var zoomPan8 = (1.0 - this.zoom) * this.uiw / 2.5;
								var sx1 = wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan8));
								var zoomPan9 = (1.0 - this.zoom) * this.uih / 2.5;
								var sy1 = wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan9)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + (i1 + outs.length) * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) + this.BUTTONS_H(node);
								var rx2 = sx1 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
								var ry2 = sy1 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
								if(ui.getInputInRect(rx2,ry2,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) {
									this.snapX = sx1;
									this.snapY = sy1;
									this.snapToId = node.id;
									this.snapSocket = i1;
									break;
								}
							}
						}
					}
				}
			}
			var selected = false;
			var _g5 = 0;
			var _g14 = this.nodesSelected;
			while(_g5 < _g14.length) {
				var n = _g14[_g5];
				++_g5;
				if(link.from_id == n.id || link.to_id == n.id) {
					selected = true;
					break;
				}
			}
			this.drawLink(ui,fromX - wx,fromY - wy,toX - wx,toY - wy,selected);
		}
		var _g21 = 0;
		var _g31 = canvas.nodes;
		while(_g21 < _g31.length) {
			var node1 = _g31[_g21];
			++_g21;
			var tmp;
			var tmp1;
			var tmp2;
			var zoomPan10 = (1.0 - this.zoom) * this.uiw / 2.5;
			if(!(node1.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan10) > ui._windowW)) {
				var zoomPan11 = (1.0 - this.zoom) * this.uiw / 2.5;
				tmp2 = node1.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan11) + (140 * (this.scaleFactor * this.zoom) | 0) < 0;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				var zoomPan12 = (1.0 - this.zoom) * this.uih / 2.5;
				tmp1 = node1.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan12) > ui._windowH;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				var zoomPan13 = (1.0 - this.zoom) * this.uih / 2.5;
				tmp = node1.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan13) + ((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node1.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node1.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node1) | 0) < 0;
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var inps1 = node1.inputs;
			var outs1 = node1.outputs;
			var nodeh1 = (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node1.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node1.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node1) | 0;
			var tmp3;
			if(ui.inputEnabled) {
				var zoomPan14 = (1.0 - this.zoom) * this.uiw / 2.5;
				var zoomPan15 = (1.0 - this.zoom) * this.uih / 2.5;
				tmp3 = ui.getInputInRect(wx + (node1.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan14)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,wy + (node1.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan15)),(140 * (this.scaleFactor * this.zoom) | 0) + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0),this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0);
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				if(ui.inputStarted) {
					if(ui.isShiftDown) {
						if(this.nodesSelected.indexOf(node1) >= 0) {
							HxOverrides.remove(this.nodesSelected,node1);
						} else {
							this.nodesSelected.push(node1);
						}
					} else if(this.nodesSelected.length <= 1) {
						this.nodesSelected = [node1];
					}
					this.moveOnTop = node1;
					this.nodesDrag = true;
					this.dragged = false;
				} else if(ui.inputReleased && !ui.isShiftDown && !this.dragged) {
					this.nodesSelected = [node1];
				}
			}
			var tmp4;
			if(ui.inputStarted) {
				var zoomPan16 = (1.0 - this.zoom) * this.uiw / 2.5;
				var zoomPan17 = (1.0 - this.zoom) * this.uih / 2.5;
				tmp4 = ui.getInputInRect(wx + (node1.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan16)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,wy + (node1.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan17)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,(140 * (this.scaleFactor * this.zoom) | 0) + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0),nodeh1 + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0));
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				var _g22 = 0;
				var _g32 = outs1.length;
				while(_g22 < _g32) {
					var i2 = _g22++;
					var zoomPan18 = (1.0 - this.zoom) * this.uiw / 2.5;
					var sx2 = wx + (node1.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan18)) + (140 * (this.scaleFactor * this.zoom) | 0);
					var zoomPan19 = (1.0 - this.zoom) * this.uih / 2.5;
					var sy2 = wy + (node1.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan19)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + i2 * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0));
					if(ui.getInputInRect(sx2 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,sy2 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) {
						var l = { id : this.getLinkId(canvas.links), from_id : node1.id, from_socket : i2, to_id : -1, to_socket : -1};
						canvas.links.push(l);
						this.linkDrag = l;
						this.isNewLink = true;
						break;
					}
				}
				if(this.linkDrag == null) {
					var _g41 = 0;
					var _g51 = inps1.length;
					while(_g41 < _g51) {
						var i3 = _g41++;
						var zoomPan20 = (1.0 - this.zoom) * this.uiw / 2.5;
						var sx3 = wx + (node1.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan20));
						var zoomPan21 = (1.0 - this.zoom) * this.uih / 2.5;
						var sy3 = wy + (node1.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan21)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + (i3 + outs1.length) * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) + this.BUTTONS_H(node1);
						if(ui.getInputInRect(sx3 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,sy3 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) {
							var _g42 = 0;
							var _g52 = canvas.links;
							while(_g42 < _g52.length) {
								var l1 = _g52[_g42];
								++_g42;
								if(l1.to_id == node1.id && l1.to_socket == i3) {
									l1.to_id = l1.to_socket = -1;
									this.linkDrag = l1;
									this.isNewLink = false;
									break;
								}
							}
							if(this.linkDrag != null) {
								break;
							}
							var l2 = { id : this.getLinkId(canvas.links), from_id : -1, from_socket : -1, to_id : node1.id, to_socket : i3};
							canvas.links.push(l2);
							this.linkDrag = l2;
							this.isNewLink = true;
							break;
						}
					}
				}
			} else if(ui.inputReleased) {
				if(this.snapToId != -1) {
					var _g23 = 0;
					var _g33 = canvas.links;
					while(_g23 < _g33.length) {
						var l3 = _g33[_g23];
						++_g23;
						if(l3.to_id == this.snapToId && l3.to_socket == this.snapSocket) {
							HxOverrides.remove(canvas.links,l3);
							break;
						}
					}
					this.linkDrag.to_id = this.snapToId;
					this.linkDrag.to_socket = this.snapSocket;
					ui.changed = true;
				} else if(this.snapFromId != -1) {
					this.linkDrag.from_id = this.snapFromId;
					this.linkDrag.from_socket = this.snapSocket;
					ui.changed = true;
				} else if(this.linkDrag != null) {
					HxOverrides.remove(canvas.links,this.linkDrag);
					ui.changed = true;
					if(zui_Nodes.onLinkDrag != null) {
						zui_Nodes.onLinkDrag(this.linkDrag,this.isNewLink);
					}
				}
				this.snapToId = this.snapFromId = -1;
				this.linkDrag = null;
				this.nodesDrag = false;
			}
			if(this.nodesDrag && this.nodesSelected.indexOf(node1) >= 0 && !ui.inputDownR) {
				if(ui.inputDX != 0 || ui.inputDY != 0) {
					this.dragged = true;
					node1.x += ui.inputDX / (this.scaleFactor * this.zoom) | 0;
					node1.y += ui.inputDY / (this.scaleFactor * this.zoom) | 0;
				}
			}
			this.drawNode(ui,node1,canvas);
		}
		if(zui_Nodes.boxSelect) {
			ui.g.set_color(573780957);
			ui.g.fillRect(zui_Nodes.boxSelectX,zui_Nodes.boxSelectY,ui.inputX - zui_Nodes.boxSelectX - ui._windowX,ui.inputY - zui_Nodes.boxSelectY - ui._windowY);
			ui.g.set_color(1999844317);
			ui.g.drawRect(zui_Nodes.boxSelectX,zui_Nodes.boxSelectY,ui.inputX - zui_Nodes.boxSelectX - ui._windowX,ui.inputY - zui_Nodes.boxSelectY - ui._windowY);
			ui.g.set_color(-1);
		}
		if(ui.inputEnabled && ui.inputStarted && this.linkDrag == null && !this.nodesDrag && !ui.changed) {
			zui_Nodes.boxSelect = true;
			zui_Nodes.boxSelectX = ui.inputX - ui._windowX | 0;
			zui_Nodes.boxSelectY = ui.inputY - ui._windowY | 0;
		} else if(zui_Nodes.boxSelect && !ui.inputDown) {
			zui_Nodes.boxSelect = false;
			var nodes = [];
			var left1 = zui_Nodes.boxSelectX;
			var top1 = zui_Nodes.boxSelectY;
			var right1 = ui.inputX - ui._windowX | 0;
			var bottom1 = ui.inputY - ui._windowY | 0;
			if(left1 > right1) {
				var t = left1;
				left1 = right1;
				right1 = t;
			}
			if(top1 > bottom1) {
				var t1 = top1;
				top1 = bottom1;
				bottom1 = t1;
			}
			var _g43 = 0;
			var _g53 = canvas.nodes;
			while(_g43 < _g53.length) {
				var n1 = _g53[_g43];
				++_g43;
				var tmp5;
				var tmp6;
				var tmp7;
				var zoomPan22 = (1.0 - this.zoom) * this.uiw / 2.5;
				if(n1.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan22) + (140 * (this.scaleFactor * this.zoom) | 0) > left1) {
					var zoomPan23 = (1.0 - this.zoom) * this.uiw / 2.5;
					tmp7 = n1.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan23) < right1;
				} else {
					tmp7 = false;
				}
				if(tmp7) {
					var zoomPan24 = (1.0 - this.zoom) * this.uih / 2.5;
					tmp6 = n1.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan24) + ((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + n1.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + n1.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(n1) | 0) > top1;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					var zoomPan25 = (1.0 - this.zoom) * this.uih / 2.5;
					tmp5 = n1.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan25) < bottom1;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					nodes.push(n1);
				}
			}
			if(ui.isShiftDown) {
				var _g6 = 0;
				while(_g6 < nodes.length) {
					var n2 = nodes[_g6];
					++_g6;
					this.nodesSelected.push(n2);
				}
			} else {
				this.nodesSelected = nodes;
			}
		}
		if(this.moveOnTop != null) {
			HxOverrides.remove(canvas.nodes,this.moveOnTop);
			canvas.nodes.push(this.moveOnTop);
			this.moveOnTop = null;
		}
		var cutSelected = false;
		if(zui_Zui.isCopy) {
			var copyNodes = [];
			var _g44 = 0;
			var _g54 = this.nodesSelected;
			while(_g44 < _g54.length) {
				var n3 = _g54[_g44];
				++_g44;
				if(zui_Nodes.excludeRemove.indexOf(n3.type) >= 0) {
					continue;
				}
				copyNodes.push(n3);
			}
			var copyLinks = [];
			var _g61 = 0;
			var _g7 = canvas.links;
			while(_g61 < _g7.length) {
				var l4 = _g7[_g61];
				++_g61;
				if(this.getNode(this.nodesSelected,l4.from_id) != null && this.getNode(this.nodesSelected,l4.to_id) != null) {
					copyLinks.push(l4);
				}
			}
			var copyCanvas = { name : canvas.name, nodes : copyNodes, links : copyLinks};
			zui_Nodes.clipboard = JSON.stringify(copyCanvas);
			cutSelected = zui_Zui.isCut;
		}
		if(zui_Zui.isPaste && !ui.isTyping) {
			var pasteCanvas = JSON.parse(zui_Nodes.clipboard);
			var _g45 = 0;
			var _g55 = pasteCanvas.links;
			while(_g45 < _g55.length) {
				var l5 = _g55[_g45];
				++_g45;
				l5.id = this.getLinkId(canvas.links);
				canvas.links.push(l5);
			}
			var _g62 = 0;
			var _g71 = pasteCanvas.nodes;
			while(_g62 < _g71.length) {
				var n4 = _g71[_g62];
				++_g62;
				var old_id = n4.id;
				n4.id = this.getNodeId(canvas.nodes);
				var _g63 = 0;
				var _g72 = n4.inputs;
				while(_g63 < _g72.length) {
					var soc = _g72[_g63];
					++_g63;
					soc.id = this.getSocketId(canvas.nodes);
					soc.node_id = n4.id;
				}
				var _g8 = 0;
				var _g9 = n4.outputs;
				while(_g8 < _g9.length) {
					var soc1 = _g9[_g8];
					++_g8;
					soc1.id = this.getSocketId(canvas.nodes);
					soc1.node_id = n4.id;
				}
				var _g10 = 0;
				var _g111 = pasteCanvas.links;
				while(_g10 < _g111.length) {
					var l6 = _g111[_g10];
					++_g10;
					if(l6.from_id == old_id) {
						l6.from_id = n4.id;
					} else if(l6.to_id == old_id) {
						l6.to_id = n4.id;
					}
				}
				n4.x += 10;
				n4.y += 10;
				canvas.nodes.push(n4);
			}
			this.nodesSelected = pasteCanvas.nodes;
		}
		if(ui.isCtrlDown && ui.key == 65) {
			this.nodesSelected = [];
			var _g46 = 0;
			var _g56 = canvas.nodes;
			while(_g46 < _g56.length) {
				var n5 = _g56[_g46];
				++_g46;
				this.nodesSelected.push(n5);
			}
		}
		if(ui.inputEnabled && (ui.isBackspaceDown || ui.isDeleteDown || cutSelected) && !ui.isTyping) {
			var i4 = this.nodesSelected.length - 1;
			while(i4 >= 0) {
				var n6 = this.nodesSelected[i4--];
				if(zui_Nodes.excludeRemove.indexOf(n6.type) >= 0) {
					continue;
				}
				this.removeNode(n6,canvas);
				ui.changed = true;
			}
		}
		ui.setScale(this.scaleFactor);
		ui.elementsBaked = true;
		ui.inputEnabled = true;
		if(this.popupCommands != null) {
			ui._x = this.popupX;
			ui._y = this.popupY;
			ui._w = this.popupW;
			ui.fill(-6,-6,ui._w / ui.ops.scaleFactor + 12,ui.t.ELEMENT_H * 4 + 12,ui.t.ACCENT_SELECT_COL);
			ui.fill(-5,-5,ui._w / ui.ops.scaleFactor + 10,ui.t.ELEMENT_H * 4 + 10,ui.t.SEPARATOR_COL);
			this.popupCommands(ui);
			var hide = (ui.inputStarted || ui.inputStartedR) && (ui.inputX - wx < this.popupX - 6 || ui.inputX - wx > this.popupX + this.popupW + 6 || ui.inputY - wy < this.popupY - 6 || ui.inputY - wy > this.popupY + this.popupH * ui.ops.scaleFactor + 6);
			if(hide || ui.isEscapeDown) {
				this.popupCommands = null;
			}
		}
	}
	,drawNode: function(ui,node,canvas) {
		var wx = ui._windowX;
		var wy = ui._windowY;
		var uiX = ui._x;
		var uiY = ui._y;
		var uiW = ui._w;
		var w = 140 * (this.scaleFactor * this.zoom) | 0;
		var g = ui.g;
		var h = (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node) | 0;
		var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
		var nx = node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan);
		var zoomPan1 = (1.0 - this.zoom) * this.uih / 2.5;
		var ny = node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan1);
		var text = node.name;
		var lineh = this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0;
		g.set_color(this.nodesSelected.indexOf(node) >= 0 ? ui.t.LABEL_COL : ui.t.CONTEXT_COL);
		g.fillRect(nx - 1,ny - 1,w + 2,h + 2);
		g.set_color(ui.t.WINDOW_BG_COL - 394758);
		g.fillRect(nx,ny,w,lineh);
		g.set_color(node.color);
		g.fillRect(nx,ny + lineh - 3 * (this.scaleFactor * this.zoom),w,3 * (this.scaleFactor * this.zoom));
		g.set_color(ui.t.WINDOW_BG_COL);
		g.fillRect(nx,ny + lineh,w,h - lineh);
		g.set_color(ui.t.LABEL_COL);
		var textw = g.get_font().width(ui.fontSize,text);
		g.drawString(text,nx + 10 * (this.scaleFactor * this.zoom),ny + 6 * (this.scaleFactor * this.zoom));
		ny += lineh * 0.5;
		var _g = 0;
		var _g1 = node.outputs;
		while(_g < _g1.length) {
			var out = _g1[_g];
			++_g;
			ny += lineh;
			g.set_color(out.color);
			g.drawScaledImage(zui_Nodes.socketImage,nx + w - 6 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom),12 * (this.scaleFactor * this.zoom),12 * (this.scaleFactor * this.zoom));
		}
		ny -= lineh * node.outputs.length;
		g.set_color(ui.t.LABEL_COL);
		var _g2 = 0;
		var _g3 = node.outputs;
		while(_g2 < _g3.length) {
			var out1 = _g3[_g2];
			++_g2;
			ny += lineh;
			var strw = ui.ops.font.width(ui.fontSize,out1.name);
			g.drawString(out1.name,nx + w - strw - 12 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom));
		}
		var nhandle = this.handle.nest(node.id);
		ny -= lineh / 3;
		var _g4 = 0;
		var _g5 = node.buttons.length;
		while(_g4 < _g5) {
			var buti = _g4++;
			var but = node.buttons[buti];
			if(but.type == "RGBA") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var val = node.outputs[but.output].default_value;
				nhandle.color = kha__$Color_Color_$Impl_$.fromFloats(val[0],val[1],val[2]);
				zui_Ext.colorWheel(ui,nhandle,false);
				val[0] = ((nhandle.color & 16711680) >>> 16) * 0.00392156862745098;
				val[1] = ((nhandle.color & 65280) >>> 8) * 0.00392156862745098;
				val[2] = (nhandle.color & 255) * 0.00392156862745098;
			} else if(but.type == "VECTOR") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var min = but.min != null ? but.min : 0.0;
				var max = but.max != null ? but.max : 1.0;
				var textOff = ui.t.TEXT_OFFSET;
				ui.t.TEXT_OFFSET = 6;
				ui.text(but.name);
				var but1 = but.default_value[0];
				but.default_value[0] = ui.slider(nhandle.nest(buti).nest(0,{ value : but1}),"X",min,max,true,100,true,0);
				var but2 = but.default_value[1];
				but.default_value[1] = ui.slider(nhandle.nest(buti).nest(1,{ value : but2}),"Y",min,max,true,100,true,0);
				var but3 = but.default_value[2];
				but.default_value[2] = ui.slider(nhandle.nest(buti).nest(2,{ value : but3}),"Z",min,max,true,100,true,0);
				ui.t.TEXT_OFFSET = textOff;
				if(but.output != null) {
					node.outputs[but.output].default_value = but.default_value;
				}
				ny += lineh * 3;
			} else if(but.type == "VALUE") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var soc = node.outputs[but.output];
				var min1 = but.min != null ? but.min : 0.0;
				var max1 = but.max != null ? but.max : 1.0;
				var prec = but.precision != null ? but.precision : 100.0;
				var textOff1 = ui.t.TEXT_OFFSET;
				ui.t.TEXT_OFFSET = 6;
				soc.default_value = ui.slider(nhandle.nest(buti,{ value : soc.default_value}),"Value",min1,max1,true,prec,true,0);
				ui.t.TEXT_OFFSET = textOff1;
			} else if(but.type == "STRING") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var soc1 = but.output != null ? node.outputs[but.output] : null;
				but.default_value = ui.textInput(nhandle.nest(buti,{ text : soc1 != null ? soc1.default_value : ""}),but.name);
				if(soc1 != null) {
					soc1.default_value = but.default_value;
				}
			} else if(but.type == "ENUM") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var texts = ((but.data) instanceof Array) ? but.data : zui_Nodes.enumTexts(node.type);
				but.default_value = ui.combo(nhandle.nest(buti,{ position : but.default_value}),texts,but.name);
			} else if(but.type == "BOOL") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				but.default_value = ui.check(nhandle.nest(buti,{ selected : but.default_value}),but.name);
			} else if(but.type == "RAMP") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var vals = but.default_value;
				var sw = w / (this.scaleFactor * this.zoom);
				var _g41 = 0;
				while(_g41 < vals.length) {
					var val1 = vals[_g41];
					++_g41;
					var pos = val1[4];
					var col = kha__$Color_Color_$Impl_$.fromFloats(val1[0],val1[1],val1[2]);
					ui.fill(pos * sw,0,(1.0 - pos) * sw,lineh - 2 * (this.scaleFactor * this.zoom),col);
				}
				ui._y += lineh;
				var ihandle = nhandle.nest(buti).nest(2);
				ui.row([0.25,0.25,0.5]);
				if(ui.button("+")) {
					var last = vals[vals.length - 1];
					vals.push([last[0],last[1],last[2],last[3],1.0]);
					ihandle.value += 1;
				}
				if(ui.button("-") && vals.length > 1) {
					vals.pop();
					ihandle.value -= 1;
				}
				but.data = ui.combo(nhandle.nest(buti).nest(1,{ position : but.data}),["Linear","Constant"],"Interpolate");
				ui.row([0.5,0.5]);
				var i = ui.slider(ihandle,"Index",0,vals.length - 1,false,1,true,0) | 0;
				var val2 = vals[i];
				nhandle.nest(buti).nest(3).value = val2[4];
				val2[4] = ui.slider(nhandle.nest(buti).nest(3),"Pos",0,1,true,100,true,0);
				var chandle = nhandle.nest(buti).nest(4);
				chandle.color = kha__$Color_Color_$Impl_$.fromFloats(val2[0],val2[1],val2[2]);
				zui_Ext.colorWheel(ui,chandle,false);
				val2[0] = ((chandle.color & 16711680) >>> 16) * 0.00392156862745098;
				val2[1] = ((chandle.color & 65280) >>> 8) * 0.00392156862745098;
				val2[2] = (chandle.color & 255) * 0.00392156862745098;
				ny += lineh * 8 + lineh * 0.5;
			} else if(but.type == "CURVES") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				ui.row([0.33333333333333331,0.33333333333333331,0.33333333333333331]);
				ui.radio(nhandle.nest(buti).nest(1),0,"X");
				ui.radio(nhandle.nest(buti).nest(1),1,"Y");
				ui.radio(nhandle.nest(buti).nest(1),2,"Z");
				var axis = nhandle.nest(buti).nest(1).position;
				var val3 = but.default_value[axis];
				var num = val3.length / 2 | 0;
				ui._y += lineh * 5;
				ui.row([0.2,0.2,0.6]);
				if(ui.button("+")) {
					val3.push(0);
					val3.push(0);
				}
				if(ui.button("-")) {
					if(val3.length > 4) {
						val3.pop();
						val3.pop();
					}
				}
				var i1 = ui.slider(nhandle.nest(buti).nest(2).nest(axis,{ position : 0}),"Index",0,num - 1,false,1,true,0) | 0;
				ui.row([0.5,0.5]);
				nhandle.nest(buti).nest(3).value = val3[i1 * 2];
				nhandle.nest(buti).nest(4).value = val3[i1 * 2 + 1];
				val3[i1 * 2] = ui.slider(nhandle.nest(buti).nest(3,{ value : 0}),"X",-1,1,true,100,true,0);
				val3[i1 * 2 + 1] = ui.slider(nhandle.nest(buti).nest(4,{ value : 0}),"Y",-1,1,true,100,true,0);
				ny += lineh * 7;
			}
		}
		ny += lineh / 3;
		var _g6 = 0;
		var _g7 = node.inputs.length;
		while(_g6 < _g7) {
			var i2 = _g6++;
			var inp = node.inputs[i2];
			ny += lineh;
			g.set_color(inp.color);
			g.drawScaledImage(zui_Nodes.socketImage,nx - 6 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom),12 * (this.scaleFactor * this.zoom),12 * (this.scaleFactor * this.zoom));
			var isLinked = false;
			var _g61 = 0;
			var _g71 = canvas.links;
			while(_g61 < _g71.length) {
				var l = _g71[_g61];
				++_g61;
				if(l.to_id == node.id && l.to_socket == i2) {
					isLinked = true;
					break;
				}
			}
			if(!isLinked && inp.type == "VALUE") {
				ui._x = nx + 6 * (this.scaleFactor * this.zoom);
				ui._y = ny - 9 * (this.scaleFactor * this.zoom);
				ui._w = w - 6 * (this.scaleFactor * this.zoom) | 0;
				var soc2 = inp;
				var min2 = soc2.min != null ? soc2.min : 0.0;
				var max2 = soc2.max != null ? soc2.max : 1.0;
				var prec1 = soc2.precision != null ? soc2.precision : 100.0;
				var textOff2 = ui.t.TEXT_OFFSET;
				ui.t.TEXT_OFFSET = 6;
				soc2.default_value = ui.slider(nhandle.nest(9).nest(i2,{ value : soc2.default_value}),inp.name,min2,max2,true,prec1,true,0);
				ui.t.TEXT_OFFSET = textOff2;
			} else if(!isLinked && inp.type == "STRING") {
				ui._x = nx + 6 * (this.scaleFactor * this.zoom);
				ui._y = ny - 9 * (this.scaleFactor * this.zoom);
				ui._w = w - 6 * (this.scaleFactor * this.zoom) | 0;
				var soc3 = inp;
				var textOff3 = ui.t.TEXT_OFFSET;
				ui.t.TEXT_OFFSET = 6;
				soc3.default_value = ui.textInput(nhandle.nest(9).nest(i2,{ text : soc3.default_value}),inp.name,0);
				ui.t.TEXT_OFFSET = textOff3;
			} else if(!isLinked && inp.type == "RGBA") {
				g.set_color(ui.t.LABEL_COL);
				g.drawString(inp.name,nx + 12 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom));
				var soc4 = [inp];
				g.set_color(-16777216);
				g.fillRect(nx + w - 38 * (this.scaleFactor * this.zoom),ny - 6 * (this.scaleFactor * this.zoom),36 * (this.scaleFactor * this.zoom),18 * (this.scaleFactor * this.zoom));
				g.set_color(kha__$Color_Color_$Impl_$.fromFloats(soc4[0].default_value[0],soc4[0].default_value[1],soc4[0].default_value[2]));
				var rx = nx + w - 37 * (this.scaleFactor * this.zoom);
				var ry = ny - 5 * (this.scaleFactor * this.zoom);
				var rw = 34 * (this.scaleFactor * this.zoom);
				var rh = 16 * (this.scaleFactor * this.zoom);
				g.fillRect(rx,ry,rw,rh);
				var ix = ui.inputX - wx;
				var iy = ui.inputY - wy;
				if(ui.inputStarted && ix > rx && iy > ry && ix < rx + rw && iy < ry + rh) {
					ui.inputStarted = false;
					this.popup(rx | 0,ry + ui.t.ELEMENT_H * ui.ops.scaleFactor | 0,100 * this.scaleFactor | 0,ui.t.ELEMENT_H * 4,(function(soc5) {
						return function(ui1) {
							var val4 = soc5[0].default_value;
							nhandle.color = kha__$Color_Color_$Impl_$.fromFloats(val4[0],val4[1],val4[2]);
							zui_Ext.colorWheel(ui1,nhandle,false,null,false,false);
							val4[0] = ((nhandle.color & 16711680) >>> 16) * 0.00392156862745098;
							val4[1] = ((nhandle.color & 65280) >>> 8) * 0.00392156862745098;
							val4[2] = (nhandle.color & 255) * 0.00392156862745098;
						};
					})(soc4));
				}
			} else {
				g.set_color(ui.t.LABEL_COL);
				g.drawString(inp.name,nx + 12 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom));
			}
		}
		ui._x = uiX;
		ui._y = uiY;
		ui._w = uiW;
	}
	,drawLink: function(ui,x1,y1,x2,y2,highlight) {
		if(highlight == null) {
			highlight = false;
		}
		var g = ui.g;
		var c1 = ui.t.LABEL_COL;
		var c2 = ui.t.ACCENT_SELECT_COL;
		g.set_color(highlight ? kha__$Color_Color_$Impl_$.fromBytes((c1 & 16711680) >>> 16,(c1 & 65280) >>> 8,c1 & 255,210) : kha__$Color_Color_$Impl_$.fromBytes((c2 & 16711680) >>> 16,(c2 & 65280) >>> 8,c2 & 255,210));
		g.drawLine(x1,y1,x2,y2,1.0);
		g.set_color(highlight ? kha__$Color_Color_$Impl_$.fromBytes((c1 & 16711680) >>> 16,(c1 & 65280) >>> 8,c1 & 255,150) : kha__$Color_Color_$Impl_$.fromBytes((c2 & 16711680) >>> 16,(c2 & 65280) >>> 8,c2 & 255,150));
		g.drawLine(x1 + 0.5,y1,x2 + 0.5,y2,1.0);
		g.drawLine(x1 - 0.5,y1,x2 - 0.5,y2,1.0);
		g.drawLine(x1,y1 + 0.5,x2,y2 + 0.5,1.0);
		g.drawLine(x1,y1 - 0.5,x2,y2 - 0.5,1.0);
	}
	,removeNode: function(n,canvas) {
		if(n == null) {
			return;
		}
		var i = 0;
		while(i < canvas.links.length) {
			var l = canvas.links[i];
			if(l.from_id == n.id || l.to_id == n.id) {
				canvas.links.splice(i,1);
			} else {
				++i;
			}
		}
		HxOverrides.remove(canvas.nodes,n);
	}
	,popup: function(x,y,w,h,commands) {
		this.popupX = x;
		this.popupY = y;
		this.popupW = w;
		this.popupH = h;
		this.popupCommands = commands;
	}
	,__class__: zui_Nodes
};
var zui_Themes = function() { };
$hxClasses["zui.Themes"] = zui_Themes;
zui_Themes.__name__ = "zui.Themes";
var zui_Zui = function(ops) {
	this.checkSelectImage = null;
	this.elementsBaked = false;
	this.tabVertical = false;
	this.tabScroll = 0.0;
	this.tabHandle = null;
	this.tabColors = null;
	this.tabNames = null;
	this.tooltipTime = 0.0;
	this.tooltipWait = false;
	this.tooltipShown = false;
	this.tooltipY = 0.0;
	this.tooltipX = 0.0;
	this.tooltipInvertY = false;
	this.tooltipImgMaxWidth = null;
	this.tooltipImg = null;
	this.tooltipText = "";
	this.comboToSubmit = 0;
	this.submitComboHandle = null;
	this.comboSelectedWindow = null;
	this.comboSelectedHandle = null;
	this.tabPressedHandle = null;
	this.tabPressed = false;
	this.textToSubmit = "";
	this.submitTextHandle = null;
	this.textSelectedHandle = null;
	this.restoreY = -1.0;
	this.restoreX = -1.0;
	this.windowHeaderH = 0.0;
	this.windowHeaderW = 0.0;
	this.dragHandle = null;
	this.scrollHandle = null;
	this.windowEnded = true;
	this._windowY = 0.0;
	this._windowX = 0.0;
	this.imageScrollAlign = true;
	this.scrollAlign = 0.0;
	this.curRatio = -1;
	this.highlightAnchor = 0;
	this.cursorX = 0;
	this.inputStartedTime = 0.0;
	this.key = null;
	this.isReturnDown = false;
	this.isEscapeDown = false;
	this.isDeleteDown = false;
	this.isBackspaceDown = false;
	this.isADown = false;
	this.isAltDown = false;
	this.isCtrlDown = false;
	this.isShiftDown = false;
	this.isKeyDown = false;
	this.isKeyPressed = false;
	this.inputWheelDelta = 0;
	this.inputEnabled = true;
	this.inputRegistered = false;
	this.touchHold = false;
	this.highlightFullRow = false;
	this.tabSwitchEnabled = true;
	this.highlightOnSelect = true;
	this.alwaysRedraw = false;
	this.scrollEnabled = true;
	this.imageInvertY = false;
	this.changed = false;
	this.isReleased = false;
	this.isHovered = false;
	this.isPushed = false;
	this.isStarted = false;
	this.enabled = true;
	this.isTyping = false;
	this.isScrolling = false;
	if(ops.theme == null) {
		ops.theme = zui_Themes.dark;
	}
	this.t = ops.theme;
	if(ops.khaWindowId == null) {
		ops.khaWindowId = 0;
	}
	if(ops.scaleFactor == null) {
		ops.scaleFactor = 1.0;
	}
	if(ops.autoNotifyInput == null) {
		ops.autoNotifyInput = true;
	}
	this.ops = ops;
	this.setScale(ops.scaleFactor);
	if(ops.autoNotifyInput) {
		this.registerInput();
	}
	if(zui_Zui.copyReceiver == null) {
		zui_Zui.copyReceiver = this;
		kha_System.notifyOnCutCopyPaste($bind(this,this.onCut),$bind(this,this.onCopy),$bind(this,this.onPaste));
		kha_System.notifyOnFrames(function(frames) {
			if((zui_Zui.isCopy || zui_Zui.isPaste) && ++zui_Zui.copyFrame > 1) {
				zui_Zui.isCopy = zui_Zui.isCut = zui_Zui.isPaste = false;
				zui_Zui.copyFrame = 0;
			}
		});
	}
	var rtTextVS = kha_graphics4_Graphics2.createTextVertexStructure();
	this.rtTextPipeline = kha_graphics4_Graphics2.createTextPipeline(rtTextVS);
	this.rtTextPipeline.alphaBlendSource = 1;
	this.rtTextPipeline.compile();
};
$hxClasses["zui.Zui"] = zui_Zui;
zui_Zui.__name__ = "zui.Zui";
zui_Zui.prototype = {
	setScale: function(factor) {
		this.ops.scaleFactor = factor;
		this.fontSize = this.t.FONT_SIZE * this.ops.scaleFactor | 0;
		var fontHeight = this.ops.font.height(this.fontSize);
		this.fontOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - fontHeight) / 2;
		this.arrowOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.ARROW_SIZE * this.ops.scaleFactor) / 2;
		this.arrowOffsetX = this.arrowOffsetY;
		this.titleOffsetX = (this.arrowOffsetX * 2 + this.t.ARROW_SIZE * this.ops.scaleFactor) / this.ops.scaleFactor;
		this.buttonOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.BUTTON_H * this.ops.scaleFactor) / 2;
		this.checkOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.CHECK_SIZE * this.ops.scaleFactor) / 2;
		this.checkOffsetX = this.checkOffsetY;
		this.checkSelectOffsetY = (this.t.CHECK_SIZE * this.ops.scaleFactor - this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor) / 2;
		this.checkSelectOffsetX = this.checkSelectOffsetY;
		this.radioOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.CHECK_SIZE * this.ops.scaleFactor) / 2;
		this.radioOffsetX = this.radioOffsetY;
		this.radioSelectOffsetY = (this.t.CHECK_SIZE * this.ops.scaleFactor - this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor) / 2;
		this.radioSelectOffsetX = this.radioSelectOffsetY;
		this.elementsBaked = false;
	}
	,bakeElements: function() {
		if(this.checkSelectImage != null) {
			this.checkSelectImage.unload();
		}
		this.checkSelectImage = kha_Image.createRenderTarget(this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0,null,0,1,this.ops.khaWindowId);
		var g = this.checkSelectImage.get_g2();
		g.begin(true,0);
		g.set_color(this.t.ACCENT_SELECT_COL);
		g.drawLine(0,0,this.checkSelectImage.get_width(),this.checkSelectImage.get_height(),2 * this.ops.scaleFactor);
		g.drawLine(this.checkSelectImage.get_width(),0,0,this.checkSelectImage.get_height(),2 * this.ops.scaleFactor);
		g.end();
		this.elementsBaked = true;
	}
	,registerInput: function() {
		kha_input_Mouse.get().notifyWindowed(this.ops.khaWindowId,$bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		kha_input_Keyboard.get().notify($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		this.inputRegistered = true;
	}
	,unregisterInput: function() {
		kha_input_Mouse.get().removeWindowed(this.ops.khaWindowId,$bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		kha_input_Keyboard.get().remove($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		this.endInput();
		this.inputX = this.inputY = 0;
		this.inputRegistered = false;
	}
	,begin: function(g) {
		if(!this.elementsBaked) {
			this.bakeElements();
		}
		this.changed = false;
		this.globalG = g;
		this._x = 0;
		this._y = 0;
		this._w = 0;
		this._h = 0;
	}
	,end: function(last) {
		if(last == null) {
			last = true;
		}
		if(!this.windowEnded) {
			this.endWindow();
		}
		this.drawCombo();
		this.drawTooltip();
		this.tabPressedHandle = null;
		if(last) {
			this.endInput();
		}
	}
	,beginRegion: function(g,x,y,w) {
		if(!this.elementsBaked) {
			g.end();
			this.bakeElements();
			g.begin(false);
		}
		this.changed = false;
		this.globalG = g;
		this.g = g;
		this.currentWindow = null;
		this.tooltipText = "";
		this.tooltipImg = null;
		this._windowX = 0;
		this._windowY = 0;
		this._windowW = w;
		this._x = x;
		this._y = y;
		this._w = w;
	}
	,endRegion: function(last) {
		if(last == null) {
			last = true;
		}
		this.drawTooltip();
		this.tabPressedHandle = null;
		if(last) {
			this.endInput();
		}
	}
	,endInput: function() {
		this.isKeyPressed = false;
		this.inputStarted = false;
		this.inputStartedR = false;
		this.inputReleased = false;
		this.inputReleasedR = false;
		this.inputDX = 0;
		this.inputDY = 0;
		this.inputWheelDelta = 0;
		zui_Zui.textToPaste = "";
		if(zui_Zui.keyRepeat && this.isKeyDown && kha_Scheduler.time() - zui_Zui.keyRepeatTime > 0.05) {
			if(this.key == 8 || this.key == 46 || this.key == 37 || this.key == 39 || this.key == 38 || this.key == 40) {
				zui_Zui.keyRepeatTime = kha_Scheduler.time();
				this.isKeyPressed = true;
			}
		}
		if(zui_Zui.touchControls && this.inputDown && this.inputX == this.inputStartedX && this.inputY == this.inputStartedY && this.inputStartedTime > 0 && kha_Scheduler.time() - this.inputStartedTime > 0.5) {
			this.touchHold = true;
			this.inputStartedTime = 0;
		}
	}
	,inputChanged: function() {
		if(!(this.inputDX != 0 || this.inputDY != 0 || this.inputWheelDelta != 0 || this.inputStarted || this.inputStartedR || this.inputReleased || this.inputReleasedR || this.inputDown || this.inputDownR)) {
			return this.isKeyPressed;
		} else {
			return true;
		}
	}
	,windowDirty: function(handle,x,y,w,h) {
		var wx = x + handle.dragX;
		var wy = y + handle.dragY;
		var inputChanged = this.getInputInRect(wx,wy,w,h) && this.inputChanged();
		if(!(this.alwaysRedraw || this.isScrolling || this.isTyping)) {
			return inputChanged;
		} else {
			return true;
		}
	}
	,window: function(handle,x,y,w,h,drag) {
		if(drag == null) {
			drag = false;
		}
		if(handle.texture == null || w != handle.texture.get_width() || h != handle.texture.get_height()) {
			this.resize(handle,w,h,this.ops.khaWindowId);
		}
		if(!this.windowEnded) {
			this.endWindow();
		}
		this.windowEnded = false;
		this.g = handle.texture.get_g2();
		this.currentWindow = handle;
		this._windowX = x + handle.dragX;
		this._windowY = y + handle.dragY;
		this._windowW = w;
		this._windowH = h;
		this.windowHeaderW = 0;
		this.windowHeaderH = 0;
		if(this.windowDirty(handle,x,y,w,h)) {
			handle.redraws = 2;
		}
		if(zui_Zui.onBorderHover != null) {
			if(this.getInputInRect(this._windowX - 4,this._windowY,8,this._windowH)) {
				zui_Zui.onBorderHover(handle,0);
			} else if(this.getInputInRect(this._windowX + this._windowW - 4,this._windowY,8,this._windowH)) {
				zui_Zui.onBorderHover(handle,1);
			} else if(this.getInputInRect(this._windowX,this._windowY - 4,this._windowW,8)) {
				zui_Zui.onBorderHover(handle,2);
			} else if(this.getInputInRect(this._windowX,this._windowY + this._windowH - 4,this._windowW,8)) {
				zui_Zui.onBorderHover(handle,3);
			}
		}
		if(handle.redraws <= 0) {
			return false;
		}
		this._x = 0;
		this._y = handle.scrollOffset;
		if(handle.layout == 1) {
			w = this.t.ELEMENT_W * this.ops.scaleFactor | 0;
		}
		this._w = !handle.scrollEnabled ? w : w - (this.t.SCROLL_W * this.ops.scaleFactor | 0);
		this._h = h;
		this.tooltipText = "";
		this.tooltipImg = null;
		this.tabNames = null;
		if(this.t.FILL_WINDOW_BG) {
			this.g.begin(true,this.t.WINDOW_BG_COL);
		} else {
			this.g.begin(true,0);
			this.g.set_color(this.t.WINDOW_BG_COL);
			this.g.fillRect(this._x,this._y - handle.scrollOffset,handle.lastMaxX,handle.lastMaxY);
		}
		handle.dragEnabled = drag;
		if(drag) {
			if(this.inputStarted && this.getInputInRect(this._windowX,this._windowY,this._windowW,15 * this.ops.scaleFactor | 0)) {
				this.dragHandle = handle;
			} else if(this.inputReleased) {
				this.dragHandle = null;
			}
			if(handle == this.dragHandle) {
				handle.redraws = 2;
				handle.dragX += this.inputDX | 0;
				handle.dragY += this.inputDY | 0;
			}
			this._y += 15 * this.ops.scaleFactor | 0;
			this.windowHeaderH += 15 * this.ops.scaleFactor | 0;
		}
		return true;
	}
	,endWindow: function(bindGlobalG) {
		if(bindGlobalG == null) {
			bindGlobalG = true;
		}
		var handle = this.currentWindow;
		if(handle == null) {
			return;
		}
		if(handle.redraws > 0 || this.isScrolling || this.isTyping) {
			if(this.tabNames != null) {
				this.drawTabs();
			}
			if(handle.dragEnabled) {
				this.g.set_color(this.t.SEPARATOR_COL);
				this.g.fillRect(0,0,this._windowW,15 * this.ops.scaleFactor | 0);
			}
			var wh = this._windowH - this.windowHeaderH;
			var fullHeight = this._y - handle.scrollOffset - this.windowHeaderH;
			if(fullHeight < wh || handle.layout == 1 || !this.scrollEnabled) {
				handle.scrollEnabled = false;
				handle.scrollOffset = 0;
			} else {
				handle.scrollEnabled = true;
				if(this.tabScroll < 0) {
					handle.scrollOffset = this.tabScroll;
					this.tabScroll = 0;
				}
				var wy = this._windowY + this.windowHeaderH;
				var amountToScroll = fullHeight - wh;
				var amountScrolled = -handle.scrollOffset;
				var ratio = amountScrolled / amountToScroll;
				var barH = wh * Math.abs(wh / fullHeight);
				barH = Math.max(barH,this.t.ELEMENT_H * this.ops.scaleFactor);
				var totalScrollableArea = wh - barH;
				var e = amountToScroll / totalScrollableArea;
				var barY = totalScrollableArea * ratio + this.windowHeaderH;
				var barFocus = this.getInputInRect(this._windowX + this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),barY + this._windowY,this.t.SCROLL_W * this.ops.scaleFactor | 0,barH);
				if(this.inputStarted && barFocus) {
					this.scrollHandle = handle;
					this.isScrolling = true;
				}
				var scrollDelta = this.inputWheelDelta;
				if(zui_Zui.touchControls && this.inputDownR && this.inputDY != 0) {
					this.isScrolling = true;
					scrollDelta = -this.inputDY / 20;
				}
				if(handle == this.scrollHandle) {
					this.scroll(this.inputDY * e,fullHeight);
				} else if(scrollDelta != 0 && this.comboSelectedHandle == null && this.getInputInRect(this._windowX,wy,this._windowW,wh)) {
					this.scroll(scrollDelta * (this.t.ELEMENT_H * this.ops.scaleFactor),fullHeight);
				}
				if(handle.scrollOffset > 0) {
					handle.scrollOffset = 0;
				} else if(fullHeight + handle.scrollOffset < wh) {
					handle.scrollOffset = wh - fullHeight;
				}
				this.g.set_color(this.t.WINDOW_BG_COL);
				this.g.fillRect(this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),wy,this.t.SCROLL_W * this.ops.scaleFactor | 0,wh);
				this.g.set_color(this.t.ACCENT_COL);
				var scrollbarFocus = this.getInputInRect(this._windowX + this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),wy,this.t.SCROLL_W * this.ops.scaleFactor | 0,wh);
				var barW = scrollbarFocus || handle == this.scrollHandle ? this.t.SCROLL_W * this.ops.scaleFactor | 0 : (this.t.SCROLL_W * this.ops.scaleFactor | 0) / 3;
				this.g.fillRect(this._windowW - barW - this.scrollAlign,barY,barW,barH);
			}
			handle.lastMaxX = this._x;
			handle.lastMaxY = this._y;
			if(handle.layout == 0) {
				handle.lastMaxX += this._windowW;
			} else {
				handle.lastMaxY += this._windowH;
			}
			handle.redraws--;
			this.g.end();
		}
		this.windowEnded = true;
		if(zui_Zui.alwaysRedrawWindow || handle.redraws > -4) {
			if(bindGlobalG) {
				this.globalG.begin(false);
			}
			this.globalG.set_color(this.t.WINDOW_TINT_COL);
			this.globalG.drawImage(handle.texture,this._windowX,this._windowY);
			if(bindGlobalG) {
				this.globalG.end();
			}
			if(handle.redraws <= 0) {
				handle.redraws--;
			}
		}
	}
	,scroll: function(delta,fullHeight) {
		this.currentWindow.scrollOffset -= delta;
	}
	,tab: function(handle,text,vertical,color) {
		if(color == null) {
			color = -1;
		}
		if(vertical == null) {
			vertical = false;
		}
		if(this.tabNames == null) {
			this.tabNames = [];
			this.tabColors = [];
			this.tabHandle = handle;
			this.tabVertical = vertical;
			this._w -= this.tabVertical ? this.t.ELEMENT_OFFSET * this.ops.scaleFactor + this.t.ELEMENT_W * this.ops.scaleFactor - this.ops.scaleFactor | 0 : 0;
			if(vertical) {
				this.windowHeaderW += this.t.ELEMENT_W * this.ops.scaleFactor;
			} else {
				this.windowHeaderH += this.t.BUTTON_H * this.ops.scaleFactor + this.buttonOffsetY + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
			}
			this.restoreX = this.inputX;
			this.restoreY = this.inputY;
			if(!vertical && this.getInputInRect(this._windowX,this._windowY,this._windowW,this.windowHeaderH)) {
				this.inputX = this.inputY = -1;
			}
			if(vertical) {
				this._x += this.windowHeaderW + 6;
				this._w -= 6;
			} else {
				this._y += this.windowHeaderH + 3;
			}
		}
		this.tabNames.push(text);
		this.tabColors.push(color);
		return handle.position == this.tabNames.length - 1;
	}
	,drawTabs: function() {
		this.inputX = this.restoreX;
		this.inputY = this.restoreY;
		if(this.currentWindow == null) {
			return;
		}
		var tabX = 0.0;
		var tabY = 0.0;
		var tabH = this.t.BUTTON_H * this.ops.scaleFactor * 1.1 | 0;
		var origy = this._y;
		this._y = this.currentWindow.dragEnabled ? 15 * this.ops.scaleFactor | 0 : 0;
		this.tabHandle.changed = false;
		this.g.set_color(this.t.SEPARATOR_COL);
		if(this.tabVertical) {
			this.g.fillRect(0,this._y,this.t.ELEMENT_W * this.ops.scaleFactor,this._windowH);
		} else {
			this.g.fillRect(0,this._y,this._windowW,this.buttonOffsetY + tabH + 2);
		}
		this.g.set_color(this.t.ACCENT_COL);
		if(this.tabVertical) {
			this.g.fillRect(this.t.ELEMENT_W * this.ops.scaleFactor,this._y,1,this._windowH);
		} else {
			this.g.fillRect(this.buttonOffsetY,this._y + this.buttonOffsetY + tabH + 2,this._windowW - this.buttonOffsetY * 2,1);
		}
		var basey = this.tabVertical ? this._y : this._y + 2;
		var _g = 0;
		var _g1 = this.tabNames.length;
		while(_g < _g1) {
			var i = _g++;
			this._x = tabX;
			this._y = basey + tabY;
			this._w = this.tabVertical ? this.t.ELEMENT_W * this.ops.scaleFactor - this.ops.scaleFactor | 0 : this.ops.font.width(this.fontSize,this.tabNames[i]) + this.buttonOffsetY * 2 + 18 * this.ops.scaleFactor | 0;
			var released = this.getReleased();
			var pushed = this.getPushed();
			var hover = this.getHover();
			if(released) {
				var h = this.tabHandle.nest(this.tabHandle.position);
				h.scrollOffset = this.currentWindow.scrollOffset;
				h = this.tabHandle.nest(i);
				this.tabScroll = h.scrollOffset;
				this.tabHandle.position = i;
				this.currentWindow.redraws = 3;
				this.tabHandle.changed = true;
			}
			var selected = this.tabHandle.position == i;
			this.g.set_color(pushed || hover ? this.t.BUTTON_HOVER_COL : this.tabColors[i] != -1 ? this.tabColors[i] : selected ? this.t.WINDOW_BG_COL : this.t.SEPARATOR_COL);
			if(this.tabVertical) {
				tabY += tabH + 1;
			} else {
				tabX += this._w + 1;
			}
			var g = this.g;
			var x = this._x + this.buttonOffsetY;
			var y = this._y + this.buttonOffsetY;
			var w = this._w;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			g.fillRect(x,y - 1,w,tabH + 1);
			this.g.set_color(selected ? this.t.BUTTON_TEXT_COL : this.t.LABEL_COL);
			this.drawString(this.g,this.tabNames[i],this.t.TEXT_OFFSET,0,0);
			if(selected && !this.tabVertical) {
				this.g.set_color(this.t.WINDOW_BG_COL);
				this.g.fillRect(this._x + this.buttonOffsetY + 1,this._y + this.buttonOffsetY + tabH,this._w - 1,1);
			}
		}
		this._x = 0;
		this._y = origy;
		this._w = (!this.currentWindow.scrollEnabled ? this._windowW : this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0)) | 0;
	}
	,panel: function(handle,text,isTree,filled,pack) {
		if(pack == null) {
			pack = true;
		}
		if(filled == null) {
			filled = true;
		}
		if(isTree == null) {
			isTree = false;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.selected;
		}
		if(this.getReleased()) {
			handle.selected = !handle.selected;
			handle.changed = this.changed = true;
		}
		if(filled) {
			this.g.set_color(this.t.PANEL_BG_COL);
			var g = this.g;
			var x = this._x;
			var y = this._y;
			var w = this._w;
			var h = this.t.ELEMENT_H * this.ops.scaleFactor;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			g.fillRect(x,y - 1,w,h + 1);
		}
		if(isTree) {
			this.drawTree(handle.selected);
		} else {
			this.drawArrow(handle.selected);
		}
		this.g.set_color(this.t.LABEL_COL);
		this.g.set_opacity(1.0);
		this.drawString(this.g,text,this.titleOffsetX,0);
		this.endElement();
		if(pack && !handle.selected) {
			this._y -= this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
		return handle.selected;
	}
	,image: function(image,tint,h,sx,sy,sw,sh) {
		if(sh == null) {
			sh = 0;
		}
		if(sw == null) {
			sw = 0;
		}
		if(sy == null) {
			sy = 0;
		}
		if(sx == null) {
			sx = 0;
		}
		if(tint == null) {
			tint = -1;
		}
		var iw = (sw > 0 ? sw : image.get_width()) * this.ops.scaleFactor;
		var ih = (sh > 0 ? sh : image.get_height()) * this.ops.scaleFactor;
		var w = Math.min(iw,this._w);
		var x = this._x;
		var scroll = this.currentWindow != null && this.currentWindow.scrollEnabled;
		var r;
		if(this.curRatio == -1) {
			r = 1.0;
		} else {
			var ratio = this.ratios[this.curRatio];
			r = ratio < 0 ? -ratio : ratio;
		}
		if(this.imageScrollAlign) {
			w = Math.min(iw,this._w - this.buttonOffsetY * 2);
			x += this.buttonOffsetY;
			if(!scroll) {
				w -= (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r;
				x += (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r / 2;
			}
		} else if(scroll) {
			w += (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r;
		}
		var ratio1 = h == null ? w / iw : h / ih;
		if(h == null) {
			h = ih * ratio1;
		} else {
			w = iw * ratio1;
		}
		if(!this.isVisible(h)) {
			this.endElement(h);
			return 0;
		}
		var started = this.getStarted(h);
		var down = this.getPushed(h);
		var released = this.getReleased(h);
		var hover = this.getHover(h);
		this.g.set_color(tint);
		if(!this.enabled) {
			this.fadeColor();
		}
		var h_float = h;
		if(sw > 0) {
			if(this.imageInvertY) {
				this.g.drawScaledSubImage(image,sx,sy,sw,sh,x,this._y + h_float,w,-h_float);
			} else {
				this.g.drawScaledSubImage(image,sx,sy,sw,sh,x,this._y,w,h_float);
			}
		} else if(this.imageInvertY) {
			this.g.drawScaledImage(image,x,this._y + h_float,w,-h_float);
		} else {
			this.g.drawScaledImage(image,x,this._y,w,h_float);
		}
		this.endElement(h);
		if(started) {
			return 1;
		} else if(released) {
			return 3;
		} else if(down) {
			return 2;
		} else {
			return 0;
		}
	}
	,text: function(text,align,bg) {
		if(bg == null) {
			bg = 0;
		}
		if(align == null) {
			align = 0;
		}
		if(text.indexOf("\n") >= 0) {
			var align1 = align;
			var bg1 = bg;
			if(bg1 == null) {
				bg1 = 0;
			}
			if(align1 == null) {
				align1 = 0;
			}
			var _g = 0;
			var _g1 = text.split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				this.text(line,align1,bg1);
			}
			return 0;
		}
		var h = Math.max(this.t.ELEMENT_H * this.ops.scaleFactor,this.ops.font.height(this.fontSize));
		if(!this.isVisible(h)) {
			this.endElement(h + this.t.ELEMENT_OFFSET * this.ops.scaleFactor);
			return 0;
		}
		var started = this.getStarted(h);
		var down = this.getPushed(h);
		var released = this.getReleased(h);
		var hover = this.getHover(h);
		if(bg != 0) {
			this.g.set_color(bg);
			this.g.fillRect(this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w - this.buttonOffsetY * 2,this.t.BUTTON_H * this.ops.scaleFactor);
		}
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align);
		this.endElement(h + this.t.ELEMENT_OFFSET * this.ops.scaleFactor);
		if(started) {
			return 1;
		} else if(released) {
			return 3;
		} else if(down) {
			return 2;
		} else {
			return 0;
		}
	}
	,startTextEdit: function(handle) {
		this.isTyping = true;
		this.submitTextHandle = this.textSelectedHandle;
		this.textToSubmit = this.textSelected;
		this.textSelectedHandle = handle;
		this.textSelected = handle.text;
		this.cursorX = handle.text.length;
		if(this.tabPressed) {
			this.tabPressed = false;
			this.isKeyPressed = false;
		} else if(!this.highlightOnSelect) {
			var x = this.inputX - (this._windowX + this._x + this.t.TEXT_OFFSET * this.ops.scaleFactor);
			this.cursorX = 0;
			while(this.cursorX < this.textSelected.length && this.ops.font.width(this.fontSize,HxOverrides.substr(this.textSelected,0,this.cursorX)) < x) this.cursorX++;
		}
		this.tabPressedHandle = handle;
		this.highlightAnchor = this.highlightOnSelect ? 0 : this.cursorX;
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().show();
		}
	}
	,submitTextEdit: function() {
		this.submitTextHandle.text = this.textToSubmit;
		this.submitTextHandle.changed = this.changed = true;
		this.submitTextHandle = null;
		this.textToSubmit = "";
		this.textSelected = "";
	}
	,updateTextEdit: function(align,editable) {
		if(editable == null) {
			editable = true;
		}
		if(align == null) {
			align = 0;
		}
		var text = this.textSelected;
		if(this.isKeyPressed) {
			if(this.key == 37) {
				if(this.cursorX > 0) {
					this.cursorX--;
				}
			} else if(this.key == 39) {
				if(this.cursorX < text.length) {
					this.cursorX++;
				}
			} else if(editable && this.key == 8) {
				if(this.cursorX > 0 && this.highlightAnchor == this.cursorX) {
					text = HxOverrides.substr(text,0,this.cursorX - 1) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX--;
				} else if(this.highlightAnchor < this.cursorX) {
					text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX = this.highlightAnchor;
				} else {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
				}
			} else if(editable && this.key == 46) {
				if(this.highlightAnchor == this.cursorX) {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.cursorX + 1,null);
				} else if(this.highlightAnchor < this.cursorX) {
					text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX = this.highlightAnchor;
				} else {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
				}
			} else if(this.key == 13) {
				this.deselectText();
			} else if(this.key == 27) {
				this.textSelected = this.textSelectedHandle.text;
				this.deselectText();
			} else if(this.key == 9 && this.tabSwitchEnabled) {
				this.tabPressed = true;
				this.deselectText();
				this.key = null;
			} else if(this.key == 36) {
				this.cursorX = 0;
			} else if(this.key == 35) {
				this.cursorX = text.length;
			} else if(this.isCtrlDown && this.isADown) {
				this.cursorX = text.length;
				this.highlightAnchor = 0;
			} else if(editable && this.key != 16 && this.key != 20 && this.key != 17 && this.key != 18 && this.key != 38 && this.key != 40 && this.char != null && this.char != "" && HxOverrides.cca(this.char,0) >= 32) {
				text = HxOverrides.substr(text,0,this.highlightAnchor) + this.char + HxOverrides.substr(text,this.cursorX,null);
				this.cursorX = this.cursorX + 1 > text.length ? text.length : this.cursorX + 1;
			}
			var selecting = this.isShiftDown && (this.key == 37 || this.key == 39 || this.key == 16);
			if(!selecting && !this.isCtrlDown) {
				this.highlightAnchor = this.cursorX;
			}
		}
		if(zui_Zui.textToPaste != "") {
			text = HxOverrides.substr(text,0,this.highlightAnchor) + zui_Zui.textToPaste + HxOverrides.substr(text,this.cursorX,null);
			this.cursorX += zui_Zui.textToPaste.length;
			this.highlightAnchor = this.cursorX;
			zui_Zui.textToPaste = "";
		}
		if(this.highlightAnchor == this.cursorX) {
			zui_Zui.textToCopy = text;
		} else if(this.highlightAnchor < this.cursorX) {
			zui_Zui.textToCopy = text.substring(this.highlightAnchor,this.cursorX);
		} else {
			zui_Zui.textToCopy = text.substring(this.cursorX,this.highlightAnchor);
		}
		if(zui_Zui.isCut) {
			if(this.highlightAnchor == this.cursorX) {
				text = "";
			} else if(this.highlightAnchor < this.cursorX) {
				text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
				this.cursorX = this.highlightAnchor;
			} else {
				text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
			}
		}
		var off = this.t.TEXT_OFFSET * this.ops.scaleFactor;
		var lineHeight = this.t.ELEMENT_H * this.ops.scaleFactor;
		var cursorHeight = lineHeight - this.buttonOffsetY * 3.0;
		if(this.highlightAnchor != this.cursorX) {
			var istart = this.cursorX;
			var iend = this.highlightAnchor;
			if(this.highlightAnchor < this.cursorX) {
				istart = this.highlightAnchor;
				iend = this.cursorX;
			}
			var hlstr = HxOverrides.substr(text,istart,iend - istart);
			var hlstrw = this.ops.font.width(this.fontSize,hlstr);
			var startoff = this.ops.font.width(this.fontSize,HxOverrides.substr(text,0,istart));
			var hlStart = align == 0 ? this._x + startoff + off : this._x + this._w - hlstrw - off;
			if(align == 2) {
				hlStart -= this.ops.font.width(this.fontSize,HxOverrides.substr(text,iend,text.length));
			}
			this.g.set_color(this.t.ACCENT_SELECT_COL);
			this.g.fillRect(hlStart,this._y + this.buttonOffsetY * 1.5,hlstrw,cursorHeight);
		}
		var time = kha_Scheduler.time();
		if(this.isKeyDown || time % 1. < 0.5) {
			var str = align == 0 ? HxOverrides.substr(text,0,this.cursorX) : text.substring(this.cursorX,text.length);
			var strw = this.ops.font.width(this.fontSize,str);
			var cursorX = align == 0 ? this._x + strw + off : this._x + this._w - strw - off;
			this.g.set_color(this.t.TEXT_COL);
			this.g.fillRect(cursorX,this._y + this.buttonOffsetY * 1.5,this.ops.scaleFactor,cursorHeight);
		}
		this.textSelected = text;
	}
	,textInput: function(handle,label,align,editable) {
		if(editable == null) {
			editable = true;
		}
		if(align == null) {
			align = 0;
		}
		if(label == null) {
			label = "";
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.text;
		}
		var hover = this.getHover();
		if(hover && zui_Zui.onTextHover != null) {
			zui_Zui.onTextHover();
		}
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		var startEdit = this.getReleased() || this.tabPressed;
		if(this.textSelectedHandle != handle && startEdit) {
			this.startTextEdit(handle);
		}
		if(this.textSelectedHandle == handle) {
			this.updateTextEdit(align,editable);
		}
		if(this.submitTextHandle == handle) {
			this.submitTextEdit();
		} else {
			handle.changed = false;
		}
		if(label != "") {
			this.g.set_color(this.t.LABEL_COL);
			var labelAlign = align == 2 ? 0 : 2;
			var xOffset = labelAlign == 0 ? 7 : 0;
			this.drawString(this.g,label,xOffset,0,labelAlign);
		}
		this.g.set_color(this.t.TEXT_COL);
		if(this.textSelectedHandle != handle) {
			this.drawString(this.g,handle.text,null,0,align);
		} else {
			this.drawString(this.g,this.textSelected,null,0,align);
		}
		this.endElement();
		return handle.text;
	}
	,deselectText: function() {
		if(this.textSelectedHandle == null) {
			return;
		}
		this.submitTextHandle = this.textSelectedHandle;
		this.textToSubmit = this.textSelected;
		this.textSelectedHandle = null;
		this.isTyping = false;
		if(this.currentWindow != null) {
			this.currentWindow.redraws = 2;
		}
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().hide();
		}
		this.highlightAnchor = this.cursorX;
	}
	,button: function(text,align,label) {
		if(label == null) {
			label = "";
		}
		if(align == null) {
			align = 1;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return false;
		}
		var released = this.getReleased();
		var pushed = this.getPushed();
		var hover = this.getHover();
		if(released) {
			this.changed = true;
		}
		this.g.set_color(pushed ? this.t.BUTTON_PRESSED_COL : hover ? this.t.BUTTON_HOVER_COL : this.t.BUTTON_COL);
		var g = this.g;
		var fill = this.t.FILL_BUTTON_BG;
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		this.g.set_color(this.t.BUTTON_TEXT_COL);
		this.drawString(this.g,text,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align);
		if(label != "") {
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,label,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align == 2 ? 0 : 2);
		}
		this.endElement();
		return released;
	}
	,check: function(handle,text) {
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.selected;
		}
		if(this.getReleased()) {
			handle.selected = !handle.selected;
			handle.changed = this.changed = true;
		} else {
			handle.changed = false;
		}
		var hover = this.getHover();
		this.drawCheck(handle.selected,hover);
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.titleOffsetX,0,0);
		this.endElement();
		return handle.selected;
	}
	,radio: function(handle,position,text) {
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.position == position;
		}
		if(position == 0) {
			handle.changed = false;
		}
		if(this.getReleased()) {
			handle.position = position;
			handle.changed = this.changed = true;
		}
		var hover = this.getHover();
		this.drawRadio(handle.position == position,hover);
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.titleOffsetX,0);
		this.endElement();
		return handle.position == position;
	}
	,combo: function(handle,texts,label,showLabel,align,itemCount) {
		if(itemCount == null) {
			itemCount = -1;
		}
		if(align == null) {
			align = 0;
		}
		if(showLabel == null) {
			showLabel = false;
		}
		if(label == null) {
			label = "";
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.position;
		}
		if(this.getReleased()) {
			if(this.comboSelectedHandle == null) {
				this.inputEnabled = false;
				this.comboSelectedHandle = handle;
				this.comboSelectedWindow = this.currentWindow;
				this.comboSelectedAlign = align;
				this.comboSelectedTexts = texts;
				this.comboSelectedLabel = label;
				this.comboSelectedX = this._x + this._windowX | 0;
				this.comboSelectedY = this._y + this._windowY + this.t.ELEMENT_H * this.ops.scaleFactor | 0;
				this.comboSelectedW = this._w | 0;
				this.comboItemCount = itemCount < 0 ? texts.length : itemCount;
				this.comboItemOffset = -1;
			}
		}
		if(handle == this.submitComboHandle) {
			handle.position = this.comboToSubmit;
			this.submitComboHandle = null;
			handle.changed = this.changed = true;
		} else {
			handle.changed = false;
		}
		if(this.inputWheelDelta != 0 && this.comboSelectedHandle != null) {
			if(this.inputWheelDelta > 0) {
				this.comboItemOffset += 1;
			} else {
				this.comboItemOffset -= 1;
			}
			var maxOffset = this.comboSelectedTexts.length - this.comboItemCount;
			if(this.comboItemOffset > maxOffset) {
				this.comboItemOffset = maxOffset;
			}
			if(this.comboItemOffset < 0) {
				this.comboItemOffset = 0;
			}
		}
		var hover = this.getHover();
		if(hover) {
			this.g.set_color(this.t.ACCENT_HOVER_COL);
			var g = this.g;
			var fill = this.t.FILL_ACCENT_BG;
			var x = this._x + this.buttonOffsetY;
			var y = this._y + this.buttonOffsetY;
			var w = this._w - this.buttonOffsetY * 2;
			var h = this.t.BUTTON_H * this.ops.scaleFactor;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			if(fill) {
				g.fillRect(x,y - 1,w,h + 1);
			} else {
				g.drawRect(x,y,w,h,strength);
			}
		} else {
			this.g.set_color(this.t.ACCENT_COL);
			var g1 = this.g;
			var fill1 = this.t.FILL_ACCENT_BG;
			var x1 = this._x + this.buttonOffsetY;
			var y1 = this._y + this.buttonOffsetY;
			var w1 = this._w - this.buttonOffsetY * 2;
			var h1 = this.t.BUTTON_H * this.ops.scaleFactor;
			var strength1 = 0.0;
			if(strength1 == 0.0) {
				strength1 = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			if(fill1) {
				g1.fillRect(x1,y1 - 1,w1,h1 + 1);
			} else {
				g1.drawRect(x1,y1,w1,h1,strength1);
			}
		}
		var x2 = this._x + this._w - this.arrowOffsetX - 8;
		var y2 = this._y + this.arrowOffsetY + 3;
		this.g.fillTriangle(x2,y2,x2 + this.t.ARROW_SIZE * this.ops.scaleFactor,y2,x2 + this.t.ARROW_SIZE * this.ops.scaleFactor / 2,y2 + this.t.ARROW_SIZE * this.ops.scaleFactor / 2);
		if(showLabel && label != "") {
			if(align == 0) {
				this._x -= 15;
			}
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,label,null,0,align == 0 ? 2 : 0);
			if(align == 0) {
				this._x += 15;
			}
		}
		if(align == 2) {
			this._x -= 15;
		}
		this.g.set_color(this.t.TEXT_COL);
		if(texts.length > 0) {
			this.drawString(this.g,texts[handle.position],null,0,align);
		}
		if(align == 2) {
			this._x += 15;
		}
		this.endElement();
		return handle.position;
	}
	,slider: function(handle,text,from,to,filled,precision,displayValue,align,textEdit) {
		if(textEdit == null) {
			textEdit = true;
		}
		if(align == null) {
			align = 2;
		}
		if(displayValue == null) {
			displayValue = true;
		}
		if(precision == null) {
			precision = 100.0;
		}
		if(filled == null) {
			filled = false;
		}
		if(to == null) {
			to = 1.0;
		}
		if(from == null) {
			from = 0.0;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.value;
		}
		if(this.getStarted()) {
			this.scrollHandle = handle;
			this.isScrolling = true;
		}
		handle.changed = false;
		if(handle == this.scrollHandle) {
			var range = to - from;
			var sliderX = this._x + this._windowX + this.buttonOffsetY;
			var sliderW = this._w - this.buttonOffsetY * 2;
			var step = range / sliderW;
			var value = from + (this.inputX - sliderX) * step;
			handle.value = Math.round(value * precision) / precision;
			if(handle.value < from) {
				handle.value = from;
			} else if(handle.value > to) {
				handle.value = to;
			}
			handle.changed = this.changed = true;
		}
		var hover = this.getHover();
		this.drawSlider(handle.value,from,to,filled,hover);
		var startEdit = (this.getReleased() || this.tabPressed) && textEdit;
		if(startEdit) {
			handle.text = handle.value + "";
			this.startTextEdit(handle);
			handle.changed = this.changed = true;
		}
		var lalign = align == 0 ? 2 : 0;
		if(this.textSelectedHandle == handle) {
			this.updateTextEdit(lalign);
		}
		if(this.submitTextHandle == handle) {
			this.submitTextEdit();
			handle.value = parseFloat(handle.text);
			handle.changed = this.changed = true;
		}
		this.g.set_color(this.t.LABEL_COL);
		this.drawString(this.g,text,null,0,align);
		if(displayValue) {
			this.g.set_color(this.t.TEXT_COL);
			if(this.textSelectedHandle != handle) {
				this.drawString(this.g,handle.value + "",null,0,lalign);
			} else {
				this.drawString(this.g,this.textSelected,null,0,lalign);
			}
		}
		this.endElement();
		return handle.value;
	}
	,separator: function(h,fill) {
		if(fill == null) {
			fill = true;
		}
		if(h == null) {
			h = 4;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this._y += h * this.ops.scaleFactor;
			return;
		}
		if(fill) {
			this.g.set_color(this.t.SEPARATOR_COL);
			this.g.fillRect(this._x,this._y,this._w,h * this.ops.scaleFactor);
		}
		this._y += h * this.ops.scaleFactor;
	}
	,tooltip: function(text) {
		this.tooltipText = text;
		this.tooltipY = this._y + this._windowY;
	}
	,tooltipImage: function(image,maxWidth) {
		this.tooltipImg = image;
		this.tooltipImgMaxWidth = maxWidth;
		this.tooltipInvertY = this.imageInvertY;
		this.tooltipY = this._y + this._windowY;
	}
	,drawArrow: function(selected) {
		var x = this._x + this.arrowOffsetX;
		var y = this._y + this.arrowOffsetY;
		this.g.set_color(this.t.TEXT_COL);
		if(selected) {
			this.g.fillTriangle(x,y,x + this.t.ARROW_SIZE * this.ops.scaleFactor,y,x + this.t.ARROW_SIZE * this.ops.scaleFactor / 2,y + this.t.ARROW_SIZE * this.ops.scaleFactor);
		} else {
			this.g.fillTriangle(x,y,x,y + this.t.ARROW_SIZE * this.ops.scaleFactor,x + this.t.ARROW_SIZE * this.ops.scaleFactor,y + this.t.ARROW_SIZE * this.ops.scaleFactor / 2);
		}
	}
	,drawTree: function(selected) {
		var SIGN_W = 7 * this.ops.scaleFactor;
		var x = this._x + this.arrowOffsetX + 1;
		var y = this._y + this.arrowOffsetY + 1;
		this.g.set_color(this.t.TEXT_COL);
		if(selected) {
			this.g.fillRect(x,y + SIGN_W / 2 - 1,SIGN_W,SIGN_W / 8);
		} else {
			this.g.fillRect(x,y + SIGN_W / 2 - 1,SIGN_W,SIGN_W / 8);
			this.g.fillRect(x + SIGN_W / 2 - 1,y,SIGN_W / 8,SIGN_W);
		}
	}
	,drawCheck: function(selected,hover) {
		var x = this._x + this.checkOffsetX;
		var y = this._y + this.checkOffsetY;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var w = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var h = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		if(selected) {
			this.g.set_color(-1);
			if(!this.enabled) {
				this.fadeColor();
			}
			var size = this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0;
			this.g.drawScaledImage(this.checkSelectImage,x + this.checkSelectOffsetX,y + this.checkSelectOffsetY,size,size);
		}
	}
	,drawRadio: function(selected,hover) {
		var x = this._x + this.radioOffsetX;
		var y = this._y + this.radioOffsetY;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var w = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var h = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		if(selected) {
			this.g.set_color(this.t.ACCENT_SELECT_COL);
			if(!this.enabled) {
				this.fadeColor();
			}
			this.g.fillRect(x + this.radioSelectOffsetX,y + this.radioSelectOffsetY,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor);
		}
	}
	,drawSlider: function(value,from,to,filled,hover) {
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var offset = (value - from) / (to - from);
		var barW = 8 * this.ops.scaleFactor;
		var sliderX = filled ? x : x + (w - barW) * offset;
		var sliderW = filled ? w * offset : barW;
		sliderW = Math.max(Math.min(sliderW,w),0);
		var g1 = this.g;
		var h1 = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength1 = 0.0;
		if(strength1 == 0.0) {
			strength1 = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		g1.fillRect(sliderX,y - 1,sliderW,h1 + 1);
	}
	,drawCombo: function() {
		if(this.comboSelectedHandle == null) {
			return;
		}
		var _g = this.g;
		this.globalG.set_color(this.t.SEPARATOR_COL);
		var elementSize = this.t.ELEMENT_H * this.ops.scaleFactor + this.t.ELEMENT_OFFSET * this.ops.scaleFactor | 0;
		var maxItemCount = Math.min(this.comboSelectedTexts.length,this.comboItemCount) | 0;
		var comboH = (maxItemCount + 1) * elementSize;
		this.globalG.begin(false);
		var distTop = this.comboSelectedY - comboH - (this.t.ELEMENT_H * this.ops.scaleFactor | 0);
		var distBottom = kha_System.windowHeight() - (this.comboSelectedY + comboH);
		var outOfScreen = distBottom < 0 && distBottom < distTop;
		var comboY = outOfScreen ? this.comboSelectedY - comboH - (this.t.ELEMENT_H * this.ops.scaleFactor | 0) : this.comboSelectedY;
		this.globalG.fillRect(this.comboSelectedX,comboY,this.comboSelectedW,comboH);
		this.beginRegion(this.globalG,this.comboSelectedX,comboY,this.comboSelectedW);
		if(this.comboItemOffset == -1) {
			if(outOfScreen) {
				this.comboItemOffset = this.comboSelectedTexts.length - 1 - this.comboSelectedHandle.position;
			} else {
				this.comboItemOffset = this.comboSelectedHandle.position;
			}
			var value = this.comboItemOffset;
			var max = this.comboSelectedTexts.length - maxItemCount;
			this.comboItemOffset = value < 0 ? 0 : value > max ? max : value;
		}
		if(outOfScreen) {
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,this.comboSelectedLabel,null,0,2);
			this._y += elementSize;
			this.fill(0,0,this._w / this.ops.scaleFactor,this.ops.scaleFactor,this.t.ACCENT_SELECT_COL);
		}
		this.inputEnabled = true;
		var BUTTON_COL = this.t.BUTTON_COL;
		var _g1 = this.comboItemOffset;
		var _g11 = this.comboItemOffset + maxItemCount;
		while(_g1 < _g11) {
			var i = _g1++;
			var j = outOfScreen ? this.comboSelectedTexts.length - 1 - i : i;
			this.t.BUTTON_COL = j == this.comboSelectedHandle.position ? this.t.ACCENT_SELECT_COL : this.t.SEPARATOR_COL;
			if(this.button(this.comboSelectedTexts[j],this.comboSelectedAlign)) {
				this.comboToSubmit = j;
				this.submitComboHandle = this.comboSelectedHandle;
				if(this.comboSelectedWindow != null) {
					this.comboSelectedWindow.redraws = 2;
				}
				break;
			}
		}
		this.t.BUTTON_COL = BUTTON_COL;
		if(!outOfScreen) {
			this.fill(0,0,this._w / this.ops.scaleFactor,this.ops.scaleFactor,this.t.ACCENT_SELECT_COL);
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,this.comboSelectedLabel,null,0,2);
		}
		if((this.inputReleased || this.isEscapeDown) && !zui_Zui.comboFirst) {
			this.comboSelectedHandle = null;
			zui_Zui.comboFirst = true;
		} else {
			zui_Zui.comboFirst = false;
		}
		this.inputEnabled = this.comboSelectedHandle == null;
		this.endRegion(false);
		this.globalG.end();
		this.g = _g;
	}
	,drawTooltip: function() {
		if(this.tooltipText != "" || this.tooltipImg != null) {
			if(this.inputChanged()) {
				this.tooltipShown = false;
				this.tooltipWait = this.inputDX == 0 && this.inputDY == 0;
			}
			if(!this.tooltipShown) {
				this.tooltipShown = true;
				this.tooltipX = this.inputX;
				this.tooltipTime = kha_Scheduler.time();
			}
			if(!this.tooltipWait && kha_Scheduler.time() - this.tooltipTime > 1.0) {
				if(this.tooltipText != "") {
					this.drawTooltipText();
				} else {
					this.drawTooltipImage();
				}
			}
		} else {
			this.tooltipShown = false;
		}
	}
	,drawTooltipText: function() {
		this.globalG.set_color(this.t.TEXT_COL);
		var lines = this.tooltipText.split("\n");
		var tooltipW = 0.0;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var lineTooltipW = this.ops.font.width(this.fontSize,line);
			if(lineTooltipW > tooltipW) {
				tooltipW = lineTooltipW;
			}
		}
		this.tooltipX = Math.min(this.tooltipX,kha_System.windowWidth() - tooltipW - 20);
		this.globalG.begin(false);
		this.globalG.fillRect(this.tooltipX,this.tooltipY,tooltipW + 20,this.t.ELEMENT_H * this.ops.scaleFactor * lines.length * 0.6);
		this.globalG.set_font(this.ops.font);
		this.globalG.set_fontSize(this.fontSize);
		this.globalG.set_color(this.t.ACCENT_COL);
		var _g1 = 0;
		var _g2 = lines.length;
		while(_g1 < _g2) {
			var i = _g1++;
			this.globalG.drawString(lines[i],this.tooltipX + 5,this.tooltipY + i * this.fontSize);
		}
		this.globalG.end();
	}
	,drawTooltipImage: function() {
		var w = this.tooltipImg.get_width();
		if(this.tooltipImgMaxWidth != null && w > this.tooltipImgMaxWidth) {
			w = this.tooltipImgMaxWidth;
		}
		var h = this.tooltipImg.get_height() * (w / this.tooltipImg.get_width());
		this.tooltipX = Math.min(this.tooltipX,kha_System.windowWidth() - w - 20);
		this.tooltipY = Math.min(this.tooltipY,kha_System.windowHeight() - h - 20);
		this.globalG.set_color(-16777216);
		this.globalG.begin(false);
		this.globalG.fillRect(this.tooltipX,this.tooltipY,w,h);
		this.globalG.set_color(-1);
		if(this.tooltipInvertY) {
			this.globalG.drawScaledImage(this.tooltipImg,this.tooltipX,this.tooltipY + h,w,-h);
		} else {
			this.globalG.drawScaledImage(this.tooltipImg,this.tooltipX,this.tooltipY,w,h);
		}
		this.globalG.end();
	}
	,drawString: function(g,text,xOffset,yOffset,align) {
		if(align == null) {
			align = 0;
		}
		if(yOffset == null) {
			yOffset = 0;
		}
		var fullLength = text.length;
		while(text.length > 0 && this.ops.font.width(this.fontSize,text) > this._w) text = HxOverrides.substr(text,0,text.length - 1);
		if(text.length < fullLength) {
			text += "..";
		}
		if(xOffset == null) {
			xOffset = this.t.TEXT_OFFSET;
		}
		xOffset *= this.ops.scaleFactor;
		g.set_font(this.ops.font);
		g.set_fontSize(this.fontSize);
		if(align == 1) {
			xOffset = this._w / 2 - this.ops.font.width(this.fontSize,text) / 2;
		} else if(align == 2) {
			xOffset = this._w - this.ops.font.width(this.fontSize,text) - this.t.TEXT_OFFSET * this.ops.scaleFactor;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		g.set_pipeline(this.rtTextPipeline);
		g.drawString(text,this._x + xOffset,this._y + this.fontOffsetY + yOffset);
		g.set_pipeline(null);
	}
	,endElement: function(elementSize) {
		if(elementSize == null) {
			elementSize = this.t.ELEMENT_H * this.ops.scaleFactor + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
		if(this.currentWindow == null || this.currentWindow.layout == 0) {
			if(this.curRatio == -1 || this.ratios != null && this.curRatio == this.ratios.length - 1) {
				this._y += elementSize;
				if(this.ratios != null && this.curRatio == this.ratios.length - 1) {
					this.curRatio = -1;
					this.ratios = null;
					this._x = this.xBeforeSplit;
					this._w = this.wBeforeSplit;
					this.highlightFullRow = false;
				}
			} else {
				this.curRatio++;
				this._x += this._w;
				var ratio = this.ratios[this.curRatio];
				this._w = (ratio < 0 ? -ratio : ratio * this.wBeforeSplit) | 0;
			}
		} else {
			this._x += this._w + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
	}
	,row: function(ratios) {
		this.ratios = ratios;
		this.curRatio = 0;
		this.xBeforeSplit = this._x;
		this.wBeforeSplit = this._w;
		var ratio = ratios[this.curRatio];
		this._w = (ratio < 0 ? -ratio : ratio * this._w) | 0;
	}
	,indent: function(bothSides) {
		if(bothSides == null) {
			bothSides = true;
		}
		this._x += this.t.TAB_W * this.ops.scaleFactor | 0;
		this._w -= this.t.TAB_W * this.ops.scaleFactor | 0;
		if(bothSides) {
			this._w -= this.t.TAB_W * this.ops.scaleFactor | 0;
		}
	}
	,unindent: function(bothSides) {
		if(bothSides == null) {
			bothSides = true;
		}
		this._x -= this.t.TAB_W * this.ops.scaleFactor | 0;
		this._w += this.t.TAB_W * this.ops.scaleFactor | 0;
		if(bothSides) {
			this._w += this.t.TAB_W * this.ops.scaleFactor | 0;
		}
	}
	,fadeColor: function() {
		this.g.set_color(kha__$Color_Color_$Impl_$.fromFloats(((this.g.get_color() & 16711680) >>> 16) * 0.00392156862745098,((this.g.get_color() & 65280) >>> 8) * 0.00392156862745098,(this.g.get_color() & 255) * 0.00392156862745098,0.25));
	}
	,fill: function(x,y,w,h,color) {
		this.g.set_color(color);
		if(!this.enabled) {
			this.fadeColor();
		}
		this.g.fillRect(this._x + x * this.ops.scaleFactor,this._y + y * this.ops.scaleFactor - 1,w * this.ops.scaleFactor,h * this.ops.scaleFactor);
		this.g.set_color(-1);
	}
	,rect: function(x,y,w,h,color,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.g.set_color(color);
		if(!this.enabled) {
			this.fadeColor();
		}
		this.g.drawRect(this._x + x * this.ops.scaleFactor,this._y + y * this.ops.scaleFactor,w * this.ops.scaleFactor,h * this.ops.scaleFactor,strength);
		this.g.set_color(-1);
	}
	,isVisible: function(elemH) {
		if(this.currentWindow == null) {
			return true;
		}
		if(this._y + elemH > this.windowHeaderH) {
			return this._y < this.currentWindow.texture.get_height();
		} else {
			return false;
		}
	}
	,getReleased: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isReleased = this.enabled && this.inputEnabled && this.inputReleased && this.getHover(elemH) && this.getInitialHover(elemH);
		return this.isReleased;
	}
	,getPushed: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isPushed = this.enabled && this.inputEnabled && this.inputDown && this.getHover(elemH) && this.getInitialHover(elemH);
		return this.isPushed;
	}
	,getStarted: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isStarted = this.enabled && this.inputEnabled && this.inputStarted && this.getHover(elemH);
		return this.isStarted;
	}
	,getInitialHover: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		if(elemH == -1.0) {
			elemH = this.t.ELEMENT_H * this.ops.scaleFactor;
		}
		if(this.enabled && this.inputEnabled && this.inputStartedX >= this._windowX + this._x && this.inputStartedX < this._windowX + this._x + this._w && this.inputStartedY >= this._windowY + this._y) {
			return this.inputStartedY < this._windowY + this._y + elemH;
		} else {
			return false;
		}
	}
	,getHover: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		if(elemH == -1.0) {
			elemH = this.t.ELEMENT_H * this.ops.scaleFactor;
		}
		this.isHovered = this.enabled && this.inputEnabled && this.inputX >= this._windowX + (this.highlightFullRow ? 0 : this._x) && this.inputX < this._windowX + this._x + (this.highlightFullRow ? this._windowW : this._w) && this.inputY >= this._windowY + this._y && this.inputY < this._windowY + this._y + elemH;
		return this.isHovered;
	}
	,getInputInRect: function(x,y,w,h,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		if(this.enabled && this.inputEnabled && this.inputX >= x * scale && this.inputX < (x + w) * scale && this.inputY >= y * scale) {
			return this.inputY < (y + h) * scale;
		} else {
			return false;
		}
	}
	,onMouseDown: function(button,x,y) {
		if(button == 0) {
			this.inputStarted = true;
		} else {
			this.inputStartedR = true;
		}
		if(button == 0) {
			this.inputDown = true;
		} else {
			this.inputDownR = true;
		}
		this.inputStartedTime = kha_Scheduler.time();
		this.setInputPosition(x,y);
		this.inputStartedX = x;
		this.inputStartedY = y;
	}
	,onMouseUp: function(button,x,y) {
		if(this.isScrolling) {
			this.isScrolling = false;
			this.scrollHandle = null;
			if(x == this.inputStartedX && y == this.inputStartedY) {
				if(button == 0) {
					this.inputReleased = true;
				} else {
					this.inputReleasedR = true;
				}
			}
		} else if(button == 0) {
			this.inputReleased = true;
		} else {
			this.inputReleasedR = true;
		}
		if(button == 0) {
			this.inputDown = false;
		} else {
			this.inputDownR = false;
		}
		this.setInputPosition(x,y);
		this.deselectText();
		if(this.touchHold) {
			this.touchHold = false;
			this.inputReleased = false;
			this.inputReleasedR = true;
		}
	}
	,onMouseMove: function(x,y,movementX,movementY) {
		this.setInputPosition(x,y);
	}
	,onMouseWheel: function(delta) {
		this.inputWheelDelta = delta;
	}
	,setInputPosition: function(x,y) {
		this.inputDX += x - this.inputX;
		this.inputDY += y - this.inputY;
		this.inputX = x;
		this.inputY = y;
	}
	,onKeyDown: function(code) {
		this.key = code;
		this.isKeyPressed = true;
		this.isKeyDown = true;
		zui_Zui.keyRepeatTime = kha_Scheduler.time() + 0.4;
		switch(code) {
		case 8:
			this.isBackspaceDown = true;
			break;
		case 13:
			this.isReturnDown = true;
			break;
		case 16:
			this.isShiftDown = true;
			break;
		case 17:
			this.isCtrlDown = true;
			break;
		case 18:
			this.isAltDown = true;
			break;
		case 27:
			this.isEscapeDown = true;
			break;
		case 32:
			this.char = " ";
			break;
		case 46:
			this.isDeleteDown = true;
			break;
		case 65:
			this.isADown = true;
			break;
		default:
		}
	}
	,onKeyUp: function(code) {
		this.isKeyDown = false;
		switch(code) {
		case 8:
			this.isBackspaceDown = false;
			break;
		case 13:
			this.isReturnDown = false;
			break;
		case 16:
			this.isShiftDown = false;
			break;
		case 17:
			this.isCtrlDown = false;
			break;
		case 18:
			this.isAltDown = false;
			break;
		case 27:
			this.isEscapeDown = false;
			break;
		case 46:
			this.isDeleteDown = false;
			break;
		case 65:
			this.isADown = false;
			break;
		default:
		}
	}
	,onKeyPress: function(char) {
		this.char = char;
		this.isKeyPressed = true;
	}
	,onCut: function() {
		zui_Zui.isCut = true;
		return this.onCopy();
	}
	,onCopy: function() {
		zui_Zui.isCopy = true;
		return zui_Zui.textToCopy;
	}
	,onPaste: function(s) {
		zui_Zui.isPaste = true;
		zui_Zui.textToPaste = s;
	}
	,resize: function(handle,w,h,khaWindowId) {
		if(khaWindowId == null) {
			khaWindowId = 0;
		}
		handle.redraws = 2;
		if(handle.texture != null) {
			handle.texture.unload();
		}
		if(w < 1) {
			w = 1;
		}
		if(h < 1) {
			h = 1;
		}
		handle.texture = kha_Image.createRenderTarget(w,h,0,0,1,khaWindowId);
		handle.texture.get_g2().set_imageScaleQuality(kha_graphics2_ImageScaleQuality.High);
	}
	,__class__: zui_Zui
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
var this1 = new Uint16Array(576);
arm_format_pako_zlib_Trees.static_ltree = this1;
var this2 = new Uint16Array(60);
arm_format_pako_zlib_Trees.static_dtree = this2;
var this3 = new Uint16Array(512);
arm_format_pako_zlib_Trees._dist_code = this3;
var this4 = new Uint16Array(258 - 3 + 1);
arm_format_pako_zlib_Trees._length_code = this4;
var this5 = new Uint16Array(29);
arm_format_pako_zlib_Trees.base_length = this5;
var this6 = new Uint16Array(30);
arm_format_pako_zlib_Trees.base_dist = this6;
var buf = arm_format_pako_zlib_Trees.static_ltree;
var start = buf.byteOffset;
var len = buf.byteLength;
haxe_io_Bytes.ofData(buf.buffer).fill(start,len,0);
var buf1 = arm_format_pako_zlib_Trees.static_dtree;
var start1 = buf1.byteOffset;
var len1 = buf1.byteLength;
haxe_io_Bytes.ofData(buf1.buffer).fill(start1,len1,0);
var buf2 = arm_format_pako_zlib_Trees._dist_code;
var start2 = buf2.byteOffset;
var len2 = buf2.byteLength;
haxe_io_Bytes.ofData(buf2.buffer).fill(start2,len2,0);
var buf3 = arm_format_pako_zlib_Trees._length_code;
var start3 = buf3.byteOffset;
var len3 = buf3.byteLength;
haxe_io_Bytes.ofData(buf3.buffer).fill(start3,len3,0);
var buf4 = arm_format_pako_zlib_Trees.base_length;
var start4 = buf4.byteOffset;
var len4 = buf4.byteLength;
haxe_io_Bytes.ofData(buf4.buffer).fill(start4,len4,0);
var buf5 = arm_format_pako_zlib_Trees.base_dist;
var start5 = buf5.byteOffset;
var len5 = buf5.byteLength;
haxe_io_Bytes.ofData(buf5.buffer).fill(start5,len5,0);
arm_format_pako_zlib_Deflate.configuration_table = [new arm_format_pako_zlib_Config(0,0,0,0,arm_format_pako_zlib_Deflate.deflate_stored),new arm_format_pako_zlib_Config(4,4,8,4,arm_format_pako_zlib_Deflate.deflate_fast),new arm_format_pako_zlib_Config(4,5,16,8,arm_format_pako_zlib_Deflate.deflate_fast),new arm_format_pako_zlib_Config(4,6,32,32,arm_format_pako_zlib_Deflate.deflate_fast),new arm_format_pako_zlib_Config(4,4,16,16,arm_format_pako_zlib_Deflate.deflate_slow),new arm_format_pako_zlib_Config(8,16,32,32,arm_format_pako_zlib_Deflate.deflate_slow),new arm_format_pako_zlib_Config(8,16,128,128,arm_format_pako_zlib_Deflate.deflate_slow),new arm_format_pako_zlib_Config(8,32,128,256,arm_format_pako_zlib_Deflate.deflate_slow),new arm_format_pako_zlib_Config(32,128,258,1024,arm_format_pako_zlib_Deflate.deflate_slow),new arm_format_pako_zlib_Config(32,258,258,4096,arm_format_pako_zlib_Deflate.deflate_slow)].slice(0);
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
Main.version = "0.8";
Main.sha = HxOverrides.substr("'b085e00'",1,7);
Main.date = "2020-03-29 18:35:37".split(" ")[0];
zui_Handle.global = new zui_Handle();
arm_App.uiEnabled = true;
arm_App.isDragging = false;
arm_App.isResizing = false;
arm_App.dragTint = -1;
arm_App.dragOffX = 0.0;
arm_App.dragOffY = 0.0;
arm_App.dropX = 0.0;
arm_App.dropY = 0.0;
arm_App.fileArg = "";
arm_App.defaultElementH = 28;
arm_App.resHandle = new zui_Handle({ position : 4});
arm_App.bitsHandle = new zui_Handle();
arm_App.dropPaths = [];
arm_App.appx = 0;
arm_App.appy = 0;
arm_App.lastWindowHeight = 0;
arm_Config.configLoaded = false;
iron_math_Mat4.helpVec = new iron_math_Vec4();
iron_math_Mat4.helpMat = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
arm_Context.layerIsMask = false;
arm_Context.tool = 0;
arm_Context.ddirty = 0;
arm_Context.pdirty = 0;
arm_Context.rdirty = 0;
arm_Context.brushBlendDirty = true;
arm_Context.layerPreviewDirty = true;
arm_Context.layersPreviewDirty = false;
arm_Context.colorIdPicked = false;
arm_Context.splitView = false;
arm_Context.viewIndex = -1;
arm_Context.viewIndexLast = -1;
arm_Context.materialPreview = false;
arm_Context.savedCamera = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
arm_Context.baseRPicked = 0.0;
arm_Context.baseGPicked = 0.0;
arm_Context.baseBPicked = 0.0;
arm_Context.normalRPicked = 0.0;
arm_Context.normalGPicked = 0.0;
arm_Context.normalBPicked = 0.0;
arm_Context.roughnessPicked = 0.0;
arm_Context.metallicPicked = 0.0;
arm_Context.occlusionPicked = 0.0;
arm_Context.materialIdPicked = 0;
arm_Context.uvxPicked = 0.0;
arm_Context.uvyPicked = 0.0;
arm_Context.pickerSelectMaterial = true;
arm_Context.pickerMaskHandle = new zui_Handle();
arm_Context.showEnvmap = false;
arm_Context.showEnvmapHandle = new zui_Handle({ selected : false});
arm_Context.showEnvmapBlur = false;
arm_Context.showEnvmapBlurHandle = new zui_Handle({ selected : false});
arm_Context.drawWireframe = false;
arm_Context.wireframeHandle = new zui_Handle({ selected : false});
arm_Context.drawTexels = false;
arm_Context.texelsHandle = new zui_Handle({ selected : false});
arm_Context.cullBackfaces = true;
arm_Context.textureFilter = true;
arm_Context.colorIdHandle = zui_Handle.global.nest(0,null);
arm_Context.formatType = 0;
arm_Context.formatQuality = 100.0;
arm_Context.layersExport = 0;
arm_Context.splitBy = 0;
arm_Context.parseTransform = false;
arm_Context.parseVCols = false;
arm_Context.selectTime = 0.0;
arm_Context.displaceStrength = 1.0;
arm_Context.decalPreview = false;
arm_Context.viewportMode = 0;
arm_Context.hscaleWasChanged = false;
arm_Context.exportMeshFormat = 0;
arm_Context.nativeBrowser = true;
arm_Context.cacheDraws = false;
arm_Context.showAssetNames = false;
arm_Context.textToolHandle = new zui_Handle();
arm_Context.layerFilter = 0;
arm_Context.paintVec = new iron_math_Vec4();
arm_Context.lastPaintX = -1.0;
arm_Context.lastPaintY = -1.0;
arm_Context.painted = 0;
arm_Context.brushTime = 0.0;
arm_Context.cloneStartX = -1.0;
arm_Context.cloneStartY = -1.0;
arm_Context.cloneDeltaX = 0.0;
arm_Context.cloneDeltaY = 0.0;
arm_Context.axisX = false;
arm_Context.axisY = false;
arm_Context.axisZ = false;
arm_Context.axisStart = 0.0;
arm_Context.brushNodesRadius = 1.0;
arm_Context.brushNodesOpacity = 1.0;
arm_Context.brushStencilX = 0.02;
arm_Context.brushStencilY = 0.02;
arm_Context.brushStencilScale = 0.9;
arm_Context.brushStencilScaling = false;
arm_Context.brushStencilAngle = 0.0;
arm_Context.brushStencilRotating = false;
arm_Context.brushNodesScale = 1.0;
arm_Context.brushNodesAngle = 0.0;
arm_Context.brushNodesHardness = 1.0;
arm_Context.brushDirectional = false;
arm_Context.brushRadius = 0.5;
arm_Context.brushRadiusHandle = new zui_Handle({ value : 0.5});
arm_Context.brushScaleX = 1.0;
arm_Context.brushScaleXHandle = new zui_Handle({ value : 1.0});
arm_Context.brushBlending = 0;
arm_Context.brushOpacity = 1.0;
arm_Context.brushOpacityHandle = new zui_Handle({ value : 1.0});
arm_Context.brushScale = 1.0;
arm_Context.brushAngle = 0.0;
arm_Context.brushAngleHandle = new zui_Handle({ value : 0.0});
arm_Context.brushHardness = 0.8;
arm_Context.brushLazyRadius = 0.0;
arm_Context.brushLazyStep = 0.0;
arm_Context.brushLazyX = 0.0;
arm_Context.brushLazyY = 0.0;
arm_Context.brushBias = 1.0;
arm_Context.brushPaint = 0;
arm_Context.brushDepthReject = true;
arm_Context.brushAngleReject = true;
arm_Context.brushAngleRejectDot = 0.5;
arm_Context.bakeType = 0;
arm_Context.bakeAxis = 0;
arm_Context.bakeUpAxis = 0;
arm_Context.bakeAoStrength = 1.0;
arm_Context.bakeAoRadius = 1.0;
arm_Context.bakeAoOffset = 1.0;
arm_Context.bakeCurvStrength = 1.0;
arm_Context.bakeCurvRadius = 1.0;
arm_Context.bakeCurvOffset = 0.0;
arm_Context.bakeCurvSmooth = 1;
arm_Context.bakeHighPoly = 0;
arm_Context.dilateRadius = 8.0;
arm_Context.xray = false;
arm_Context.symX = false;
arm_Context.symY = false;
arm_Context.symZ = false;
arm_Context.showCompass = true;
arm_Context.fillTypeHandle = new zui_Handle();
arm_Context.projectType = 0;
arm_Context.sub = 0;
arm_Context.lastPaintVecX = -1.0;
arm_Context.lastPaintVecY = -1.0;
arm_Context.prevPaintVecX = -1.0;
arm_Context.prevPaintVecY = -1.0;
arm_Context.frame = 0;
arm_Context.paint2d = false;
arm_Context.lockStartedX = -1.0;
arm_Context.lockStartedY = -1.0;
arm_Context.brushLocked = false;
arm_Context.brushCanLock = false;
arm_Context.brushCanUnlock = false;
arm_Context.cameraType = 0;
arm_Context.camHandle = new zui_Handle();
arm_Context.vxaoExt = 1.0;
arm_Context.vxaoOffset = 1.5;
arm_Context.vxaoAperture = 1.2;
arm_Context.textureExportPath = "";
arm_Context.lastStatusPosition = 0;
arm_Context.cameraControls = 0;
arm_History.undoI = 0;
arm_History.undos = 0;
arm_History.redos = 0;
arm_History.pushUndo = false;
arm_Log.message = "";
arm_Log.messageTimer = 0.0;
arm_Log.messageColor = 0;
arm_Log.lastTraces = [""];
arm_Plugin.plugins = new haxe_ds_StringMap();
iron_App.traitInits = [];
iron_App.traitUpdates = [];
iron_App.traitLateUpdates = [];
iron_App.traitRenders = [];
iron_App.traitRenders2D = [];
iron_App.pauseUpdates = false;
iron_App.lastw = -1;
iron_App.lasth = -1;
iron_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
iron_data_Data.cachedMeshes = new haxe_ds_StringMap();
iron_data_Data.cachedLights = new haxe_ds_StringMap();
iron_data_Data.cachedCameras = new haxe_ds_StringMap();
iron_data_Data.cachedMaterials = new haxe_ds_StringMap();
iron_data_Data.cachedParticles = new haxe_ds_StringMap();
iron_data_Data.cachedWorlds = new haxe_ds_StringMap();
iron_data_Data.cachedShaders = new haxe_ds_StringMap();
iron_data_Data.cachedBlobs = new haxe_ds_StringMap();
iron_data_Data.cachedImages = new haxe_ds_StringMap();
iron_data_Data.cachedFonts = new haxe_ds_StringMap();
iron_data_Data.assetsLoaded = 0;
iron_data_Data.loadingMeshes = new haxe_ds_StringMap();
iron_data_Data.loadingLights = new haxe_ds_StringMap();
iron_data_Data.loadingCameras = new haxe_ds_StringMap();
iron_data_Data.loadingMaterials = new haxe_ds_StringMap();
iron_data_Data.loadingParticles = new haxe_ds_StringMap();
iron_data_Data.loadingWorlds = new haxe_ds_StringMap();
iron_data_Data.loadingShaders = new haxe_ds_StringMap();
iron_data_Data.loadingSceneRaws = new haxe_ds_StringMap();
iron_data_Data.loadingBlobs = new haxe_ds_StringMap();
iron_data_Data.loadingImages = new haxe_ds_StringMap();
iron_data_Data.loadingFonts = new haxe_ds_StringMap();
iron_data_Data.dataPath = "." + "\\" + "data" + "\\";
iron_system_Input.occupied = false;
iron_system_Input.gamepads = [];
iron_system_Input.registered = false;
iron_object_Object.uidCounter = 0;
iron_object_Object.seed = 1;
iron_Scene.uidCounter = 0;
iron_Scene.framePassed = true;
iron_system_Time.scale = 1.0;
iron_system_Time.last = 0.0;
iron_system_Time.realDelta = 0.0;
arm_IronBridge.App = iron_App;
arm_IronBridge.Scene = iron_Scene;
arm_IronBridge.RenderPath = iron_RenderPath;
arm_IronBridge.Time = iron_system_Time;
arm_IronBridge.Input = iron_system_Input;
arm_IronBridge.ArmPack = iron_system_ArmPack;
arm_IronBridge.Object = iron_object_Object;
arm_IronBridge.Data = iron_data_Data;
arm_node_Material.tex_coord = "texCoord";
arm_node_Material.customNodes = new Map();
arm_node_Material.parse_surface = true;
arm_node_Material.parse_opacity = true;
arm_node_Material.parse_height = false;
arm_node_Material.parse_height_as_channel = false;
arm_node_Material.parse_emission = false;
arm_node_Material.parse_subsurface = false;
arm_node_Material.triplanar = false;
arm_node_Material.arm_export_tangents = true;
arm_node_Material.parsedMap = new haxe_ds_StringMap();
arm_node_Material.textureMap = new haxe_ds_StringMap();
arm_node_NodesMaterial.categories = ["Input","Texture","Color","Vector","Converter"];
arm_node_NodesMaterial.list = [[{ id : 0, name : "Attribute", type : "ATTRIBUTE", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : [{ name : "Name", type : "STRING"}]},{ id : 0, name : "Camera Data", type : "CAMERA", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "View Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "View Z Depth", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "View Distance", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Layer", type : "LAYER", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Base Color", type : "RGBA", color : -3684567, default_value : [0.0,0.0,0.0,1.0]},{ id : 0, node_id : 0, name : "Opacity", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Occlusion", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Roughness", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Metallic", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Normal Map", type : "VECTOR", color : -10238109, default_value : [0.5,0.5,1.0]},{ id : 0, node_id : 0, name : "Emission", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Height", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Subsurface", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : [{ name : "Layer", type : "ENUM", default_value : 0, data : ""}]},{ id : 0, name : "Layer Mask", type : "LAYER_MASK", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : [{ name : "Layer", type : "ENUM", default_value : 0, data : ""}]},{ id : 0, name : "Material", type : "MATERIAL", x : 0, y : 0, color : -11959648, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Base Color", type : "RGBA", color : -3684567, default_value : [0.0,0.0,0.0,1.0]},{ id : 0, node_id : 0, name : "Opacity", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Occlusion", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Roughness", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Metallic", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Normal Map", type : "VECTOR", color : -10238109, default_value : [0.5,0.5,1.0]},{ id : 0, node_id : 0, name : "Emission", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Height", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Subsurface", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : [{ name : "Material", type : "ENUM", default_value : 0, data : ""}]},{ id : 0, name : "Fresnel", type : "FRESNEL", x : 0, y : 0, color : -5025958, inputs : [{ id : 0, node_id : 0, name : "IOR", type : "VALUE", color : -6184543, default_value : 1.45, min : 0, max : 3},{ id : 0, node_id : 0, name : "Normal", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Geometry", type : "NEW_GEOMETRY", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Position", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Normal", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Tangent", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "True Normal", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Incoming", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Parametric", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Backfacing", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Pointiness", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Layer Weight", type : "LAYER_WEIGHT", x : 0, y : 0, color : -5025958, inputs : [{ id : 0, node_id : 0, name : "Blend", type : "VALUE", color : -6184543, default_value : 0.5},{ id : 0, node_id : 0, name : "Normal", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Fresnel", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Facing", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Object Info", type : "OBJECT_INFO", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Location", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Object Index", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Material Index", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Random", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "RGB", type : "RGB", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.5,0.5,0.5,1.0]}], buttons : [{ name : "default_value", type : "RGBA", output : 0}]},{ id : 0, name : "Tangent", type : "TANGENT", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Tangent", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], buttons : []},{ id : 0, name : "Texture Coord", type : "TEX_COORD", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Generated", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Normal", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "UV", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Object", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Camera", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Window", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Reflection", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], buttons : []},{ id : 0, name : "UV Map", type : "UVMAP", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "UV", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], buttons : []},{ id : 0, name : "Value", type : "VALUE", x : 0, y : 0, color : -5025958, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.5}], buttons : [{ name : "default_value", type : "VALUE", output : 0, min : 0.0, max : 10.0}]}],[{ id : 0, name : "Brick Texture", type : "TEX_BRICK", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Color 1", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8]},{ id : 0, node_id : 0, name : "Color 2", type : "RGBA", color : -3684567, default_value : [0.2,0.2,0.2]},{ id : 0, node_id : 0, name : "Color 3", type : "RGBA", color : -3684567, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Scale", type : "VALUE", color : -6184543, default_value : 5.0, min : 0.0, max : 10.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : []},{ id : 0, name : "Checker Texture", type : "TEX_CHECKER", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Color 1", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8]},{ id : 0, node_id : 0, name : "Color 2", type : "RGBA", color : -3684567, default_value : [0.2,0.2,0.2]},{ id : 0, node_id : 0, name : "Scale", type : "VALUE", color : -6184543, default_value : 5.0, min : 0.0, max : 10.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : []},{ id : 0, name : "Gradient Texture", type : "TEX_GRADIENT", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : [{ name : "gradient_type", type : "ENUM", data : ["Linear","Diagonal","Radial","Spherical"], default_value : 0, output : 0}]},{ id : 0, name : "Image Texture", type : "TEX_IMAGE", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.0,0.0,0.0,1.0]},{ id : 0, node_id : 0, name : "Alpha", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : [{ name : "File", type : "ENUM", default_value : 0, data : ""},{ name : "Color Space", type : "ENUM", default_value : 0, data : ["linear","srgb"]}]},{ id : 0, name : "Magic Texture", type : "TEX_MAGIC", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Scale", type : "VALUE", color : -6184543, default_value : 5.0, min : 0.0, max : 10.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : []},{ id : 0, name : "Musgrave Texture", type : "TEX_MUSGRAVE", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Scale", type : "VALUE", color : -6184543, default_value : 5.0, min : 0.0, max : 10.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : []},{ id : 0, name : "Noise Texture", type : "TEX_NOISE", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Scale", type : "VALUE", color : -6184543, default_value : 5.0, min : 0.0, max : 10.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : []},{ id : 0, name : "Voronoi Texture", type : "TEX_VORONOI", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Scale", type : "VALUE", color : -6184543, default_value : 5.0, min : 0.0, max : 10.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : [{ name : "coloring", type : "ENUM", data : ["Intensity","Cells"], default_value : 0, output : 0}]},{ id : 0, name : "Wave Texture", type : "TEX_WAVE", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Scale", type : "VALUE", color : -6184543, default_value : 5.0, min : 0.0, max : 10.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : []}],[{ id : 0, name : "BrightContrast", type : "BRIGHTCONTRAST", x : 0, y : 0, color : -12284819, inputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Bright", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Contrast", type : "VALUE", color : -6184543, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], buttons : []},{ id : 0, name : "Gamma", type : "GAMMA", x : 0, y : 0, color : -12284819, inputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Gamma", type : "VALUE", color : -6184543, default_value : 1.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], buttons : []},{ id : 0, name : "Blur (Image)", type : "BLUR", x : 0, y : 0, color : -12284819, inputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]},{ id : 0, node_id : 0, name : "Strength", type : "VALUE", color : -6184543, default_value : 0.5}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], buttons : []},{ id : 0, name : "HueSatVal", type : "HUE_SAT", x : 0, y : 0, color : -12284819, inputs : [{ id : 0, node_id : 0, name : "Hue", type : "VALUE", color : -6184543, default_value : 0.5},{ id : 0, node_id : 0, name : "Sat", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Val", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], buttons : []},{ id : 0, name : "Invert", type : "INVERT", x : 0, y : 0, color : -12284819, inputs : [{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], buttons : []},{ id : 0, name : "MixRGB", type : "MIX_RGB", x : 0, y : 0, color : -12284819, inputs : [{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 0.5},{ id : 0, node_id : 0, name : "Color1", type : "RGBA", color : -3684567, default_value : [0.5,0.5,0.5,1.0]},{ id : 0, node_id : 0, name : "Color2", type : "RGBA", color : -3684567, default_value : [0.5,0.5,0.5,1.0]}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], buttons : [{ name : "blend_type", type : "ENUM", data : ["Mix","Darken","Multiply","Burn","Lighten","Screen","Dodge","Add","Overlay","Soft Light","Linear Light","Difference","Subtract","Divide","Hue","Saturation","Color","Value"], default_value : 0, output : 0},{ name : "use_clamp", type : "BOOL", default_value : false, output : 0}]}],[{ id : 0, name : "Bump", type : "BUMP", x : 0, y : 0, color : -11391847, inputs : [{ id : 0, node_id : 0, name : "Strength", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Distance", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Height", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Normal", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Normal Map", type : "VECTOR", color : -10238109, default_value : [0.0,0.0,0.0]}], buttons : []},{ id : 0, name : "Mapping", type : "MAPPING", x : 0, y : 0, color : -11391847, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], buttons : [{ name : "Location", type : "VECTOR", default_value : [0.0,0.0,0.0], output : 0},{ name : "Rotation", type : "VECTOR", default_value : [0.0,0.0,0.0], output : 0, max : 360.0},{ name : "Scale", type : "VECTOR", default_value : [1.0,1.0,1.0], output : 0}]},{ id : 0, name : "Normal", type : "NORMAL", x : 0, y : 0, color : -11391847, inputs : [{ id : 0, node_id : 0, name : "Normal", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Normal", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Dot", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : [{ name : "Vector", type : "VECTOR", default_value : [0.0,0.0,0.0], output : 0}]},{ id : 0, name : "Vector Curves", type : "CURVE_VEC", x : 0, y : 0, color : -11391847, inputs : [{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 1.0},{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], buttons : [{ name : "Vector", type : "CURVES", default_value : [[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]], output : 0}]}],[{ id : 0, name : "Color Ramp", type : "VALTORGB", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "Fac", type : "VALUE", color : -6184543, default_value : 0.5}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.0,0.0,0.0,1.0]},{ id : 0, node_id : 0, name : "Alpha", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : [{ name : "Ramp", type : "RAMP", default_value : [[1.0,1.0,1.0,1.0,0.0]], data : 0, output : 0}]},{ id : 0, name : "Combine HSV", type : "COMBHSV", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "H", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "S", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "V", type : "VALUE", color : -6184543, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], buttons : []},{ id : 0, name : "Combine RGB", type : "COMBRGB", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "R", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "G", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "B", type : "VALUE", color : -6184543, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], buttons : []},{ id : 0, name : "Combine XYZ", type : "COMBXYZ", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "X", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Y", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Z", type : "VALUE", color : -6184543, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], buttons : []},{ id : 0, name : "Math", type : "MATH", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.5},{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.5}], outputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : [{ name : "operation", type : "ENUM", data : ["Add","Subtract","Multiply","Divide","Power","Logarithm","Square Root","Absolute","Minimum","Maximum","Less Than","Greater Than","Round","Floor","Ceil","Fract","Modulo","Sine","Cosine","Tangent","Arcsine","Arccosine","Arctangent","Arctan2"], default_value : 0, output : 0},{ name : "use_clamp", type : "BOOL", default_value : false, output : 0}]},{ id : 0, name : "RGB to BW", type : "RGBTOBW", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.0,0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Val", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Separate HSV", type : "SEPHSV", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.5,0.5,0.5,1.0]}], outputs : [{ id : 0, node_id : 0, name : "H", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "S", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "V", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Separate RGB", type : "SEPRGB", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.8,0.8,0.8,1.0]}], outputs : [{ id : 0, node_id : 0, name : "R", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "G", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "B", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Separate XYZ", type : "SEPXYZ", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "X", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Y", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Z", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Vector Math", type : "VECT_MATH", x : 0, y : 0, color : -10328211, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : [{ name : "operation", type : "ENUM", data : ["Add","Subtract","Average","Dot Product","Cross Product","Normalize"], default_value : 0, output : 0}]}]];
arm_sys_Path.sep = "\\";
arm_sys_Path.meshFormats = ["obj","fbx","blend"];
arm_sys_Path.textureFormats = ["jpg","jpeg","png","tga","bmp","psd","gif","hdr"];
arm_sys_Path.meshImporters = new haxe_ds_StringMap();
arm_sys_Path.textureImporters = new haxe_ds_StringMap();
arm_sys_Path.baseColorExt = ["albedo","alb","basecol","basecolor","diffuse","diff","base","bc","d","color","col"];
arm_sys_Path.opacityExt = ["opac","opacity","alpha"];
arm_sys_Path.normalMapExt = ["normal","nor","n","nrm"];
arm_sys_Path.occlusionExt = ["ao","occlusion","ambientOcclusion","o","occ"];
arm_sys_Path.roughnessExt = ["roughness","rough","r","rgh"];
arm_sys_Path.metallicExt = ["metallic","metal","metalness","m","met"];
arm_sys_Path.displacementExt = ["displacement","height","h","disp"];
arm_Project.filepath = "";
arm_Project.assets = [];
arm_Project.assetNames = [];
arm_Project.assetId = 0;
arm_Project.meshAssets = [];
arm_Project.assetMap = new haxe_ds_IntMap();
arm_Res.bundled = new haxe_ds_StringMap();
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
arm_ui_UIFiles.path = "C:\\Users";
arm_ui_UIFiles.lastPath = "";
arm_ui_UIFiles.selected = -1;
arm_ui_UIFiles.showExtensions = true;
arm_ui_UIMenu.show = false;
arm_ui_UIMenu.menuCategory = 0;
arm_ui_UIMenu.menuX = 0;
arm_ui_UIMenu.menuY = 0;
arm_ui_UIMenu.menuElements = 0;
arm_ui_UIMenu.keepOpen = false;
arm_ui_UIMenu.changeStarted = false;
arm_ui_UIMenu.showMenuFirst = true;
arm_ui_UIMenu.hideMenu = false;
arm_ui_UIMenu.viewportColorHandle = zui_Handle.global.nest(55,{ selected : false});
arm_ui_UIMenu.envmapLoaded = false;
arm_ui_UISidebar.defaultWindowW = 280;
arm_util_UVUtil.uvmapCached = false;
arm_util_UVUtil.trianglemapCached = false;
arm_ArmBridge.Json = JSON;
arm_ArmBridge.ReflectFields = Reflect.fields;
arm_ArmBridge.ReflectField = Reflect.field;
arm_ArmBridge.ReflectSetField = Reflect.setField;
arm_ArmBridge.StdIs = Std.is;
arm_ArmBridge.Bytes = haxe_io_Bytes;
arm_ArmBridge.BytesInput = haxe_io_BytesInput;
arm_ArmBridge.Blob = kha_Blob;
arm_ArmBridge.Image = kha_Image;
arm_ArmBridge.Scheduler = kha_Scheduler;
arm_ArmBridge.App = arm_App;
arm_ArmBridge.Config = arm_Config;
arm_ArmBridge.Context = arm_Context;
arm_ArmBridge.History = arm_History;
arm_ArmBridge.Layers = arm_Layers;
arm_ArmBridge.Log = arm_Log;
arm_ArmBridge.Operator = arm_Operator;
arm_ArmBridge.Plugin = arm_Plugin;
arm_ArmBridge.Project = arm_Project;
arm_ArmBridge.Res = arm_Res;
arm_ArmBridge.Path = arm_sys_Path;
arm_ArmBridge.File = arm_sys_File;
arm_ArmBridge.NodesMaterial = arm_node_NodesMaterial;
arm_ArmBridge.Material = arm_node_Material;
arm_ArmBridge.UISidebar = arm_ui_UISidebar;
arm_ArmBridge.UINodes = arm_ui_UINodes;
arm_ArmBridge.UIFiles = arm_ui_UIFiles;
arm_ArmBridge.UIMenu = arm_ui_UIMenu;
arm_ArmBridge.MeshUtil = arm_util_MeshUtil;
arm_ArmBridge.MaterialUtil = arm_util_MaterialUtil;
arm_ArmBridge.RenderUtil = arm_util_RenderUtil;
arm_ArmBridge.UVUtil = arm_util_UVUtil;
arm_ArmBridge.ViewportUtil = arm_util_ViewportUtil;
zui_Ext.ar = [0.0,0.0,0.0];
arm_ZuiBridge.Handle = zui_Handle;
arm_ZuiBridge.Ext = zui_Ext;
arm_Strings.error1 = "Error: Unknown asset format";
arm_Strings.error2 = "Error: Could not locate texture ";
arm_Strings.error3 = "Error: Failed to read mesh data";
arm_Strings.error4 = "Error: Mesh has no UVs, generating defaults";
arm_Strings.error5 = "Error: .arm file expected";
arm_Strings.info0 = "Info: Asset already imported";
arm_Translator.translations = new haxe_ds_StringMap();
arm_data_ConstData.font_x0 = [1,2,6,10,18,25,34,42,45,50,55,61,68,71,75,79,85,92,97,104,111,118,1,8,15,22,29,32,35,41,48,55,61,72,81,89,97,105,112,119,1,9,13,20,28,35,45,53,61,69,77,85,93,101,109,1,12,20,28,36,40,46,50,56,62,66,73,80,87,94,101,106,113,120,123,1,8,11,21,28,35,42,49,54,61,66,73,80,90,97,104,111,116,119,1];
arm_data_ConstData.font_y0 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,62];
arm_data_ConstData.font_x1 = [1,5,9,17,24,33,41,44,49,54,60,67,70,74,78,84,91,96,103,110,117,124,7,14,21,28,31,34,40,47,54,60,71,80,88,96,104,111,118,126,8,12,19,27,34,44,52,60,68,76,84,92,100,108,116,11,19,27,35,39,45,49,55,61,65,72,79,86,93,100,105,112,119,122,126,7,10,20,27,34,41,48,53,60,65,72,79,89,96,103,110,115,118,123,8];
arm_data_ConstData.font_y1 = [1,10,5,9,13,11,10,5,13,13,6,8,5,3,4,10,10,9,9,10,9,10,23,22,23,23,21,22,19,18,19,23,25,22,22,23,22,22,22,23,34,34,35,34,34,34,34,35,34,36,34,35,34,35,34,45,45,45,45,49,46,49,42,38,40,44,47,44,47,44,46,46,46,45,48,59,59,56,56,57,59,59,56,57,59,57,56,56,56,59,56,61,60,61,65];
arm_data_ConstData.font_xoff = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
arm_data_ConstData.font_yoff = [10,2,1,2,0,1,2,1,1,1,2,3,8,6,8,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,10,1,4,1,4,1,4,1,4,1,2,2,1,1,4,4,4,4,4,4,4,2,4,4,4,4,4,4,1,2,1,5];
arm_data_ConstData.font_xadvance = [2.74625,2.85458,3.54791,6.83041,6.22916,8.125,6.89541,1.93375,3.79166,3.85666,4.7775,6.28875,2.1775,3.06041,2.91958,4.57166,6.22916,6.22916,6.22916,6.22916,6.22916,6.22916,6.22916,6.22916,6.22916,6.22916,2.68666,2.34541,5.63875,6.08833,5.79583,5.23791,9.96125,7.23666,6.90625,7.22041,7.27458,6.305,6.13166,7.55625,7.9083,3.01708,6.12083,6.955,5.96916,9.685,7.90833,7.62666,6.99833,7.62666,6.83041,6.58125,6.61916,7.19333,7.05791,9.84208,6.955,6.6625,6.64083,2.94125,4.55,2.94125,4.63666,5.005,3.42875,6.03416,6.22375,5.80666,6.25625,5.87708,3.85125,6.22375,6.11,2.69208,2.64875,5.6225,2.69208,9.72291,6.12083,6.32666,6.22375,6.305,3.75375,5.72,3.62375,6.11541,5.37333,8.33625,5.49791,5.24875,5.49791,3.75375,2.70291,3.75375,7.54541];
arm_format_FbxParser.parseTransform = false;
arm_format_FbxParser.parseVCols = false;
arm_format_ObjParser.splitCode = 111;
arm_format_ObjParser.vindOff = 0;
arm_format_ObjParser.tindOff = 0;
arm_format_ObjParser.nindOff = 0;
arm_format_pako_Deflate.DEFAULT_OPTIONS = { level : -1, method : 8, chunkSize : 16384, windowBits : 15, memLevel : 8, strategy : 0, raw : false, gzip : false, header : null, dictionary : null};
arm_format_pako_Inflate.DEFAULT_OPTIONS = { chunkSize : 16384, windowBits : 0, raw : false, dictionary : null};
arm_format_pako_zlib_CRC32.crcTable = arm_format_pako_zlib_CRC32.makeTable();
arm_format_pako_zlib_Trees.extra_lbits = haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);
arm_format_pako_zlib_Trees.extra_dbits = haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);
arm_format_pako_zlib_Trees.extra_blbits = haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);
arm_format_pako_zlib_Trees.bl_order = haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
arm_format_pako_zlib_Trees.static_init_done = false;
arm_format_pako_zlib_InfTrees.MAXBITS = 15;
arm_format_pako_zlib_InfTrees.ENOUGH_LENS = 852;
arm_format_pako_zlib_InfTrees.ENOUGH_DISTS = 592;
arm_format_pako_zlib_InfTrees.CODES = 0;
arm_format_pako_zlib_InfTrees.LENS = 1;
arm_format_pako_zlib_InfTrees.DISTS = 2;
arm_format_pako_zlib_InfTrees.lbase = haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]);
arm_format_pako_zlib_InfTrees.lext = haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]);
arm_format_pako_zlib_InfTrees.dbase = haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]);
arm_format_pako_zlib_InfTrees.dext = haxe_io__$UInt16Array_UInt16Array_$Impl_$.fromArray([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);
arm_format_pako_zlib_Inflate.virgin = true;
arm_format_pako_zlib_Messages.map = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[2] = "need dictionary";
	_g.h[1] = "stream end";
	_g.h[0] = "";
	_g.h[-1] = "file error";
	_g.h[-2] = "stream error";
	_g.h[-3] = "data error";
	_g.h[-4] = "insufficient memory";
	_g.h[-5] = "buffer error";
	_g.h[-6] = "incompatible version";
	$r = _g;
	return $r;
}(this));
arm_io_ImportFont.fontList = ["default.ttf"];
arm_io_ImportFont.fontMap = new haxe_ds_StringMap();
arm_io_ImportMesh.clearLayers = true;
arm_node_Logic.packageName = "arm.node.logic";
arm_node_MakeMeshPreview.opacityDiscardDecal = 0.05;
arm_node_MakeMeshPreview.opacityDiscardScene = 0.5;
arm_node_MaterialBuilder.heightUsed = false;
arm_node_MaterialBuilder.emisUsed = false;
arm_node_MaterialBuilder.subsUsed = false;
arm_node_MaterialFunctions.str_tex_checker = "\r\nvec3 tex_checker(const vec3 co, const vec3 col1, const vec3 col2, const float scale) {\r\n\t// Prevent precision issues on unit coordinates\r\n\tvec3 p = (co + 0.000001 * 0.999999) * scale;\r\n\tfloat xi = abs(floor(p.x));\r\n\tfloat yi = abs(floor(p.y));\r\n\tfloat zi = abs(floor(p.z));\r\n\tbool check = ((mod(xi, 2.0) == mod(yi, 2.0)) == bool(mod(zi, 2.0)));\r\n\treturn check ? col1 : col2;\r\n}\r\nfloat tex_checker_f(const vec3 co, const float scale) {\r\n\tvec3 p = (co + 0.000001 * 0.999999) * scale;\r\n\tfloat xi = abs(floor(p.x));\r\n\tfloat yi = abs(floor(p.y));\r\n\tfloat zi = abs(floor(p.z));\r\n\treturn float((mod(xi, 2.0) == mod(yi, 2.0)) == bool(mod(zi, 2.0)));\r\n}\r\n";
arm_node_MaterialFunctions.str_tex_voronoi = "\r\nvec4 tex_voronoi(const vec3 x) {\r\n\tvec3 p = floor(x);\r\n\tvec3 f = fract(x);\r\n\tfloat id = 0.0;\r\n\tfloat res = 100.0;\r\n\tfor (int k = -1; k <= 1; k++)\r\n\tfor (int j = -1; j <= 1; j++)\r\n\tfor (int i = -1; i <= 1; i++) {\r\n\t\tvec3 b = vec3(float(i), float(j), float(k));\r\n\t\tvec3 pb = p + b;\r\n\t\tvec3 r = vec3(b) - f + texture(snoise256, (pb.xy + vec2(3.0, 1.0) * pb.z + 0.5) / 256.0).xyz;\r\n\t\tfloat d = dot(r, r);\r\n\t\tif (d < res) {\r\n\t\t\tid = dot(p + b, vec3(1.0, 57.0, 113.0));\r\n\t\t\tres = d;\r\n\t\t}\r\n\t}\r\n\tvec3 col = 0.5 + 0.5 * cos(id * 0.35 + vec3(0.0, 1.0, 2.0));\r\n\treturn vec4(col, sqrt(res));\r\n}\r\n";
arm_node_MaterialFunctions.str_tex_noise = "\r\nfloat hash(float n) { return fract(sin(n) * 1e4); }\r\nfloat tex_noise_f(vec3 x) {\r\n    const vec3 step = vec3(110, 241, 171);\r\n    vec3 i = floor(x);\r\n    vec3 f = fract(x);\r\n    float n = dot(i, step);\r\n    vec3 u = f * f * (3.0 - 2.0 * f);\r\n    return mix(mix(mix(hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\r\n                   mix(hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\r\n               mix(mix(hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\r\n                   mix(hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\r\n}\r\nfloat tex_noise(vec3 p) {\r\n\tp *= 1.25;\r\n\tfloat f = 0.5 * tex_noise_f(p); p *= 2.01;\r\n\tf += 0.25 * tex_noise_f(p); p *= 2.02;\r\n\tf += 0.125 * tex_noise_f(p); p *= 2.03;\r\n\tf += 0.0625 * tex_noise_f(p);\r\n\treturn 1.0 - f;\r\n}\r\n";
arm_node_MaterialFunctions.str_tex_musgrave = "\r\nvec3 random3(const vec3 c) {\r\n\tfloat j = 4096.0 * sin(dot(c, vec3(17.0, 59.4, 15.0)));\r\n\tvec3 r;\r\n\tr.z = fract(512.0 * j);\r\n\tj *= 0.125;\r\n\tr.x = fract(512.0 * j);\r\n\tj *= 0.125;\r\n\tr.y = fract(512.0 * j);\r\n\treturn r - 0.5;\r\n}\r\nfloat tex_musgrave_f(const vec3 p) {\r\n\tconst float F3 = 0.3333333;\r\n\tconst float G3 = 0.1666667;\r\n\tvec3 s = floor(p + dot(p, vec3(F3, F3, F3)));\r\n\tvec3 x = p - s + dot(s, vec3(G3, G3, G3));\r\n\tvec3 e = step(vec3(0.0, 0.0, 0.0), x - x.yzx);\r\n\tvec3 i1 = e*(1.0 - e.zxy);\r\n\tvec3 i2 = 1.0 - e.zxy*(1.0 - e);\r\n\tvec3 x1 = x - i1 + G3;\r\n\tvec3 x2 = x - i2 + 2.0*G3;\r\n\tvec3 x3 = x - 1.0 + 3.0*G3;\r\n\tvec4 w, d;\r\n\tw.x = dot(x, x);\r\n\tw.y = dot(x1, x1);\r\n\tw.z = dot(x2, x2);\r\n\tw.w = dot(x3, x3);\r\n\tw = max(0.6 - w, 0.0);\r\n\td.x = dot(random3(s), x);\r\n\td.y = dot(random3(s + i1), x1);\r\n\td.z = dot(random3(s + i2), x2);\r\n\td.w = dot(random3(s + 1.0), x3);\r\n\tw *= w;\r\n\tw *= w;\r\n\td *= w;\r\n\treturn clamp(dot(d, vec4(52.0, 52.0, 52.0, 52.0)), 0.0, 1.0);\r\n}\r\n";
arm_node_MaterialFunctions.str_hue_sat = "\r\nvec3 hsv_to_rgb(const vec3 c) {\r\n\tconst vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\nvec3 rgb_to_hsv(const vec3 c) {\r\n\tconst vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n\tvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n\tvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\tfloat d = q.x - min(q.w, q.y);\r\n\tfloat e = 1.0e-10;\r\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\nvec3 hue_sat(const vec3 col, const vec4 shift) {\r\n\tvec3 hsv = rgb_to_hsv(col);\r\n\thsv.x += shift.x;\r\n\thsv.y *= shift.y;\r\n\thsv.z *= shift.z;\r\n\treturn mix(hsv_to_rgb(hsv), col, shift.w);\r\n}\r\n";
arm_node_MaterialFunctions.str_wavelength_to_rgb = "\r\nvec3 wavelength_to_rgb(const float t) {\r\n\tvec3 r = t * 2.1 - vec3(1.8, 1.14, 0.3);\r\n\treturn 1.0 - r * r;\r\n}\r\n";
arm_node_MaterialFunctions.str_tex_magic = "\r\nvec3 tex_magic(const vec3 p) {\r\n\tfloat a = 1.0 - (sin(p.x) + sin(p.y));\r\n\tfloat b = 1.0 - sin(p.x - p.y);\r\n\tfloat c = 1.0 - sin(p.x + p.y);\r\n\treturn vec3(a, b, c);\r\n}\r\nfloat tex_magic_f(const vec3 p) {\r\n\tvec3 c = tex_magic(p);\r\n\treturn (c.x + c.y + c.z) / 3.0;\r\n}\r\n";
arm_node_MaterialFunctions.str_tex_brick = "\r\nvec3 tex_brick(vec3 p, const vec3 c1, const vec3 c2, const vec3 c3) {\r\n\tp /= vec3(0.9, 0.49, 0.49) / 2;\r\n\tif (fract(p.y * 0.5) > 0.5) p.x += 0.5;\r\n\tp = fract(p);\r\n\tvec3 b = step(p, vec3(0.95, 0.9, 0.9));\r\n\treturn mix(c3, c1, b.x * b.y * b.z);\r\n}\r\nfloat tex_brick_f(vec3 p) {\r\n\tp /= vec3(0.9, 0.49, 0.49) / 2;\r\n\tif (fract(p.y * 0.5) > 0.5) p.x += 0.5;\r\n\tp = fract(p);\r\n\tvec3 b = step(p, vec3(0.95, 0.9, 0.9));\r\n\treturn mix(1.0, 0.0, b.x * b.y * b.z);\r\n}\r\n";
arm_node_MaterialFunctions.str_tex_wave = "\r\nfloat tex_wave_f(const vec3 p) {\r\n\treturn 1.0 - sin((p.x + p.y) * 10.0);\r\n}\r\n";
arm_node_MaterialFunctions.str_brightcontrast = "\r\nvec3 brightcontrast(const vec3 col, const float bright, const float contr) {\r\n\tfloat a = 1.0 + contr;\r\n\tfloat b = bright - contr * 0.5;\r\n\treturn max(a * col + b, 0.0);\r\n}\r\n";
arm_node_MaterialFunctions.str_traceAO = "\r\nfloat traceConeAO(sampler3D voxels, const vec3 origin, vec3 dir, const float aperture, const float maxDist, const float offset) {\r\n\tconst ivec3 voxelgiResolution = ivec3(" + 256 + ", " + 256 + ", " + 256 + ");\r\n\tconst float voxelgiStep = 1.0;\r\n\tconst float VOXEL_SIZE = (2.0 / voxelgiResolution.x) * voxelgiStep;\r\n\tdir = normalize(dir);\r\n\tfloat sampleCol = 0.0;\r\n\tfloat dist = offset;\r\n\tfloat diam = dist * aperture;\r\n\tvec3 samplePos;\r\n\twhile (sampleCol < 1.0 && dist < maxDist) {\r\n\t\tsamplePos = dir * dist + origin;\r\n\t\tfloat mip = max(log2(diam * voxelgiResolution.x), 0);\r\n\t\tfloat mipSample = textureLod(voxels, samplePos * 0.5 + vec3(0.5, 0.5, 0.5), mip).r;\r\n\t\tsampleCol += (1 - sampleCol) * mipSample;\r\n\t\tdist += max(diam / 2, VOXEL_SIZE);\r\n\t\tdiam = dist * aperture;\r\n\t}\r\n\treturn sampleCol;\r\n}\r\nvec3 tangent(const vec3 n) {\r\n\tvec3 t1 = cross(n, vec3(0, 0, 1));\r\n\tvec3 t2 = cross(n, vec3(0, 1, 0));\r\n\tif (length(t1) > length(t2)) return normalize(t1);\r\n\telse return normalize(t2);\r\n}\r\nfloat traceAO(const vec3 origin, const vec3 normal, const float vrange, const float voffset) {\r\n\tconst float angleMix = 0.5f;\r\n\tconst float aperture = 0.55785173935;\r\n\tvec3 o1 = normalize(tangent(normal));\r\n\tvec3 o2 = normalize(cross(o1, normal));\r\n\tvec3 c1 = 0.5f * (o1 + o2);\r\n\tvec3 c2 = 0.5f * (o1 - o2);\r\n\tfloat MAX_DISTANCE = 1.73205080757 * 2.0 * vrange;\r\n\tconst ivec3 voxelgiResolution = ivec3(" + 256 + ", " + 256 + ", " + 256 + ");\r\n\tconst float voxelgiStep = 1.0;\r\n\tconst float VOXEL_SIZE = (2.0 / voxelgiResolution.x) * voxelgiStep;\r\n\tfloat offset = 1.5 * VOXEL_SIZE * 2.5 * voffset;\r\n\tfloat col = traceConeAO(voxels, origin, normal, aperture, MAX_DISTANCE, offset);\r\n\tcol += traceConeAO(voxels, origin, mix(normal, o1, angleMix), aperture, MAX_DISTANCE, offset);\r\n\tcol += traceConeAO(voxels, origin, mix(normal, o2, angleMix), aperture, MAX_DISTANCE, offset);\r\n\tcol += traceConeAO(voxels, origin, mix(normal, -c1, angleMix), aperture, MAX_DISTANCE, offset);\r\n\tcol += traceConeAO(voxels, origin, mix(normal, -c2, angleMix), aperture, MAX_DISTANCE, offset);\r\n\tcol += traceConeAO(voxels, origin, mix(normal, -o1, angleMix), aperture, MAX_DISTANCE, offset);\r\n\tcol += traceConeAO(voxels, origin, mix(normal, -o2, angleMix), aperture, MAX_DISTANCE, offset);\r\n\tcol += traceConeAO(voxels, origin, mix(normal, c1, angleMix), aperture, MAX_DISTANCE, offset);\r\n\tcol += traceConeAO(voxels, origin, mix(normal, c2, angleMix), aperture, MAX_DISTANCE, offset);\r\n\treturn col / 9.0;\r\n}\r\n";
arm_node_MaterialFunctions.str_cotangentFrame = "\r\nmat3 cotangentFrame(const vec3 n, const vec3 p, const vec2 duv1, const vec2 duv2) {\r\n\tvec3 dp1 = dFdx(p);\r\n\tvec3 dp2 = dFdy(p);\r\n\tvec3 dp2perp = cross(dp2, n);\r\n\tvec3 dp1perp = cross(n, dp1);\r\n\tvec3 t = dp2perp * duv1.x + dp1perp * duv2.x;\r\n\tvec3 b = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\tfloat invmax = inversesqrt(max(dot(t, t), dot(b, b)));\r\n\treturn mat3(t * invmax, b * invmax, n);\r\n}\r\nmat3 cotangentFrame(const vec3 n, const vec3 p, const vec2 texCoord) {\r\n\treturn cotangentFrame(n, p, dFdx(texCoord), dFdy(texCoord));\r\n}\r\n";
arm_node_MaterialFunctions.str_octahedronWrap = "\r\nvec2 octahedronWrap(const vec2 v) {\r\n\treturn (1.0 - abs(v.yx)) * (vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0));\r\n}\r\n";
arm_node_MaterialFunctions.str_packFloat2 = "\r\nfloat packFloat2(const float f1, const float f2) {\r\n\treturn floor(f1 * 255.0) + min(f2, 1.0 - 1.0 / 100.0);\r\n}\r\n";
arm_node_MaterialFunctions.str_packFloatInt16 = "\r\nfloat packFloatInt16(const float f, const uint i) {\r\n\tconst float prec = float(1 << 16);\r\n\tconst float maxi = float(1 << 4);\r\n\tconst float precMinusOne = prec - 1.0;\r\n\tconst float t1 = ((prec / maxi) - 1.0) / precMinusOne;\r\n\tconst float t2 = (prec / maxi) / precMinusOne;\r\n\treturn t1 * f + t2 * float(i);\r\n}\r\n";
arm_node_NodesBrush.categories = ["Nodes"];
arm_node_NodesBrush.list = [[{ id : 0, name : "Input", type : "InputNode", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Lazy Radius", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Lazy Step", type : "VALUE", color : -6184543, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Position", type : "VECTOR", color : -10238109, default_value : null}], buttons : []},{ id : 0, name : "Value", type : "FloatNode", x : 0, y : 0, color : -5025958, inputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.5, min : 0.0, max : 10.0}], outputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.5}], buttons : []},{ id : 0, name : "Random", type : "RandomNode", x : 0, y : 0, color : -5025958, inputs : [{ id : 0, node_id : 0, name : "Min", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Max", type : "VALUE", color : -6184543, default_value : 1.0}], outputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.5}], buttons : []},{ id : 0, name : "Vector", type : "VectorNode", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "X", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Y", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Z", type : "VALUE", color : -6184543, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], buttons : []},{ id : 0, name : "Separate Vector", type : "SeparateVectorNode", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "X", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Y", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Z", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Vector Math", type : "VectorMathNode", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]},{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : [{ name : "operation", type : "ENUM", data : ["Add","Subtract","Average","Dot Product","Cross Product","Normalize"], default_value : 0, output : 0}]},{ id : 0, name : "Math", type : "MathNode", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.5},{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.5}], outputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : [{ name : "operation", type : "ENUM", data : ["Add","Subtract","Multiply","Divide","Sine","Cosine","Tangent","Arcsine","Arccosine","Arctangent","Power","Logarithm","Minimum","Maximum","Round","Less Than","Greater Than","Module","Absolute"], default_value : 0, output : 0},{ name : "use_clamp", type : "BOOL", default_value : false, output : 0}]},{ id : 0, name : "Time", type : "TimeNode", x : 0, y : 0, color : -11959648, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Time", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Delta", type : "VALUE", color : -6184543, default_value : 0.0},{ id : 0, node_id : 0, name : "Brush", type : "VALUE", color : -6184543, default_value : 0.0}], buttons : []},{ id : 0, name : "Image Texture", type : "TEX_IMAGE", x : 0, y : 0, color : -11959648, inputs : [{ id : 0, node_id : 0, name : "Vector", type : "VECTOR", color : -10263609, default_value : [0.0,0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Color", type : "RGBA", color : -3684567, default_value : [0.0,0.0,0.0,1.0]},{ id : 0, node_id : 0, name : "Alpha", type : "VALUE", color : -6184543, default_value : 1.0}], buttons : [{ name : "file", type : "ENUM", default_value : 0, data : ""},{ name : "color_space", type : "ENUM", default_value : 0, data : ["linear","srgb"]}]}]];
arm_plugin_Camera.dist = 0.0;
arm_render_Inc.superSample = 1.0;
arm_render_Inc.lastX = -1.0;
arm_render_Inc.lastY = -1.0;
arm_render_Inc.voxelsCreated = false;
arm_render_RenderPathDeferred.voxels = "voxels";
arm_render_RenderPathDeferred.taaFrame = 0;
arm_render_RenderPathPaint.initVoxels = true;
arm_render_RenderPathPaint.mergedObjectVisible = false;
arm_render_RenderPathPaint.savedFov = 0.0;
arm_render_RenderPathPaint.dilated = true;
arm_render_RenderPathPaint.baking = false;
arm_render_RenderPathPaint.liveLayerDrawn = 0;
arm_render_RenderPathPaint.liveLayerLocked = false;
arm_render_Uniforms.vec = new iron_math_Vec4();
arm_ui_BoxExport.htab = zui_Handle.global.nest(57,null);
arm_ui_BoxExport.hpreset = zui_Handle.global.nest(56,null);
arm_ui_BoxExport.channels = ["base_r","base_g","base_b","height","metal","nor_r","nor_g","nor_b","occ","opac","rough","smooth","emis","subs","0.0","1.0"];
arm_ui_BoxPreferences.htab = zui_Handle.global.nest(18,null);
arm_ui_TabBrowser.hpath = new zui_Handle();
arm_ui_TabBrowser.known = false;
arm_ui_TabLayers.dragDestination = 1;
arm_ui_TabProperties.row4 = [0.25,0.25,0.25,0.25];
arm_ui_TabScript.hscript = zui_Handle.global.nest(53,null);
arm_ui_UIBox.show = false;
arm_ui_UIBox.hwnd = new zui_Handle();
arm_ui_UIBox.boxTitle = "";
arm_ui_UIBox.boxText = "";
arm_ui_UIBox.clickToHide = true;
arm_ui_UIBox.modalW = 400;
arm_ui_UIBox.modalH = 170;
arm_ui_UIBox.draws = 0;
arm_ui_UIBox.copyable = false;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
iron_data_ConstData.skydomeIndices = [0,1,2,0,3,4,3,5,6,5,7,8,7,9,10,9,11,12,13,14,15,11,16,17,13,18,2,14,2,19,2,1,20,1,4,21,4,6,22,6,8,23,8,10,24,10,12,25,14,26,15,17,27,25,22,23,28,24,29,28,24,25,30,26,31,15,25,27,32,26,19,33,19,20,34,20,21,35,21,22,36,33,34,37,34,35,38,35,36,39,36,28,40,28,29,41,30,42,41,31,43,15,30,32,44,31,33,45,40,41,46,42,47,46,43,48,15,42,44,49,43,45,50,45,37,51,37,38,52,39,53,52,39,40,54,50,51,55,51,52,56,53,57,56,53,54,58,46,59,58,46,47,60,48,61,15,47,49,62,48,50,63,59,64,65,59,60,66,61,67,15,60,62,68,61,63,69,63,55,70,56,71,70,56,57,72,57,58,65,70,71,73,71,72,74,72,65,75,64,76,75,64,66,77,67,78,15,68,79,77,67,69,80,69,70,81,76,77,82,78,83,15,77,79,84,80,85,83,80,81,86,81,73,87,74,88,87,74,75,89,76,90,89,87,88,91,88,89,92,90,93,92,90,82,94,83,95,15,82,84,96,83,85,97,86,98,97,86,87,99,95,100,15,96,101,102,95,97,103,97,98,104,98,99,105,91,106,105,91,92,107,93,108,107,93,94,102,105,106,109,106,107,110,108,111,110,108,102,112,100,113,15,102,101,114,100,103,115,103,104,116,104,105,117,114,118,119,113,115,120,115,116,121,117,122,121,109,123,122,109,110,124,111,125,124,111,112,119,113,126,15,123,124,127,125,128,127,125,119,129,126,130,15,119,118,131,126,120,132,121,133,132,121,122,134,122,123,135,130,132,136,132,133,137,133,134,138,134,135,139,135,127,140,128,141,140,128,129,142,130,143,15,129,131,144,139,140,145,141,146,145,141,142,147,143,148,15,142,144,149,143,136,150,137,151,150,138,152,151,138,139,153,150,151,154,152,155,154,153,156,155,153,145,157,146,158,157,146,147,159,148,160,15,147,149,161,148,150,162,158,163,164,158,159,165,160,166,15,161,167,165,160,162,168,162,154,169,155,170,169,156,171,170,156,157,164,169,170,172,171,173,172,171,164,174,163,175,174,163,165,176,166,177,15,165,167,178,166,168,179,168,169,180,176,181,182,177,183,15,176,178,184,177,179,185,179,180,186,172,187,186,173,188,187,173,174,189,175,182,189,187,190,191,188,192,190,188,189,193,182,194,193,182,181,195,183,196,15,181,184,197,183,185,198,185,186,191,194,195,199,196,200,15,195,197,201,196,198,202,198,191,203,190,204,203,192,205,204,192,193,206,194,207,206,205,208,209,205,206,210,207,211,210,207,199,212,200,213,15,199,201,214,202,215,213,202,203,216,204,209,216,213,217,15,214,218,219,215,220,217,215,216,221,209,222,221,209,208,223,208,210,224,211,225,224,211,212,219,223,226,227,223,224,228,225,229,228,225,219,230,217,231,15,218,232,230,220,233,231,220,221,234,222,227,234,230,232,235,231,233,236,233,234,237,227,238,237,227,226,239,226,228,240,229,241,240,229,230,242,231,243,15,239,240,244,241,245,244,241,242,246,243,247,15,235,248,246,243,236,249,237,250,249,238,251,250,239,252,251,249,250,253,250,251,254,252,255,254,252,244,256,245,257,256,245,246,258,247,259,15,248,260,258,247,249,261,257,262,263,258,264,262,259,265,15,258,260,266,259,261,267,261,253,268,253,254,269,255,270,269,255,256,263,268,271,272,269,273,271,270,274,273,270,263,275,262,276,275,262,264,277,265,278,15,264,266,279,267,272,278,276,280,281,276,277,282,278,283,15,277,279,284,278,272,285,272,271,286,271,273,287,274,288,287,274,275,281,287,3,0,288,5,3,281,7,5,280,9,7,282,11,9,283,13,15,282,284,16,285,18,13,286,0,18,0,2,18,0,4,1,3,6,4,5,8,6,7,10,8,9,12,10,11,17,12,13,2,14,14,19,26,2,20,19,1,21,20,4,22,21,6,23,22,8,24,23,10,25,24,17,25,12,22,28,36,24,28,23,24,30,29,25,32,30,26,33,31,19,34,33,20,35,34,21,36,35,33,37,45,34,38,37,35,39,38,36,40,39,28,41,40,30,41,29,30,44,42,31,45,43,40,46,54,42,46,41,42,49,47,43,50,48,45,51,50,37,52,51,39,52,38,39,54,53,50,55,63,51,56,55,53,56,52,53,58,57,46,58,54,46,60,59,47,62,60,48,63,61,59,65,58,59,66,64,60,68,66,61,69,67,63,70,69,56,70,55,56,72,71,57,65,72,70,73,81,71,74,73,72,75,74,64,75,65,64,77,76,68,77,66,67,80,78,69,81,80,76,82,90,77,84,82,80,83,78,80,86,85,81,87,86,74,87,73,74,89,88,76,89,75,87,91,99,88,92,91,90,92,89,90,94,93,82,96,94,83,97,95,86,97,85,86,99,98,96,102,94,95,103,100,97,104,103,98,105,104,91,105,99,91,107,106,93,107,92,93,102,108,105,109,117,106,110,109,108,110,107,108,112,111,102,114,112,100,115,113,103,116,115,104,117,116,114,119,112,113,120,126,115,121,120,117,121,116,109,122,117,109,124,123,111,124,110,111,119,125,123,127,135,125,127,124,125,129,128,119,131,129,126,132,130,121,132,120,121,134,133,122,135,134,130,136,143,132,137,136,133,138,137,134,139,138,135,140,139,128,140,127,128,142,141,129,144,142,139,145,153,141,145,140,141,147,146,142,149,147,143,150,148,137,150,136,138,151,137,138,153,152,150,154,162,152,154,151,153,155,152,153,157,156,146,157,145,146,159,158,147,161,159,148,162,160,158,164,157,158,165,163,161,165,159,160,168,166,162,169,168,155,169,154,156,170,155,156,164,171,169,172,180,171,172,170,171,174,173,163,174,164,163,176,175,165,178,176,166,179,177,168,180,179,176,182,175,176,184,181,177,185,183,179,186,185,172,186,180,173,187,172,173,189,188,175,189,174,187,191,186,188,190,187,188,193,192,182,193,189,182,195,194,181,197,195,183,198,196,185,191,198,194,199,207,195,201,199,196,202,200,198,203,202,190,203,191,192,204,190,192,206,205,194,206,193,205,209,204,205,210,208,207,210,206,207,212,211,199,214,212,202,213,200,202,216,215,204,216,203,214,219,212,215,217,213,215,221,220,209,221,216,209,223,222,208,224,223,211,224,210,211,219,225,223,227,222,223,228,226,225,228,224,225,230,229,218,230,219,220,231,217,220,234,233,222,234,221,230,235,242,231,236,243,233,237,236,227,237,234,227,239,238,226,240,239,229,240,228,229,242,241,239,244,252,241,244,240,241,246,245,235,246,242,243,249,247,237,249,236,238,250,237,239,251,238,249,253,261,250,254,253,252,254,251,252,256,255,245,256,244,245,258,257,248,258,246,247,261,259,257,263,256,258,262,257,258,266,264,259,267,265,261,268,267,253,269,268,255,269,254,255,263,270,268,272,267,269,271,268,270,273,269,270,275,274,262,275,263,262,277,276,264,279,277,267,278,265,276,281,275,276,282,280,277,284,282,278,285,283,272,286,285,271,287,286,274,287,273,274,281,288,287,0,286,288,3,287,281,5,288,280,7,281,282,9,280,282,16,11,285,13,283,286,18,285,84,289,96,96,289,101,101,289,114,114,289,118,118,289,131,144,131,289,149,144,289,149,289,161,161,289,167,167,289,178,178,289,184,184,289,197,197,289,201,201,289,214,214,289,218,218,289,232,232,289,235,235,289,248,260,248,289,260,289,266,266,289,279,279,289,284,284,289,16,16,289,17,27,17,289,27,289,32,44,32,289,44,289,49,49,289,62,62,289,68,68,289,79,79,289,84];
iron_data_ConstData.skydomePos = [-0.55557,0.0,0.83147,-0.544895,0.108386,0.83147,-0.37533,0.074658,0.92388,-0.707107,0.0,0.707107,-0.69352,0.13795,0.707107,-0.83147,0.0,0.55557,-0.815493,0.162212,0.55557,-0.92388,0.0,0.382683,-0.906127,0.18024,0.382683,-0.980785,0.0,0.19509,-0.96194,0.191342,0.19509,-1.0,0.0,0.0,-0.980785,0.19509,0.0,-0.19509,0.0,0.980785,-0.191342,0.03806,0.980785,0.0,0.0,1.,-0.980785,0.0,-0.28234,-0.96194,0.191342,-0.28234,-0.382683,0.0,0.92388,-0.353553,0.146447,0.92388,-0.51328,0.212608,0.83147,-0.653281,0.270598,0.707107,-0.768178,0.31819,0.55557,-0.853553,0.353553,0.382683,-0.906127,0.37533,0.19509,-0.923879,0.382684,0.0,-0.18024,0.074658,0.980785,-0.906127,0.37533,-0.28234,-0.768178,0.51328,0.382683,-0.815493,0.544895,0.19509,-0.831469,0.55557,0.0,-0.162212,0.108387,0.980785,-0.815493,0.544895,-0.28234,-0.31819,0.212608,0.92388,-0.46194,0.308658,0.83147,-0.587938,0.392848,0.707107,-0.691342,0.46194,0.55557,-0.392847,0.392848,0.83147,-0.5,0.5,0.707107,-0.587938,0.587938,0.55557,-0.653281,0.653282,0.382683,-0.69352,0.69352,0.19509,-0.707107,0.707107,0.0,-0.13795,0.13795,0.980785,-0.69352,0.69352,-0.28234,-0.270598,0.270598,0.92388,-0.544895,0.815493,0.19509,-0.55557,0.83147,0.0,-0.108386,0.162212,0.980785,-0.544895,0.815493,-0.28234,-0.212607,0.31819,0.92388,-0.308658,0.46194,0.83147,-0.392847,0.587938,0.707107,-0.46194,0.691342,0.55557,-0.51328,0.768178,0.382683,-0.212607,0.51328,0.83147,-0.270598,0.653282,0.707107,-0.318189,0.768178,0.55557,-0.353553,0.853554,0.382683,-0.37533,0.906128,0.19509,-0.382683,0.92388,0.0,-0.074658,0.18024,0.980785,-0.37533,0.906128,-0.28234,-0.146446,0.353554,0.92388,-0.191341,0.96194,0.19509,-0.18024,0.906128,0.382683,-0.19509,0.980785,0.0,-0.03806,0.191342,0.980785,-0.191341,0.96194,-0.28234,-0.074658,0.375331,0.92388,-0.108386,0.544895,0.83147,-0.137949,0.69352,0.707107,-0.162211,0.815493,0.55557,0.0,0.707107,0.707107,0.0,0.83147,0.55557,0.0,0.92388,0.382683,0.0,0.980785,0.19509,0.0,1.,0.0,0.0,0.195091,0.980785,0.0,0.980785,-0.28234,0.0,0.382684,0.92388,0.0,0.55557,0.83147,0.195091,0.980785,0.0,0.038061,0.191342,0.980785,0.191342,0.96194,-0.28234,0.074658,0.375331,0.92388,0.108387,0.544895,0.83147,0.13795,0.69352,0.707107,0.162212,0.815493,0.55557,0.18024,0.906128,0.382683,0.191342,0.96194,0.19509,0.31819,0.768178,0.55557,0.353554,0.853554,0.382683,0.375331,0.906127,0.19509,0.382684,0.92388,0.0,0.074658,0.18024,0.980785,0.375331,0.906127,-0.28234,0.146447,0.353554,0.92388,0.212608,0.51328,0.83147,0.270598,0.653282,0.707107,0.108387,0.162212,0.980785,0.544895,0.815493,-0.28234,0.555571,0.83147,0.0,0.212608,0.31819,0.92388,0.308659,0.46194,0.83147,0.392848,0.587938,0.707107,0.46194,0.691342,0.55557,0.51328,0.768178,0.382683,0.544895,0.815493,0.19509,0.587938,0.587938,0.55557,0.653282,0.653282,0.382683,0.69352,0.69352,0.19509,0.707107,0.707107,0.0,0.13795,0.13795,0.980785,0.69352,0.69352,-0.28234,0.270599,0.270598,0.92388,0.392848,0.392848,0.83147,0.5,0.5,0.707107,0.815493,0.544895,-0.28234,0.83147,0.55557,0.0,0.31819,0.212608,0.92388,0.46194,0.308658,0.83147,0.587938,0.392848,0.707107,0.691342,0.46194,0.55557,0.768178,0.51328,0.382683,0.815493,0.544895,0.19509,0.162212,0.108386,0.980785,0.853554,0.353553,0.382683,0.906128,0.37533,0.19509,0.92388,0.382683,0.0,0.18024,0.074658,0.980785,0.906128,0.37533,-0.28234,0.353554,0.146447,0.92388,0.51328,0.212608,0.83147,0.653282,0.270598,0.707107,0.768178,0.31819,0.55557,0.375331,0.074658,0.92388,0.544896,0.108386,0.83147,0.69352,0.13795,0.707107,0.815493,0.162212,0.55557,0.906128,0.18024,0.382683,0.96194,0.191342,0.19509,0.980786,0.19509,0.0,0.191342,0.03806,0.980785,0.96194,0.191342,-0.28234,0.92388,0.0,0.382683,0.980785,0.0,0.19509,1.,0.0,0.0,0.195091,0.0,0.980785,0.980785,0.0,-0.28234,0.382684,0.0,0.92388,0.555571,0.0,0.83147,0.707107,0.0,0.707107,0.83147,0.0,0.55557,0.544896,-0.108386,0.83147,0.69352,-0.13795,0.707107,0.815493,-0.162212,0.55557,0.906128,-0.18024,0.382683,0.96194,-0.191342,0.19509,0.980786,-0.19509,0.0,0.191342,-0.03806,0.980785,0.96194,-0.191342,-0.28234,0.375331,-0.074658,0.92388,0.906127,-0.37533,0.19509,0.853554,-0.353553,0.382683,0.92388,-0.382684,0.0,0.18024,-0.074658,0.980785,0.906127,-0.37533,-0.28234,0.353554,-0.146447,0.92388,0.51328,-0.212608,0.83147,0.653282,-0.270598,0.707107,0.768178,-0.31819,0.55557,0.587938,-0.392847,0.707107,0.691342,-0.46194,0.55557,0.768178,-0.51328,0.382683,0.815493,-0.544895,0.19509,0.83147,-0.55557,0.0,0.162212,-0.108386,0.980785,0.815493,-0.544895,-0.28234,0.31819,-0.212608,0.92388,0.46194,-0.308658,0.83147,0.707107,-0.707107,0.0,0.69352,-0.69352,0.19509,0.13795,-0.13795,0.980785,0.69352,-0.69352,-0.28234,0.270598,-0.270598,0.92388,0.392848,-0.392848,0.83147,0.5,-0.5,0.707107,0.587938,-0.587938,0.55557,0.653282,-0.653281,0.382683,0.392848,-0.587938,0.707107,0.308659,-0.46194,0.83147,0.46194,-0.691342,0.55557,0.51328,-0.768178,0.382683,0.544895,-0.815493,0.19509,0.55557,-0.83147,0.0,0.108387,-0.162212,0.980785,0.544895,-0.815493,-0.28234,0.212608,-0.31819,0.92388,0.382684,-0.92388,0.0,0.074658,-0.18024,0.980785,0.37533,-0.906127,-0.28234,0.146447,-0.353553,0.92388,0.212608,-0.51328,0.83147,0.270598,-0.653281,0.707107,0.31819,-0.768177,0.55557,0.353554,-0.853553,0.382683,0.37533,-0.906127,0.19509,0.162212,-0.815493,0.55557,0.13795,-0.69352,0.707107,0.18024,-0.906127,0.382683,0.191342,-0.961939,0.19509,0.19509,-0.980785,0.0,0.038061,-0.191342,0.980785,0.191342,-0.961939,-0.28234,0.074658,-0.37533,0.92388,0.108387,-0.544895,0.83147,0.0,-0.19509,0.980785,0.0,-0.980785,-0.28234,0.0,-1.0,0.0,0.0,-0.382683,0.92388,0.0,-0.55557,0.83147,0.0,-0.707107,0.707107,0.0,-0.831469,0.55557,0.0,-0.923879,0.382683,0.0,-0.980785,0.19509,-0.162211,-0.815493,0.55557,-0.137949,-0.69352,0.707107,-0.18024,-0.906127,0.382683,-0.191342,-0.961939,0.19509,-0.19509,-0.980785,0.0,-0.03806,-0.191342,0.980785,-0.191342,-0.961939,-0.28234,-0.074658,-0.37533,0.92388,-0.108386,-0.544895,0.83147,-0.37533,-0.906127,-0.28234,-0.146446,-0.353553,0.92388,-0.212607,-0.51328,0.83147,-0.270598,-0.653281,0.707107,-0.318189,-0.768177,0.55557,-0.353553,-0.853553,0.382683,-0.37533,-0.906127,0.19509,-0.382683,-0.923879,0.0,-0.074658,-0.18024,0.980785,-0.51328,-0.768178,0.382683,-0.544895,-0.815493,0.19509,-0.55557,-0.831469,0.0,-0.108386,-0.162212,0.980785,-0.544895,-0.815493,-0.28234,-0.212607,-0.31819,0.92388,-0.308658,-0.46194,0.83147,-0.392847,-0.587938,0.707107,-0.461939,-0.691341,0.55557,-0.392847,-0.392847,0.83147,-0.5,-0.5,0.707107,-0.587937,-0.587937,0.55557,-0.653281,-0.653281,0.382683,-0.693519,-0.693519,0.19509,-0.707106,-0.707106,0.0,-0.137949,-0.13795,0.980785,-0.693519,-0.693519,-0.28234,-0.270598,-0.270598,0.92388,-0.815492,-0.544895,0.19509,-0.768177,-0.51328,0.382683,-0.831469,-0.55557,0.0,-0.162211,-0.108386,0.980785,-0.815492,-0.544895,-0.28234,-0.318189,-0.212607,0.92388,-0.461939,-0.308658,0.83147,-0.587937,-0.392847,0.707107,-0.691341,-0.461939,0.55557,-0.51328,-0.212607,0.83147,-0.353553,-0.146447,0.92388,-0.653281,-0.270598,0.707107,-0.768177,-0.318189,0.55557,-0.853553,-0.353553,0.382683,-0.906127,-0.37533,0.19509,-0.923879,-0.382683,0.0,-0.18024,-0.074658,0.980785,-0.906127,-0.37533,-0.28234,-0.961939,-0.191341,0.19509,-0.906127,-0.18024,0.382683,-0.980785,-0.19509,0.0,-0.191342,-0.03806,0.980785,-0.961939,-0.191341,-0.28234,-0.37533,-0.074658,0.92388,-0.544895,-0.108386,0.83147,-0.69352,-0.13795,0.707107,-0.815492,-0.162211,0.55557,0.0,0.0,-0.860043];
iron_data_ConstData.skydomeNor = [0.559771,0.0,-0.828639,0.548997,-0.109195,-0.828639,0.380413,-0.075655,-0.92169,0.710135,0.0,-0.704031,0.696493,-0.138524,-0.704031,0.833338,0.0,-0.552751,0.817316,-0.162572,-0.552751,0.924741,0.0,-0.380535,0.90698,-0.180395,-0.380535,0.980987,0.0,-0.193915,0.962157,-0.191382,-0.193915,0.999878,0.0,-0.015015,0.980651,-0.195044,-0.015015,0.200964,0.0,-0.979583,0.197089,-0.039186,-0.979583,0.0,0.0,-1.0,0.858486,0.0,0.512803,0.841975,-0.167455,0.512803,0.38786,0.0,-0.92169,0.358348,-0.148412,-0.92169,0.517136,-0.214209,-0.828639,0.656056,-0.271737,-0.704031,0.76989,-0.318888,-0.552751,0.854366,-0.353862,-0.380535,0.906339,-0.375408,-0.193915,0.923765,-0.382611,-0.015015,0.185644,-0.076907,-0.979583,0.793146,-0.328532,0.512803,0.768914,-0.513749,-0.380535,0.815668,-0.545,-0.193915,0.831355,-0.555498,-0.015015,0.167089,-0.111637,-0.979583,0.713797,-0.476943,0.512803,0.322489,-0.215491,-0.92169,0.465407,-0.310984,-0.828639,0.590442,-0.394513,-0.704031,0.692892,-0.462966,-0.552751,0.395795,-0.395795,-0.828639,0.502121,-0.502121,-0.704031,0.589251,-0.589251,-0.552751,0.65389,-0.65389,-0.380535,0.693655,-0.693655,-0.193915,0.707022,-0.707022,-0.015015,0.142094,-0.142094,-0.979583,0.607044,-0.607044,0.512803,0.27427,-0.27427,-0.92169,0.545,-0.815668,-0.193915,0.555498,-0.831355,-0.015015,0.111637,-0.167089,-0.979583,0.476943,-0.713797,0.512803,0.215491,-0.322489,-0.92169,0.310984,-0.465407,-0.828639,0.394513,-0.590442,-0.704031,0.462966,-0.692892,-0.552751,0.513749,-0.768914,-0.380535,0.214209,-0.517136,-0.828639,0.271737,-0.656056,-0.704031,0.318888,-0.76989,-0.552751,0.353862,-0.854366,-0.380535,0.375408,-0.906339,-0.193915,0.382611,-0.923765,-0.015015,0.076907,-0.185644,-0.979583,0.328532,-0.793146,0.512803,0.148412,-0.358348,-0.92169,0.191382,-0.962157,-0.193915,0.180395,-0.90698,-0.380535,0.195044,-0.980651,-0.015015,0.039186,-0.197089,-0.979583,0.167455,-0.841975,0.512803,0.075655,-0.380413,-0.92169,0.109195,-0.548997,-0.828639,0.138524,-0.696493,-0.704031,0.162572,-0.817316,-0.552751,0.0,-0.710135,-0.704031,0.0,-0.833338,-0.552751,0.0,-0.924741,-0.380535,0.0,-0.980987,-0.193915,0.0,-0.999878,-0.015015,0.0,-0.200964,-0.979583,0.0,-0.858486,0.512803,0.0,-0.38786,-0.92169,0.0,-0.559771,-0.828639,-0.195044,-0.980651,-0.015015,-0.039186,-0.197089,-0.979583,-0.167455,-0.841975,0.512803,-0.075655,-0.380413,-0.92169,-0.109195,-0.548997,-0.828639,-0.138524,-0.696493,-0.704031,-0.162572,-0.817316,-0.552751,-0.180395,-0.90698,-0.380535,-0.191382,-0.962157,-0.193915,-0.318888,-0.76989,-0.552751,-0.353862,-0.854366,-0.380535,-0.375408,-0.906339,-0.193915,-0.382611,-0.923765,-0.015015,-0.076907,-0.185644,-0.979583,-0.328532,-0.793146,0.512803,-0.148412,-0.358348,-0.92169,-0.214209,-0.517136,-0.828639,-0.271737,-0.656056,-0.704031,-0.111637,-0.167089,-0.979583,-0.476943,-0.713797,0.512803,-0.555498,-0.831355,-0.015015,-0.215491,-0.322489,-0.92169,-0.310984,-0.465407,-0.828639,-0.394513,-0.590442,-0.704031,-0.462966,-0.692892,-0.552751,-0.513749,-0.768914,-0.380535,-0.545,-0.815668,-0.193915,-0.589251,-0.589251,-0.552751,-0.65389,-0.65389,-0.380535,-0.693655,-0.693655,-0.193915,-0.707022,-0.707022,-0.015015,-0.142094,-0.142094,-0.979583,-0.607044,-0.607044,0.512803,-0.27427,-0.27427,-0.92169,-0.395795,-0.395795,-0.828639,-0.502121,-0.502121,-0.704031,-0.713797,-0.476943,0.512803,-0.831355,-0.555498,-0.015015,-0.322489,-0.215491,-0.92169,-0.465407,-0.310984,-0.828639,-0.590442,-0.394513,-0.704031,-0.692892,-0.462966,-0.552751,-0.768914,-0.513749,-0.380535,-0.815668,-0.545,-0.193915,-0.167089,-0.111637,-0.979583,-0.854366,-0.353862,-0.380535,-0.906339,-0.375408,-0.193915,-0.923765,-0.382611,-0.015015,-0.185644,-0.076907,-0.979583,-0.793146,-0.328532,0.512803,-0.358348,-0.148412,-0.92169,-0.517136,-0.214209,-0.828639,-0.656056,-0.271737,-0.704031,-0.76989,-0.318888,-0.552751,-0.380413,-0.075655,-0.92169,-0.548997,-0.109195,-0.828639,-0.696493,-0.138524,-0.704031,-0.817316,-0.162572,-0.552751,-0.90698,-0.180395,-0.380535,-0.962157,-0.191382,-0.193915,-0.980651,-0.195044,-0.015015,-0.197089,-0.039186,-0.979583,-0.841975,-0.167455,0.512803,-0.924741,0.0,-0.380535,-0.980987,0.0,-0.193915,-0.999878,0.0,-0.015015,-0.200964,0.0,-0.979583,-0.858486,0.0,0.512803,-0.38786,0.0,-0.92169,-0.559771,0.0,-0.828639,-0.710135,0.0,-0.704031,-0.833338,0.0,-0.552751,-0.548997,0.109195,-0.828639,-0.696493,0.138524,-0.704031,-0.817316,0.162572,-0.552751,-0.90698,0.180395,-0.380535,-0.962157,0.191382,-0.193915,-0.980651,0.195044,-0.015015,-0.197089,0.039186,-0.979583,-0.841975,0.167455,0.512803,-0.380413,0.075655,-0.92169,-0.906339,0.375408,-0.193915,-0.854366,0.353862,-0.380535,-0.923765,0.382611,-0.015015,-0.185644,0.076907,-0.979583,-0.793146,0.328532,0.512803,-0.358348,0.148412,-0.92169,-0.517136,0.214209,-0.828639,-0.656056,0.271737,-0.704031,-0.76989,0.318888,-0.552751,-0.590442,0.394513,-0.704031,-0.692892,0.462966,-0.552751,-0.768914,0.513749,-0.380535,-0.815668,0.545,-0.193915,-0.831355,0.555498,-0.015015,-0.167089,0.111637,-0.979583,-0.713797,0.476943,0.512803,-0.322489,0.215491,-0.92169,-0.465407,0.310984,-0.828639,-0.707022,0.707022,-0.015015,-0.693655,0.693655,-0.193915,-0.142094,0.142094,-0.979583,-0.607044,0.607044,0.512803,-0.27427,0.27427,-0.92169,-0.395795,0.395795,-0.828639,-0.502121,0.502121,-0.704031,-0.589251,0.589251,-0.552751,-0.65389,0.65389,-0.380535,-0.394513,0.590442,-0.704031,-0.310984,0.465407,-0.828639,-0.462966,0.692892,-0.552751,-0.513749,0.768914,-0.380535,-0.545,0.815668,-0.193915,-0.555498,0.831355,-0.015015,-0.111637,0.167089,-0.979583,-0.476943,0.713797,0.512803,-0.215491,0.322489,-0.92169,-0.382611,0.923765,-0.015015,-0.076907,0.185644,-0.979583,-0.328532,0.793146,0.512803,-0.148412,0.358348,-0.92169,-0.214209,0.517136,-0.828639,-0.271737,0.656056,-0.704031,-0.318888,0.76989,-0.552751,-0.353862,0.854366,-0.380535,-0.375408,0.906339,-0.193915,-0.162572,0.817316,-0.552751,-0.138524,0.696493,-0.704031,-0.180395,0.90698,-0.380535,-0.191382,0.962157,-0.193915,-0.195044,0.980651,-0.015015,-0.039186,0.197089,-0.979583,-0.167455,0.841975,0.512803,-0.075655,0.380413,-0.92169,-0.109195,0.548997,-0.828639,0.0,0.200964,-0.979583,0.0,0.858486,0.512803,0.0,0.999878,-0.015015,0.0,0.38786,-0.92169,0.0,0.559771,-0.828639,0.0,0.710135,-0.704031,0.0,0.833338,-0.552751,0.0,0.924741,-0.380535,0.0,0.980987,-0.193915,0.162572,0.817316,-0.552751,0.138524,0.696493,-0.704031,0.180395,0.90698,-0.380535,0.191382,0.962157,-0.193915,0.195044,0.980651,-0.015015,0.039186,0.197089,-0.979583,0.167455,0.841975,0.512803,0.075655,0.380413,-0.92169,0.109195,0.548997,-0.828639,0.328532,0.793146,0.512803,0.148412,0.358348,-0.92169,0.214209,0.517136,-0.828639,0.271737,0.656056,-0.704031,0.318888,0.76989,-0.552751,0.353862,0.854366,-0.380535,0.375408,0.906339,-0.193915,0.382611,0.923765,-0.015015,0.076907,0.185644,-0.979583,0.513749,0.768914,-0.380535,0.545,0.815668,-0.193915,0.555498,0.831355,-0.015015,0.111637,0.167089,-0.979583,0.476943,0.713797,0.512803,0.215491,0.322489,-0.92169,0.310984,0.465407,-0.828639,0.394513,0.590442,-0.704031,0.462966,0.692892,-0.552751,0.395795,0.395795,-0.828639,0.502121,0.502121,-0.704031,0.589251,0.589251,-0.552751,0.65389,0.65389,-0.380535,0.693655,0.693655,-0.193915,0.707022,0.707022,-0.015015,0.142094,0.142094,-0.979583,0.607044,0.607044,0.512803,0.27427,0.27427,-0.92169,0.815668,0.545,-0.193915,0.768914,0.513749,-0.380535,0.831355,0.555498,-0.015015,0.167089,0.111637,-0.979583,0.713797,0.476943,0.512803,0.322489,0.215491,-0.92169,0.465407,0.310984,-0.828639,0.590442,0.394513,-0.704031,0.692892,0.462966,-0.552751,0.517136,0.214209,-0.828639,0.358348,0.148412,-0.92169,0.656056,0.271737,-0.704031,0.76989,0.318888,-0.552751,0.854366,0.353862,-0.380535,0.906339,0.375408,-0.193915,0.923765,0.382611,-0.015015,0.185644,0.076907,-0.979583,0.793146,0.328532,0.512803,0.962157,0.191382,-0.193915,0.90698,0.180395,-0.380535,0.980651,0.195044,-0.015015,0.197089,0.039186,-0.979583,0.841975,0.167486,0.512803,0.380413,0.075655,-0.92169,0.548997,0.109195,-0.828639,0.696493,0.138524,-0.704031,0.817316,0.162572,-0.552751,0.0,0.0,0.999969];
iron_data_MaterialData.uidCounter = 0;
iron_data_MaterialContext.num = 0;
iron_math_RayCaster.VPInv = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_math_RayCaster.PInv = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_math_RayCaster.VInv = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_CameraObject.temp = new iron_math_Vec4();
iron_object_CameraObject.sphereCenter = new iron_math_Vec4();
iron_object_CameraObject.vcenter = new iron_math_Vec4();
iron_object_CameraObject.vup = new iron_math_Vec4();
iron_object_LightObject.cascadeBounds = 1.0;
iron_object_LightObject.m = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_LightObject.eye = new iron_math_Vec4();
iron_object_Transform.temp = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_Transform.q = new iron_math_Quat();
iron_object_Uniforms.biasMat = new iron_math_Mat4(0.5,0.0,0.0,0.5,0.0,-0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);
iron_object_Uniforms.helpMat = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_Uniforms.helpMat2 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_Uniforms.helpMat3 = new iron_math_Mat3(1,0,0,0,1,0,0,0,1);
iron_object_Uniforms.helpVec = new iron_math_Vec4();
iron_object_Uniforms.helpVec2 = new iron_math_Vec4();
iron_object_Uniforms.helpQuat = new iron_math_Quat();
iron_object_Uniforms.defaultFilter = 1;
iron_system_Mouse.buttons = ["left","right","middle"];
iron_system_Keyboard.keys = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","space","backspace","tab","enter","shift","control","alt","escape","delete","up","down","left","right","back",",",".",":",";","<","=",">","?","!","\"","#","$","%","&","_","(",")","*","|","{","}","[","]","~","`","/","\\","@","+","-","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12"];
iron_system_Gamepad.buttonsPS = ["cross","circle","square","triangle","l1","r1","l2","r2","share","options","l3","r3","up","down","left","right","home","touchpad"];
iron_system_Gamepad.buttons = iron_system_Gamepad.buttonsPS;
iron_system_Tween.eases = [iron_system_Tween.easeLinear,iron_system_Tween.easeSineIn,iron_system_Tween.easeSineOut,iron_system_Tween.easeSineInOut,iron_system_Tween.easeQuadIn,iron_system_Tween.easeQuadOut,iron_system_Tween.easeQuadInOut,iron_system_Tween.easeCubicIn,iron_system_Tween.easeCubicOut,iron_system_Tween.easeCubicInOut,iron_system_Tween.easeQuartIn,iron_system_Tween.easeQuartOut,iron_system_Tween.easeQuartInOut,iron_system_Tween.easeQuintIn,iron_system_Tween.easeQuintOut,iron_system_Tween.easeQuintInOut,iron_system_Tween.easeExpoIn,iron_system_Tween.easeExpoOut,iron_system_Tween.easeExpoInOut,iron_system_Tween.easeCircIn,iron_system_Tween.easeCircOut,iron_system_Tween.easeCircInOut,iron_system_Tween.easeBackIn,iron_system_Tween.easeBackOut,iron_system_Tween.easeBackInOut];
iron_system_Tween.anims = [];
iron_system_Tween.registered = false;
kha__$Color_Color_$Impl_$.Black = -16777216;
kha__$Color_Color_$Impl_$.White = -1;
kha__$Color_Color_$Impl_$.Red = -65536;
kha__$Color_Color_$Impl_$.Blue = -16776961;
kha__$Color_Color_$Impl_$.Green = -16711936;
kha__$Color_Color_$Impl_$.Magenta = -65281;
kha__$Color_Color_$Impl_$.Yellow = -256;
kha__$Color_Color_$Impl_$.Cyan = -16711681;
kha__$Color_Color_$Impl_$.Purple = -8388480;
kha__$Color_Color_$Impl_$.Pink = -16181;
kha__$Color_Color_$Impl_$.Orange = -23296;
kha__$Color_Color_$Impl_$.Transparent = 0;
kha__$Color_Color_$Impl_$.invMaxChannelValue = 0.00392156862745098;
kha_Display.displays = [];
kha_Shaders.Gizmo_overlay_fragData0 = "s730:AAAARFhCQ5SPFS8VTZ:eVPwTBhDgZooBAAAAIAIAAAUAAAA0AAAAjAAAANgAAAAMAQAApAEAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAHBwAAOAAAAAEAAAAAAAAAAwAAAAEAAAAHAAAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFKQAAAAQAAAACQAAABiEAADchAQAAAAAABlAAAD8iAQAAAAAABoAAACAQAAAC8AAAVyABAAAAAAAEYSEAAAAAAAOAAACnIAEAAAAAAARgIQAAAAAAACQAAAL7roPi%66D4vuug%AAAAABkAAAVyIBAAAAAAAEYCEAAAAAAANgAABYIgEAAAAAAAAUAAAAAAgD8%AAABU1RBVHQAAAAFAAAAAQAAAAAAAAACAAAAAwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.Gizmo_overlay_vertData0 = "s1710:A2NvbAAAbm9yAAFwb3MAAgEkR2xvYmFscwAAAk4AAAAAACwAAAADA1dWUAAwAAAAQAAAAAQERFhCQ4oPMUHCRmggnwH6Ywzr:UIBAAAAzAQAAAUAAAA0AAAAKAEAAIwBAAD8AQAAUAQAAFJERUbsAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAuAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAIAAABgAAAAcAAAAAAAAAAAAAAAkAAAAAAAAAAsAAAAAgAAAJQAAAAAAAAApAAAADAAAABAAAAAAgAAAKgAAAAAAAAATgCrqwMAAwADAAMAAAAAAAAAAABXVlAAAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAAPBwAAUAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAPDwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAABwgAAFAAAAABAAAAAAAAAAMAAAABAAAABwgAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFJMAgAAQAABAJMAAABZAAAERo4gAAAAAAAHAAAAXwAAA3IQEAAAAAAAXwAAAzIQEAABAAAAXwAAA:IQEAACAAAAZQAAA3IgEAAAAAAAZQAAA3IgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABXIgEAAAAAAARhIQAAAAAAA2AAAFMgAQAAAAAABGEBAAAQAAADYAAAVCABAAAAAAADoQEAACAAAAEAAACBIAEAABAAAARgIQAAAAAABGgiAAAAAAAAAAAAAQAAAIIgAQAAEAAABGAhAAAAAAAEaCIAAAAAAAAQAAABAAAAhCABAAAQAAAEYCEAAAAAAARoIgAAAAAAACAAAAEAAABxIAEAAAAAAARgIQAAEAAABGAhAAAQAAAEQAAAUSABAAAAAAAAoAEAAAAAAAOAAAB3IgEAABAAAABgAQAAAAAABGAhAAAQAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAABQAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAAGAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAADAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAQAAAA%AAABU1RBVHQAAAATAAAAAgAAAAAAAAAGAAAADAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.Material2_mesh_fragData0 = "s1668:AAAARFhCQ3cES8ZvNS5bF1oslVECsmkBAAAA4AQAAAUAAAA0AAAAjAAAAPAAAABUAQAAZAQAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAAPCwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAHBwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAPCwAAVEVYQ09PUkQAq6urT1NHTlwAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAADwAAAFAAAAACAAAAAAAAAAMAAAACAAAADwAAAFNWX1RhcmdldACrq1NIRFIIAwAAQAAAAMIAAABiEAADshAQAAAAAABiEAADchAQAAEAAABiEAADshAQAAIAAABlAAAD8iAQAAAAAABlAAAD8iAQAAEAAABlAAAD8iAQAAIAAABoAAACAwAAABAAAAcSABAAAAAAAEYSEAABAAAARhIQAAEAAABEAAAFEgAQAAAAAAAKABAAAAAAADgAAAdyABAAAAAAAAYAEAAAAAAAJhkQAAEAAAAAAAAJggAQAAAAAAAqABCAgQAAAAAAAAAaABCAgQAAAAAAAAAAAAAIggAQAAAAAAAKABCAgQAAAAAAAAA6ABAAAAAAAA4AAAdyABAAAAAAAEYCEAAAAAAA9g8QAAAAAAAAAAALMgAQAAEAAABmChCAwQAAAAAAAAACQAAAAACAPwAAgD8AAAAAAAAAAB0AAApyABAAAgAAAEYCEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPkgAQAAAAAABWCRAAAgAAAAJAAAAAAIA:AAAAAAAAAAAAAIA:AkAAAAAAgL8AAAAAAAAAAAAAgL84AAAHkgAQAAAAAAAGDBAAAAAAAAYEEAABAAAANwAACTIgEAAAAAAABgAQAAIAAACWBRAAAAAAAMYAEAAAAAAANgAACMIgEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA2AAAI8iAQAAEAAAACQAAAzcxMP83MTD:NzEw:AAB:Qw4AAAcyABAAAAAAAEYQEAACAAAA9h8QAAIAAAAyAAAPMgAQAAAAAABGABAAAAAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAOAAAHwgAQAAAAAAAGFBAAAAAAAPYfEAAAAAAAMgAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAAA:AAAAPwJAAAAAAAAAAAAAAAAAAD8AAAA:AAAACDIgEAACAAAA5goQgEEAAAAAAAAARgAQAAAAAAA2AAAIwiAQAAIAAAACQAAAAAAAAAAAAAAAAAAAAAAAAD4AAAFTVEFUdAAAABQAAAADAAAAAAAAAAYAAAAOAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.Material_mesh_fragData0 = "s1700:AAAARFhCQ2laoq2G6sBkXus96XZBGlgBAAAA%AQAAAUAAAA0AAAAjAAAAAgBAABsAQAAfAQAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOdAAAAAQAAAAIAAAAaAAAAAAAAAAAAAAAAwAAAAAAAAAPCwAAaAAAAAEAAAAAAAAAAwAAAAEAAAADAAAAaAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAaAAAAAMAAAAAAAAAAwAAAAMAAAAPCwAAVEVYQ09PUkQAq6urT1NHTlwAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAADwAAAFAAAAACAAAAAAAAAAMAAAACAAAADwAAAFNWX1RhcmdldACrq1NIRFIIAwAAQAAAAMIAAABiEAADshAQAAAAAABiEAADchAQAAIAAABiEAADshAQAAMAAABlAAAD8iAQAAAAAABlAAAD8iAQAAEAAABlAAAD8iAQAAIAAABoAAACAwAAABAAAAcSABAAAAAAAEYSEAACAAAARhIQAAIAAABEAAAFEgAQAAAAAAAKABAAAAAAADgAAAdyABAAAAAAAAYAEAAAAAAAJhkQAAIAAAAAAAAJggAQAAAAAAAqABCAgQAAAAAAAAAaABCAgQAAAAAAAAAAAAAIggAQAAAAAAAKABCAgQAAAAAAAAA6ABAAAAAAAA4AAAdyABAAAAAAAEYCEAAAAAAA9g8QAAAAAAAAAAALMgAQAAEAAABmChCAwQAAAAAAAAACQAAAAACAPwAAgD8AAAAAAAAAAB0AAApyABAAAgAAAEYCEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPkgAQAAAAAABWCRAAAgAAAAJAAAAAAIA:AAAAAAAAAAAAAIA:AkAAAAAAgL8AAAAAAAAAAAAAgL84AAAHkgAQAAAAAAAGDBAAAAAAAAYEEAABAAAANwAACTIgEAAAAAAABgAQAAIAAACWBRAAAAAAAMYAEAAAAAAANgAACMIgEAAAAAAAAkAAAAAAAAAAAAAAzczMPgAAAAA2AAAI8iAQAAEAAAACQAAAidJePonSXj6J0l4%cf1:Qw4AAAcyABAAAAAAAEYQEAADAAAA9h8QAAMAAAAyAAAPMgAQAAAAAABGABAAAAAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAOAAAHwgAQAAAAAAAGFBAAAAAAAPYfEAAAAAAAMgAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAAA:AAAAPwJAAAAAAAAAAAAAAAAAAD8AAAA:AAAACDIgEAACAAAA5goQgEEAAAAAAAAARgAQAAAAAAA2AAAIwiAQAAIAAAACQAAAAAAAAAAAAAAAAAAAAAAAAD4AAAFTVEFUdAAAABQAAAADAAAAAAAAAAYAAAAOAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.Material_mesh_vertData0 = "s2182:A25vcgAAcG9zAAF0ZXgAAgEkR2xvYmFscwAABHRleFVucGFjawAAAAAABAAAAAEBTgAQAAAALAAAAAMDV1ZQAEAAAABAAAAABARwcmV2V1ZQAIAAAABAAAAABAREWEJDkNmfAdeh8eupm8wl%dfQDgEAAAAIBgAABQAAADQAAAB8AQAA4AEAAIACAACMBQAAUkRFRkABAAABAAAASAAAAAEAAAAcAAAAAAT%:wABAAAMAQAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAkR2xvYmFscwCrq6s8AAAABAAAAGAAAADAAAAAAAAAAAAAAADAAAAAAAAAAAQAAAACAAAAzAAAAAAAAADcAAAAEAAAACwAAAACAAAA4AAAAAAAAADwAAAAQAAAAEAAAAACAAAA9AAAAAAAAAAEAQAAgAAAAEAAAAACAAAA9AAAAAAAAAB0ZXhVbnBhY2sAq6sAAAMAAQABAAAAAAAAAAAATgCrqwMAAwADAAMAAAAAAAAAAABXVlAAAwADAAQABAAAAAAAAAAAAHByZXZXVlAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR05cAAAAAwAAAAgAAABQAAAAAAAAAAAAAAADAAAAAAAAAAMDAABQAAAAAQAAAAAAAAADAAAAAQAAAA8PAABQAAAAAgAAAAAAAAADAAAAAgAAAAMDAABURVhDT09SRACrq6tPU0dOmAAAAAUAAAAIAAAAgAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAgAAAAAEAAAAAAAAAAwAAAAEAAAADDAAAgAAAAAIAAAAAAAAAAwAAAAIAAAAHCAAAgAAAAAMAAAAAAAAAAwAAAAMAAAAPAAAAiQAAAAAAAAABAAAAAwAAAAQAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUgQDAABAAAEAwQAAAFkAAARGjiAAAAAAAAwAAABfAAADMhAQAAAAAABfAAAD8hAQAAEAAABfAAADMhAQAAIAAABlAAAD8iAQAAAAAABlAAADMiAQAAEAAABlAAADciAQAAIAAABlAAAD8iAQAAMAAABnAAAE8iAQAAQAAAABAAAAaAAAAgMAAAA2AAAFcgAQAAAAAABGEhAAAQAAADYAAAWCABAAAAAAAAFAAAAAAIA:EQAACBIgEAAAAAAARg4QAAAAAABGjiAAAAAAAAgAAAARAAAIIiAQAAAAAABGDhAAAAAAAEaOIAAAAAAACQAAABEAAAhCIBAAAAAAAEYOEAAAAAAARo4gAAAAAAAKAAAAEQAACIIgEAAAAAAARg4QAAAAAABGjiAAAAAAAAsAAAA4AAAIMiAQAAEAAABGEBAAAgAAAAaAIAAAAAAAAAAAADYAAAUyABAAAQAAAEYQEAAAAAAANgAABUIAEAABAAAAOhAQAAEAAAAQAAAIEgAQAAIAAABGAhAAAQAAAEaCIAAAAAAAAQAAABAAAAgiABAAAgAAAEYCEAABAAAARoIgAAAAAAACAAAAEAAACEIAEAACAAAARgIQAAEAAABGgiAAAAAAAAMAAAAQAAAHEgAQAAEAAABGAhAAAgAAAEYCEAACAAAARAAABRIAEAABAAAACgAQAAEAAAA4AAAHciAQAAIAAAAGABAAAQAAAEYCEAACAAAAEQAACBIAEAABAAAARg4QAAAAAABGjiAAAAAAAAQAAAARAAAIIgAQAAEAAABGDhAAAAAAAEaOIAAAAAAABQAAABEAAAhCABAAAQAAAEYOEAAAAAAARo4gAAAAAAAGAAAAEQAACIIAEAABAAAARg4QAAAAAABGjiAAAAAAAAcAAAA2AAAF8iAQAAMAAABGDhAAAQAAADYAAAWyIBAABAAAAEYMEAABAAAAAAAABxIAEAAAAAAAOgAQAAEAAAAqABAAAQAAADgAAAdCIBAABAAAAAoAEAAAAAAAAUAAAAAAAD8%AAABU1RBVHQAAAAYAAAAAwAAAAAAAAAIAAAAEQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.armdefault_mesh_fragData0 = "s1668:AAAARFhCQ0dxVB53Lgmvm%6RW0s5MUkBAAAA4AQAAAUAAAA0AAAAjAAAAPAAAABUAQAAZAQAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAAPCwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAHBwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAPCwAAVEVYQ09PUkQAq6urT1NHTlwAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAADwAAAFAAAAACAAAAAAAAAAMAAAACAAAADwAAAFNWX1RhcmdldACrq1NIRFIIAwAAQAAAAMIAAABiEAADshAQAAAAAABiEAADchAQAAEAAABiEAADshAQAAIAAABlAAAD8iAQAAAAAABlAAAD8iAQAAEAAABlAAAD8iAQAAIAAABoAAACAwAAABAAAAcSABAAAAAAAEYSEAABAAAARhIQAAEAAABEAAAFEgAQAAAAAAAKABAAAAAAADgAAAdyABAAAAAAAAYAEAAAAAAAJhkQAAEAAAAAAAAJggAQAAAAAAAqABCAgQAAAAAAAAAaABCAgQAAAAAAAAAAAAAIggAQAAAAAAAKABCAgQAAAAAAAAA6ABAAAAAAAA4AAAdyABAAAAAAAEYCEAAAAAAA9g8QAAAAAAAAAAALMgAQAAEAAABmChCAwQAAAAAAAAACQAAAAACAPwAAgD8AAAAAAAAAAB0AAApyABAAAgAAAEYCEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPkgAQAAAAAABWCRAAAgAAAAJAAAAAAIA:AAAAAAAAAAAAAIA:AkAAAAAAgL8AAAAAAAAAAAAAgL84AAAHkgAQAAAAAAAGDBAAAAAAAAYEEAABAAAANwAACTIgEAAAAAAABgAQAAIAAACWBRAAAAAAAMYAEAAAAAAANgAACMIgEAAAAAAAAkAAAAAAAAAAAAAAAACAPgAAAAA2AAAI8iAQAAEAAAACQAAAzcxMP83MTD:NzEw:AIB:Qw4AAAcyABAAAAAAAEYQEAACAAAA9h8QAAIAAAAyAAAPMgAQAAAAAABGABAAAAAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAOAAAHwgAQAAAAAAAGFBAAAAAAAPYfEAAAAAAAMgAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAAA:AAAAPwJAAAAAAAAAAAAAAAAAAD8AAAA:AAAACDIgEAACAAAA5goQgEEAAAAAAAAARgAQAAAAAAA2AAAIwiAQAAIAAAACQAAAAAAAAAAAAAAAAAAAAAAAAD4AAAFTVEFUdAAAABQAAAADAAAAAAAAAAYAAAAOAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.armdefault_mesh_vertData0 = "s1940:Am5vcgAAcG9zAAEBJEdsb2JhbHMAAANOAAAAAAAsAAAAAwNXVlAAMAAAAEAAAAAEBHByZXZXVlAAcAAAAEAAAAAEBERYQkN32sEPrFOFzR1U%2bHASRHAQAAAGwFAAAFAAAANAAAAEgBAACUAQAAHAIAAPAEAABSREVGDAEAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAANgAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAADAAAAYAAAALAAAAAAAAAAAAAAAKgAAAAAAAAALAAAAAIAAACsAAAAAAAAALwAAAAwAAAAQAAAAAIAAADAAAAAAAAAANAAAABwAAAAQAAAAAIAAADAAAAAAAAAAE4Aq6sDAAMAAwADAAAAAAAAAAAAV1ZQAAMAAwAEAAQAAAAAAAAAAABwcmV2V1ZQAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAOAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAVEVYQ09PUkQAq6urT1NHToAAAAAEAAAACAAAAGgAAAAAAAAAAAAAAAMAAAAAAAAADwAAAGgAAAABAAAAAAAAAAMAAAABAAAABwgAAGgAAAACAAAAAAAAAAMAAAACAAAADwAAAHEAAAAAAAAAAQAAAAMAAAADAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFLMAgAAQAABALMAAABZAAAERo4gAAAAAAALAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAZQAAA:IgEAAAAAAAZQAAA3IgEAABAAAAZQAAA:IgEAACAAAAZwAABPIgEAADAAAAAQAAAGgAAAIDAAAANgAABXIAEAAAAAAARhIQAAEAAAA2AAAFggAQAAAAAAABQAAAAACAPxEAAAgSIBAAAAAAAEYOEAAAAAAARo4gAAAAAAAHAAAAEQAACCIgEAAAAAAARg4QAAAAAABGjiAAAAAAAAgAAAARAAAIQiAQAAAAAABGDhAAAAAAAEaOIAAAAAAACQAAABEAAAiCIBAAAAAAAEYOEAAAAAAARo4gAAAAAAAKAAAANgAABTIAEAABAAAARhAQAAAAAAA2AAAFQgAQAAEAAAA6EBAAAQAAABAAAAgSABAAAgAAAEYCEAABAAAARoIgAAAAAAAAAAAAEAAACCIAEAACAAAARgIQAAEAAABGgiAAAAAAAAEAAAAQAAAIQgAQAAIAAABGAhAAAQAAAEaCIAAAAAAAAgAAABAAAAcSABAAAQAAAEYCEAACAAAARgIQAAIAAABEAAAFEgAQAAEAAAAKABAAAQAAADgAAAdyIBAAAQAAAAYAEAABAAAARgIQAAIAAAARAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAwAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAAEAAAAEQAACEIAEAABAAAARg4QAAAAAABGjiAAAAAAAAUAAAARAAAIggAQAAEAAABGDhAAAAAAAEaOIAAAAAAABgAAADYAAAXyIBAAAgAAAEYOEAABAAAANgAABbIgEAADAAAARgwQAAEAAAAAAAAHEgAQAAAAAAA6ABAAAQAAACoAEAABAAAAOAAAB0IgEAADAAAACgAQAAAAAAABQAAAAAAAPz4AAAFTVEFUdAAAABcAAAADAAAAAAAAAAYAAAAQAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.armdefault_voxel_fragData0 = "s1034:AAF2b3hlbHMAAABEWEJDHUAKG%m7S0Y0lXcLIp2JpAEAAAD8AgAABQAAADQAAADIAAAA:AAAAAwBAABgAgAAUkRFRowAAAAAAAAAAAAAAAEAAAA8AAAAAAX::wABAABjAAAAUkQxMTwAAAAYAAAAIAAAACgAAAAkAAAADAAAAAAAAABcAAAABAAAAAUAAAAIAAAA:::::wAAAAABAAAAAAAAAHZveGVscwBNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDEwLjEAq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAcHAABURVhDT09SRACrq6tPU0dOCAAAAAAAAAAIAAAAU0hFWEwBAABQAAAAUwAAAGoIAAGcKAAEAOARAAAAAABVVQAAYhAAA3IQEAAAAAAAaAAAAgEAAAAxAAALcgAQAAAAAAACQAAAAACAPwAAgD8AAIA:AAAAACYZEICBAAAAAAAAADwAAAcSABAAAAAAABoAEAAAAAAACgAQAAAAAAA8AAAHEgAQAAAAAAAqABAAAAAAAAoAEAAAAAAAHwAEAwoAEAAAAAAAPgAAARUAAAEyAAAP8gAQAAAAAABGGhAAAAAAAAJAAAAAAAA:AAAAPwAAAD8AAAA:AkAAAAAAAD8AAAA:AAAAPwAAAD84AAAK8gAQAAAAAABGDhAAAAAAAAJAAAAAAIBDAACAQwAAgEMAAIBDHAAABfIAEAAAAAAARg4QAAAAAACkAAAK8uARAAAAAABGDhAAAAAAAAJAAAAAAIA:AACAPwAAgD8AAIA:PgAAAVNUQVSUAAAACwAAAAEAAAAAAAAAAQAAAAMAAAAAAAAAAgAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAA";
kha_Shaders.armdefault_voxel_geomData0 = "s1503:AAAARFhCQ8Omjws48jM6S0bHy9%aUV4BAAAAZAQAAAUAAAA0AAAAoAAAANQAAAA0AQAAyAMAAFJERUZkAAAAAAAAAAAAAAAAAAAAPAAAAAAFU0cAAQAAPAAAAFJEMTE8AAAAGAAAACAAAAAoAAAAJAAAAAwAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciAxMC4xAElTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAEAAAADAAAAAAAAAA8HAABTVl9QT1NJVElPTgBPU0c1WAAAAAIAAAAIAAAAAAAAAEAAAAAAAAAAAAAAAAMAAAAAAAAABwgAAAAAAABJAAAAAAAAAAEAAAADAAAAAQAAAA8AAABURVhDT09SRABTVl9QT1NJVElPTgCrq6tTSEVYjAIAAFAAAgCjAAAAaggAAWEAAAXyECAAAwAAAAAAAAABAAAAaAAAAgMAAABdGAABjwAAAwAAEQAAAAAAXCgAAWUAAANyIBAAAAAAAGcAAATyIBAAAQAAAAEAAABeAAACAwAAAAAAAAryABAAAAAAACYUIIBBAAAAAAAAAAAAAAAmFCAAAQAAAAAAAAAAAAAK8gAQAAEAAACWEiCAQQAAAAAAAAAAAAAAlhIgAAIAAAAAAAAAOAAAB:IAEAACAAAARg4QAAAAAABGDhAAAQAAADIAAAryABAAAAAAADYIEAAAAAAA5gMQAAEAAABGDhCAQQAAAAIAAAAxAAAJ8gAQAAAAAABGDhCAgQAAAAAAAAD2ABCAgQAAAAAAAAABAAAHMgAQAAAAAADWBRAAAAAAAIYAEAAAAAAANgAABUIAEAAAAAAAAUAAAAAAAAAwAAABIQAAB4IAEAAAAAAAKgAQAAAAAAABQAAAAwAAAAMABAM6ABAAAAAAAB8ABAMKABAAAAAAADYAAAcyABAAAQAAAEYQoAAqABAAAAAAAAAAAAASAAABHwAEAxoAEAAAAAAANgAABxIAEAABAAAAGhCgACoAEAAAAAAAAAAAABIAAAE2AAAHEgAQAAEAAAAKEKAAKgAQAAAAAAAAAAAAFQAAATYAAAciABAAAQAAACoQoAAqABAAAAAAAAAAAAAVAAABNgAAB3IgEAAAAAAARhKgACoAEAAAAAAAAAAAADYAAAUyIBAAAQAAAEYAEAABAAAANgAACMIgEAABAAAAAkAAAAAAAAAAAAAAAAAAAAAAgD91AAADAAARAAAAAAAeAAAHQgAQAAAAAAAqABAAAAAAAAFAAAABAAAAFgAAAT4AAAFTVEFUlAAAABsAAAADAAAAAAAAAAMAAAAFAAAAAgAAAAEAAAADAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAwAAAAUAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.armdefault_voxel_vertData0 = "s1118:AXBvcwAAASRHbG9iYWxzAAABVwAAAAAAQAAAAAQERFhCQ3fkiWll7PceGW9yo1DONisBAAAAKAMAAAUAAAA0AAAAPAEAAHABAACkAQAAjAIAAFJERUYAAQAAAQAAAGgAAAABAAAAPAAAAAAF:v8AAQAA2AAAAFJEMTE8AAAAGAAAACAAAAAoAAAAJAAAAAwAAAAAAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAkR2xvYmFscwCrq6tcAAAAAQAAAIAAAABAAAAAAAAAAAAAAACoAAAAAAAAAEAAAAACAAAAtAAAAAAAAAD:::::AAAAAP::::8AAAAAVwBmbG9hdDR4NACrAwADAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciAxMC4xAElTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8HAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAABAAAAAwAAAAAAAAAPAAAAU1ZfUE9TSVRJT04AU0hFWOAAAABQAAEAOAAAAGoIAAFZAAAERo4gAAAAAAADAAAAXwAAA3IQEAAAAAAAZwAABPIgEAAAAAAAAQAAAGgAAAIBAAAANgAABYIgEAAAAAAAAUAAAAAAgD82AAAFcgAQAAAAAABGEhAAAAAAADYAAAWCABAAAAAAAAFAAAAAAIA:EQAACBIgEAAAAAAARg4QAAAAAABGjiAAAAAAAAAAAAARAAAIIiAQAAAAAABGDhAAAAAAAEaOIAAAAAAAAQAAABEAAAhCIBAAAAAAAEYOEAAAAAAARo4gAAAAAAACAAAAPgAAAVNUQVSUAAAABwAAAAEAAAAAAAAAAgAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.bloom_pass_fragData0 = "s947:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkNajveFMjfDGGzcT06e:shHAQAAALACAAAFAAAANAAAANwAAAAQAQAARAEAADQCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLoAAAAQAAAADoAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAAzIQEAAAAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABIAAAL8gAQAAAAAABGEBAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAABAAAAqCABAAAAAAAEYCEAAAAAAAAkAAANCzWT5ZFzc:mN2TPQAAAAAxAAAHggAQAAAAAAABQAAAAADAPzoAEAAAAAAAAQAAB3IgEAAAAAAARgIQAAAAAAD2DxAAAAAAADYAAAWCIBAAAAAAAAFAAAAAAAAAPgAAAVNUQVR0AAAABgAAAAEAAAAAAAAAAgAAAAIAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.blur_adaptive_pass_fragData0 = "s2083:AAVfZ2J1ZmZlcjBfc2FtcGxlcgAAX3RleF9zYW1wbGVyAAFnYnVmZmVyMAAAdGV4AAEkR2xvYmFscwAAAWRpckludgAAAAAACAAAAAIBRFhCQ:VCwqRaZkesrViyVHem5DQBAAAAzAUAAAUAAAA0AAAArAEAAOABAAAUAgAAUAUAAFJERUZwAQAAAQAAAPQAAAAFAAAAHAAAAAAE::8AAQAAPAEAALwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAzgAAAAMAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAADbAAAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAAOQAAAACAAAABQAAAAQAAAD:::::AQAAAAEAAAAMAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfZ2J1ZmZlcjBfc2FtcGxlcgBfdGV4X3NhbXBsZXIAZ2J1ZmZlcjAAdGV4ACRHbG9iYWxzAKurq%gAAAABAAAADAEAABAAAAAAAAAAAAAAACQBAAAAAAAACAAAAAIAAAAsAQAAAAAAAGRpckludgCrAQADAAEAAgAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFI0AwAAQAAAAM0AAABZAAAERo4gAAAAAAABAAAAWgAAAwBgEAAAAAAAWgAAAwBgEAABAAAAWBgABABwEAAAAAAAVVUAAFgYAAQAcBAAAQAAAFVVAABiEAADMhAQAAAAAABlAAAD8iAQAAAAAABoAAACBAAAAEgAAAvyABAAAAAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAHQAABxIAEAAAAAAAKgAQAAAAAAABQAAAzcxMPx8ABAMKABAAAAAAAEgAAAvyABAAAQAAAEYQEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAEgAAATYAAAhyABAAAQAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAR8AAAMKABAAAAAAADIAAA3yABAAAAAAAEaEIAAAAAAAAAAAAAJAAAAAACBAAAAgQAAAwD8AAMA:RhQQAAAAAABIAAAL8gAQAAIAAABGABAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAEgAAAvyABAAAAAAAOYKEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAAAAAB3IAEAAAAAAARgIQAAAAAABGAhAAAgAAAEgAAAvyABAAAgAAAEYQEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAAAAAB3IAEAAAAAAARgIQAAAAAABGAhAAAgAAADIAAA7yABAAAgAAAEaEIIBBAAAAAAAAAAAAAAACQAAAAADAPwAAwD8AACBAAAAgQEYUEAAAAAAASAAAC:IAEAADAAAARgAQAAIAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAAAAAHcgAQAAAAAABGAhAAAAAAAEYCEAADAAAASAAAC:IAEAACAAAA5goQAAIAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAAAAAHcgAQAAAAAABGAhAAAAAAAEYCEAACAAAAOAAACnIAEAABAAAARgIQAAAAAAACQAAAzcxMPs3MTD7NzEw%AAAAABUAAAE2AAAFciAQAAAAAABGAhAAAQAAADYAAAWCIBAAAAAAAAFAAAAAAAAAPgAAAVNUQVR0AAAAGAAAAAQAAAAAAAAAAgAAAAgAAAAAAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.blur_edge_pass_fragData0 = "s13251:AAVfZ2J1ZmZlcjBfc2FtcGxlcgAAX3RleF9zYW1wbGVyAAFnYnVmZmVyMAAAdGV4AAEkR2xvYmFscwAAAWRpckludgAAAAAACAAAAAIBRFhCQ6asAbvxZssaHmdcanwduC8BAAAAhCYAAAUAAAA0AAAArAEAAOABAAAUAgAACCYAAFJERUZwAQAAAQAAAPQAAAAFAAAAHAAAAAAE::8AAQAAPAEAALwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAzgAAAAMAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAADbAAAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAAOQAAAACAAAABQAAAAQAAAD:::::AQAAAAEAAAAMAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfZ2J1ZmZlcjBfc2FtcGxlcgBfdGV4X3NhbXBsZXIAZ2J1ZmZlcjAAdGV4ACRHbG9iYWxzAKurq%gAAAABAAAADAEAABAAAAAAAAAAAAAAACQBAAAAAAAACAAAAAIAAAAsAQAAAAAAAGRpckludgCrAQADAAEAAgAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAQ4AAFNWX1RhcmdldACrq1NIRFLsIwAAQAAAAPsIAABZAAAERo4gAAAAAAABAAAAWgAAAwBgEAAAAAAAWgAAAwBgEAABAAAAWBgABABwEAAAAAAAVVUAAFgYAAQAcBAAAQAAAFVVAABiEAADMhAQAAAAAABlAAADEiAQAAAAAABoAAACBgAAAEgAAAvyABAAAAAAAEYQEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAAAAACGIAEAAAAAAABhEQAAAAAAAGgSAAAAAAAAAAAABIAAAL8gAQAAEAAACWBRAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAEgAAAvyABAAAgAAAJYFEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAHQAACmIAEAAAAAAABgEQAAEAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAA9iABAAAAAAAFYGEAAAAAAAAkAAAAAAAAAAAIA:AACAPwAAAAACQAAAAAAAAAAAgL8AAIC:AAAAAAAAAAviABAAAgAAAAYBEIDBAAAAAQAAAAJAAAAAAAAAAACAPwAAgD8AAIA:OAAAB2IAEAAAAAAAVgYQAAAAAACmCxAAAgAAAAAAAAhCABAAAwAAABoAEIDBAAAAAQAAABoAEAACAAAAHQAAB4IAEAAAAAAAKgAQAAMAAAABQAAAAAAAADcAAAkyABAAAwAAAPYPEAAAAAAARgAQAAEAAACWBRAAAAAAABAAAAciABAAAAAAAEYCEAADAAAARgIQAAMAAABEAAAFIgAQAAAAAAAaABAAAAAAADgAAAfiABAAAAAAAFYFEAAAAAAABgkQAAMAAABIAAAL8gAQAAEAAABGEBAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAB0AAArCABAAAQAAAAYEEAABAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAEAAACmDhAAAQAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAAL4gAQAAIAAAAGARCAwQAAAAEAAAACQAAAAAAAAAAAgD8AAIA:AACAPzgAAAfCABAAAQAAAKYOEAABAAAApg4QAAIAAAAAAAAIQgAQAAMAAAAaABCAwQAAAAEAAAAaABAAAgAAAB0AAAciABAAAgAAACoAEAADAAAAAUAAAAAAAAA3AAAJMgAQAAMAAABWBRAAAgAAAEYAEAABAAAA5goQAAEAAAAQAAAHEgAQAAEAAABGAhAAAwAAAEYCEAADAAAARAAABRIAEAABAAAACgAQAAEAAAA4AAAHcgAQAAEAAAAGABAAAQAAAEYCEAADAAAAEAAAByIAEAAAAAAAlgcQAAAAAABGAhAAAQAAAB0AAAciABAAAAAAABoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAaABAAAAAAAAFAAAC7ewA%OAAAB0IAEAAAAAAAKgAQAAAAAAAKABAAAgAAADIAAAkSABAAAAAAAAoAEAAAAAAAAUAAAPTABz4qABAAAAAAAAAAAAnCABAAAAAAAAYUEAAAAAAABoQggEEAAAAAAAAAAAAAAEgAAAvyABAAAgAAAOYKEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAADAAAA5goQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD%IAEAAAAAAAVg4QAAAAAAACQAAAAAAAAFgehD4AAIA:AACAPwJAAAAAAAAA9MAHPgAAgL8AAIC:AAAAC%IAEAADAAAABgEQgMEAAAACAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAADAAAAAAAACEIAEAAEAAAAGgAQgMEAAAACAAAAGgAQAAMAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAgAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAACAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAu3sAPjIAAAkSABAAAAAAAAoAEAADAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAAyAAANwgAQAAAAAAAGhCAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAABAAAAAQAYUEAAAAAAASAAAC:IAEAACAAAA5goQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAACAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAAL4gAQAAMAAAAGARCAwQAAAAIAAAACQAAAAAAAAAAAgD8AAIA:AACAPzgAAAfCABAAAAAAAKYOEAAAAAAApg4QAAMAAAAAAAAIQgAQAAQAAAAaABCAwQAAAAIAAAAaABAAAwAAAB0AAAeCABAAAQAAACoAEAAEAAAAAUAAAAAAAAA3AAAJMgAQAAQAAAD2DxAAAQAAAEYAEAACAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABAAAAEYCEAAEAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAAIAAACmChAAAAAAAEYCEAAEAAAAEAAAB0IAEAAAAAAARgIQAAIAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAW2tk9MgAACRIAEAAAAAAACgAQAAMAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAADIAAA7CABAAAAAAAAaEIIBBAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAABAAAAAQAYUEAAAAAAASAAAC:IAEAACAAAA5goQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAACAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAAL4gAQAAMAAAAGARCAwQAAAAIAAAACQAAAAAAAAAAAgD8AAIA:AACAPzgAAAfCABAAAAAAAKYOEAAAAAAApg4QAAMAAAAAAAAIQgAQAAQAAAAaABCAwQAAAAIAAAAaABAAAwAAAB0AAAeCABAAAQAAACoAEAAEAAAAAUAAAAAAAAA3AAAJMgAQAAQAAAD2DxAAAQAAAEYAEAACAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABAAAAEYCEAAEAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAAIAAACmChAAAAAAAEYCEAAEAAAAEAAAB0IAEAAAAAAARgIQAAIAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAW2tk9MgAACRIAEAAAAAAACgAQAAMAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAADIAAA3yABAAAgAAAEaEIAAAAAAAAAAAAAJAAAAAAEBAAABAQAAAgEAAAIBARhQQAAAAAABIAAAL8gAQAAMAAABGABAAAgAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAADAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAALcgAQAAQAAABGABCAwQAAAAMAAAACQAAAAACAPwAAgD8AAIA:AAAAADgAAAfCABAAAAAAAKYOEAAAAAAAVgkQAAQAAAAAAAAIQgAQAAQAAAAaABCAwQAAAAMAAAAKABAABAAAAB0AAAeCABAAAQAAACoAEAAEAAAAAUAAAAAAAAA3AAAJMgAQAAQAAAD2DxAAAQAAAEYAEAADAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABAAAAEYCEAAEAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAAMAAACmChAAAAAAAEYCEAAEAAAAEAAAB0IAEAAAAAAARgIQAAMAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAAD8b6U9SAAAC:IAEAADAAAARgAQAAIAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAyAAAJEgAQAAAAAAAKABAAAwAAACoAEAAAAAAACgAQAAAAAAAAAAAHIgAQAAAAAAAqABAAAAAAABoAEAAAAAAAMgAADvIAEAADAAAARoQggEEAAAAAAAAAAAAAAAJAAAAAAEBAAABAQAAAgEAAAIBARhQQAAAAAABIAAAL8gAQAAQAAABGABAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAAEAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAALcgAQAAUAAABGABCAwQAAAAQAAAACQAAAAACAPwAAgD8AAIA:AAAAADgAAAfCABAAAAAAAKYOEAAAAAAAVgkQAAUAAAAAAAAIQgAQAAUAAAAaABCAwQAAAAQAAAAKABAABQAAAB0AAAeCABAAAQAAACoAEAAFAAAAAUAAAAAAAAA3AAAJMgAQAAUAAAD2DxAAAQAAAEYAEAAEAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABQAAAEYCEAAFAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAAQAAACmChAAAAAAAEYCEAAFAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAAD8b6U9SAAAC:IAEAAEAAAARgAQAAMAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAyAAAJEgAQAAAAAAAKABAABAAAACoAEAAAAAAACgAQAAAAAAAAAAAHIgAQAAAAAAAqABAAAAAAABoAEAAAAAAASAAAC:IAEAAEAAAA5goQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAIAAADmChAAAgAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAAEAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAAL4gAQAAIAAAAGARCAwQAAAAQAAAACQAAAAAAAAAAAgD8AAIA:AACAPzgAAAfCABAAAAAAAKYOEAAAAAAApg4QAAIAAAAAAAAIQgAQAAUAAAAaABCAwQAAAAQAAAAaABAAAgAAAB0AAAeCABAAAQAAACoAEAAFAAAAAUAAAAAAAAA3AAAJMgAQAAUAAAD2DxAAAQAAAEYAEAAEAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABQAAAEYCEAAFAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAH4gAQAAIAAACmChAAAAAAAAYJEAAFAAAAEAAAB0IAEAAAAAAAlgcQAAIAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAABAE2E9MgAACRIAEAAAAAAACgAQAAIAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAAEgAAAvyABAAAgAAAOYKEAADAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAADAAAA5goQAAMAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC%IAEAADAAAABgEQgMEAAAACAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAADAAAAAAAACEIAEAAEAAAAGgAQgMEAAAACAAAAGgAQAAMAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAgAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAACAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAQBNhPTIAAAkSABAAAAAAAAoAEAADAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAAyAAAN8gAQAAIAAABGhCAAAAAAAAAAAAACQAAAAACgQAAAoEAAAMBAAADAQEYUEAAAAAAASAAAC:IAEAADAAAARgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAwAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC3IAEAAEAAAARgAQgMEAAAADAAAAAkAAAAAAgD8AAIA:AACAPwAAAAA4AAAHwgAQAAAAAACmDhAAAAAAAFYJEAAEAAAAAAAACEIAEAAEAAAAGgAQgMEAAAADAAAACgAQAAQAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAwAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAADAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAADAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAbCQJPUgAAAvyABAAAwAAAEYAEAACAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAMgAACRIAEAAAAAAACgAQAAMAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAADIAAA7yABAAAwAAAEaEIIBBAAAAAAAAAAAAAAACQAAAAACgQAAAoEAAAMBAAADAQEYUEAAAAAAASAAAC:IAEAAEAAAARgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAABAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC3IAEAAFAAAARgAQgMEAAAAEAAAAAkAAAAAAgD8AAIA:AACAPwAAAAA4AAAHwgAQAAAAAACmDhAAAAAAAFYJEAAFAAAAAAAACEIAEAAFAAAAGgAQgMEAAAAEAAAACgAQAAUAAAAdAAAHggAQAAEAAAAqABAABQAAAAFAAAAAAAAANwAACTIAEAAFAAAA9g8QAAEAAABGABAABAAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAUAAABGAhAABQAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAAEAAAApgoQAAAAAABGAhAABQAAABAAAAdCABAAAAAAAEYCEAAEAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAbCQJPUgAAAvyABAABAAAAEYAEAADAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAMgAACRIAEAAAAAAACgAQAAQAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAAEgAAAvyABAABAAAAOYKEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAACAAAA5goQAAIAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAABAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC%IAEAACAAAABgEQgMEAAAAEAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAACAAAAAAAACEIAEAAFAAAAGgAQgMEAAAAEAAAAGgAQAAIAAAAdAAAHggAQAAEAAAAqABAABQAAAAFAAAAAAAAANwAACTIAEAAFAAAA9g8QAAEAAABGABAABAAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAUAAABGAhAABQAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB%IAEAACAAAApgoQAAAAAAAGCRAABQAAABAAAAdCABAAAAAAAJYHEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAdLWVPDIAAAkSABAAAAAAAAoAEAACAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAABIAAAL8gAQAAIAAADmChAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAEgAAAvyABAAAwAAAOYKEAADAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAHQAACsIAEAAAAAAABgQQAAIAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAA:CABAAAAAAAKYOEAAAAAAAAkAAAAAAAAAAAAAAAACAPwAAgD8CQAAAAAAAAAAAAAAAAIC:AACAvwAAAAviABAAAwAAAAYBEIDBAAAAAgAAAAJAAAAAAAAAAACAPwAAgD8AAIA:OAAAB8IAEAAAAAAApg4QAAAAAACmDhAAAwAAAAAAAAhCABAABAAAABoAEIDBAAAAAgAAABoAEAADAAAAHQAAB4IAEAABAAAAKgAQAAQAAAABQAAAAAAAADcAAAkyABAABAAAAPYPEAABAAAARgAQAAIAAADmChAAAAAAABAAAAdCABAAAAAAAEYCEAAEAAAARgIQAAQAAABEAAAFQgAQAAAAAAAqABAAAAAAADgAAAdyABAAAgAAAKYKEAAAAAAARgIQAAQAAAAQAAAHQgAQAAAAAABGAhAAAgAAAEYCEAABAAAAHQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAMzNzPwEAAAdCABAAAAAAACoAEAAAAAAAAUAAAHS1lTwyAAAJEgAQAAAAAAAKABAAAwAAACoAEAAAAAAACgAQAAAAAAAAAAAHIgAQAAAAAAAqABAAAAAAABoAEAAAAAAAMgAADcIAEAAAAAAABoQgAAAAAAAAAAAAAkAAAAAAAAAAAAAAAADgQAAA4EAGFBAAAAAAAEgAAAvyABAAAgAAAOYKEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAADAAAA5goQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC%IAEAADAAAABgEQgMEAAAACAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAADAAAAAAAACEIAEAAEAAAAGgAQgMEAAAACAAAAGgAQAAMAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAgAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAACAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAA6V8SPDIAAAkSABAAAAAAAAoAEAADAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAAyAAAOwgAQAAAAAAAGhCCAQQAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAAADgQAAA4EAGFBAAAAAAAEgAAAvyABAAAgAAAOYKEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAADAAAA5goQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC%IAEAADAAAABgEQgMEAAAACAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAADAAAAAAAACEIAEAAEAAAAGgAQgMEAAAACAAAAGgAQAAMAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAgAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAACAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAA6V8SPDIAAAkSABAAAAAAAAoAEAADAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAAOAAAHEiAQAAAAAAAKABAAAAAAABoAEAAAAAAAPgAAAVNUQVR0AAAABgEAAAYAAAAAAAAAAgAAALsAAAAAAAAADgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.blur_gaus_pass_fragData0 = "s4180:AANfdGV4X3NhbXBsZXIAAHRleAAAJEdsb2JhbHMAAAJkaXIAAAAAAAgAAAACAXNjcmVlblNpemUACAAAAAgAAAACAURYQkP:Wz0ulT1x8baxzbt1FG0hAQAAAPwLAAAFAAAANAAAAHABAACkAQAA2AEAAIALAABSREVGNAEAAAEAAACYAAAAAwAAABwAAAAABP::AAEAAP8AAAB8AAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAIkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAjQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfdGV4X3NhbXBsZXIAdGV4ACRHbG9iYWxzAKurjQAAAAIAAACwAAAAEAAAAAAAAAAAAAAA4AAAAAAAAAAIAAAAAgAAAOQAAAAAAAAA9AAAAAgAAAAIAAAAAgAAAOQAAAAAAAAAZGlyAAEAAwABAAIAAAAAAAAAAABzY3JlZW5TaXplAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6urSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8AAABTVl9UYXJnZXQAq6tTSERSoAkAAEAAAABoAgAAWQAABEaOIAAAAAAAAQAAAFoAAAMAYBAAAAAAAFgYAAQAcBAAAAAAAFVVAABiEAADMhAQAAAAAABlAAAD8iAQAAAAAABoAAACBQAAAEgAAAvyABAAAAAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAADgAACTIAEAABAAAARoAgAAAAAAAAAAAA5oogAAAAAAAAAAAAMgAADPIAEAACAAAARgQQAAEAAAACQAAAAACQQAAAkEAAAPBAAADwQEYUEAAAAAAASAAAC:IAEAADAAAARgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAIAAADmChAAAgAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADgAAApyABAAAwAAAEYCEAADAAAAAkAAALt7AD67ewA%u3sAPgAAAAAyAAAMcgAQAAAAAABGAhAAAAAAAAJAAAD0wAc%9MAHPvTABz4AAAAARgIQAAMAAAAyAAAN8gAQAAMAAABGBBCAQQAAAAEAAAACQAAAAACQQAAAkEAAAPBAAADwQEYUEAAAAAAASAAAC:IAEAAEAAAARgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAxyABAAAAAAAEYCEAAEAAAAAkAAALt7AD67ewA%u3sAPgAAAABGAhAAAAAAADIAAAxyABAAAAAAAEYCEAACAAAAAkAAABba2T0W2tk9FtrZPQAAAABGAhAAAAAAADIAAAxyABAAAAAAAEYCEAADAAAAAkAAABba2T0W2tk9FtrZPQAAAABGAhAAAAAAADIAAAzyABAAAgAAAEYEEAABAAAAAkAAAAAAKEEAAChBAABYQQAAWEFGFBAAAAAAAEgAAAvyABAAAwAAAEYAEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAACAAAA5goQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAMcgAQAAAAAABGAhAAAwAAAAJAAAD8b6U9:G%lPfxvpT0AAAAARgIQAAAAAAAyAAAN8gAQAAMAAABGBBCAQQAAAAEAAAACQAAAAAAoQQAAKEEAAFhBAABYQUYUEAAAAAAASAAAC:IAEAAEAAAARgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAxyABAAAAAAAEYCEAAEAAAAAkAAAPxvpT38b6U9:G%lPQAAAABGAhAAAAAAADIAAAxyABAAAAAAAEYCEAACAAAAAkAAAEATYT1AE2E9QBNhPQAAAABGAhAAAAAAADIAAAxyABAAAAAAAEYCEAADAAAAAkAAAEATYT1AE2E9QBNhPQAAAABGAhAAAAAAADIAAAzyABAAAgAAAEYEEAABAAAAAkAAAAAAhEEAAIRBAACcQQAAnEFGFBAAAAAAAEgAAAvyABAAAwAAAEYAEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAACAAAA5goQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAMcgAQAAAAAABGAhAAAwAAAAJAAABsJAk9bCQJPWwkCT0AAAAARgIQAAAAAAAyAAAN8gAQAAMAAABGBBCAQQAAAAEAAAACQAAAAACEQQAAhEEAAJxBAACcQUYUEAAAAAAASAAAC:IAEAAEAAAARgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAxyABAAAAAAAEYCEAAEAAAAAkAAAGwkCT1sJAk9bCQJPQAAAABGAhAAAAAAADIAAAxyABAAAAAAAEYCEAACAAAAAkAAAHS1lTx0tZU8dLWVPAAAAABGAhAAAAAAADIAAAxyABAAAAAAAEYCEAADAAAAAkAAAHS1lTx0tZU8dLWVPAAAAABGAhAAAAAAADIAAAzyABAAAgAAAEYEEAABAAAAAkAAAAAAtEEAALRBAADMQQAAzEFGFBAAAAAAAEgAAAvyABAAAwAAAEYAEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAACAAAA5goQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAMcgAQAAAAAABGAhAAAwAAAAJAAADpXxI86V8SPOlfEjwAAAAARgIQAAAAAAAyAAAN8gAQAAMAAABGBBCAQQAAAAEAAAACQAAAAAC0QQAAtEEAAMxBAADMQUYUEAAAAAAASAAAC:IAEAAEAAAARgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAxyABAAAAAAAEYCEAAEAAAAAkAAAOlfEjzpXxI86V8SPAAAAABGAhAAAAAAADIAAAxyABAAAAAAAEYCEAACAAAAAkAAADwwgDs8MIA7PDCAOwAAAABGAhAAAAAAADIAAAxyABAAAAAAAEYCEAADAAAAAkAAADwwgDs8MIA7PDCAOwAAAABGAhAAAAAAADIAAAzCABAAAQAAAAYEEAABAAAAAkAAAAAAAAAAAAAAAADkQQAA5EEGFBAAAAAAADIAAA0yABAAAQAAAEYAEIBBAAAAAQAAAAJAAAAAAORBAADkQQAAAAAAAAAARhAQAAAAAABIAAAL8gAQAAIAAABGABAAAQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAEgAAAvyABAAAQAAAOYKEAABAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAADHIAEAAAAAAARgIQAAEAAAACQAAADjLJOg4yyToOMsk6AAAAAEYCEAAAAAAAMgAADHIAEAAAAAAARgIQAAIAAAACQAAADjLJOg4yyToOMsk6AAAAAEYCEAAAAAAAOAAACnIAEAAAAAAARgIQAAAAAAACQAAAMzMzPzMzMz8zMzM:AAAAADMAAApyIBAAAAAAAEYCEAAAAAAAAkAAAAAAgEIAAIBCAACAQgAAAAA2AAAFgiAQAAAAAAABQAAAAAAAAD4AAAFTVEFUdAAAADUAAAAFAAAAAAAAAAIAAAAgAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.compositor_pass_fragData0 = "s2426:AANfdGV4X3NhbXBsZXIAAHRleAAAJEdsb2JhbHMAAAF2aWduZXR0ZVN0cmVuZ3RoAAAAAAAEAAAAAQFEWEJD3nNeoXj:oe%gJW5quu8Z0QEAAADgBgAABQAAADQAAABcAQAAkAEAAMQBAABkBgAAUkRFRiABAAABAAAAmAAAAAMAAAAcAAAAAAT::wABAADsAAAAfAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAACJAAAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAAI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAX3RleF9zYW1wbGVyAHRleAAkR2xvYmFscwCrq40AAAABAAAAsAAAABAAAAAAAAAAAAAAAMgAAAAAAAAABAAAAAIAAADcAAAAAAAAAHZpZ25ldHRlU3RyZW5ndGgAq6urAAADAAEAAQAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFKYBAAAQAAAACYBAABZAAAERo4gAAAAAAABAAAAWgAAAwBgEAAAAAAAWBgABABwEAAAAAAAVVUAAGIQAAMyEBAAAAAAAGUAAAPyIBAAAAAAAGgAAAIDAAAAOAAABxIAEAAAAAAAChAQAAAAAAAaEBAAAAAAADgAAAcSABAAAAAAAAoAEAAAAAAAAUAAAAAAgEEAAAALYgAQAAAAAAAGERCAQQAAAAAAAAACQAAAAAAAAAAAgD8AAIA:AAAAADgAAAcSABAAAAAAABoAEAAAAAAACgAQAAAAAAA4AAAHEgAQAAAAAAAqABAAAAAAAAoAEAAAAAAALwAABRIAEAAAAAAACgAQAAAAAAA4AAAHEgAQAAAAAAAKABAAAAAAAAFAAADNzEw%GQAABRIAEAAAAAAACgAQAAAAAAAAAAAJIgAQAAAAAAAKgCCAQQAAAAAAAAAAAAAAAUAAAAAAgD8yAAAKEgAQAAAAAAAKgCAAAAAAAAAAAAAKABAAAAAAABoAEAAAAAAAAAAACmIAEAAAAAAABhEQAAAAAAACQAAAAAAAAAAAgEAAAIBAAAAAADgAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAA4AAAK4gAQAAAAAABWBRAAAAAAAAJAAAAAAAAAAAAgQU:sRD8KgaY9QQAABcIAEAAAAAAApg4QAAAAAAAyAAANYgAQAAAAAACmCxCAQQAAAAAAAAACQAAAAAAAAAAAUEEAAPZCAAAAAFYFEAAAAAAAAAAACmIAEAAAAAAAVgYQAAAAAAACQAAAAAAAAAAAgD8AAIA:AAAAADgAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAA4AAAHQgAQAAAAAAAaABAAAAAAAAFAAAAAAMhCQQAABUIAEAAAAAAAKgAQAAAAAAAyAAAKIgAQAAAAAAAqABCAQQAAAAAAAAABQAAACtcjPBoAEAAAAAAAAAAAByIAEAAAAAAAGgAQAAAAAAABQAAACteju0gAAAvyABAAAQAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAADOIAEAAAAAAAVgUQAAAAAAACQAAAAAAAAOxRuD3sUbg97FG4PQYJEAABAAAANgAABYIgEAAAAAAAOgAQAAEAAAAyAAAMcgAQAAAAAACWBxAAAAAAAAYAEAAAAAAAAkAAAG8Sg7tvEoO7bxKDuwAAAAA0AAAKcgAQAAAAAABGAhAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAMgAAD3IAEAABAAAARgIQAAAAAAACQAAAZmbGQGZmxkBmZsZAAAAAAAJAAAAAAAA:AAAAPwAAAD8AAAAAOAAAB3IAEAABAAAARgIQAAAAAABGAhAAAQAAADIAAA9yABAAAgAAAEYCEAAAAAAAAkAAAGZmxkBmZsZAZmbGQAAAAAACQAAAmpnZP5qZ2T%amdk:AAAAADIAAAxyABAAAAAAAEYCEAAAAAAARgIQAAIAAAACQAAAj8J1PY:CdT2PwnU9AAAAAA4AAAdyIBAAAAAAAEYCEAABAAAARgIQAAAAAAA%AAABU1RBVHQAAAAgAAAAAwAAAAAAAAACAAAAHQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.compositor_pass_vertData0 = "s779:AXBvcwAAAABEWEJD7F0vBgrwXt7WrnoVcnvrCQEAAABAAgAABQAAADQAAACMAAAAwAAAABgBAADEAQAAUkRFRlAAAAAAAAAAAAAAAAAAAAAcAAAAAAT%:wABAAAcAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOUAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAADDAAAQQAAAAAAAAABAAAAAwAAAAEAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUqQAAABAAAEAKQAAAF8AAAMyEBAAAAAAAGUAAAMyIBAAAAAAAGcAAATyIBAAAQAAAAEAAAAyAAAPMiAQAAAAAABGEBAAAAAAAAJAAAAAAAA:AAAAvwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAjCIBAAAQAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAABAAAAAAAAAAAAAAAAwAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.copy_mrt3_pass_fragData0 = "s1352:AAZfdGV4MF9zYW1wbGVyAABfdGV4MV9zYW1wbGVyAAFfdGV4Ml9zYW1wbGVyAAJ0ZXgwAAB0ZXgxAAF0ZXgyAAIARFhCQ4s:P%bJfzAdff3uWBT81kYBAAAAtAMAAAUAAAA0AAAAhAEAALgBAAAcAgAAOAMAAFJERUZIAQAAAAAAAAAAAAAGAAAAHAAAAAAE::8AAQAAFQEAANwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA6gAAAAMAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAAD4AAAAAwAAAAAAAAAAAAAAAAAAAAIAAAABAAAAAAAAAAYBAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAACwEAAAIAAAAFAAAABAAAAP::::8BAAAAAQAAAAwAAAAQAQAAAgAAAAUAAAAEAAAA:::::wIAAAABAAAADAAAAF90ZXgwX3NhbXBsZXIAX3RleDFfc2FtcGxlcgBfdGV4Ml9zYW1wbGVyAHRleDAAdGV4MQB0ZXgyAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPAAAAUAAAAAIAAAAAAAAAAwAAAAIAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUhQBAABAAAAARQAAAFoAAAMAYBAAAAAAAFoAAAMAYBAAAQAAAFoAAAMAYBAAAgAAAFgYAAQAcBAAAAAAAFVVAABYGAAEAHAQAAEAAABVVQAAWBgABABwEAACAAAAVVUAAGIQAAMyEBAAAAAAAGUAAAPyIBAAAAAAAGUAAAPyIBAAAQAAAGUAAAPyIBAAAgAAAEgAAAvyIBAAAAAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IgEAABAAAARhAQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAABIAAAL8iAQAAIAAABGEBAAAAAAAEZ%EAACAAAAAGAQAAIAAAABQAAAAAAAAD4AAAFTVEFUdAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.cursor_fragData0 = "s1236:AANfdGV4X3NhbXBsZXIAAHRleAAAJEdsb2JhbHMAAAF0aW50AAAAAAAMAAAAAwFEWEJDWcrgC5EBQ0bK5AKYthjlhgEAAABwAwAABQAAADQAAACMAQAAwAEAAPQBAADUAgAAUkRFRlABAAABAAAAuAAAAAMAAAA8AAAAAAX::wABAAAoAQAAUkQxMTwAAAAYAAAAIAAAACgAAAAkAAAADAAAAAAAAACcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAKkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAArQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfdGV4X3NhbXBsZXIAdGV4ACRHbG9iYWxzAKurrQAAAAEAAADQAAAAEAAAAAAAAAAAAAAA%AAAAAAAAAAMAAAAAgAAAAQBAAAAAAAA:::::wAAAAD:::::AAAAAHRpbnQAZmxvYXQzAAEAAwABAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA:QAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgMTAuMQBJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRVjYAAAAUAAAADYAAABqCAABWQAABEaOIAAAAAAAAQAAAFoAAAMAYBAAAAAAAFgYAAQAcBAAAAAAAFVVAABiEAADMhAQAAAAAABlAAAD8iAQAAAAAABoAAACAQAAAEUAAIvCAACAQ1UVAPIAEAAAAAAARhAQAAAAAABGfhAAAAAAAABgEAAAAAAADgAAB3IAEAAAAAAARgIQAAAAAAD2DxAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAOAAACHIgEAAAAAAARgIQAAAAAABGgiAAAAAAAAAAAAA%AAABU1RBVJQAAAAFAAAAAQAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.cursor_vertData0 = "s9878:A25vcgAAcG9zAAF0ZXgAAgVfdGV4YV9zYW1wbGVyAABfZ2J1ZmZlckRfc2FtcGxlcgABdGV4YQAAZ2J1ZmZlckQAASRHbG9iYWxzAAAGVlAAAAAAAEAAAAAEBGludlZQAEAAAABAAAAABARtb3VzZQCAAAAACAAAAAIBdGV4U3RlcACIAAAACAAAAAIBcmFkaXVzAJAAAAAEAAAAAQFjYW1lcmFSaWdodACUAAAADAAAAAMBRFhCQ%R5rmhwHtiMxi%0TsfK3EMBAAAAPBwAAAUAAAA0AAAAXAMAAOQDAAA8BAAAoBsAAFJERUYgAwAAAQAAABQBAAAFAAAAPAAAAAAF:v8AAQAA%AIAAFJEMTE8AAAAGAAAACAAAAAoAAAAJAAAAAwAAAAAAAAA3AAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAADqAAAAAwAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAPwAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAAQEAAAIAAAAFAAAABAAAAP::::8BAAAAAQAAAAwAAAAKAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAF90ZXhhX3NhbXBsZXIAX2didWZmZXJEX3NhbXBsZXIAdGV4YQBnYnVmZmVyRAAkR2xvYmFscwCrCgEAAAYAAAAsAQAAoAAAAAAAAAAAAAAAHAIAAAAAAABAAAAAAgAAACgCAAAAAAAA:::::wAAAAD:::::AAAAAEwCAABAAAAAQAAAAAIAAAAoAgAAAAAAAP::::8AAAAA:::::wAAAABSAgAAgAAAAAgAAAACAAAAYAIAAAAAAAD:::::AAAAAP::::8AAAAAhAIAAIgAAAAIAAAAAgAAAGACAAAAAAAA:::::wAAAAD:::::AAAAAIwCAACQAAAABAAAAAIAAACcAgAAAAAAAP::::8AAAAA:::::wAAAADAAgAAlAAAAAwAAAACAAAA1AIAAAAAAAD:::::AAAAAP::::8AAAAAVlAAZmxvYXQ0eDQAAwADAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAgAAaW52VlAAbW91c2UAZmxvYXQyAKsBAAMAAQACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgCAAB0ZXhTdGVwAHJhZGl1cwBmbG9hdACrq6sAAAMAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJMCAABjYW1lcmFSaWdodABmbG9hdDMAqwEAAwABAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAIAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgMTAuMQBJU0dOgAAAAAQAAAAIAAAAaAAAAAAAAAAAAAAAAwAAAAAAAAADAAAAaAAAAAEAAAAAAAAAAwAAAAEAAAAPAAAAaAAAAAIAAAAAAAAAAwAAAAIAAAADAwAAcQAAAAAAAAAGAAAAAQAAAAMAAAABAQAAVEVYQ09PUkQAU1ZfVmVydGV4SUQAq6urT1NHTlAAAAACAAAACAAAADgAAAAAAAAAAAAAAAMAAAAAAAAAAwwAAEEAAAAAAAAAAQAAAAMAAAABAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRVhcFwAAUAABANcFAABqCAABWQAABEaOIAAAAAAACgAAAFoAAAMAYBAAAAAAAFoAAAMAYBAAAQAAAFgYAAQAcBAAAAAAAFVVAABYGAAEAHAQAAEAAABVVQAAXwAAAzIQEAACAAAAYAAABBIQEAADAAAABgAAAGUAAAMyIBAAAAAAAGcAAATyIBAAAQAAAAEAAABoAAACBgAAADYAAAUyIBAAAAAAAEYQEAACAAAAMgAADjIAEAAAAAAA5oogAAAAAAAIAAAAAkAAAAAAgEAAAIBAAAAAAAAAAABGgCAAAAAAAAgAAAAAAAAIQgAQAAAAAAAaABCAQQAAAAAAAAABQAAAAACAP0gAAI3CAACAQ1UVAEIAEAAAAAAAhgAQAAAAAACWfBAAAQAAAABgEAABAAAAAUAAAAAAAAAyAAAJQgAQAAEAAAAqABAAAAAAAAFAAAAAAABAAUAAAAAAgL82AAAFggAQAAEAAAABQAAAAACAPzIAAA8yABAAAQAAAEYAEAAAAAAAAkAAAAAAAEAAAABAAAAAAAAAAAACQAAAAACAvwAAgL8AAAAAAAAAABEAAAgiABAAAgAAAEYOEAABAAAARo4gAAAAAAAEAAAAEQAACEIAEAACAAAARg4QAAEAAABGjiAAAAAAAAUAAAARAAAIEgAQAAIAAABGDhAAAQAAAEaOIAAAAAAABgAAABEAAAhCABAAAAAAAEYOEAABAAAARo4gAAAAAAAHAAAADgAAB3IAEAABAAAARgIQAAIAAACmChAAAAAAADYAAAaSABAAAgAAAKaOIAAAAAAACAAAADYAAAhiABAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzIAEAADAAAARgAQAAAAAADmChAAAgAAAAAAAAcyABAAAAAAAEYAEAAAAAAARgAQAAIAAAAAAAAIQgAQAAMAAAAaABCAQQAAAAMAAAABQAAAAACAP0gAAI3CAACAQ1UVAIIAEAAAAAAAhgAQAAMAAACWcxAAAQAAAABgEAABAAAAAUAAAAAAAAAyAAAPMgAQAAMAAABGABAAAwAAAAJAAAAAAABAAAAAQAAAAAAAAAAAAkAAAAAAgL8AAIC:AAAAAAAAAAAyAAAJQgAQAAMAAAA6ABAAAAAAAAFAAAAAAABAAUAAAAAAgL82AAAFggAQAAMAAAABQAAAAACAPxEAAAgSABAABAAAAEYOEAADAAAARo4gAAAAAAAEAAAAEQAACCIAEAAEAAAARg4QAAMAAABGjiAAAAAAAAUAAAARAAAIQgAQAAQAAABGDhAAAwAAAEaOIAAAAAAABgAAABEAAAiCABAAAAAAAEYOEAADAAAARo4gAAAAAAAHAAAADgAAB3IAEAADAAAARgIQAAQAAAD2DxAAAAAAAAAAAAhyABAAAwAAAJYEEIBBAAAAAQAAAEYCEAADAAAAAAAACEIAEAAAAAAAGgAQgEEAAAAAAAAAAUAAAAAAgD9IAACNwgAAgENVFQBCABAAAAAAAIYAEAAAAAAAlnwQAAEAAAAAYBAAAQAAAAFAAAAAAAAAMgAADzIAEAAEAAAARgAQAAAAAAACQAAAAAAAQAAAAEAAAAAAAAAAAAJAAAAAAIC:AACAvwAAAAAAAAAAMgAACUIAEAAEAAAAKgAQAAAAAAABQAAAAAAAQAFAAAAAAIC:NgAABYIAEAAEAAAAAUAAAAAAgD8RAAAIIgAQAAAAAABGDhAABAAAAEaOIAAAAAAABAAAABEAAAhCABAAAAAAAEYOEAAEAAAARo4gAAAAAAAFAAAAEQAACBIAEAAAAAAARg4QAAQAAABGjiAAAAAAAAYAAAARAAAIggAQAAAAAABGDhAABAAAAEaOIAAAAAAABwAAAA4AAAdyABAAAAAAAEYCEAAAAAAA9g8QAAAAAAAAAAAIcgAQAAAAAABGAhCAQQAAAAEAAABGAhAAAAAAADgAAAdyABAAAQAAAEYCEAAAAAAARgIQAAMAAAAyAAAKcgAQAAAAAAAmCRAAAwAAAJYEEAAAAAAARgIQgEEAAAABAAAAEAAAB4IAEAAAAAAARgIQAAAAAABGAhAAAAAAAEQAAAWCABAAAAAAADoAEAAAAAAAOAAAB3IAEAAAAAAA9g8QAAAAAABGAhAAAAAAAAAAAAgyABAAAQAAAOYKEAACAAAARoAgAAAAAAAIAAAAAAAACEIAEAABAAAAGgAQgEEAAAABAAAAAUAAAAAAgD9IAACNwgAAgENVFQCCABAAAAAAAIYAEAABAAAAlnMQAAEAAAAAYBAAAQAAAAFAAAAAAAAAMgAADzIAEAABAAAARgAQAAEAAAACQAAAAAAAQAAAAEAAAAAAAAAAAAJAAAAAAIC:AACAvwAAAAAAAAAAMgAACUIAEAABAAAAOgAQAAAAAAABQAAAAAAAQAFAAAAAAIC:NgAABYIAEAABAAAAAUAAAAAAgD8RAAAIEgAQAAMAAABGDhAAAQAAAEaOIAAAAAAABAAAABEAAAgiABAAAwAAAEYOEAABAAAARo4gAAAAAAAFAAAAEQAACEIAEAADAAAARg4QAAEAAABGjiAAAAAAAAYAAAARAAAIggAQAAAAAABGDhAAAQAAAEaOIAAAAAAABwAAAA4AAAdyABAAAQAAAEYCEAADAAAA9g8QAAAAAAAyAAAQMgAQAAMAAABGgCAAAAAAAAgAAAACQAAAAACAPwAAgL8AAAAAAAAAAAJAAAAAAAAAAACAPwAAAAAAAAAASAAAjcIAAIBDVRUAggAQAAAAAABGABAAAwAAAJZzEAABAAAAAGAQAAEAAAABQAAAAAAAADIAAAlCABAAAwAAADoAEAAAAAAAAUAAAAAAAEABQAAAAACAvzIAABAyABAAAwAAAEaAIAAAAAAACAAAAAJAAAAAAABAAAAAQAAAAAAAAAAAAkAAAAAAgL8AAIC:AAAAAAAAAAA2AAAFggAQAAMAAAABQAAAAACAPxEAAAgiABAABAAAAEYOEAADAAAARo4gAAAAAAAEAAAAEQAACEIAEAAEAAAARg4QAAMAAABGjiAAAAAAAAUAAAARAAAIggAQAAQAAABGDhAAAwAAAEaOIAAAAAAABgAAABEAAAiCABAAAAAAAEYOEAADAAAARo4gAAAAAAAHAAAADgAAB%IAEAADAAAAVg4QAAQAAAD2DxAAAAAAAEgAAI7CAACAQ1UVAIIAEAAAAAAARoAgAAAAAAAIAAAAlnMQAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACRIAEAADAAAAOgAQAAAAAAABQAAAlb:WMxoAEAADAAAAAAAACHIAEAABAAAARgIQAAEAAACGAxCAQQAAAAMAAAAAAAAIMgAQAAQAAABGABAAAgAAAEaAIAAAAAAACAAAAAAAAAhCABAABAAAABoAEIBBAAAABAAAAAFAAAAAAIA:SAAAjcIAAIBDVRUAggAQAAAAAACGABAABAAAAJZzEAABAAAAAGAQAAEAAAABQAAAAAAAADIAAA8yABAABAAAAEYAEAAEAAAAAkAAAAAAAEAAAABAAAAAAAAAAAACQAAAAACAvwAAgL8AAAAAAAAAADIAAAlCABAABAAAADoAEAAAAAAAAUAAAAAAAEABQAAAAACAvzYAAAWCABAABAAAAAFAAAAAAIA:EQAACCIAEAAFAAAARg4QAAQAAABGjiAAAAAAAAQAAAARAAAIQgAQAAUAAABGDhAABAAAAEaOIAAAAAAABQAAABEAAAgSABAABQAAAEYOEAAEAAAARo4gAAAAAAAGAAAAEQAACIIAEAAAAAAARg4QAAQAAABGjiAAAAAAAAcAAAAOAAAHcgAQAAQAAABGAhAABQAAAPYPEAAAAAAAAAAACHIAEAAEAAAANg4QgEEAAAADAAAARgIQAAQAAAA4AAAHcgAQAAUAAABGAhAAAQAAAEYCEAAEAAAAMgAACnIAEAABAAAAJgkQAAEAAACWBBAABAAAAEYCEIBBAAAABQAAABAAAAeCABAAAAAAAEYCEAABAAAARgIQAAEAAABEAAAFggAQAAAAAAA6ABAAAAAAADIAAAlyABAAAAAAAEYCEAABAAAA9g8QAAAAAABGAhAAAAAAADIAAA8yABAAAQAAAOaKIIBBAAAAAAAAAAgAAAACQAAAAACAQAAAgEAAAAAAAAAAAEaAIAAAAAAACAAAAAAAAAhCABAAAQAAABoAEIBBAAAAAQAAAAFAAAAAAIA:SAAAjcIAAIBDVRUAggAQAAAAAACGABAAAQAAAJZzEAABAAAAAGAQAAEAAAABQAAAAAAAADIAAAlCABAABAAAADoAEAAAAAAAAUAAAAAAAEABQAAAAACAvzYAAAWCABAABAAAAAFAAAAAAIA:MgAADzIAEAAEAAAARgAQAAEAAAACQAAAAAAAQAAAAEAAAAAAAAAAAAJAAAAAAIC:AACAvwAAAAAAAAAAEQAACCIAEAAFAAAARg4QAAQAAABGjiAAAAAAAAQAAAARAAAIQgAQAAUAAABGDhAABAAAAEaOIAAAAAAABQAAABEAAAgSABAABQAAAEYOEAAEAAAARo4gAAAAAAAGAAAAEQAACIIAEAAAAAAARg4QAAQAAABGjiAAAAAAAAcAAAAOAAAHcgAQAAQAAABGAhAABQAAAPYPEAAAAAAAAAAABzIAEAAFAAAA5goQAAIAAABGABAAAQAAAAAAAAcyABAAAQAAAEYAEAACAAAARgAQAAEAAAAAAAAIQgAQAAUAAAAaABCAQQAAAAUAAAABQAAAAACAP0gAAI3CAACAQ1UVAIIAEAAAAAAAhgAQAAUAAACWcxAAAQAAAABgEAABAAAAAUAAAAAAAAAyAAAPMgAQAAIAAABGABAABQAAAAJAAAAAAABAAAAAQAAAAAAAAAAAAkAAAAAAgL8AAIC:AAAAAAAAAAAyAAAJQgAQAAIAAAA6ABAAAAAAAAFAAAAAAABAAUAAAAAAgL82AAAFggAQAAIAAAABQAAAAACAPxEAAAgSABAABQAAAEYOEAACAAAARo4gAAAAAAAEAAAAEQAACCIAEAAFAAAARg4QAAIAAABGjiAAAAAAAAUAAAARAAAIQgAQAAUAAABGDhAAAgAAAEaOIAAAAAAABgAAABEAAAiCABAAAAAAAEYOEAACAAAARo4gAAAAAAAHAAAADgAAB3IAEAACAAAARgIQAAUAAAD2DxAAAAAAAAAAAAhyABAAAgAAAJYEEIBBAAAABAAAAEYCEAACAAAAAAAACEIAEAABAAAAGgAQgEEAAAABAAAAAUAAAAAAgD9IAACNwgAAgENVFQCCABAAAAAAAIYAEAABAAAAlnMQAAEAAAAAYBAAAQAAAAFAAAAAAAAAMgAADzIAEAABAAAARgAQAAEAAAACQAAAAAAAQAAAAEAAAAAAAAAAAAJAAAAAAIC:AACAvwAAAAAAAAAAMgAACUIAEAABAAAAOgAQAAAAAAABQAAAAAAAQAFAAAAAAIC:NgAABYIAEAABAAAAAUAAAAAAgD8RAAAIIgAQAAUAAABGDhAAAQAAAEaOIAAAAAAABAAAABEAAAhCABAABQAAAEYOEAABAAAARo4gAAAAAAAFAAAAEQAACBIAEAAFAAAARg4QAAEAAABGjiAAAAAAAAYAAAARAAAIggAQAAAAAABGDhAAAQAAAEaOIAAAAAAABwAAAA4AAAdyABAAAQAAAEYCEAAFAAAA9g8QAAAAAAAAAAAIcgAQAAEAAABGAhCAQQAAAAQAAABGAhAAAQAAADgAAAdyABAABAAAAEYCEAABAAAARgIQAAIAAAAyAAAKcgAQAAEAAAAmCRAAAgAAAJYEEAABAAAARgIQgEEAAAAEAAAAEAAAB4IAEAAAAAAARgIQAAEAAABGAhAAAQAAAEQAAAWCABAAAAAAADoAEAAAAAAAMgAACXIAEAAAAAAARgIQAAEAAAD2DxAAAAAAAEYCEAAAAAAAEAAAB4IAEAAAAAAARgIQAAAAAABGAhAAAAAAAEQAAAWCABAAAAAAADoAEAAAAAAAOAAAB3IAEAAAAAAA9g8QAAAAAABGAhAAAAAAABAAAAiCABAAAAAAAOaJIAAAAAAACQAAAEYCEAAAAAAAMgAAC3IAEAABAAAAJgkQgEEAAAAAAAAA9g8QAAAAAACWhyAAAAAAAAkAAAAQAAAHggAQAAAAAABGAhAAAQAAAEYCEAABAAAARAAABYIAEAAAAAAAOgAQAAAAAAA4AAAHcgAQAAIAAAD2DxAAAAAAAEYCEAABAAAAOAAAB3IAEAAEAAAARgIQAAAAAAAmCRAAAgAAADIAAApyABAAAAAAAJYEEAACAAAAlgQQAAAAAABGAhCAQQAAAAQAAAAyAAAKcgAQAAIAAABGAhCAQQAAAAEAAAD2DxAAAAAAAEYCEAAAAAAAEAAAB4IAEAABAAAARgIQAAIAAABGAhAAAgAAAEQAAAWCABAAAQAAADoAEAABAAAAOAAAB3IAEAACAAAA9g8QAAEAAABGAhAAAgAAADgAAAhyABAAAgAAAEYCEAACAAAABoAgAAAAAAAJAAAAMgAADHIAEAACAAAARgIQAAIAAAACQAAAMzMzPzMzMz8zMzM:AAAAAIYDEAADAAAAIAAACnIAEAAEAAAABhAQAAMAAAACQAAAAQAAAAIAAAADAAAAAAAAADcAAAlyABAAAgAAAKYKEAAEAAAARgIQAAIAAACGAxAAAwAAADIAAAlyABAABQAAAEYCEAABAAAA9g8QAAAAAABGAhAAAAAAABAAAAeCABAAAQAAAEYCEAAFAAAARgIQAAUAAABEAAAFggAQAAEAAAA6ABAAAQAAADgAAAdyABAABQAAAPYPEAABAAAARgIQAAUAAAA4AAAIcgAQAAUAAABGAhAABQAAAAaAIAAAAAAACQAAADIAAAxyABAABQAAAEYCEAAFAAAAAkAAADMzMz8zMzM:MzMzPwAAAACGAxAAAwAAADcAAAlyABAAAgAAAFYFEAAEAAAARgIQAAUAAABGAhAAAgAAADIAAAriABAABAAAAAYJEAABAAAA9g8QAAAAAAAGCRCAQQAAAAAAAAAyAAALcgAQAAAAAABGAhCAQQAAAAEAAAD2DxAAAAAAAEYCEIBBAAAAAAAAABAAAAeCABAAAAAAAJYHEAAEAAAAlgcQAAQAAABEAAAFggAQAAAAAAA6ABAAAAAAADgAAAdyABAAAQAAAPYPEAAAAAAAlgcQAAQAAAA4AAAIcgAQAAEAAABGAhAAAQAAAAaAIAAAAAAACQAAADIAAAxyABAAAQAAAEYCEAABAAAAAkAAADMzMz8zMzM:MzMzPwAAAACGAxAAAwAAADcAAAlyABAAAQAAAAYAEAAEAAAARgIQAAEAAABGAhAAAgAAABAAAAeCABAAAAAAAEYCEAAAAAAARgIQAAAAAABEAAAFggAQAAAAAAA6ABAAAAAAADgAAAdyABAAAAAAAPYPEAAAAAAARgIQAAAAAAA4AAAIcgAQAAAAAABGAhAAAAAAAAaAIAAAAAAACQAAADIAAAxyABAAAAAAAEYCEAAAAAAAAkAAADMzMz8zMzM:MzMzPwAAAACGAxAAAwAAADcAAAlyABAAAAAAAAYQEAADAAAARgIQAAEAAABGAhAAAAAAADYAAAWCABAAAAAAAAFAAAAAAIA:EQAACBIAEAABAAAARg4QAAAAAABGjiAAAAAAAAIAAAARAAAIIgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAwAAAAAAAAcSABAAAQAAABoAEAABAAAACgAQAAEAAAA2AAAFgiAQAAEAAAAaABAAAQAAADgAAAdCIBAAAQAAAAoAEAABAAAAAUAAAAAAAD8RAAAIEiAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAAAAABEAAAgiIBAAAQAAAEYOEAAAAAAARo4gAAAAAAABAAAAPgAAAVNUQVSUAAAArAAAAAYAAAAAAAAABAAAAI4AAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAA4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.deferred_light_fragData0 = "s30830:ABFfc2x0Y01hdF9zYW1wbGVyAABfc2x0Y01hZ19zYW1wbGVyAAFfZ2J1ZmZlcjBfc2FtcGxlcgACX2didWZmZXIxX3NhbXBsZXIAA19nYnVmZmVyRF9zYW1wbGVyAARfc2Vudm1hcEJyZGZfc2FtcGxlcgAFX3NlbnZtYXBSYWRpYW5jZV9zYW1wbGVyAAZfc3Nhb3RleF9zYW1wbGVyAAdzbHRjTWF0AABzbHRjTWFnAAFnYnVmZmVyMAACZ2J1ZmZlcjEAA2didWZmZXJEAARzZW52bWFwQnJkZgAFc2Vudm1hcFJhZGlhbmNlAAZzc2FvdGV4AAckR2xvYmFscwAADGxpZ2h0QXJlYTAAAAAAAAwAAAADAWxpZ2h0QXJlYTEAEAAAAAwAAAADAWxpZ2h0QXJlYTIAIAAAAAwAAAADAWxpZ2h0QXJlYTMAMAAAAAwAAAADAXNoaXJyAEAAAABwAAAABAFleWUAsAAAAAwAAAADAWV5ZUxvb2sAwAAAAAwAAAADAWNhbWVyYVByb2oA0AAAAAgAAAACAWVudm1hcE51bU1pcG1hcHMA2AAAAAQAAAABAWVudm1hcFN0cmVuZ3RoANwAAAAEAAAAAQFwb2ludFBvcwDgAAAADAAAAAMBcG9pbnRDb2wA8AAAAAwAAAADAURYQkOWmAgRbgE0Nt7YbiN%l4k9AQAAAFxYAAAFAAAANAAAAKQFAADwBQAAJAYAAOBXAABSREVGaAUAAAEAAAAsAwAAEQAAABwAAAAABP::AAEAADYFAAA8AgAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAE0CAAADAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAAAAAAXgIAAAMAAAAAAAAAAAAAAAAAAAACAAAAAQAAAAAAAABwAgAAAwAAAAAAAAAAAAAAAAAAAAMAAAABAAAAAAAAAIICAAADAAAAAAAAAAAAAAAAAAAABAAAAAEAAAAAAAAAlAIAAAMAAAAAAAAAAAAAAAAAAAAFAAAAAQAAAAAAAACpAgAAAwAAAAAAAAAAAAAAAAAAAAYAAAABAAAAAAAAAMICAAADAAAAAAAAAAAAAAAAAAAABwAAAAEAAAAAAAAA0wIAAAIAAAAFAAAABAAAAP::::8AAAAAAQAAAAwAAADbAgAAAgAAAAUAAAAEAAAA:::::wEAAAABAAAADAAAAOMCAAACAAAABQAAAAQAAAD:::::AgAAAAEAAAAMAAAA7AIAAAIAAAAFAAAABAAAAP::::8DAAAAAQAAAAwAAAD1AgAAAgAAAAUAAAAEAAAA:::::wQAAAABAAAADAAAAP4CAAACAAAABQAAAAQAAAD:::::BQAAAAEAAAAMAAAACgMAAAIAAAAFAAAABAAAAP::::8GAAAAAQAAAAwAAAAaAwAAAgAAAAUAAAAEAAAA:::::wcAAAABAAAADAAAACIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAX3NsdGNNYXRfc2FtcGxlcgBfc2x0Y01hZ19zYW1wbGVyAF9nYnVmZmVyMF9zYW1wbGVyAF9nYnVmZmVyMV9zYW1wbGVyAF9nYnVmZmVyRF9zYW1wbGVyAF9zZW52bWFwQnJkZl9zYW1wbGVyAF9zZW52bWFwUmFkaWFuY2Vfc2FtcGxlcgBfc3Nhb3RleF9zYW1wbGVyAHNsdGNNYXQAc2x0Y01hZwBnYnVmZmVyMABnYnVmZmVyMQBnYnVmZmVyRABzZW52bWFwQnJkZgBzZW52bWFwUmFkaWFuY2UAc3Nhb3RleAAkR2xvYmFscwCrIgMAAAwAAABEAwAAAAEAAAAAAAAAAAAAZAQAAAAAAAAMAAAAAgAAAHAEAAAAAAAAgAQAABAAAAAMAAAAAgAAAHAEAAAAAAAAiwQAACAAAAAMAAAAAgAAAHAEAAAAAAAAlgQAADAAAAAMAAAAAgAAAHAEAAAAAAAAoQQAAEAAAABwAAAAAgAAAKgEAAAAAAAAuAQAALAAAAAMAAAAAgAAAHAEAAAAAAAAvAQAAMAAAAAMAAAAAgAAAHAEAAAAAAAAxAQAANAAAAAIAAAAAgAAANAEAAAAAAAA4AQAANgAAAAEAAAAAgAAAPQEAAAAAAAABAUAANwAAAAEAAAAAgAAABQFAAAAAAAAJAUAAOAAAAAMAAAAAgAAAHAEAAAAAAAALQUAAPAAAAAMAAAAAgAAAHAEAAAAAAAAbGlnaHRBcmVhMACrAQADAAEAAwAAAAAAAAAAAGxpZ2h0QXJlYTEAbGlnaHRBcmVhMgBsaWdodEFyZWEzAHNoaXJyAKsBAAMAAQAEAAcAAAAAAAAAZXllAGV5ZUxvb2sAY2FtZXJhUHJvagCrAQADAAEAAgAAAAAAAAAAAGVudm1hcE51bU1pcG1hcHMAq6urAAACAAEAAQAAAAAAAAAAAGVudm1hcFN0cmVuZ3RoAKsAAAMAAQABAAAAAAAAAAAAcG9pbnRQb3MAcG9pbnRDb2wATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NABJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAOAAAAAEAAAAAAAAAAwAAAAEAAAAHBwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFK0UQAAQAAAAG0UAABZAAAERo4gAAAAAAAQAAAAWgAAAwBgEAAAAAAAWgAAAwBgEAABAAAAWgAAAwBgEAACAAAAWgAAAwBgEAADAAAAWgAAAwBgEAAEAAAAWgAAAwBgEAAFAAAAWgAAAwBgEAAGAAAAWgAAAwBgEAAHAAAAWBgABABwEAAAAAAAVVUAAFgYAAQAcBAAAQAAAFVVAABYGAAEAHAQAAIAAABVVQAAWBgABABwEAADAAAAVVUAAFgYAAQAcBAABAAAAFVVAABYGAAEAHAQAAUAAABVVQAAWBgABABwEAAGAAAAVVUAAFgYAAQAcBAABwAAAFVVAABiEAADMhAQAAAAAABiEAADchAQAAEAAABlAAAD8iAQAAAAAABoAAACGwAAAEgAAAvyABAAAAAAAEYQEAAAAAAAhn0QAAIAAAAAYBAAAgAAAAFAAAAAAAAAAAAAC3IAEAABAAAAhgAQgMEAAAAAAAAAAkAAAAAAgD8AAIA:AACAPwAAAAAAAAAIQgAQAAIAAAAqABCAwQAAAAAAAAAKABAAAQAAAB0AAAcSABAAAQAAACoAEAACAAAAAUAAAAAAAAAdAAAKMgAQAAMAAACGABAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAADzIAEAADAAAARgAQAAMAAAACQAAAAACAPwAAgD8AAAAAAAAAAAJAAAAAAIC:AACAvwAAAAAAAAAAOAAAB2IAEAABAAAAVgYQAAEAAAAGARAAAwAAADcAAAkyABAAAgAAAAYAEAABAAAAhgAQAAAAAACWBRAAAQAAABAAAAcSABAAAQAAAEYCEAACAAAARgIQAAIAAABEAAAFEgAQAAEAAAAKABAAAQAAADgAAAdyABAAAQAAAAYAEAABAAAARgIQAAIAAAAyAAAJggAQAAEAAAA6ABAAAAAAAAFAAAAA:39BAUAAAIAAgDcbAAAFggAQAAEAAAA6ABAAAQAAAFYAAAWCABAAAQAAADoAEAABAAAAMgAACYIAEAABAAAAOgAQAAEAAAABQAAAgACAvToAEAAAAAAAOCAAB4IAEAABAAAAOgAQAAEAAAABQAAAgAeAQUgAAAvyABAAAgAAAEYQEAAAAAAARn4QAAMAAAAAYBAAAwAAAAFAAAAAAAAAQQAABRIAEAADAAAAOgAQAAIAAAAaAAAFggAQAAIAAAA6ABAAAgAAADIAAAriABAAAwAAAPYPEAABAAAABgkQgEEAAAACAAAABgkQAAIAAAAAAAAKcgAQAAQAAABGAhAAAgAAAAJAAAAK1yO9CtcjvQrXI70AAAAAMgAADHIAEAAEAAAA9g8QAAEAAABGAhAABAAAAAJAAAAK1yM9CtcjPQrXIz0AAAAASAAAC:IAEAAFAAAARhAQAAAAAABGfhAABAAAAABgEAAEAAAAAUAAAAAAAAAyAAAJggAQAAEAAAAKABAABQAAAAFAAAAAAABAAUAAAAAAgL8QAAAHggAQAAQAAABGEhAAAQAAAEYSEAABAAAARAAABYIAEAAEAAAAOgAQAAQAAAA4AAAHcgAQAAUAAAD2DxAABAAAAEYSEAABAAAAMgAACYIAEAABAAAAOgAQAAEAAAABQAAAAAAAPwFAAAAAAAA:AAAACYIAEAABAAAAOgAQAAEAAAAKgCCAQQAAAAAAAAANAAAADgAACIIAEAABAAAAGoAgAAAAAAANAAAAOgAQAAEAAAAQAAAIggAQAAQAAABGgiAAAAAAAAwAAABGAhAABQAAAA4AAAeCABAAAQAAADoAEAABAAAAOgAQAAQAAAAyAAAKcgAQAAUAAABGAhAABQAAAPYPEAABAAAARoIgAAAAAAALAAAAAAAACXIAEAAGAAAARgIQgEEAAAAFAAAARoIgAAAAAAALAAAAEAAAB4IAEAABAAAARgIQAAYAAABGAhAABgAAAEQAAAWCABAAAQAAADoAEAABAAAAOAAAB3IAEAAGAAAA9g8QAAEAAABGAhAABgAAABAAAAeCABAAAQAAAEYCEAABAAAARgIQAAYAAAA0AAAHggAQAAEAAAA6ABAAAQAAAAFAAAAAAAAAMgAACRIAEAADAAAACgAQAAMAAAABQAAAgYCAOwFAAAAAAIC:MgAACRIAEAADAAAAOgAQAAEAAAAKABAAAwAAAAFAAAAAAIA:AAAACBIAEAAAAAAAOgAQgEEAAAABAAAAAUAAAAAAgD9IAAAL8gAQAAcAAAAWBRAAAAAAAEZ%EAAFAAAAAGAQAAUAAAABQAAAAAAAADgAAAtyABAACAAAAEaCIAAAAAAACgAAAAJAAACGq9s%hqvbPoar2z4AAAAAOAAAB8IAEAAHAAAApgIQAAEAAACmAhAAAQAAADIAAAqCABAABAAAABoAEAABAAAAGgAQAAEAAAAqABCAQQAAAAcAAAA2AAAGMgAQAAkAAADmiiAAAAAAAAgAAAA2AAAGQgAQAAkAAAAKgCAAAAAAAAkAAAA4AAAHcgAQAAoAAAD2DxAABwAAAEYCEAAJAAAAOAAACnIAEAAKAAAARgIQAAoAAAACQAAAcT0%P3E9Pj9xPT4:AAAAADIAAAlyABAACAAAAEYCEAAIAAAA9g8QAAQAAABGAhAACgAAADIAAA1yABAACAAAAEaCIAAAAAAABAAAAAJAAADG32I:xt9iP8bfYj8AAAAARgIQAAgAAAAyAAANcgAQAAgAAABGAhCAQQAAAAkAAAACQAAAKqd9PiqnfT4qp30%AAAAAEYCEAAIAAAAOAAACHIAEAAJAAAAVgUQAAEAAABGgiAAAAAAAAcAAAA4AAAKcgAQAAkAAABGAhAACQAAAAJAAACGq1s:hqtbP4arWz8AAAAAMgAACnIAEAAIAAAARgIQAAkAAACmChCAQQAAAAEAAABGAhAACAAAADgAAAhyABAACQAAAFYFEAABAAAAlocgAAAAAAAJAAAAOAAAB3IAEAAJAAAABgAQAAEAAABGAhAACQAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAIarWz%Gq1s:hqtbPwAAAABGAhAACAAAADgAAAkSABAACQAAACoAEIBBAAAAAQAAADqAIAAAAAAABwAAADgAAAliABAACQAAAKYKEIBBAAAAAQAAAAaBIAAAAAAACAAAADgAAAdyABAACQAAAAYAEAABAAAARgIQAAkAAAAyAAAMcgAQAAgAAABGAhAACQAAAAJAAACGq1s:hqtbP4arWz8AAAAARgIQAAgAAAA4AAAIcgAQAAkAAABWBRAAAQAAAJaHIAAAAAAABgAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAGn8gj9p:II:afyCPwAAAABGAhAACAAAADgAAAkSABAACQAAACoAEIBBAAAAAQAAADqAIAAAAAAABAAAADgAAAliABAACQAAAKYKEIBBAAAAAQAAAAaBIAAAAAAABQAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAGn8gj9p:II:afyCPwAAAABGAhAACAAAADgAAAgyABAACQAAAAYAEAABAAAA5oogAAAAAAAFAAAAOAAACEIAEAAJAAAACgAQAAEAAAAKgCAAAAAAAAYAAAAyAAAMcgAQAAgAAABGAhAACQAAAAJAAABp:II:afyCP2n8gj8AAAAARgIQAAgAAAA4AAAHcgAQAAgAAACWBxAAAwAAAEYCEAAIAAAAEAAACIIAEAAEAAAARgIQgEEAAAAGAAAARgIQAAEAAAAAAAAHggAQAAQAAAA6ABAABAAAADoAEAAEAAAAMgAAC3IAEAAJAAAAZggQAAEAAAD2DxCAQQAAAAQAAABmCBCAQQAAAAYAAAArAAAGggAQAAQAAAAqgCAAAAAAAA0AAAA4AAAHggAQAAQAAAAaABAAAAAAADoAEAAEAAAAAAAACIIAEAAFAAAACgAQgMEAAAAJAAAAAUAAAAAAgD9LAAAFggAQAAUAAAA6ABAABQAAADIAAAqCABAABgAAAAoAEICBAAAACQAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAYAAAA6ABAABgAAAAoAEICBAAAACQAAAAFAAACENFm%MgAACoIAEAAGAAAAOgAQAAYAAAAKABCAgQAAAAkAAAABQAAApA3JPzgAAAdCABAABwAAADoAEAAFAAAAOgAQAAYAAAAyAAAJQgAQAAcAAAAqABAABwAAAAFAAAAAAADAAUAAANsPSUAxAAAIkgAQAAkAAAAGCBAACQAAAAYIEIBBAAAACQAAAAEAAAdCABAABwAAACoAEAAHAAAACgAQAAkAAAAyAAAJggAQAAUAAAA6ABAABgAAADoAEAAFAAAAKgAQAAcAAAAzAAAJggAQAAYAAAAqABCAgQAAAAkAAAAaABCAgQAAAAkAAAA0AAAJQgAQAAcAAAAqABCAgQAAAAkAAAAaABCAgQAAAAkAAAAOAAAKQgAQAAcAAAACQAAAAACAPwAAgD8AAIA:AACAPyoAEAAHAAAAOAAAB4IAEAAGAAAAOgAQAAYAAAAqABAABwAAADgAAAdCABAABwAAADoAEAAGAAAAOgAQAAYAAAAyAAAJggAQAAcAAAAqABAABwAAAAFAAABfrqo8AUAAADZarr0yAAAJggAQAAcAAAAqABAABwAAADoAEAAHAAAAAUAAAOJ2OD4yAAAJggAQAAcAAAAqABAABwAAADoAEAAHAAAAAUAAAAQdqb4yAAAJQgAQAAcAAAAqABAABwAAADoAEAAHAAAAAUAAADj3fz84AAAHggAQAAcAAAA6ABAABgAAACoAEAAHAAAAMQAACYIAEAAIAAAAKgAQgIEAAAAJAAAAGgAQgIEAAAAJAAAAMgAACYIAEAAHAAAAOgAQAAcAAAABQAAAAAAAwAFAAADbD8k:AQAAB4IAEAAHAAAAOgAQAAgAAAA6ABAABwAAADIAAAmCABAABgAAADoAEAAGAAAAKgAQAAcAAAA6ABAABwAAAAEAAAdCABAABwAAADoAEAAJAAAAAUAAANsPScAAAAAHggAQAAYAAAA6ABAABgAAACoAEAAHAAAAMwAACEIAEAAHAAAAKgAQAAkAAAAaABCAQQAAAAkAAAA0AAAIggAQAAcAAAAqABAACQAAABoAEIBBAAAACQAAADEAAAhCABAABwAAACoAEAAHAAAAKgAQgEEAAAAHAAAAHQAACIIAEAAHAAAAOgAQAAcAAAA6ABCAQQAAAAcAAAABAAAHQgAQAAcAAAA6ABAABwAAACoAEAAHAAAANwAACoIAEAAGAAAAKgAQAAcAAAA6ABCAQQAAAAYAAAA6ABAABgAAAAAAAAeCABAABgAAADoAEAAGAAAAAUAAANsPSUA4AAAHEgAQAAkAAAA6ABAABgAAAAFAAACD%SI%OAAAByIAEAAJAAAAOgAQAAUAAAABQAAAg:miPkgAAAvyABAACQAAAEYAEAAJAAAARn4QAAYAAAAAYBAABgAAADoAEAAEAAAAMgAACXIAEAAEAAAARgIQAAQAAAAGABAABwAAAFYFEAAHAAAAOAAAB3IAEAAEAAAARgIQAAQAAABGAhAACQAAADgAAAdyABAABAAAAPYPEAACAAAARgIQAAQAAAA4AAAKcgAQAAQAAABGAhAABAAAAAJAAAAAAMA:AADAPwAAwD8AAAAAMgAADHIAEAAEAAAARgIQAAgAAAACQAAAg:miPoP5oj6D%aI%AAAAAEYCEAAEAAAAOAAACIIAEAAEAAAACgAQAAMAAAA6gCAAAAAAAA0AAAA4AAAHcgAQAAQAAAD2DxAABAAAAEYCEAAEAAAASAAAC:IAEAAHAAAARhAQAAAAAABGfhAABwAAAABgEAAHAAAAAUAAAAAAAAA4AAAH4gAQAAcAAAAGCRAABAAAAAYAEAAHAAAAGAAAB4IAEAAAAAAAOgAQAAAAAAABQAAAAACAPzIAAAlyABAAAgAAAEYCEAAEAAAABgAQAAcAAABGAhAAAgAAADcAAAlyABAAAgAAAPYPEAAAAAAARgIQAAIAAACWBxAABwAAADcAAAziABAAAwAAAPYPEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAABWDhAAAwAAAAAAAAlyABAABAAAAEYCEIBBAAAABQAAAEaCIAAAAAAADgAAABAAAAeCABAAAAAAAEYCEAAEAAAARgIQAAQAAABEAAAFggAQAAAAAAA6ABAAAAAAADgAAAdyABAABAAAAPYPEAAAAAAARgIQAAQAAAAQAAAHggAQAAAAAABGAhAAAQAAAEYCEAAEAAAASwAABRIAEAAAAAAACgAQAAAAAAAyAAAJEgAQAAQAAAA6ABAAAQAAAAFAAAAwbpm8AUAAACcWmD0yAAAJEgAQAAQAAAAKABAABAAAADoAEAABAAAAAUAAAIQ0Wb4yAAAJEgAQAAQAAAAKABAABAAAADoAEAABAAAAAUAAAKQNyT84AAAHQgAQAAAAAAAKABAAAAAAAAoAEAAEAAAAMgAADzIAEAAAAAAAlgUQAAAAAAACQAAAAAB8P51tID8AAAAAAAAAAAJAAAAAAAA8AAAAPAAAAAAAAAAASAAAC:IAEAAEAAAARgAQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAKcgAQAAYAAABGAhCAQQAAAAEAAAD2DxAAAQAAAEYCEAAGAAAAEAAAB0IAEAAAAAAARgIQAAYAAABGAhAABgAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAAGAAAApgoQAAAAAABGAhAABgAAADgAAAdyABAABwAAACYJEAABAAAAlgQQAAYAAAAyAAAKcgAQAAcAAACWBBAAAQAAACYJEAAGAAAARgIQgEEAAAAHAAAAMgAACXIAEAAIAAAARgIQAAEAAAD2DxAABAAAAEYCEAAGAAAAOAAAB3IAEAAJAAAApgoQAAQAAABGAhAABwAAADgAAAfSABAABAAAAAYJEAABAAAABgAQAAQAAAAyAAAJcgAQAAQAAABGAhAABgAAAFYFEAAEAAAAhgMQAAQAAAAAAAAJcgAQAAoAAABGAhCAQQAAAAUAAABGgiAAAAAAAAAAAAAQAAAHEgAQAAsAAABGAhAACgAAAEYCEAAIAAAAEAAAByIAEAALAAAARgIQAAoAAABGAhAACQAAABAAAAdCABAACwAAAEYCEAAKAAAARgIQAAQAAAAAAAAJcgAQAAwAAABGAhCAQQAAAAUAAABGgiAAAAAAAAEAAAAQAAAHEgAQAA0AAABGAhAADAAAAEYCEAAIAAAAEAAAByIAEAANAAAARgIQAAwAAABGAhAACQAAABAAAAdCABAADQAAAEYCEAAMAAAARgIQAAQAAAAAAAAJcgAQAA4AAABGAhCAQQAAAAUAAABGgiAAAAAAAAIAAAAQAAAHEgAQAA8AAABGAhAADgAAAEYCEAAIAAAAEAAAByIAEAAPAAAARgIQAA4AAABGAhAACQAAABAAAAdCABAADwAAAEYCEAAOAAAARgIQAAQAAAAAAAAJcgAQABAAAABGAhCAQQAAAAUAAABGgiAAAAAAAAMAAAAQAAAHEgAQAAgAAABGAhAAEAAAAEYCEAAIAAAAEAAAByIAEAAIAAAARgIQABAAAABGAhAACQAAABAAAAdCABAACAAAAEYCEAAQAAAARgIQAAQAAAAxAAAHQgAQAAAAAAABQAAAAAAAACoAEAALAAAAAQAAB4IAEAABAAAAKgAQAAAAAAABQAAAAQAAADEAAAcSABAABAAAAAFAAAAAAAAAKgAQAA0AAAA3AAAJQgAQAAAAAAAqABAAAAAAAAFAAAADAAAAAUAAAAIAAAA3AAAJQgAQAAAAAAAKABAABAAAACoAEAAAAAAAOgAQAAEAAAAxAAAHggAQAAEAAAABQAAAAAAAACoAEAAPAAAAHgAABxIAEAAEAAAAKgAQAAAAAAABQAAABAAAADcAAAlCABAAAAAAADoAEAABAAAACgAQAAQAAAAqABAAAAAAADEAAAeCABAAAQAAAAFAAAAAAAAAKgAQAAgAAAAeAAAHEgAQAAQAAAAqABAAAAAAAAFAAAAIAAAANwAACUIAEAAAAAAAOgAQAAEAAAAKABAABAAAACoAEAAAAAAAHwAAAyoAEAAAAAAANgAABXIAEAAEAAAARgIQAAgAAAA2AAAI8gAQAAkAAAACQAAAAAAAAAAAAAAAAAAAAAAAABIAAAEgAAAHggAQAAEAAAAqABAAAAAAAAFAAAABAAAAHwAEAzoAEAABAAAAOAAAB3IAEAARAAAApgoQAAsAAABGAhAADQAAADIAAApyABAADQAAAEYCEAALAAAApgoQgEEAAAANAAAARgIQABEAAAA4AAAHcgAQABEAAACmChAACwAAAEYCEAAIAAAAMgAACnIAEAAPAAAARgIQAAsAAACmChCAQQAAAAgAAABGAhAAEQAAADYAAAVyABAABAAAAEYCEAAIAAAANgAACPIAEAAJAAAAAkAAAAAAAAAAAAAAAAAAAAMAAAASAAABIAAAB4IAEAABAAAAKgAQAAAAAAABQAAAAgAAAB8ABAM6ABAAAQAAADgAAAdyABAAEQAAAEYCEAALAAAApgoQAA0AAAAyAAAKcgAQAAsAAABGAhAADQAAAKYKEIBBAAAACwAAAEYCEAARAAAAOAAAB3IAEAARAAAApgoQAA0AAABGAhAADwAAADIAAApyABAADwAAAEYCEAANAAAApgoQgEEAAAAPAAAARgIQABEAAAA2AAAFcgAQAAQAAABGAhAACAAAADYAAAjyABAACQAAAAJAAAAAAAAAAAAAAAAAAAADAAAAEgAAASAAAAeCABAAAQAAACoAEAAAAAAAAUAAAAMAAAAfAAQDOgAQAAEAAAA4AAAHcgAQABEAAACmChAADQAAAEYCEAAPAAAAMgAACnIAEAAPAAAARgIQAA0AAACmChCAQQAAAA8AAABGAhAAEQAAADgAAAdyABAAEQAAAKYKEAALAAAARgIQAAgAAAAyAAAKcgAQAAQAAABGAhAACwAAAKYKEIBBAAAACAAAAEYCEAARAAAANgAACPIAEAAJAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB4IAEAABAAAAKgAQAAAAAAABQAAABAAAAB8ABAM6ABAAAQAAADgAAAdyABAAEQAAAKYKEAAPAAAARgIQAAgAAAAyAAAKcgAQAAsAAABGAhAADwAAAKYKEIBBAAAACAAAAEYCEAARAAAAOAAAB3IAEAARAAAARgIQAA0AAACmChAADwAAADIAAApyABAADQAAAEYCEAAPAAAApgoQgEEAAAANAAAARgIQABEAAAA2AAAFcgAQAAQAAABGAhAACAAAADYAAAjyABAACQAAAAJAAAAAAAAAAAAAAAAAAAADAAAAEgAAASAAAAeCABAAAQAAACoAEAAAAAAAAUAAAAUAAAAfAAQDOgAQAAEAAAA2AAAFcgAQAAQAAABGAhAACAAAADYAAAjyABAACQAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAEgAAASAAAAeCABAAAQAAACoAEAAAAAAAAUAAAAYAAAAfAAQDOgAQAAEAAAA4AAAHcgAQABEAAABGAhAACwAAAKYKEAANAAAAMgAACnIAEAALAAAARgIQAA0AAACmChCAQQAAAAsAAABGAhAAEQAAADgAAAdyABAAEQAAAKYKEAAPAAAARgIQAAgAAAAyAAAKcgAQAAQAAABGAhAADwAAAKYKEIBBAAAACAAAAEYCEAARAAAANgAACPIAEAAJAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB4IAEAABAAAAKgAQAAAAAAABQAAABwAAAB8ABAM6ABAAAQAAADgAAAdyABAAEQAAAKYKEAALAAAARgIQAAgAAAAyAAAKcgAQAAkAAABGAhAACwAAAKYKEIBBAAAACAAAAEYCEAARAAAAOAAAB3IAEAARAAAApgoQAA8AAABGAhAACAAAADIAAApyABAABAAAAEYCEAAPAAAApgoQgEEAAAAIAAAARgIQABEAAAA2AAAFggAQAAkAAAABQAAABQAAABIAAAEgAAAHggAQAAEAAAAqABAAAAAAAAFAAAAIAAAAHwAEAzoAEAABAAAAOAAAB3IAEAARAAAApgoQAAgAAABGAhAACwAAADIAAApyABAACwAAAEYCEAAIAAAApgoQgEEAAAALAAAARgIQABEAAAA4AAAHcgAQABEAAACmChAACAAAAEYCEAAPAAAAMgAACnIAEAANAAAARgIQAAgAAACmChCAQQAAAA8AAABGAhAAEQAAADYAAAVyABAADwAAAEYCEAAIAAAANgAABXIAEAAEAAAARgIQAAgAAAA2AAAI8gAQAAkAAAACQAAAAAAAAAAAAAAAAAAAAwAAABIAAAEgAAAHggAQAAEAAAAqABAAAAAAAAFAAAAJAAAAHwAEAzoAEAABAAAAOAAAB3IAEAARAAAApgoQAAsAAABGAhAADQAAADIAAApyABAADQAAAEYCEAALAAAApgoQgEEAAAANAAAARgIQABEAAAA4AAAHcgAQABEAAACmChAACAAAAEYCEAAPAAAAMgAACnIAEAAPAAAARgIQAAgAAACmChCAQQAAAA8AAABGAhAAEQAAADYAAAVyABAABAAAAEYCEAAIAAAANgAACPIAEAAJAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB4IAEAABAAAAKgAQAAAAAAABQAAACgAAAB8ABAM6ABAAAQAAADYAAAVyABAABAAAAEYCEAAIAAAANgAACPIAEAAJAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAASAAABOAAAB3IAEAARAAAApgoQAAgAAABGAhAADwAAADIAAApyABAAEQAAAEYCEAAIAAAApgoQgEEAAAAPAAAARgIQABEAAAA4AAAHcgAQABIAAACmChAADQAAAEYCEAAPAAAAMgAACnIAEAASAAAARgIQAA0AAACmChCAQQAAAA8AAABGAhAAEgAAADgAAAdyABAAEwAAAEYCEAANAAAApgoQAA8AAAAyAAAKcgAQABMAAABGAhAADwAAAKYKEIBBAAAADQAAAEYCEAATAAAAOAAAB3IAEAAUAAAApgoQAAgAAABGAhAACwAAADIAAApyABAAFAAAAEYCEAAIAAAApgoQgEEAAAALAAAARgIQABQAAAA4AAAHcgAQABUAAACmChAACwAAAEYCEAANAAAAMgAACnIAEAAVAAAARgIQAAsAAACmChCAQQAAAA0AAABGAhAAFQAAACAAAAryABAAFgAAAKYKEAAAAAAAAkAAAAsAAAAMAAAADQAAAA4AAAA4AAAHcgAQABcAAABGAhAACwAAAKYKEAANAAAAMgAACnIAEAAXAAAARgIQAA0AAACmChCAQQAAAAsAAABGAhAAFwAAACAAAAdCABAAAAAAACoAEAAAAAAAAUAAAA8AAAABAAAHggAQABgAAAAqABAAAAAAAAFAAAAEAAAANgAABYIAEAAUAAAAAUAAAAUAAAA2AAAIcgAQABgAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAnyABAAGAAAAPYPEAAWAAAARg4QABQAAABGDhAAGAAAADcAAAlyABAAFwAAAPYPEAAWAAAARgIQABcAAABGAhAACwAAADYAAAWCABAACAAAAAFAAAAFAAAANwAACfIAEAAYAAAApgoQABYAAABGDhAACAAAAEYOEAAYAAAANwAACXIAEAAXAAAApgoQABYAAABGAhAACwAAAEYCEAAXAAAANwAACXIAEAAVAAAApgoQABYAAABGAhAAFQAAAEYCEAANAAAANwAACXIAEAAZAAAApgoQABYAAABGAhAAEwAAAEYCEAAPAAAANwAACXIAEAAaAAAApgoQABYAAABGAhAADwAAAEYCEAAIAAAANwAADPIAEAAYAAAAVgUQABYAAAACQAAAAAAAAAAAAAAAAAAABAAAAEYOEAAYAAAANwAACXIAEAAUAAAAVgUQABYAAABGAhAAFAAAAEYCEAAXAAAANwAACXIAEAATAAAAVgUQABYAAABGAhAAEwAAAEYCEAAVAAAANwAACXIAEAAVAAAAVgUQABYAAABGAhAADwAAAEYCEAAZAAAANwAACeIAEAAWAAAAVgUQABYAAAAGCRAACAAAAAYJEAAaAAAANwAACXIAEAALAAAABgAQABYAAABGAhAACwAAAEYCEAAUAAAANwAACXIAEAANAAAABgAQABYAAABGAhAADQAAAEYCEAATAAAANwAACXIAEAAPAAAABgAQABYAAABGAhAAEgAAAEYCEAAVAAAANwAACXIAEAAEAAAABgAQABYAAABGAhAAEQAAAJYHEAAWAAAANwAACfIAEAAJAAAABgAQABYAAABGDhAACAAAAEYOEAAYAAAAFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEfAAQDOgAQAAkAAAAgAAAKcgAQAAgAAAD2DxAACQAAAAJAAAADAAAABAAAAAUAAAAAAAAANwAACXIAEAAEAAAABgAQAAgAAABGAhAACwAAAEYCEAAEAAAANwAACbIAEAAIAAAAVgUQAAgAAABGCBAACwAAAEYIEAAJAAAAEAAAB0IAEAAAAAAARgIQAAsAAABGAhAACwAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAAJAAAApgoQAAAAAABGAhAACwAAABAAAAdCABAAAAAAAEYCEAANAAAARgIQAA0AAABEAAAFQgAQAAAAAAAqABAAAAAAADgAAAdyABAACwAAAKYKEAAAAAAARgIQAA0AAAAQAAAHQgAQAAAAAABGAhAADwAAAEYCEAAPAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAA0AAACmChAAAAAAAEYCEAAPAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAAEAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYDEAAIAAAARgMQAAgAAABEAAAFQgAQAAAAAAAqABAAAAAAADgAAAeyABAACAAAAKYKEAAAAAAARgwQAAgAAAAQAAAHQgAQAAAAAABGAhAACQAAAEYCEAALAAAAAAAACIIAEAABAAAAKgAQgMEAAAAAAAAAAUAAAAAAgD9LAAAFggAQAAEAAAA6ABAAAQAAADIAAAqCABAABAAAACoAEICBAAAAAAAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAQAAAA6ABAABAAAACoAEICBAAAAAAAAAAFAAACENFm%MgAACoIAEAAEAAAAOgAQAAQAAAAqABCAgQAAAAAAAAABQAAApA3JPzgAAAeCABAABQAAADoAEAABAAAAOgAQAAQAAAAyAAAJggAQAAUAAAA6ABAABQAAAAFAAAAAAADAAUAAANsPSUAxAAAIQgAQAAAAAAAqABAAAAAAACoAEIBBAAAAAAAAAAEAAAdCABAAAAAAACoAEAAAAAAAOgAQAAUAAAAyAAAJQgAQAAAAAAA6ABAABAAAADoAEAABAAAAKgAQAAAAAAAxAAAHggAQAAEAAAABQAAAbxKDOioAEAAAAAAATQAABoIAEAAEAAAAANAAACoAEAAAAAAADgAAB0IAEAAAAAAAKgAQAAAAAAA6ABAABAAAADcAAAlCABAAAAAAADoAEAABAAAAKgAQAAAAAAABQAAAAACAPzgAAAeCABAAAQAAABoAEAAJAAAACgAQAAsAAAAyAAAKggAQAAEAAAAKABAACQAAABoAEAALAAAAOgAQgEEAAAABAAAAEAAAB4IAEAAEAAAARgIQAAsAAABGAhAADQAAAAAAAAiCABAABQAAADoAEIDBAAAABAAAAAFAAAAAAIA:SwAABYIAEAAFAAAAOgAQAAUAAAAyAAAKggAQAAYAAAA6ABCAgQAAAAQAAAABQAAAMG6ZvAFAAAAnFpg9MgAACoIAEAAGAAAAOgAQAAYAAAA6ABCAgQAAAAQAAAABQAAAhDRZvjIAAAqCABAABgAAADoAEAAGAAAAOgAQgIEAAAAEAAAAAUAAAKQNyT84AAAHggAQAAcAAAA6ABAABQAAADoAEAAGAAAAMgAACYIAEAAHAAAAOgAQAAcAAAABQAAAAAAAwAFAAADbD0lAMQAACIIAEAAEAAAAOgAQAAQAAAA6ABCAQQAAAAQAAAABAAAHggAQAAQAAAA6ABAABAAAADoAEAAHAAAAMgAACYIAEAAEAAAAOgAQAAYAAAA6ABAABQAAADoAEAAEAAAAMQAAB4IAEAAFAAAAAUAAAG8Sgzo6ABAABAAAAE0AAAaCABAABgAAAADQAAA6ABAABAAAAA4AAAeCABAABAAAADoAEAAEAAAAOgAQAAYAAAA3AAAJggAQAAQAAAA6ABAABQAAADoAEAAEAAAAAUAAAAAAgD84AAAHggAQAAUAAAAaABAACwAAAAoAEAANAAAAMgAACoIAEAAFAAAACgAQAAsAAAAaABAADQAAADoAEIBBAAAABQAAADgAAAeCABAABAAAADoAEAAEAAAAOgAQAAUAAAAyAAAJQgAQAAAAAAA6ABAAAQAAACoAEAAAAAAAOgAQAAQAAAAQAAAHggAQAAEAAABGAhAADQAAAEYCEAAEAAAAAAAACIIAEAAEAAAAOgAQgMEAAAABAAAAAUAAAAAAgD9LAAAFggAQAAQAAAA6ABAABAAAADIAAAqCABAABQAAADoAEICBAAAAAQAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAUAAAA6ABAABQAAADoAEICBAAAAAQAAAAFAAACENFm%MgAACoIAEAAFAAAAOgAQAAUAAAA6ABCAgQAAAAEAAAABQAAApA3JPzgAAAeCABAABgAAADoAEAAEAAAAOgAQAAUAAAAyAAAJggAQAAYAAAA6ABAABgAAAAFAAAAAAADAAUAAANsPSUAxAAAIggAQAAEAAAA6ABAAAQAAADoAEIBBAAAAAQAAAAEAAAeCABAAAQAAADoAEAABAAAAOgAQAAYAAAAyAAAJggAQAAEAAAA6ABAABQAAADoAEAAEAAAAOgAQAAEAAAAxAAAHggAQAAQAAAABQAAAbxKDOjoAEAABAAAATQAABoIAEAAFAAAAANAAADoAEAABAAAADgAAB4IAEAABAAAAOgAQAAEAAAA6ABAABQAAADcAAAmCABAAAQAAADoAEAAEAAAAOgAQAAEAAAABQAAAAACAPzgAAAeCABAABAAAAAoAEAAEAAAAGgAQAA0AAAAyAAAKggAQAAQAAAAKABAADQAAABoAEAAEAAAAOgAQgEEAAAAEAAAAMgAACUIAEAAAAAAAOgAQAAQAAAA6ABAAAQAAACoAEAAAAAAAIQAAB4IAEAABAAAAOgAQAAkAAAABQAAABAAAAB8ABAM6ABAAAQAAABAAAAeCABAAAQAAAEYCEAAEAAAARgMQAAgAAAAAAAAIQgAQAAQAAAA6ABCAwQAAAAEAAAABQAAAAACAP0sAAAVCABAABAAAACoAEAAEAAAAMgAACoIAEAAEAAAAOgAQgIEAAAABAAAAAUAAADBumbwBQAAAJxaYPTIAAAqCABAABAAAADoAEAAEAAAAOgAQgIEAAAABAAAAAUAAAIQ0Wb4yAAAKggAQAAQAAAA6ABAABAAAADoAEICBAAAAAQAAAAFAAACkDck:OAAAB4IAEAAFAAAAKgAQAAQAAAA6ABAABAAAADIAAAmCABAABQAAADoAEAAFAAAAAUAAAAAAAMABQAAA2w9JQDEAAAiCABAAAQAAADoAEAABAAAAOgAQgEEAAAABAAAAAQAAB4IAEAABAAAAOgAQAAEAAAA6ABAABQAAADIAAAmCABAAAQAAADoAEAAEAAAAKgAQAAQAAAA6ABAAAQAAADEAAAdCABAABAAAAAFAAABvEoM6OgAQAAEAAABNAAAGggAQAAQAAAAA0AAAOgAQAAEAAAAOAAAHggAQAAEAAAA6ABAAAQAAADoAEAAEAAAANwAACYIAEAABAAAAKgAQAAQAAAA6ABAAAQAAAAFAAAAAAIA:OAAAByIAEAAEAAAAGgAQAAQAAAAKABAACAAAADIAAAoSABAABAAAAAoAEAAEAAAAGgAQAAgAAAAaABCAQQAAAAQAAAAyAAAJQgAQAAAAAAAKABAABAAAADoAEAABAAAAKgAQAAAAAAAVAAABHwAEAyoAEAAIAAAAEAAAB4IAEAABAAAARgMQAAgAAABGAhAACQAAAAAAAAgSABAABAAAADoAEIDBAAAAAQAAAAFAAAAAAIA:SwAABRIAEAAEAAAACgAQAAQAAAAyAAAKIgAQAAQAAAA6ABCAgQAAAAEAAAABQAAAMG6ZvAFAAAAnFpg9MgAACiIAEAAEAAAAGgAQAAQAAAA6ABCAgQAAAAEAAAABQAAAhDRZvjIAAAoiABAABAAAABoAEAAEAAAAOgAQgIEAAAABAAAAAUAAAKQNyT84AAAHQgAQAAQAAAAKABAABAAAABoAEAAEAAAAMgAACUIAEAAEAAAAKgAQAAQAAAABQAAAAAAAwAFAAADbD0lAMQAACIIAEAABAAAAOgAQAAEAAAA6ABCAQQAAAAEAAAABAAAHggAQAAEAAAA6ABAAAQAAACoAEAAEAAAAMgAACYIAEAABAAAAGgAQAAQAAAAKABAABAAAADoAEAABAAAAMQAABxIAEAAEAAAAAUAAAG8Sgzo6ABAAAQAAAE0AAAYiABAABAAAAADQAAA6ABAAAQAAAA4AAAeCABAAAQAAADoAEAABAAAAGgAQAAQAAAA3AAAJggAQAAEAAAAKABAABAAAADoAEAABAAAAAUAAAAAAgD84AAAHEgAQAAQAAAAKABAACQAAABoAEAAIAAAAMgAAChIAEAAEAAAACgAQAAgAAAAaABAACQAAAAoAEIBBAAAABAAAADIAAAlCABAAAAAAAAoAEAAEAAAAOgAQAAEAAAAqABAAAAAAABUAAAE0AAAIQgAQAAAAAAAqABCAQQAAAAAAAAABQAAAAAAAABIAAAE2AAAFQgAQAAAAAAABQAAAAAAAABUAAAFIAAAL8gAQAAQAAABGABAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAADgAAAcSABAAAAAAACoAEAAAAAAAOgAQAAQAAAAQAAAHEgAQAAQAAABGAhAACgAAAEYCEAAGAAAAEAAAByIAEAAEAAAARgIQAAoAAABGAhAABwAAABAAAAdCABAABAAAAEYCEAAKAAAARgIQAAEAAAAQAAAHEgAQAAgAAABGAhAADAAAAEYCEAAGAAAAEAAAByIAEAAIAAAARgIQAAwAAABGAhAABwAAABAAAAdCABAACAAAAEYCEAAMAAAARgIQAAEAAAAQAAAHEgAQAAkAAABGAhAADgAAAEYCEAAGAAAAEAAAByIAEAAJAAAARgIQAA4AAABGAhAABwAAABAAAAdCABAACQAAAEYCEAAOAAAARgIQAAEAAAAQAAAHEgAQAAYAAABGAhAAEAAAAEYCEAAGAAAAEAAAByIAEAAGAAAARgIQABAAAABGAhAABwAAABAAAAdCABAABgAAAEYCEAAQAAAARgIQAAEAAAAxAAAHIgAQAAAAAAABQAAAAAAAACoAEAAEAAAAAQAAB0IAEAAAAAAAGgAQAAAAAAABQAAAAQAAADEAAAcSABAAAQAAAAFAAAAAAAAAKgAQAAgAAAA3AAAJIgAQAAAAAAAaABAAAAAAAAFAAAADAAAAAUAAAAIAAAA3AAAJIgAQAAAAAAAKABAAAQAAABoAEAAAAAAAKgAQAAAAAAAxAAAHQgAQAAAAAAABQAAAAAAAACoAEAAJAAAAHgAABxIAEAABAAAAGgAQAAAAAAABQAAABAAAADcAAAkiABAAAAAAACoAEAAAAAAACgAQAAEAAAAaABAAAAAAADEAAAdCABAAAAAAAAFAAAAAAAAAKgAQAAYAAAAeAAAHEgAQAAEAAAAaABAAAAAAAAFAAAAIAAAANwAACSIAEAAAAAAAKgAQAAAAAAAKABAAAQAAABoAEAAAAAAAHwAAAxoAEAAAAAAANgAABXIAEAABAAAARgIQAAYAAAA2AAAI8gAQAAcAAAACQAAAAAAAAAAAAAAAAAAAAAAAABIAAAEgAAAHQgAQAAAAAAAaABAAAAAAAAFAAAABAAAAHwAEAyoAEAAAAAAAOAAAB3IAEAAKAAAApgoQAAQAAABGAhAACAAAADIAAApyABAACAAAAEYCEAAEAAAApgoQgEEAAAAIAAAARgIQAAoAAAA4AAAHcgAQAAoAAACmChAABAAAAEYCEAAGAAAAMgAACnIAEAAJAAAARgIQAAQAAACmChCAQQAAAAYAAABGAhAACgAAADYAAAVyABAAAQAAAEYCEAAGAAAANgAACPIAEAAHAAAAAkAAAAAAAAAAAAAAAAAAAAMAAAASAAABIAAAB0IAEAAAAAAAGgAQAAAAAAABQAAAAgAAAB8ABAMqABAAAAAAADgAAAdyABAACgAAAEYCEAAEAAAApgoQAAgAAAAyAAAKcgAQAAQAAABGAhAACAAAAKYKEIBBAAAABAAAAEYCEAAKAAAAOAAAB3IAEAAKAAAApgoQAAgAAABGAhAACQAAADIAAApyABAACQAAAEYCEAAIAAAApgoQgEEAAAAJAAAARgIQAAoAAAA2AAAFcgAQAAEAAABGAhAABgAAADYAAAjyABAABwAAAAJAAAAAAAAAAAAAAAAAAAADAAAAEgAAASAAAAdCABAAAAAAABoAEAAAAAAAAUAAAAMAAAAfAAQDKgAQAAAAAAA4AAAHcgAQAAoAAACmChAACAAAAEYCEAAJAAAAMgAACnIAEAAJAAAARgIQAAgAAACmChCAQQAAAAkAAABGAhAACgAAADgAAAdyABAACgAAAKYKEAAEAAAARgIQAAYAAAAyAAAKcgAQAAEAAABGAhAABAAAAKYKEIBBAAAABgAAAEYCEAAKAAAANgAACPIAEAAHAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB0IAEAAAAAAAGgAQAAAAAAABQAAABAAAAB8ABAMqABAAAAAAADgAAAdyABAACgAAAKYKEAAJAAAARgIQAAYAAAAyAAAKcgAQAAQAAABGAhAACQAAAKYKEIBBAAAABgAAAEYCEAAKAAAAOAAAB3IAEAAKAAAARgIQAAgAAACmChAACQAAADIAAApyABAACAAAAEYCEAAJAAAApgoQgEEAAAAIAAAARgIQAAoAAAA2AAAFcgAQAAEAAABGAhAABgAAADYAAAjyABAABwAAAAJAAAAAAAAAAAAAAAAAAAADAAAAEgAAASAAAAdCABAAAAAAABoAEAAAAAAAAUAAAAUAAAAfAAQDKgAQAAAAAAA2AAAFcgAQAAEAAABGAhAABgAAADYAAAjyABAABwAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAEgAAASAAAAdCABAAAAAAABoAEAAAAAAAAUAAAAYAAAAfAAQDKgAQAAAAAAA4AAAHcgAQAAoAAABGAhAABAAAAKYKEAAIAAAAMgAACnIAEAAEAAAARgIQAAgAAACmChCAQQAAAAQAAABGAhAACgAAADgAAAdyABAACgAAAKYKEAAJAAAARgIQAAYAAAAyAAAKcgAQAAEAAABGAhAACQAAAKYKEIBBAAAABgAAAEYCEAAKAAAANgAACPIAEAAHAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB0IAEAAAAAAAGgAQAAAAAAABQAAABwAAAB8ABAMqABAAAAAAADgAAAdyABAACgAAAKYKEAAEAAAARgIQAAYAAAAyAAAKcgAQAAcAAABGAhAABAAAAKYKEIBBAAAABgAAAEYCEAAKAAAAOAAAB3IAEAAKAAAApgoQAAkAAABGAhAABgAAADIAAApyABAAAQAAAEYCEAAJAAAApgoQgEEAAAAGAAAARgIQAAoAAAA2AAAFggAQAAcAAAABQAAABQAAABIAAAEgAAAHQgAQAAAAAAAaABAAAAAAAAFAAAAIAAAAHwAEAyoAEAAAAAAAOAAAB3IAEAAKAAAARgIQAAQAAACmChAABgAAADIAAApyABAABAAAAEYCEAAGAAAApgoQgEEAAAAEAAAARgIQAAoAAAA4AAAHcgAQAAoAAACmChAABgAAAEYCEAAJAAAAMgAACnIAEAAIAAAARgIQAAYAAACmChCAQQAAAAkAAABGAhAACgAAADYAAAVyABAACQAAAEYCEAAGAAAANgAABXIAEAABAAAARgIQAAYAAAA2AAAI8gAQAAcAAAACQAAAAAAAAAAAAAAAAAAAAwAAABIAAAEgAAAHQgAQAAAAAAAaABAAAAAAAAFAAAAJAAAAHwAEAyoAEAAAAAAAOAAAB3IAEAAKAAAApgoQAAQAAABGAhAACAAAADIAAApyABAACAAAAEYCEAAEAAAApgoQgEEAAAAIAAAARgIQAAoAAAA4AAAHcgAQAAoAAACmChAABgAAAEYCEAAJAAAAMgAACnIAEAAJAAAARgIQAAYAAACmChCAQQAAAAkAAABGAhAACgAAADYAAAVyABAAAQAAAEYCEAAGAAAANgAACPIAEAAHAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB0IAEAAAAAAAGgAQAAAAAAABQAAACgAAAB8ABAMqABAAAAAAADYAAAVyABAAAQAAAEYCEAAGAAAANgAACPIAEAAHAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAASAAABOAAAB3IAEAAKAAAApgoQAAYAAABGAhAACQAAADIAAApyABAACgAAAEYCEAAGAAAApgoQgEEAAAAJAAAARgIQAAoAAAA4AAAHcgAQAAsAAACmChAACAAAAEYCEAAJAAAAMgAACnIAEAALAAAARgIQAAgAAACmChCAQQAAAAkAAABGAhAACwAAADgAAAdyABAADAAAAEYCEAAIAAAApgoQAAkAAAAyAAAKcgAQAAwAAABGAhAACQAAAKYKEIBBAAAACAAAAEYCEAAMAAAAOAAAB3IAEAANAAAARgIQAAQAAACmChAABgAAADIAAApyABAADQAAAEYCEAAGAAAApgoQgEEAAAAEAAAARgIQAA0AAAA4AAAHcgAQAA4AAACmChAABAAAAEYCEAAIAAAAMgAACnIAEAAOAAAARgIQAAQAAACmChCAQQAAAAgAAABGAhAADgAAACAAAAryABAADwAAAFYFEAAAAAAAAkAAAAsAAAAMAAAADQAAAA4AAAA4AAAHcgAQABAAAABGAhAABAAAAKYKEAAIAAAAMgAACnIAEAAQAAAARgIQAAgAAACmChCAQQAAAAQAAABGAhAAEAAAACAAAAciABAAAAAAABoAEAAAAAAAAUAAAA8AAAABAAAHggAQABEAAAAaABAAAAAAAAFAAAAEAAAANgAABYIAEAANAAAAAUAAAAUAAAA2AAAIcgAQABEAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAnyABAAEQAAAPYPEAAPAAAARg4QAA0AAABGDhAAEQAAADcAAAlyABAAEAAAAPYPEAAPAAAARgIQABAAAABGAhAABAAAADYAAAWCABAABgAAAAFAAAAFAAAANwAACfIAEAARAAAApgoQAA8AAABGDhAABgAAAEYOEAARAAAANwAACXIAEAAQAAAApgoQAA8AAABGAhAABAAAAEYCEAAQAAAANwAACXIAEAAOAAAApgoQAA8AAABGAhAADgAAAEYCEAAIAAAANwAACXIAEAASAAAApgoQAA8AAABGAhAADAAAAEYCEAAJAAAANwAACXIAEAATAAAApgoQAA8AAABGAhAACQAAAEYCEAAGAAAANwAADPIAEAARAAAAVgUQAA8AAAACQAAAAAAAAAAAAAAAAAAABAAAAEYOEAARAAAANwAACXIAEAANAAAAVgUQAA8AAABGAhAADQAAAEYCEAAQAAAANwAACXIAEAAMAAAAVgUQAA8AAABGAhAADAAAAEYCEAAOAAAANwAACXIAEAAOAAAAVgUQAA8AAABGAhAACQAAAEYCEAASAAAANwAACeIAEAAPAAAAVgUQAA8AAAAGCRAABgAAAAYJEAATAAAANwAACXIAEAAEAAAABgAQAA8AAABGAhAABAAAAEYCEAANAAAANwAACXIAEAAIAAAABgAQAA8AAABGAhAACAAAAEYCEAAMAAAANwAACXIAEAAJAAAABgAQAA8AAABGAhAACwAAAEYCEAAOAAAANwAACXIAEAABAAAABgAQAA8AAABGAhAACgAAAJYHEAAPAAAANwAACfIAEAAHAAAABgAQAA8AAABGDhAABgAAAEYOEAARAAAAFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEfAAQDOgAQAAcAAAAgAAAKcgAQAAYAAAD2DxAABwAAAAJAAAADAAAABAAAAAUAAAAAAAAANwAACXIAEAABAAAABgAQAAYAAABGAhAABAAAAEYCEAABAAAANwAACbIAEAAGAAAAVgUQAAYAAABGCBAABAAAAEYIEAAHAAAAEAAAByIAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAUiABAAAAAAABoAEAAAAAAAOAAAB3IAEAAEAAAAVgUQAAAAAABGAhAABAAAABAAAAciABAAAAAAAEYCEAAIAAAARgIQAAgAAABEAAAFIgAQAAAAAAAaABAAAAAAADgAAAdyABAABwAAAFYFEAAAAAAARgIQAAgAAAAQAAAHIgAQAAAAAABGAhAACQAAAEYCEAAJAAAARAAABSIAEAAAAAAAGgAQAAAAAAA4AAAHcgAQAAgAAABWBRAAAAAAAEYCEAAJAAAAEAAAByIAEAAAAAAARgIQAAEAAABGAhAAAQAAAEQAAAUiABAAAAAAABoAEAAAAAAAOAAAB3IAEAABAAAAVgUQAAAAAABGAhAAAQAAABAAAAciABAAAAAAAEYDEAAGAAAARgMQAAYAAABEAAAFIgAQAAAAAAAaABAAAAAAADgAAAeyABAABgAAAFYFEAAAAAAARgwQAAYAAAAQAAAHIgAQAAAAAABGAhAABAAAAEYCEAAHAAAAAAAACEIAEAAAAAAAGgAQgMEAAAAAAAAAAUAAAAAAgD9LAAAFQgAQAAAAAAAqABAAAAAAADIAAAqCABAAAQAAABoAEICBAAAAAAAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAEAAAA6ABAAAQAAABoAEICBAAAAAAAAAAFAAACENFm%MgAACoIAEAABAAAAOgAQAAEAAAAaABCAgQAAAAAAAAABQAAApA3JPzgAAAeCABAABAAAACoAEAAAAAAAOgAQAAEAAAAyAAAJggAQAAQAAAA6ABAABAAAAAFAAAAAAADAAUAAANsPSUAxAAAIIgAQAAAAAAAaABAAAAAAABoAEIBBAAAAAAAAAAEAAAciABAAAAAAABoAEAAAAAAAOgAQAAQAAAAyAAAJIgAQAAAAAAA6ABAAAQAAACoAEAAAAAAAGgAQAAAAAAAxAAAHQgAQAAAAAAABQAAAbxKDOhoAEAAAAAAATQAABoIAEAABAAAAANAAABoAEAAAAAAADgAAByIAEAAAAAAAGgAQAAAAAAA6ABAAAQAAADcAAAkiABAAAAAAACoAEAAAAAAAGgAQAAAAAAABQAAAAACAPzgAAAdCABAAAAAAABoAEAAEAAAACgAQAAcAAAAyAAAKQgAQAAAAAAAKABAABAAAABoAEAAHAAAAKgAQgEEAAAAAAAAAEAAAB4IAEAABAAAARgIQAAcAAABGAhAACAAAAAAAAAiCABAABAAAADoAEIDBAAAAAQAAAAFAAAAAAIA:SwAABYIAEAAEAAAAOgAQAAQAAAAyAAAKggAQAAUAAAA6ABCAgQAAAAEAAAABQAAAMG6ZvAFAAAAnFpg9MgAACoIAEAAFAAAAOgAQAAUAAAA6ABCAgQAAAAEAAAABQAAAhDRZvjIAAAqCABAABQAAADoAEAAFAAAAOgAQgIEAAAABAAAAAUAAAKQNyT84AAAHQgAQAAcAAAA6ABAABAAAADoAEAAFAAAAMgAACUIAEAAHAAAAKgAQAAcAAAABQAAAAAAAwAFAAADbD0lAMQAACIIAEAABAAAAOgAQAAEAAAA6ABCAQQAAAAEAAAABAAAHggAQAAEAAAA6ABAAAQAAACoAEAAHAAAAMgAACYIAEAABAAAAOgAQAAUAAAA6ABAABAAAADoAEAABAAAAMQAAB4IAEAAEAAAAAUAAAG8Sgzo6ABAAAQAAAE0AAAaCABAABQAAAADQAAA6ABAAAQAAAA4AAAeCABAAAQAAADoAEAABAAAAOgAQAAUAAAA3AAAJggAQAAEAAAA6ABAABAAAADoAEAABAAAAAUAAAAAAgD84AAAHggAQAAQAAAAaABAABwAAAAoAEAAIAAAAMgAACoIAEAAEAAAACgAQAAcAAAAaABAACAAAADoAEIBBAAAABAAAADgAAAeCABAAAQAAADoAEAABAAAAOgAQAAQAAAAyAAAJIgAQAAAAAAAqABAAAAAAABoAEAAAAAAAOgAQAAEAAAAQAAAHQgAQAAAAAABGAhAACAAAAEYCEAABAAAAAAAACIIAEAABAAAAKgAQgMEAAAAAAAAAAUAAAAAAgD9LAAAFggAQAAEAAAA6ABAAAQAAADIAAAqCABAABAAAACoAEICBAAAAAAAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAQAAAA6ABAABAAAACoAEICBAAAAAAAAAAFAAACENFm%MgAACoIAEAAEAAAAOgAQAAQAAAAqABCAgQAAAAAAAAABQAAApA3JPzgAAAeCABAABQAAADoAEAABAAAAOgAQAAQAAAAyAAAJggAQAAUAAAA6ABAABQAAAAFAAAAAAADAAUAAANsPSUAxAAAIQgAQAAAAAAAqABAAAAAAACoAEIBBAAAAAAAAAAEAAAdCABAAAAAAACoAEAAAAAAAOgAQAAUAAAAyAAAJQgAQAAAAAAA6ABAABAAAADoAEAABAAAAKgAQAAAAAAAxAAAHggAQAAEAAAABQAAAbxKDOioAEAAAAAAATQAABoIAEAAEAAAAANAAACoAEAAAAAAADgAAB0IAEAAAAAAAKgAQAAAAAAA6ABAABAAAADcAAAlCABAAAAAAADoAEAABAAAAKgAQAAAAAAABQAAAAACAPzgAAAeCABAAAQAAAAoAEAABAAAAGgAQAAgAAAAyAAAKggAQAAEAAAAKABAACAAAABoAEAABAAAAOgAQgEEAAAABAAAAMgAACSIAEAAAAAAAOgAQAAEAAAAqABAAAAAAABoAEAAAAAAAIQAAB0IAEAAAAAAAOgAQAAcAAAABQAAABAAAAB8ABAMqABAAAAAAABAAAAdCABAAAAAAAEYCEAABAAAARgMQAAYAAAAAAAAIQgAQAAEAAAAqABCAwQAAAAAAAAABQAAAAACAP0sAAAVCABAAAQAAACoAEAABAAAAMgAACoIAEAABAAAAKgAQgIEAAAAAAAAAAUAAADBumbwBQAAAJxaYPTIAAAqCABAAAQAAADoAEAABAAAAKgAQgIEAAAAAAAAAAUAAAIQ0Wb4yAAAKggAQAAEAAAA6ABAAAQAAACoAEICBAAAAAAAAAAFAAACkDck:OAAAB4IAEAAEAAAAKgAQAAEAAAA6ABAAAQAAADIAAAmCABAABAAAADoAEAAEAAAAAUAAAAAAAMABQAAA2w9JQDEAAAhCABAAAAAAACoAEAAAAAAAKgAQgEEAAAAAAAAAAQAAB0IAEAAAAAAAKgAQAAAAAAA6ABAABAAAADIAAAlCABAAAAAAADoAEAABAAAAKgAQAAEAAAAqABAAAAAAADEAAAdCABAAAQAAAAFAAABvEoM6KgAQAAAAAABNAAAGggAQAAEAAAAA0AAAKgAQAAAAAAAOAAAHQgAQAAAAAAAqABAAAAAAADoAEAABAAAANwAACUIAEAAAAAAAKgAQAAEAAAAqABAAAAAAAAFAAAAAAIA:OAAAByIAEAABAAAAGgAQAAEAAAAKABAABgAAADIAAAoSABAAAQAAAAoAEAABAAAAGgAQAAYAAAAaABCAQQAAAAEAAAAyAAAJIgAQAAAAAAAKABAAAQAAACoAEAAAAAAAGgAQAAAAAAAVAAABHwAEAyoAEAAGAAAAEAAAB0IAEAAAAAAARgMQAAYAAABGAhAABAAAAAAAAAgSABAAAQAAACoAEIDBAAAAAAAAAAFAAAAAAIA:SwAABRIAEAABAAAACgAQAAEAAAAyAAAKIgAQAAEAAAAqABCAgQAAAAAAAAABQAAAMG6ZvAFAAAAnFpg9MgAACiIAEAABAAAAGgAQAAEAAAAqABCAgQAAAAAAAAABQAAAhDRZvjIAAAoiABAAAQAAABoAEAABAAAAKgAQgIEAAAAAAAAAAUAAAKQNyT84AAAHQgAQAAEAAAAKABAAAQAAABoAEAABAAAAMgAACUIAEAABAAAAKgAQAAEAAAABQAAAAAAAwAFAAADbD0lAMQAACEIAEAAAAAAAKgAQAAAAAAAqABCAQQAAAAAAAAABAAAHQgAQAAAAAAAqABAAAAAAACoAEAABAAAAMgAACUIAEAAAAAAAGgAQAAEAAAAKABAAAQAAACoAEAAAAAAAMQAABxIAEAABAAAAAUAAAG8SgzoqABAAAAAAAE0AAAYiABAAAQAAAADQAAAqABAAAAAAAA4AAAdCABAAAAAAACoAEAAAAAAAGgAQAAEAAAA3AAAJQgAQAAAAAAAKABAAAQAAACoAEAAAAAAAAUAAAAAAgD84AAAHEgAQAAEAAAAKABAABAAAABoAEAAGAAAAMgAAChIAEAABAAAACgAQAAYAAAAaABAABAAAAAoAEIBBAAAAAQAAADIAAAkiABAAAAAAAAoAEAABAAAAKgAQAAAAAAAaABAAAAAAABUAAAE0AAAIIgAQAAAAAAAaABCAQQAAAAAAAAABQAAAAAAAABIAAAE2AAAFIgAQAAAAAAABQAAAAAAAABUAAAE4AAAHEgAQAAAAAAA6ABAAAgAAAAoAEAAAAAAAOAAABxIAEAAAAAAACgAQAAAAAAABQAAAzcxMPTIAAAlyABAAAAAAAJYHEAADAAAAVgUQAAAAAAAGABAAAAAAAAAAAAlyABAAAQAAAEYCEAAFAAAARoIggEEAAAAAAAAADgAAABAAAAcSABAAAQAAAEYCEAABAAAARgIQAAEAAAAOAAAKEgAQAAEAAAACQAAAAACAPwAAgD8AAIA:AACAPwoAEAABAAAAOAAAB3IAEAAAAAAARgIQAAAAAAAGABAAAQAAADgAAAhyABAAAAAAAEYCEAAAAAAARoIgAAAAAAAPAAAADwAABxIAEAABAAAABgAQAAMAAAAGABAAAwAAAAAAAAeCABAAAAAAADoAEAAAAAAACgAQAAEAAAAAAAAHggAQAAAAAAA6ABAAAAAAAAFAAAAAAIC:MgAACXIgEAAAAAAARgIQAAAAAAD2DxAAAAAAAEYCEAACAAAANgAABYIgEAAAAAAAAUAAAAAAgD8%AAABU1RBVHQAAADGAgAAGwAAAAAAAAADAAAAyAEAACAAAAASAAAAGQAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAMwAAAD0AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.deferred_light_voxel_fragData0 = "s37715:ABNfc2x0Y01hdF9zYW1wbGVyAABfc2x0Y01hZ19zYW1wbGVyAAFfZ2J1ZmZlcjBfc2FtcGxlcgACX2didWZmZXIxX3NhbXBsZXIAA19nYnVmZmVyRF9zYW1wbGVyAARfc2Vudm1hcEJyZGZfc2FtcGxlcgAFX3NlbnZtYXBSYWRpYW5jZV9zYW1wbGVyAAZfdm94ZWxzX3NhbXBsZXIAB19zc2FvdGV4X3NhbXBsZXIACHNsdGNNYXQAAHNsdGNNYWcAAWdidWZmZXIwAAJnYnVmZmVyMQADZ2J1ZmZlckQABHNlbnZtYXBCcmRmAAVzZW52bWFwUmFkaWFuY2UABnZveGVscwAHc3Nhb3RleAAIJEdsb2JhbHMAAA9jb25lT2Zmc2V0AAAAAAAEAAAAAQFjb25lQXBlcnR1cmUABAAAAAQAAAABAWxpZ2h0QXJlYTAAEAAAAAwAAAADAWxpZ2h0QXJlYTEAIAAAAAwAAAADAWxpZ2h0QXJlYTIAMAAAAAwAAAADAWxpZ2h0QXJlYTMAQAAAAAwAAAADAXNoaXJyAFAAAABwAAAABAFleWUAwAAAAAwAAAADAWV5ZUxvb2sA0AAAAAwAAAADAWNhbWVyYVByb2oA4AAAAAgAAAACAWVudm1hcE51bU1pcG1hcHMA6AAAAAQAAAABAWVudm1hcFN0cmVuZ3RoAOwAAAAEAAAAAQFwb2ludFBvcwDwAAAADAAAAAMBcG9pbnRDb2wAAAEAAAwAAAADAV8yNDMAEAEAAAwAAAADAURYQkM%6YhF65b8XdO2cdQ:%G3OAQAAADRsAAAFAAAANAAAAGAGAACsBgAA4AYAALhrAABSREVGJAYAAAEAAACEAwAAEwAAABwAAAAABP::AAEAAPIFAAB8AgAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAI0CAAADAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAAAAAAngIAAAMAAAAAAAAAAAAAAAAAAAACAAAAAQAAAAAAAACwAgAAAwAAAAAAAAAAAAAAAAAAAAMAAAABAAAAAAAAAMICAAADAAAAAAAAAAAAAAAAAAAABAAAAAEAAAAAAAAA1AIAAAMAAAAAAAAAAAAAAAAAAAAFAAAAAQAAAAAAAADpAgAAAwAAAAAAAAAAAAAAAAAAAAYAAAABAAAAAAAAAAIDAAADAAAAAAAAAAAAAAAAAAAABwAAAAEAAAAAAAAAEgMAAAMAAAAAAAAAAAAAAAAAAAAIAAAAAQAAAAAAAAAjAwAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAACsDAAACAAAABQAAAAQAAAD:::::AQAAAAEAAAAMAAAAMwMAAAIAAAAFAAAABAAAAP::::8CAAAAAQAAAAwAAAA8AwAAAgAAAAUAAAAEAAAA:::::wMAAAABAAAADAAAAEUDAAACAAAABQAAAAQAAAD:::::BAAAAAEAAAAMAAAATgMAAAIAAAAFAAAABAAAAP::::8FAAAAAQAAAAwAAABaAwAAAgAAAAUAAAAEAAAA:::::wYAAAABAAAADAAAAGoDAAACAAAABQAAAAgAAAD:::::BwAAAAEAAAAMAAAAcQMAAAIAAAAFAAAABAAAAP::::8IAAAAAQAAAAwAAAB5AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAF9zbHRjTWF0X3NhbXBsZXIAX3NsdGNNYWdfc2FtcGxlcgBfZ2J1ZmZlcjBfc2FtcGxlcgBfZ2J1ZmZlcjFfc2FtcGxlcgBfZ2J1ZmZlckRfc2FtcGxlcgBfc2Vudm1hcEJyZGZfc2FtcGxlcgBfc2Vudm1hcFJhZGlhbmNlX3NhbXBsZXIAX3ZveGVsc19zYW1wbGVyAF9zc2FvdGV4X3NhbXBsZXIAc2x0Y01hdABzbHRjTWFnAGdidWZmZXIwAGdidWZmZXIxAGdidWZmZXJEAHNlbnZtYXBCcmRmAHNlbnZtYXBSYWRpYW5jZQB2b3hlbHMAc3Nhb3RleAAkR2xvYmFscwCrq3kDAAAPAAAAnAMAACABAAAAAAAAAAAAAAQFAAAAAAAABAAAAAIAAAAQBQAAAAAAACAFAAAEAAAABAAAAAIAAAAQBQAAAAAAAC0FAAAQAAAADAAAAAIAAAA4BQAAAAAAAEgFAAAgAAAADAAAAAIAAAA4BQAAAAAAAFMFAAAwAAAADAAAAAIAAAA4BQAAAAAAAF4FAABAAAAADAAAAAIAAAA4BQAAAAAAAGkFAABQAAAAcAAAAAIAAABwBQAAAAAAAIAFAADAAAAADAAAAAIAAAA4BQAAAAAAAIQFAADQAAAADAAAAAIAAAA4BQAAAAAAAIwFAADgAAAACAAAAAIAAACYBQAAAAAAAKgFAADoAAAABAAAAAIAAAC8BQAAAAAAAMwFAADsAAAABAAAAAIAAAAQBQAAAAAAANsFAADwAAAADAAAAAIAAAA4BQAAAAAAAOQFAAAAAQAADAAAAAIAAAA4BQAAAAAAAO0FAAAQAQAADAAAAAAAAAA4BQAAAAAAAGNvbmVPZmZzZXQAqwAAAwABAAEAAAAAAAAAAABjb25lQXBlcnR1cmUAbGlnaHRBcmVhMAABAAMAAQADAAAAAAAAAAAAbGlnaHRBcmVhMQBsaWdodEFyZWEyAGxpZ2h0QXJlYTMAc2hpcnIAqwEAAwABAAQABwAAAAAAAABleWUAZXllTG9vawBjYW1lcmFQcm9qAKsBAAMAAQACAAAAAAAAAAAAZW52bWFwTnVtTWlwbWFwcwCrq6sAAAIAAQABAAAAAAAAAAAAZW52bWFwU3RyZW5ndGgAcG9pbnRQb3MAcG9pbnRDb2wAXzI0MwBNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AElTR05EAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAAMDAAA4AAAAAQAAAAAAAAADAAAAAQAAAAcHAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUtBkAABAAAAANBkAAFkAAARGjiAAAAAAABEAAABaAAADAGAQAAAAAABaAAADAGAQAAEAAABaAAADAGAQAAIAAABaAAADAGAQAAMAAABaAAADAGAQAAQAAABaAAADAGAQAAUAAABaAAADAGAQAAYAAABaAAADAGAQAAcAAABaAAADAGAQAAgAAABYGAAEAHAQAAAAAABVVQAAWBgABABwEAABAAAAVVUAAFgYAAQAcBAAAgAAAFVVAABYGAAEAHAQAAMAAABVVQAAWBgABABwEAAEAAAAVVUAAFgYAAQAcBAABQAAAFVVAABYGAAEAHAQAAYAAABVVQAAWCgABABwEAAHAAAAVVUAAFgYAAQAcBAACAAAAFVVAABiEAADMhAQAAAAAABiEAADchAQAAEAAABlAAAD8iAQAAAAAABoAAACHQAAAEgAAAvyABAAAAAAAEYQEAAAAAAAhn0QAAIAAAAAYBAAAgAAAAFAAAAAAAAAAAAAC3IAEAABAAAAhgAQgMEAAAAAAAAAAkAAAAAAgD8AAIA:AACAPwAAAAAAAAAIQgAQAAIAAAAqABCAwQAAAAAAAAAKABAAAQAAAB0AAAcSABAAAQAAACoAEAACAAAAAUAAAAAAAAAdAAAKMgAQAAMAAACGABAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAADzIAEAADAAAARgAQAAMAAAACQAAAAACAPwAAgD8AAAAAAAAAAAJAAAAAAIC:AACAvwAAAAAAAAAAOAAAB2IAEAABAAAAVgYQAAEAAAAGARAAAwAAADcAAAkyABAAAgAAAAYAEAABAAAAhgAQAAAAAACWBRAAAQAAABAAAAcSABAAAQAAAEYCEAACAAAARgIQAAIAAABEAAAFEgAQAAEAAAAKABAAAQAAADgAAAdyABAAAQAAAAYAEAABAAAARgIQAAIAAAAyAAAJggAQAAEAAAA6ABAAAAAAAAFAAAAA:39BAUAAAIAAgDcbAAAFggAQAAEAAAA6ABAAAQAAAFYAAAWCABAAAQAAADoAEAABAAAAMgAACYIAEAABAAAAOgAQAAEAAAABQAAAgACAvToAEAAAAAAAOCAAB4IAEAABAAAAOgAQAAEAAAABQAAAgAeAQUgAAAvyABAAAgAAAEYQEAAAAAAARn4QAAMAAAAAYBAAAwAAAAFAAAAAAAAAQQAABRIAEAADAAAAOgAQAAIAAAAaAAAFggAQAAIAAAA6ABAAAgAAADIAAAriABAAAwAAAPYPEAABAAAABgkQgEEAAAACAAAABgkQAAIAAAAAAAAKcgAQAAQAAABGAhAAAgAAAAJAAAAK1yO9CtcjvQrXI70AAAAAMgAADHIAEAAEAAAA9g8QAAEAAABGAhAABAAAAAJAAAAK1yM9CtcjPQrXIz0AAAAASAAAC:IAEAAFAAAARhAQAAAAAABGfhAABAAAAABgEAAEAAAAAUAAAAAAAAAyAAAJggAQAAEAAAAKABAABQAAAAFAAAAAAABAAUAAAAAAgL8QAAAHggAQAAQAAABGEhAAAQAAAEYSEAABAAAARAAABYIAEAAEAAAAOgAQAAQAAAA4AAAHcgAQAAUAAAD2DxAABAAAAEYSEAABAAAAMgAACYIAEAABAAAAOgAQAAEAAAABQAAAAAAAPwFAAAAAAAA:AAAACYIAEAABAAAAOgAQAAEAAAAKgCCAQQAAAAAAAAAOAAAADgAACIIAEAABAAAAGoAgAAAAAAAOAAAAOgAQAAEAAAAQAAAIggAQAAQAAABGgiAAAAAAAA0AAABGAhAABQAAAA4AAAeCABAAAQAAADoAEAABAAAAOgAQAAQAAAAyAAAKcgAQAAUAAABGAhAABQAAAPYPEAABAAAARoIgAAAAAAAMAAAAAAAACXIAEAAGAAAARgIQgEEAAAAFAAAARoIgAAAAAAAMAAAAEAAAB4IAEAABAAAARgIQAAYAAABGAhAABgAAAEQAAAWCABAAAQAAADoAEAABAAAAOAAAB3IAEAAGAAAA9g8QAAEAAABGAhAABgAAABAAAAeCABAAAQAAAEYCEAABAAAARgIQAAYAAAA0AAAHggAQAAEAAAA6ABAAAQAAAAFAAAAAAAAAMgAACRIAEAADAAAACgAQAAMAAAABQAAAgYCAOwFAAAAAAIC:MgAACRIAEAADAAAAOgAQAAEAAAAKABAAAwAAAAFAAAAAAIA:AAAACBIAEAAAAAAAOgAQgEEAAAABAAAAAUAAAAAAgD9IAAAL8gAQAAcAAAAWBRAAAAAAAEZ%EAAFAAAAAGAQAAUAAAABQAAAAAAAADgAAAtyABAACAAAAEaCIAAAAAAACwAAAAJAAACGq9s%hqvbPoar2z4AAAAAOAAAB8IAEAAHAAAApgIQAAEAAACmAhAAAQAAADIAAAqCABAABAAAABoAEAABAAAAGgAQAAEAAAAqABCAQQAAAAcAAAA2AAAGMgAQAAkAAADmiiAAAAAAAAkAAAA2AAAGQgAQAAkAAAAKgCAAAAAAAAoAAAA4AAAHcgAQAAoAAAD2DxAABwAAAEYCEAAJAAAAOAAACnIAEAAKAAAARgIQAAoAAAACQAAAcT0%P3E9Pj9xPT4:AAAAADIAAAlyABAACAAAAEYCEAAIAAAA9g8QAAQAAABGAhAACgAAADIAAA1yABAACAAAAEaCIAAAAAAABQAAAAJAAADG32I:xt9iP8bfYj8AAAAARgIQAAgAAAAyAAANcgAQAAgAAABGAhCAQQAAAAkAAAACQAAAKqd9PiqnfT4qp30%AAAAAEYCEAAIAAAAOAAACHIAEAAJAAAAVgUQAAEAAABGgiAAAAAAAAgAAAA4AAAKcgAQAAkAAABGAhAACQAAAAJAAACGq1s:hqtbP4arWz8AAAAAMgAACnIAEAAIAAAARgIQAAkAAACmChCAQQAAAAEAAABGAhAACAAAADgAAAhyABAACQAAAFYFEAABAAAAlocgAAAAAAAKAAAAOAAAB3IAEAAJAAAABgAQAAEAAABGAhAACQAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAIarWz%Gq1s:hqtbPwAAAABGAhAACAAAADgAAAkSABAACQAAACoAEIBBAAAAAQAAADqAIAAAAAAACAAAADgAAAliABAACQAAAKYKEIBBAAAAAQAAAAaBIAAAAAAACQAAADgAAAdyABAACQAAAAYAEAABAAAARgIQAAkAAAAyAAAMcgAQAAgAAABGAhAACQAAAAJAAACGq1s:hqtbP4arWz8AAAAARgIQAAgAAAA4AAAIcgAQAAkAAABWBRAAAQAAAJaHIAAAAAAABwAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAGn8gj9p:II:afyCPwAAAABGAhAACAAAADgAAAkSABAACQAAACoAEIBBAAAAAQAAADqAIAAAAAAABQAAADgAAAliABAACQAAAKYKEIBBAAAAAQAAAAaBIAAAAAAABgAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAGn8gj9p:II:afyCPwAAAABGAhAACAAAADgAAAgyABAACQAAAAYAEAABAAAA5oogAAAAAAAGAAAAOAAACEIAEAAJAAAACgAQAAEAAAAKgCAAAAAAAAcAAAAyAAAMcgAQAAgAAABGAhAACQAAAAJAAABp:II:afyCP2n8gj8AAAAARgIQAAgAAAA4AAAHcgAQAAgAAACWBxAAAwAAAEYCEAAIAAAAEAAACIIAEAAEAAAARgIQgEEAAAAGAAAARgIQAAEAAAAAAAAHggAQAAQAAAA6ABAABAAAADoAEAAEAAAAMgAAC3IAEAAJAAAAZggQAAEAAAD2DxCAQQAAAAQAAABmCBCAQQAAAAYAAAArAAAGggAQAAQAAAAqgCAAAAAAAA4AAAA4AAAHggAQAAQAAAAaABAAAAAAADoAEAAEAAAAAAAACIIAEAAFAAAACgAQgMEAAAAJAAAAAUAAAAAAgD9LAAAFggAQAAUAAAA6ABAABQAAADIAAAqCABAABgAAAAoAEICBAAAACQAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAYAAAA6ABAABgAAAAoAEICBAAAACQAAAAFAAACENFm%MgAACoIAEAAGAAAAOgAQAAYAAAAKABCAgQAAAAkAAAABQAAApA3JPzgAAAdCABAABwAAADoAEAAFAAAAOgAQAAYAAAAyAAAJQgAQAAcAAAAqABAABwAAAAFAAAAAAADAAUAAANsPSUAxAAAIkgAQAAkAAAAGCBAACQAAAAYIEIBBAAAACQAAAAEAAAdCABAABwAAACoAEAAHAAAACgAQAAkAAAAyAAAJggAQAAUAAAA6ABAABgAAADoAEAAFAAAAKgAQAAcAAAAzAAAJggAQAAYAAAAqABCAgQAAAAkAAAAaABCAgQAAAAkAAAA0AAAJQgAQAAcAAAAqABCAgQAAAAkAAAAaABCAgQAAAAkAAAAOAAAKQgAQAAcAAAACQAAAAACAPwAAgD8AAIA:AACAPyoAEAAHAAAAOAAAB4IAEAAGAAAAOgAQAAYAAAAqABAABwAAADgAAAdCABAABwAAADoAEAAGAAAAOgAQAAYAAAAyAAAJggAQAAcAAAAqABAABwAAAAFAAABfrqo8AUAAADZarr0yAAAJggAQAAcAAAAqABAABwAAADoAEAAHAAAAAUAAAOJ2OD4yAAAJggAQAAcAAAAqABAABwAAADoAEAAHAAAAAUAAAAQdqb4yAAAJQgAQAAcAAAAqABAABwAAADoAEAAHAAAAAUAAADj3fz84AAAHggAQAAcAAAA6ABAABgAAACoAEAAHAAAAMQAACYIAEAAIAAAAKgAQgIEAAAAJAAAAGgAQgIEAAAAJAAAAMgAACYIAEAAHAAAAOgAQAAcAAAABQAAAAAAAwAFAAADbD8k:AQAAB4IAEAAHAAAAOgAQAAgAAAA6ABAABwAAADIAAAmCABAABgAAADoAEAAGAAAAKgAQAAcAAAA6ABAABwAAAAEAAAdCABAABwAAADoAEAAJAAAAAUAAANsPScAAAAAHggAQAAYAAAA6ABAABgAAACoAEAAHAAAAMwAACEIAEAAHAAAAKgAQAAkAAAAaABCAQQAAAAkAAAA0AAAIggAQAAcAAAAqABAACQAAABoAEIBBAAAACQAAADEAAAhCABAABwAAACoAEAAHAAAAKgAQgEEAAAAHAAAAHQAACIIAEAAHAAAAOgAQAAcAAAA6ABCAQQAAAAcAAAABAAAHQgAQAAcAAAA6ABAABwAAACoAEAAHAAAANwAACoIAEAAGAAAAKgAQAAcAAAA6ABCAQQAAAAYAAAA6ABAABgAAAAAAAAeCABAABgAAADoAEAAGAAAAAUAAANsPSUA4AAAHEgAQAAkAAAA6ABAABgAAAAFAAACD%SI%OAAAByIAEAAJAAAAOgAQAAUAAAABQAAAg:miPkgAAAvyABAACQAAAEYAEAAJAAAARn4QAAYAAAAAYBAABgAAADoAEAAEAAAAMgAACXIAEAAEAAAARgIQAAQAAAAGABAABwAAAFYFEAAHAAAAOAAAB3IAEAAEAAAARgIQAAQAAABGAhAACQAAADgAAAdyABAABAAAAPYPEAACAAAARgIQAAQAAAA4AAAKcgAQAAQAAABGAhAABAAAAAJAAAAAAMA:AADAPwAAwD8AAAAAMgAADHIAEAAEAAAARgIQAAgAAAACQAAAg:miPoP5oj6D%aI%AAAAAEYCEAAEAAAAOAAACIIAEAAEAAAACgAQAAMAAAA6gCAAAAAAAA4AAAA4AAAHcgAQAAQAAAD2DxAABAAAAEYCEAAEAAAAOAAACnIAEAAHAAAAlgQQAAEAAAACQAAAAAAAAAAAAAAAAIA:AAAAADIAAA1yABAACAAAAJYEEAABAAAAAkAAAAAAgD8AAAAAAAAAAAAAAACWBBCAQQAAAAcAAAAyAAANcgAQAAcAAAAmCRCAQQAAAAEAAAACQAAAAACAPwAAAAAAAAAAAAAAAEYCEAAHAAAADwAAB4IAEAAEAAAARgAQAAgAAABGABAACAAAAEsAAAWCABAABQAAADoAEAAEAAAADwAAB4IAEAAGAAAAhgAQAAcAAACGABAABwAAAEsAAAWCABAABwAAADoAEAAGAAAAMQAAB4IAEAAFAAAAOgAQAAcAAAA6ABAABQAAAEQAAAWCABAABAAAADoAEAAEAAAAOAAAB3IAEAAIAAAA9g8QAAQAAABGAhAACAAAAEQAAAWCABAABAAAADoAEAAGAAAAOAAAB3IAEAAHAAAA9g8QAAQAAABGAhAABwAAADcAAAlyABAABwAAAPYPEAAFAAAARgIQAAgAAABGAhAABwAAABAAAAeCABAABAAAAEYCEAAHAAAARgIQAAcAAABEAAAFggAQAAQAAAA6ABAABAAAADgAAAdyABAACAAAAPYPEAAEAAAARgIQAAcAAAA4AAAHcgAQAAkAAACWBBAAAQAAACYJEAAIAAAAMgAACnIAEAAIAAAAlgQQAAgAAAAmCRAAAQAAAEYCEIBBAAAACQAAABAAAAeCABAABQAAAEYCEAAIAAAARgIQAAgAAABEAAAFggAQAAUAAAA6ABAABQAAADgAAAdyABAACQAAAPYPEAAFAAAARgIQAAgAAAAyAAAJcgAQAAoAAABGAhAABwAAAPYPEAAEAAAARgIQAAkAAAAyAAAKcgAQAAkAAABGAhAABwAAAPYPEAAEAAAARgIQgEEAAAAJAAAAOAAAC3IAEAALAAAABoEgAAAAAAAAAAAAAkAAAAAAQDwON9Y7KVwPPgAAAAA2AAAFEgAQAAwAAAABQAAAAAAAADYAAAUiABAADAAAAAoAEAALAAAANgAABYIAEAAGAAAAGgAQAAsAAAAwAAABMQAACsIAEAAMAAAABgQQAAwAAAACQAAAAAAAAAAAAAAAAIA:17NdQAEAAAeCABAABwAAADoAEAAMAAAAKgAQAAwAAAADAAADOgAQAAcAAAAyAAAJcgAQAA0AAABGAhAAAQAAAFYFEAAMAAAARgIQAAUAAAA4AAAKwgAQAAwAAAD2DxAABgAAAAJAAAAAAAAAAAAAAAAAgEMAAAA:LwAABYIAEAAHAAAAKgAQAAwAAAA0AAAHggAQAAcAAAA6ABAABwAAAAFAAAAAAAAAMgAAD3IAEAANAAAARgIQAA0AAAACQAAAAAAAPwAAAD8AAAA:AAAAAAJAAAAAAAA:AAAAPwAAAD8AAAAASAAAC:IAEAANAAAARgIQAA0AAABGfhAABwAAAABgEAAHAAAAOgAQAAcAAAAAAAAIggAQAAcAAAAKABCAQQAAAAwAAAABQAAAAACAPzIAAAkSABAADAAAADoAEAAHAAAACgAQAA0AAAAKABAADAAAADQAAAeCABAABwAAADoAEAAMAAAAAUAAAAAAADwAAAAHIgAQAAwAAAA6ABAABwAAABoAEAAMAAAAOAAAB4IAEAAGAAAAGgAQAAwAAAABQAAAX88OPxYAAAEyAAAKcgAQAAcAAABGAhAABwAAAPYPEAAEAAAARgIQgEEAAAABAAAAMgAADHIAEAAHAAAARgIQAAcAAAACQAAAAAAAPwAAAD8AAAA:AAAAAEYCEAABAAAAEAAAB4IAEAAEAAAARgIQAAcAAABGAhAABwAAAEQAAAWCABAABAAAADoAEAAEAAAAOAAAB3IAEAAHAAAA9g8QAAQAAABGAhAABwAAADYAAAUiABAADAAAAAFAAAAAAAAANgAABUIAEAAMAAAACgAQAAsAAAA2AAAFggAQAAQAAAAaABAACwAAADAAAAExAAAKMgAQAA0AAACWBRAADAAAAAJAAAAAAIA:17NdQAAAAAAAAAAAAQAAB4IAEAAGAAAAGgAQAA0AAAAKABAADQAAAAMAAAM6ABAABgAAADIAAAlyABAADQAAAEYCEAAHAAAApgoQAAwAAABGAhAABQAAADgAAAoyABAADgAAAPYPEAAEAAAAAkAAAAAAgEMAAAA:AAAAAAAAAAAvAAAFggAQAAYAAAAKABAADgAAADQAAAeCABAABgAAADoAEAAGAAAAAUAAAAAAAAAyAAAPcgAQAA0AAABGAhAADQAAAAJAAAAAAAA:AAAAPwAAAD8AAAAAAkAAAAAAAD8AAAA:AAAAPwAAAABIAAAL8gAQAA0AAABGAhAADQAAAEZ%EAAHAAAAAGAQAAcAAAA6ABAABgAAAAAAAAiCABAABgAAABoAEIBBAAAADAAAAAFAAAAAAIA:MgAACSIAEAAMAAAAOgAQAAYAAAAKABAADQAAABoAEAAMAAAANAAAB4IAEAAGAAAAGgAQAA4AAAABQAAAAAAAPAAAAAdCABAADAAAADoAEAAGAAAAKgAQAAwAAAA4AAAHggAQAAQAAAAqABAADAAAAAFAAABfzw4:FgAAAQAAAAeCABAABAAAABoAEAAMAAAACgAQAAwAAAAyAAAKcgAQAAcAAABGAhAACAAAAPYPEAAFAAAARgIQgEEAAAABAAAAMgAADHIAEAAHAAAARgIQAAcAAAACQAAAAAAAPwAAAD8AAAA:AAAAAEYCEAABAAAAEAAAB4IAEAAFAAAARgIQAAcAAABGAhAABwAAAEQAAAWCABAABQAAADoAEAAFAAAAOAAAB3IAEAAHAAAA9g8QAAUAAABGAhAABwAAADYAAAUSABAACAAAAAFAAAAAAAAANgAABSIAEAAIAAAACgAQAAsAAAA2AAAFggAQAAUAAAAaABAACwAAADAAAAExAAAKwgAQAAgAAAAGBBAACAAAAAJAAAAAAAAAAAAAAAAAgD:Xs11AAQAAB4IAEAAGAAAAOgAQAAgAAAAqABAACAAAAAMAAAM6ABAABgAAADIAAAlyABAADAAAAEYCEAAHAAAAVgUQAAgAAABGAhAABQAAADgAAArCABAACAAAAPYPEAAFAAAAAkAAAAAAAAAAAAAAAACAQwAAAD8vAAAFggAQAAYAAAAqABAACAAAADQAAAeCABAABgAAADoAEAAGAAAAAUAAAAAAAAAyAAAPcgAQAAwAAABGAhAADAAAAAJAAAAAAAA:AAAAPwAAAD8AAAAAAkAAAAAAAD8AAAA:AAAAPwAAAABIAAAL8gAQAAwAAABGAhAADAAAAEZ%EAAHAAAAAGAQAAcAAAA6ABAABgAAAAAAAAiCABAABgAAAAoAEIBBAAAACAAAAAFAAAAAAIA:MgAACRIAEAAIAAAAOgAQAAYAAAAKABAADAAAAAoAEAAIAAAANAAAB4IAEAAGAAAAOgAQAAgAAAABQAAAAAAAPAAAAAciABAACAAAADoAEAAGAAAAGgAQAAgAAAA4AAAHggAQAAUAAAAaABAACAAAAAFAAABfzw4:FgAAAQAAAAeCABAABAAAADoAEAAEAAAACgAQAAgAAAAyAAAOcgAQAAcAAABGAhCAQQAAAAoAAAACQAAAAAAAPwAAAD8AAAA:AAAAAEYCEIBBAAAAAQAAADIAAAxyABAABwAAAEYCEAAHAAAAAkAAAAAAAD8AAAA:AAAAPwAAAABGAhAAAQAAABAAAAeCABAABQAAAEYCEAAHAAAARgIQAAcAAABEAAAFggAQAAUAAAA6ABAABQAAADgAAAdyABAABwAAAPYPEAAFAAAARgIQAAcAAAA2AAAFEgAQAAgAAAABQAAAAAAAADYAAAUiABAACAAAAAoAEAALAAAANgAABYIAEAAFAAAAGgAQAAsAAAAwAAABMQAACsIAEAAIAAAABgQQAAgAAAACQAAAAAAAAAAAAAAAAIA:17NdQAEAAAeCABAABgAAADoAEAAIAAAAKgAQAAgAAAADAAADOgAQAAYAAAAyAAAJcgAQAAoAAABGAhAABwAAAFYFEAAIAAAARgIQAAUAAAA4AAAKwgAQAAgAAAD2DxAABQAAAAJAAAAAAAAAAAAAAAAAgEMAAAA:LwAABYIAEAAGAAAAKgAQAAgAAAA0AAAHggAQAAYAAAA6ABAABgAAAAFAAAAAAAAAMgAAD3IAEAAKAAAARgIQAAoAAAACQAAAAAAAPwAAAD8AAAA:AAAAAAJAAAAAAAA:AAAAPwAAAD8AAAAASAAAC:IAEAAKAAAARgIQAAoAAABGfhAABwAAAABgEAAHAAAAOgAQAAYAAAAAAAAIggAQAAYAAAAKABCAQQAAAAgAAAABQAAAAACAPzIAAAkSABAACAAAADoAEAAGAAAACgAQAAoAAAAKABAACAAAADQAAAeCABAABgAAADoAEAAIAAAAAUAAAAAAADwAAAAHIgAQAAgAAAA6ABAABgAAABoAEAAIAAAAOAAAB4IAEAAFAAAAGgAQAAgAAAABQAAAX88OPxYAAAEAAAAHggAQAAQAAAA6ABAABAAAAAoAEAAIAAAAMgAADnIAEAAHAAAARgIQgEEAAAAJAAAAAkAAAAAAAD8AAAA:AAAAPwAAAABGAhCAQQAAAAEAAAAyAAAMcgAQAAcAAABGAhAABwAAAAJAAAAAAAA:AAAAPwAAAD8AAAAARgIQAAEAAAAQAAAHggAQAAUAAABGAhAABwAAAEYCEAAHAAAARAAABYIAEAAFAAAAOgAQAAUAAAA4AAAHcgAQAAcAAAD2DxAABQAAAEYCEAAHAAAANgAABRIAEAAIAAAAAUAAAAAAAAA2AAAFIgAQAAgAAAAKABAACwAAADYAAAWCABAABQAAABoAEAALAAAAMAAAATEAAArCABAACAAAAAYEEAAIAAAAAkAAAAAAAAAAAAAAAACAP9ezXUABAAAHggAQAAYAAAA6ABAACAAAACoAEAAIAAAAAwAAAzoAEAAGAAAAMgAACXIAEAAJAAAARgIQAAcAAABWBRAACAAAAEYCEAAFAAAAOAAACsIAEAAIAAAA9g8QAAUAAAACQAAAAAAAAAAAAAAAAIBDAAAAPy8AAAWCABAABgAAACoAEAAIAAAANAAAB4IAEAAGAAAAOgAQAAYAAAABQAAAAAAAADIAAA9yABAACQAAAEYCEAAJAAAAAkAAAAAAAD8AAAA:AAAAPwAAAAACQAAAAAAAPwAAAD8AAAA:AAAAAEgAAAvyABAACQAAAEYCEAAJAAAARn4QAAcAAAAAYBAABwAAADoAEAAGAAAAAAAACIIAEAAGAAAACgAQgEEAAAAIAAAAAUAAAAAAgD8yAAAJEgAQAAgAAAA6ABAABgAAAAoAEAAJAAAACgAQAAgAAAA0AAAHggAQAAYAAAA6ABAACAAAAAFAAAAAAAA8AAAAByIAEAAIAAAAOgAQAAYAAAAaABAACAAAADgAAAeCABAABQAAABoAEAAIAAAAAUAAAF:PDj8WAAABAAAAB4IAEAAEAAAAOgAQAAQAAAAKABAACAAAADIAAAqCABAABAAAADoAEIBBAAAABAAAAAFAAADJdj4%AUAAAAAAgD84AAAHcgAQAAQAAAD2DxAABAAAAEYCEAAEAAAASAAAC:IAEAAHAAAARhAQAAAAAABGfhAACAAAAABgEAAIAAAAAUAAAAAAAAA4AAAH4gAQAAcAAAAGCRAABAAAAAYAEAAHAAAAGAAAB4IAEAAAAAAAOgAQAAAAAAABQAAAAACAPzIAAAlyABAAAgAAAEYCEAAEAAAABgAQAAcAAABGAhAAAgAAADcAAAlyABAAAgAAAPYPEAAAAAAARgIQAAIAAACWBxAABwAAADcAAAziABAAAwAAAPYPEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAABWDhAAAwAAAAAAAAlyABAABAAAAEYCEIBBAAAABQAAAEaCIAAAAAAADwAAABAAAAeCABAAAAAAAEYCEAAEAAAARgIQAAQAAABEAAAFggAQAAAAAAA6ABAAAAAAADgAAAdyABAABAAAAPYPEAAAAAAARgIQAAQAAAAQAAAHggAQAAAAAABGAhAAAQAAAEYCEAAEAAAASwAABRIAEAAAAAAACgAQAAAAAAAyAAAJggAQAAQAAAA6ABAAAQAAAAFAAAAwbpm8AUAAACcWmD0yAAAJggAQAAQAAAA6ABAABAAAADoAEAABAAAAAUAAAIQ0Wb4yAAAJggAQAAQAAAA6ABAABAAAADoAEAABAAAAAUAAAKQNyT84AAAHQgAQAAAAAAAKABAAAAAAADoAEAAEAAAAMgAADzIAEAAAAAAAlgUQAAAAAAACQAAAAAB8P51tID8AAAAAAAAAAAJAAAAAAAA8AAAAPAAAAAAAAAAASAAAC:IAEAAHAAAARgAQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAKcgAQAAYAAABGAhCAQQAAAAEAAAD2DxAAAQAAAEYCEAAGAAAAEAAAB0IAEAAAAAAARgIQAAYAAABGAhAABgAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAAGAAAApgoQAAAAAABGAhAABgAAADgAAAdyABAACAAAACYJEAABAAAAlgQQAAYAAAAyAAAKcgAQAAgAAACWBBAAAQAAACYJEAAGAAAARgIQgEEAAAAIAAAAMgAACXIAEAAJAAAARgIQAAEAAAD2DxAABwAAAEYCEAAGAAAAOAAAB3IAEAAKAAAApgoQAAcAAABGAhAACAAAADgAAAfSABAABwAAAAYJEAABAAAABgAQAAcAAAAyAAAJcgAQAAcAAABGAhAABgAAAFYFEAAHAAAAhgMQAAcAAAAAAAAJcgAQAAwAAABGAhCAQQAAAAUAAABGgiAAAAAAAAEAAAAQAAAHEgAQAA0AAABGAhAADAAAAEYCEAAJAAAAEAAAByIAEAANAAAARgIQAAwAAABGAhAACgAAABAAAAdCABAADQAAAEYCEAAMAAAARgIQAAcAAAAAAAAJcgAQAA4AAABGAhCAQQAAAAUAAABGgiAAAAAAAAIAAAAQAAAHEgAQAA8AAABGAhAADgAAAEYCEAAJAAAAEAAAByIAEAAPAAAARgIQAA4AAABGAhAACgAAABAAAAdCABAADwAAAEYCEAAOAAAARgIQAAcAAAAAAAAJcgAQABAAAABGAhCAQQAAAAUAAABGgiAAAAAAAAMAAAAQAAAHEgAQABEAAABGAhAAEAAAAEYCEAAJAAAAEAAAByIAEAARAAAARgIQABAAAABGAhAACgAAABAAAAdCABAAEQAAAEYCEAAQAAAARgIQAAcAAAAAAAAJcgAQABIAAABGAhCAQQAAAAUAAABGgiAAAAAAAAQAAAAQAAAHEgAQAAkAAABGAhAAEgAAAEYCEAAJAAAAEAAAByIAEAAJAAAARgIQABIAAABGAhAACgAAABAAAAdCABAACQAAAEYCEAASAAAARgIQAAcAAAAxAAAHQgAQAAAAAAABQAAAAAAAACoAEAANAAAAAQAAB4IAEAABAAAAKgAQAAAAAAABQAAAAQAAADEAAAeCABAABAAAAAFAAAAAAAAAKgAQAA8AAAA3AAAJQgAQAAAAAAAqABAAAAAAAAFAAAADAAAAAUAAAAIAAAA3AAAJQgAQAAAAAAA6ABAABAAAACoAEAAAAAAAOgAQAAEAAAAxAAAHggAQAAEAAAABQAAAAAAAACoAEAARAAAAHgAAB4IAEAAEAAAAKgAQAAAAAAABQAAABAAAADcAAAlCABAAAAAAADoAEAABAAAAOgAQAAQAAAAqABAAAAAAADEAAAeCABAAAQAAAAFAAAAAAAAAKgAQAAkAAAAeAAAHggAQAAQAAAAqABAAAAAAAAFAAAAIAAAANwAACUIAEAAAAAAAOgAQAAEAAAA6ABAABAAAACoAEAAAAAAAHwAAAyoAEAAAAAAANgAABXIAEAAHAAAARgIQAAkAAAA2AAAI8gAQAAoAAAACQAAAAAAAAAAAAAAAAAAAAAAAABIAAAEgAAAHggAQAAEAAAAqABAAAAAAAAFAAAABAAAAHwAEAzoAEAABAAAAOAAAB3IAEAATAAAApgoQAA0AAABGAhAADwAAADIAAApyABAADwAAAEYCEAANAAAApgoQgEEAAAAPAAAARgIQABMAAAA4AAAHcgAQABMAAACmChAADQAAAEYCEAAJAAAAMgAACnIAEAARAAAARgIQAA0AAACmChCAQQAAAAkAAABGAhAAEwAAADYAAAVyABAABwAAAEYCEAAJAAAANgAACPIAEAAKAAAAAkAAAAAAAAAAAAAAAAAAAAMAAAASAAABIAAAB4IAEAABAAAAKgAQAAAAAAABQAAAAgAAAB8ABAM6ABAAAQAAADgAAAdyABAAEwAAAEYCEAANAAAApgoQAA8AAAAyAAAKcgAQAA0AAABGAhAADwAAAKYKEIBBAAAADQAAAEYCEAATAAAAOAAAB3IAEAATAAAApgoQAA8AAABGAhAAEQAAADIAAApyABAAEQAAAEYCEAAPAAAApgoQgEEAAAARAAAARgIQABMAAAA2AAAFcgAQAAcAAABGAhAACQAAADYAAAjyABAACgAAAAJAAAAAAAAAAAAAAAAAAAADAAAAEgAAASAAAAeCABAAAQAAACoAEAAAAAAAAUAAAAMAAAAfAAQDOgAQAAEAAAA4AAAHcgAQABMAAACmChAADwAAAEYCEAARAAAAMgAACnIAEAARAAAARgIQAA8AAACmChCAQQAAABEAAABGAhAAEwAAADgAAAdyABAAEwAAAKYKEAANAAAARgIQAAkAAAAyAAAKcgAQAAcAAABGAhAADQAAAKYKEIBBAAAACQAAAEYCEAATAAAANgAACPIAEAAKAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB4IAEAABAAAAKgAQAAAAAAABQAAABAAAAB8ABAM6ABAAAQAAADgAAAdyABAAEwAAAKYKEAARAAAARgIQAAkAAAAyAAAKcgAQAA0AAABGAhAAEQAAAKYKEIBBAAAACQAAAEYCEAATAAAAOAAAB3IAEAATAAAARgIQAA8AAACmChAAEQAAADIAAApyABAADwAAAEYCEAARAAAApgoQgEEAAAAPAAAARgIQABMAAAA2AAAFcgAQAAcAAABGAhAACQAAADYAAAjyABAACgAAAAJAAAAAAAAAAAAAAAAAAAADAAAAEgAAASAAAAeCABAAAQAAACoAEAAAAAAAAUAAAAUAAAAfAAQDOgAQAAEAAAA2AAAFcgAQAAcAAABGAhAACQAAADYAAAjyABAACgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAEgAAASAAAAeCABAAAQAAACoAEAAAAAAAAUAAAAYAAAAfAAQDOgAQAAEAAAA4AAAHcgAQABMAAABGAhAADQAAAKYKEAAPAAAAMgAACnIAEAANAAAARgIQAA8AAACmChCAQQAAAA0AAABGAhAAEwAAADgAAAdyABAAEwAAAKYKEAARAAAARgIQAAkAAAAyAAAKcgAQAAcAAABGAhAAEQAAAKYKEIBBAAAACQAAAEYCEAATAAAANgAACPIAEAAKAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB4IAEAABAAAAKgAQAAAAAAABQAAABwAAAB8ABAM6ABAAAQAAADgAAAdyABAAEwAAAKYKEAANAAAARgIQAAkAAAAyAAAKcgAQAAoAAABGAhAADQAAAKYKEIBBAAAACQAAAEYCEAATAAAAOAAAB3IAEAATAAAApgoQABEAAABGAhAACQAAADIAAApyABAABwAAAEYCEAARAAAApgoQgEEAAAAJAAAARgIQABMAAAA2AAAFggAQAAoAAAABQAAABQAAABIAAAEgAAAHggAQAAEAAAAqABAAAAAAAAFAAAAIAAAAHwAEAzoAEAABAAAAOAAAB3IAEAATAAAApgoQAAkAAABGAhAADQAAADIAAApyABAADQAAAEYCEAAJAAAApgoQgEEAAAANAAAARgIQABMAAAA4AAAHcgAQABMAAACmChAACQAAAEYCEAARAAAAMgAACnIAEAAPAAAARgIQAAkAAACmChCAQQAAABEAAABGAhAAEwAAADYAAAVyABAAEQAAAEYCEAAJAAAANgAABXIAEAAHAAAARgIQAAkAAAA2AAAI8gAQAAoAAAACQAAAAAAAAAAAAAAAAAAAAwAAABIAAAEgAAAHggAQAAEAAAAqABAAAAAAAAFAAAAJAAAAHwAEAzoAEAABAAAAOAAAB3IAEAATAAAApgoQAA0AAABGAhAADwAAADIAAApyABAADwAAAEYCEAANAAAApgoQgEEAAAAPAAAARgIQABMAAAA4AAAHcgAQABMAAACmChAACQAAAEYCEAARAAAAMgAACnIAEAARAAAARgIQAAkAAACmChCAQQAAABEAAABGAhAAEwAAADYAAAVyABAABwAAAEYCEAAJAAAANgAACPIAEAAKAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB4IAEAABAAAAKgAQAAAAAAABQAAACgAAAB8ABAM6ABAAAQAAADYAAAVyABAABwAAAEYCEAAJAAAANgAACPIAEAAKAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAASAAABOAAAB3IAEAATAAAApgoQAAkAAABGAhAAEQAAADIAAApyABAAEwAAAEYCEAAJAAAApgoQgEEAAAARAAAARgIQABMAAAA4AAAHcgAQABQAAACmChAADwAAAEYCEAARAAAAMgAACnIAEAAUAAAARgIQAA8AAACmChCAQQAAABEAAABGAhAAFAAAADgAAAdyABAAFQAAAEYCEAAPAAAApgoQABEAAAAyAAAKcgAQABUAAABGAhAAEQAAAKYKEIBBAAAADwAAAEYCEAAVAAAAOAAAB3IAEAAWAAAApgoQAAkAAABGAhAADQAAADIAAApyABAAFgAAAEYCEAAJAAAApgoQgEEAAAANAAAARgIQABYAAAA4AAAHcgAQABcAAACmChAADQAAAEYCEAAPAAAAMgAACnIAEAAXAAAARgIQAA0AAACmChCAQQAAAA8AAABGAhAAFwAAACAAAAryABAAGAAAAKYKEAAAAAAAAkAAAAsAAAAMAAAADQAAAA4AAAA4AAAHcgAQABkAAABGAhAADQAAAKYKEAAPAAAAMgAACnIAEAAZAAAARgIQAA8AAACmChCAQQAAAA0AAABGAhAAGQAAACAAAAdCABAAAAAAACoAEAAAAAAAAUAAAA8AAAABAAAHggAQABoAAAAqABAAAAAAAAFAAAAEAAAANgAABYIAEAAWAAAAAUAAAAUAAAA2AAAIcgAQABoAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAnyABAAGgAAAPYPEAAYAAAARg4QABYAAABGDhAAGgAAADcAAAlyABAAGQAAAPYPEAAYAAAARgIQABkAAABGAhAADQAAADYAAAWCABAACQAAAAFAAAAFAAAANwAACfIAEAAaAAAApgoQABgAAABGDhAACQAAAEYOEAAaAAAANwAACXIAEAAZAAAApgoQABgAAABGAhAADQAAAEYCEAAZAAAANwAACXIAEAAXAAAApgoQABgAAABGAhAAFwAAAEYCEAAPAAAANwAACXIAEAAbAAAApgoQABgAAABGAhAAFQAAAEYCEAARAAAANwAACXIAEAAcAAAApgoQABgAAABGAhAAEQAAAEYCEAAJAAAANwAADPIAEAAaAAAAVgUQABgAAAACQAAAAAAAAAAAAAAAAAAABAAAAEYOEAAaAAAANwAACXIAEAAWAAAAVgUQABgAAABGAhAAFgAAAEYCEAAZAAAANwAACXIAEAAVAAAAVgUQABgAAABGAhAAFQAAAEYCEAAXAAAANwAACXIAEAAXAAAAVgUQABgAAABGAhAAEQAAAEYCEAAbAAAANwAACeIAEAAYAAAAVgUQABgAAAAGCRAACQAAAAYJEAAcAAAANwAACXIAEAANAAAABgAQABgAAABGAhAADQAAAEYCEAAWAAAANwAACXIAEAAPAAAABgAQABgAAABGAhAADwAAAEYCEAAVAAAANwAACXIAEAARAAAABgAQABgAAABGAhAAFAAAAEYCEAAXAAAANwAACXIAEAAHAAAABgAQABgAAABGAhAAEwAAAJYHEAAYAAAANwAACfIAEAAKAAAABgAQABgAAABGDhAACQAAAEYOEAAaAAAAFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEfAAQDOgAQAAoAAAAgAAAKcgAQAAkAAAD2DxAACgAAAAJAAAADAAAABAAAAAUAAAAAAAAANwAACXIAEAAHAAAABgAQAAkAAABGAhAADQAAAEYCEAAHAAAANwAACbIAEAAJAAAAVgUQAAkAAABGCBAADQAAAEYIEAAKAAAAEAAAB0IAEAAAAAAARgIQAA0AAABGAhAADQAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAAKAAAApgoQAAAAAABGAhAADQAAABAAAAdCABAAAAAAAEYCEAAPAAAARgIQAA8AAABEAAAFQgAQAAAAAAAqABAAAAAAADgAAAdyABAADQAAAKYKEAAAAAAARgIQAA8AAAAQAAAHQgAQAAAAAABGAhAAEQAAAEYCEAARAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAA8AAACmChAAAAAAAEYCEAARAAAAEAAAB0IAEAAAAAAARgIQAAcAAABGAhAABwAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAAHAAAApgoQAAAAAABGAhAABwAAABAAAAdCABAAAAAAAEYDEAAJAAAARgMQAAkAAABEAAAFQgAQAAAAAAAqABAAAAAAADgAAAeyABAACQAAAKYKEAAAAAAARgwQAAkAAAAQAAAHQgAQAAAAAABGAhAACgAAAEYCEAANAAAAAAAACIIAEAABAAAAKgAQgMEAAAAAAAAAAUAAAAAAgD9LAAAFggAQAAEAAAA6ABAAAQAAADIAAAqCABAABAAAACoAEICBAAAAAAAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAQAAAA6ABAABAAAACoAEICBAAAAAAAAAAFAAACENFm%MgAACoIAEAAEAAAAOgAQAAQAAAAqABCAgQAAAAAAAAABQAAApA3JPzgAAAeCABAABQAAADoAEAABAAAAOgAQAAQAAAAyAAAJggAQAAUAAAA6ABAABQAAAAFAAAAAAADAAUAAANsPSUAxAAAIQgAQAAAAAAAqABAAAAAAACoAEIBBAAAAAAAAAAEAAAdCABAAAAAAACoAEAAAAAAAOgAQAAUAAAAyAAAJQgAQAAAAAAA6ABAABAAAADoAEAABAAAAKgAQAAAAAAAxAAAHggAQAAEAAAABQAAAbxKDOioAEAAAAAAATQAABoIAEAAEAAAAANAAACoAEAAAAAAADgAAB0IAEAAAAAAAKgAQAAAAAAA6ABAABAAAADcAAAlCABAAAAAAADoAEAABAAAAKgAQAAAAAAABQAAAAACAPzgAAAeCABAAAQAAABoAEAAKAAAACgAQAA0AAAAyAAAKggAQAAEAAAAKABAACgAAABoAEAANAAAAOgAQgEEAAAABAAAAEAAAB4IAEAAEAAAARgIQAA0AAABGAhAADwAAAAAAAAiCABAABQAAADoAEIDBAAAABAAAAAFAAAAAAIA:SwAABYIAEAAFAAAAOgAQAAUAAAAyAAAKggAQAAYAAAA6ABCAgQAAAAQAAAABQAAAMG6ZvAFAAAAnFpg9MgAACoIAEAAGAAAAOgAQAAYAAAA6ABCAgQAAAAQAAAABQAAAhDRZvjIAAAqCABAABgAAADoAEAAGAAAAOgAQgIEAAAAEAAAAAUAAAKQNyT84AAAHggAQAAcAAAA6ABAABQAAADoAEAAGAAAAMgAACYIAEAAHAAAAOgAQAAcAAAABQAAAAAAAwAFAAADbD0lAMQAACIIAEAAEAAAAOgAQAAQAAAA6ABCAQQAAAAQAAAABAAAHggAQAAQAAAA6ABAABAAAADoAEAAHAAAAMgAACYIAEAAEAAAAOgAQAAYAAAA6ABAABQAAADoAEAAEAAAAMQAAB4IAEAAFAAAAAUAAAG8Sgzo6ABAABAAAAE0AAAaCABAABgAAAADQAAA6ABAABAAAAA4AAAeCABAABAAAADoAEAAEAAAAOgAQAAYAAAA3AAAJggAQAAQAAAA6ABAABQAAADoAEAAEAAAAAUAAAAAAgD84AAAHggAQAAUAAAAaABAADQAAAAoAEAAPAAAAMgAACoIAEAAFAAAACgAQAA0AAAAaABAADwAAADoAEIBBAAAABQAAADgAAAeCABAABAAAADoAEAAEAAAAOgAQAAUAAAAyAAAJQgAQAAAAAAA6ABAAAQAAACoAEAAAAAAAOgAQAAQAAAAQAAAHggAQAAEAAABGAhAADwAAAEYCEAAHAAAAAAAACIIAEAAEAAAAOgAQgMEAAAABAAAAAUAAAAAAgD9LAAAFggAQAAQAAAA6ABAABAAAADIAAAqCABAABQAAADoAEICBAAAAAQAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAUAAAA6ABAABQAAADoAEICBAAAAAQAAAAFAAACENFm%MgAACoIAEAAFAAAAOgAQAAUAAAA6ABCAgQAAAAEAAAABQAAApA3JPzgAAAeCABAABgAAADoAEAAEAAAAOgAQAAUAAAAyAAAJggAQAAYAAAA6ABAABgAAAAFAAAAAAADAAUAAANsPSUAxAAAIggAQAAEAAAA6ABAAAQAAADoAEIBBAAAAAQAAAAEAAAeCABAAAQAAADoAEAABAAAAOgAQAAYAAAAyAAAJggAQAAEAAAA6ABAABQAAADoAEAAEAAAAOgAQAAEAAAAxAAAHggAQAAQAAAABQAAAbxKDOjoAEAABAAAATQAABoIAEAAFAAAAANAAADoAEAABAAAADgAAB4IAEAABAAAAOgAQAAEAAAA6ABAABQAAADcAAAmCABAAAQAAADoAEAAEAAAAOgAQAAEAAAABQAAAAACAPzgAAAeCABAABAAAAAoAEAAHAAAAGgAQAA8AAAAyAAAKggAQAAQAAAAKABAADwAAABoAEAAHAAAAOgAQgEEAAAAEAAAAMgAACUIAEAAAAAAAOgAQAAQAAAA6ABAAAQAAACoAEAAAAAAAIQAAB4IAEAABAAAAOgAQAAoAAAABQAAABAAAAB8ABAM6ABAAAQAAABAAAAeCABAAAQAAAEYCEAAHAAAARgMQAAkAAAAAAAAIggAQAAQAAAA6ABCAwQAAAAEAAAABQAAAAACAP0sAAAWCABAABAAAADoAEAAEAAAAMgAACoIAEAAFAAAAOgAQgIEAAAABAAAAAUAAADBumbwBQAAAJxaYPTIAAAqCABAABQAAADoAEAAFAAAAOgAQgIEAAAABAAAAAUAAAIQ0Wb4yAAAKggAQAAUAAAA6ABAABQAAADoAEICBAAAAAQAAAAFAAACkDck:OAAAB4IAEAAGAAAAOgAQAAQAAAA6ABAABQAAADIAAAmCABAABgAAADoAEAAGAAAAAUAAAAAAAMABQAAA2w9JQDEAAAiCABAAAQAAADoAEAABAAAAOgAQgEEAAAABAAAAAQAAB4IAEAABAAAAOgAQAAEAAAA6ABAABgAAADIAAAmCABAAAQAAADoAEAAFAAAAOgAQAAQAAAA6ABAAAQAAADEAAAeCABAABAAAAAFAAABvEoM6OgAQAAEAAABNAAAGggAQAAUAAAAA0AAAOgAQAAEAAAAOAAAHggAQAAEAAAA6ABAAAQAAADoAEAAFAAAANwAACYIAEAABAAAAOgAQAAQAAAA6ABAAAQAAAAFAAAAAAIA:OAAAB4IAEAAEAAAAGgAQAAcAAAAKABAACQAAADIAAAqCABAABAAAAAoAEAAHAAAAGgAQAAkAAAA6ABCAQQAAAAQAAAAyAAAJQgAQAAAAAAA6ABAABAAAADoAEAABAAAAKgAQAAAAAAAVAAABHwAEAyoAEAAJAAAAEAAAB4IAEAABAAAARgMQAAkAAABGAhAACgAAAAAAAAiCABAABAAAADoAEIDBAAAAAQAAAAFAAAAAAIA:SwAABYIAEAAEAAAAOgAQAAQAAAAyAAAKggAQAAUAAAA6ABCAgQAAAAEAAAABQAAAMG6ZvAFAAAAnFpg9MgAACoIAEAAFAAAAOgAQAAUAAAA6ABCAgQAAAAEAAAABQAAAhDRZvjIAAAqCABAABQAAADoAEAAFAAAAOgAQgIEAAAABAAAAAUAAAKQNyT84AAAHggAQAAYAAAA6ABAABAAAADoAEAAFAAAAMgAACYIAEAAGAAAAOgAQAAYAAAABQAAAAAAAwAFAAADbD0lAMQAACIIAEAABAAAAOgAQAAEAAAA6ABCAQQAAAAEAAAABAAAHggAQAAEAAAA6ABAAAQAAADoAEAAGAAAAMgAACYIAEAABAAAAOgAQAAUAAAA6ABAABAAAADoAEAABAAAAMQAAB4IAEAAEAAAAAUAAAG8Sgzo6ABAAAQAAAE0AAAaCABAABQAAAADQAAA6ABAAAQAAAA4AAAeCABAAAQAAADoAEAABAAAAOgAQAAUAAAA3AAAJggAQAAEAAAA6ABAABAAAADoAEAABAAAAAUAAAAAAgD84AAAHggAQAAQAAAAKABAACgAAABoAEAAJAAAAMgAACoIAEAAEAAAACgAQAAkAAAAaABAACgAAADoAEIBBAAAABAAAADIAAAlCABAAAAAAADoAEAAEAAAAOgAQAAEAAAAqABAAAAAAABUAAAE0AAAIQgAQAAAAAAAqABCAQQAAAAAAAAABQAAAAAAAABIAAAE2AAAFQgAQAAAAAAABQAAAAAAAABUAAAFIAAAL8gAQAAcAAABGABAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAADgAAAcSABAAAAAAACoAEAAAAAAAOgAQAAcAAAAQAAAHEgAQAAcAAABGAhAADAAAAEYCEAAGAAAAEAAAByIAEAAHAAAARgIQAAwAAABGAhAACAAAABAAAAdCABAABwAAAEYCEAAMAAAARgIQAAEAAAAQAAAHEgAQAAkAAABGAhAADgAAAEYCEAAGAAAAEAAAByIAEAAJAAAARgIQAA4AAABGAhAACAAAABAAAAdCABAACQAAAEYCEAAOAAAARgIQAAEAAAAQAAAHEgAQAAoAAABGAhAAEAAAAEYCEAAGAAAAEAAAByIAEAAKAAAARgIQABAAAABGAhAACAAAABAAAAdCABAACgAAAEYCEAAQAAAARgIQAAEAAAAQAAAHEgAQAAYAAABGAhAAEgAAAEYCEAAGAAAAEAAAByIAEAAGAAAARgIQABIAAABGAhAACAAAABAAAAdCABAABgAAAEYCEAASAAAARgIQAAEAAAAxAAAHIgAQAAAAAAABQAAAAAAAACoAEAAHAAAAAQAAB0IAEAAAAAAAGgAQAAAAAAABQAAAAQAAADEAAAcSABAAAQAAAAFAAAAAAAAAKgAQAAkAAAA3AAAJIgAQAAAAAAAaABAAAAAAAAFAAAADAAAAAUAAAAIAAAA3AAAJIgAQAAAAAAAKABAAAQAAABoAEAAAAAAAKgAQAAAAAAAxAAAHQgAQAAAAAAABQAAAAAAAACoAEAAKAAAAHgAABxIAEAABAAAAGgAQAAAAAAABQAAABAAAADcAAAkiABAAAAAAACoAEAAAAAAACgAQAAEAAAAaABAAAAAAADEAAAdCABAAAAAAAAFAAAAAAAAAKgAQAAYAAAAeAAAHEgAQAAEAAAAaABAAAAAAAAFAAAAIAAAANwAACSIAEAAAAAAAKgAQAAAAAAAKABAAAQAAABoAEAAAAAAAHwAAAxoAEAAAAAAANgAABXIAEAABAAAARgIQAAYAAAA2AAAI8gAQAAgAAAACQAAAAAAAAAAAAAAAAAAAAAAAABIAAAEgAAAHQgAQAAAAAAAaABAAAAAAAAFAAAABAAAAHwAEAyoAEAAAAAAAOAAAB3IAEAAMAAAApgoQAAcAAABGAhAACQAAADIAAApyABAACQAAAEYCEAAHAAAApgoQgEEAAAAJAAAARgIQAAwAAAA4AAAHcgAQAAwAAACmChAABwAAAEYCEAAGAAAAMgAACnIAEAAKAAAARgIQAAcAAACmChCAQQAAAAYAAABGAhAADAAAADYAAAVyABAAAQAAAEYCEAAGAAAANgAACPIAEAAIAAAAAkAAAAAAAAAAAAAAAAAAAAMAAAASAAABIAAAB0IAEAAAAAAAGgAQAAAAAAABQAAAAgAAAB8ABAMqABAAAAAAADgAAAdyABAADAAAAEYCEAAHAAAApgoQAAkAAAAyAAAKcgAQAAcAAABGAhAACQAAAKYKEIBBAAAABwAAAEYCEAAMAAAAOAAAB3IAEAAMAAAApgoQAAkAAABGAhAACgAAADIAAApyABAACgAAAEYCEAAJAAAApgoQgEEAAAAKAAAARgIQAAwAAAA2AAAFcgAQAAEAAABGAhAABgAAADYAAAjyABAACAAAAAJAAAAAAAAAAAAAAAAAAAADAAAAEgAAASAAAAdCABAAAAAAABoAEAAAAAAAAUAAAAMAAAAfAAQDKgAQAAAAAAA4AAAHcgAQAAwAAACmChAACQAAAEYCEAAKAAAAMgAACnIAEAAKAAAARgIQAAkAAACmChCAQQAAAAoAAABGAhAADAAAADgAAAdyABAADAAAAKYKEAAHAAAARgIQAAYAAAAyAAAKcgAQAAEAAABGAhAABwAAAKYKEIBBAAAABgAAAEYCEAAMAAAANgAACPIAEAAIAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB0IAEAAAAAAAGgAQAAAAAAABQAAABAAAAB8ABAMqABAAAAAAADgAAAdyABAADAAAAKYKEAAKAAAARgIQAAYAAAAyAAAKcgAQAAcAAABGAhAACgAAAKYKEIBBAAAABgAAAEYCEAAMAAAAOAAAB3IAEAAMAAAARgIQAAkAAACmChAACgAAADIAAApyABAACQAAAEYCEAAKAAAApgoQgEEAAAAJAAAARgIQAAwAAAA2AAAFcgAQAAEAAABGAhAABgAAADYAAAjyABAACAAAAAJAAAAAAAAAAAAAAAAAAAADAAAAEgAAASAAAAdCABAAAAAAABoAEAAAAAAAAUAAAAUAAAAfAAQDKgAQAAAAAAA2AAAFcgAQAAEAAABGAhAABgAAADYAAAjyABAACAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAEgAAASAAAAdCABAAAAAAABoAEAAAAAAAAUAAAAYAAAAfAAQDKgAQAAAAAAA4AAAHcgAQAAwAAABGAhAABwAAAKYKEAAJAAAAMgAACnIAEAAHAAAARgIQAAkAAACmChCAQQAAAAcAAABGAhAADAAAADgAAAdyABAADAAAAKYKEAAKAAAARgIQAAYAAAAyAAAKcgAQAAEAAABGAhAACgAAAKYKEIBBAAAABgAAAEYCEAAMAAAANgAACPIAEAAIAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB0IAEAAAAAAAGgAQAAAAAAABQAAABwAAAB8ABAMqABAAAAAAADgAAAdyABAADAAAAKYKEAAHAAAARgIQAAYAAAAyAAAKcgAQAAgAAABGAhAABwAAAKYKEIBBAAAABgAAAEYCEAAMAAAAOAAAB3IAEAAMAAAApgoQAAoAAABGAhAABgAAADIAAApyABAAAQAAAEYCEAAKAAAApgoQgEEAAAAGAAAARgIQAAwAAAA2AAAFggAQAAgAAAABQAAABQAAABIAAAEgAAAHQgAQAAAAAAAaABAAAAAAAAFAAAAIAAAAHwAEAyoAEAAAAAAAOAAAB3IAEAAMAAAApgoQAAYAAABGAhAABwAAADIAAApyABAABwAAAEYCEAAGAAAApgoQgEEAAAAHAAAARgIQAAwAAAA4AAAHcgAQAAwAAACmChAABgAAAEYCEAAKAAAAMgAACnIAEAAJAAAARgIQAAYAAACmChCAQQAAAAoAAABGAhAADAAAADYAAAVyABAACgAAAEYCEAAGAAAANgAABXIAEAABAAAARgIQAAYAAAA2AAAI8gAQAAgAAAACQAAAAAAAAAAAAAAAAAAAAwAAABIAAAEgAAAHQgAQAAAAAAAaABAAAAAAAAFAAAAJAAAAHwAEAyoAEAAAAAAAOAAAB3IAEAAMAAAApgoQAAcAAABGAhAACQAAADIAAApyABAACQAAAEYCEAAHAAAApgoQgEEAAAAJAAAARgIQAAwAAAA4AAAHcgAQAAwAAACmChAABgAAAEYCEAAKAAAAMgAACnIAEAAKAAAARgIQAAYAAACmChCAQQAAAAoAAABGAhAADAAAADYAAAVyABAAAQAAAEYCEAAGAAAANgAACPIAEAAIAAAAAkAAAAAAAAAAAAAAAAAAAAQAAAASAAABIAAAB0IAEAAAAAAAGgAQAAAAAAABQAAACgAAAB8ABAMqABAAAAAAADYAAAVyABAAAQAAAEYCEAAGAAAANgAACPIAEAAIAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAASAAABOAAAB3IAEAAMAAAApgoQAAYAAABGAhAACgAAADIAAApyABAADAAAAEYCEAAGAAAApgoQgEEAAAAKAAAARgIQAAwAAAA4AAAHcgAQAA0AAACmChAACQAAAEYCEAAKAAAAMgAACnIAEAANAAAARgIQAAkAAACmChCAQQAAAAoAAABGAhAADQAAADgAAAdyABAADgAAAEYCEAAJAAAApgoQAAoAAAAyAAAKcgAQAA4AAABGAhAACgAAAKYKEIBBAAAACQAAAEYCEAAOAAAAOAAAB3IAEAAPAAAApgoQAAYAAABGAhAABwAAADIAAApyABAADwAAAEYCEAAGAAAApgoQgEEAAAAHAAAARgIQAA8AAAA4AAAHcgAQABAAAACmChAABwAAAEYCEAAJAAAAMgAACnIAEAAQAAAARgIQAAcAAACmChCAQQAAAAkAAABGAhAAEAAAACAAAAryABAAEQAAAFYFEAAAAAAAAkAAAAsAAAAMAAAADQAAAA4AAAA4AAAHcgAQABIAAABGAhAABwAAAKYKEAAJAAAAMgAACnIAEAASAAAARgIQAAkAAACmChCAQQAAAAcAAABGAhAAEgAAACAAAAciABAAAAAAABoAEAAAAAAAAUAAAA8AAAABAAAHggAQABMAAAAaABAAAAAAAAFAAAAEAAAANgAABYIAEAAPAAAAAUAAAAUAAAA2AAAIcgAQABMAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAnyABAAEwAAAPYPEAARAAAARg4QAA8AAABGDhAAEwAAADcAAAlyABAAEgAAAPYPEAARAAAARgIQABIAAABGAhAABwAAADYAAAWCABAABgAAAAFAAAAFAAAANwAACfIAEAATAAAApgoQABEAAABGDhAABgAAAEYOEAATAAAANwAACXIAEAASAAAApgoQABEAAABGAhAABwAAAEYCEAASAAAANwAACXIAEAAQAAAApgoQABEAAABGAhAAEAAAAEYCEAAJAAAANwAACXIAEAAUAAAApgoQABEAAABGAhAADgAAAEYCEAAKAAAANwAACXIAEAAVAAAApgoQABEAAABGAhAACgAAAEYCEAAGAAAANwAADPIAEAATAAAAVgUQABEAAAACQAAAAAAAAAAAAAAAAAAABAAAAEYOEAATAAAANwAACXIAEAAPAAAAVgUQABEAAABGAhAADwAAAEYCEAASAAAANwAACXIAEAAOAAAAVgUQABEAAABGAhAADgAAAEYCEAAQAAAANwAACXIAEAAQAAAAVgUQABEAAABGAhAACgAAAEYCEAAUAAAANwAACeIAEAARAAAAVgUQABEAAAAGCRAABgAAAAYJEAAVAAAANwAACXIAEAAHAAAABgAQABEAAABGAhAABwAAAEYCEAAPAAAANwAACXIAEAAJAAAABgAQABEAAABGAhAACQAAAEYCEAAOAAAANwAACXIAEAAKAAAABgAQABEAAABGAhAADQAAAEYCEAAQAAAANwAACXIAEAABAAAABgAQABEAAABGAhAADAAAAJYHEAARAAAANwAACfIAEAAIAAAABgAQABEAAABGDhAABgAAAEYOEAATAAAAFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEfAAQDOgAQAAgAAAAgAAAKcgAQAAYAAAD2DxAACAAAAAJAAAADAAAABAAAAAUAAAAAAAAANwAACXIAEAABAAAABgAQAAYAAABGAhAABwAAAEYCEAABAAAANwAACbIAEAAGAAAAVgUQAAYAAABGCBAABwAAAEYIEAAIAAAAEAAAByIAEAAAAAAARgIQAAcAAABGAhAABwAAAEQAAAUiABAAAAAAABoAEAAAAAAAOAAAB3IAEAAHAAAAVgUQAAAAAABGAhAABwAAABAAAAciABAAAAAAAEYCEAAJAAAARgIQAAkAAABEAAAFIgAQAAAAAAAaABAAAAAAADgAAAdyABAACAAAAFYFEAAAAAAARgIQAAkAAAAQAAAHIgAQAAAAAABGAhAACgAAAEYCEAAKAAAARAAABSIAEAAAAAAAGgAQAAAAAAA4AAAHcgAQAAkAAABWBRAAAAAAAEYCEAAKAAAAEAAAByIAEAAAAAAARgIQAAEAAABGAhAAAQAAAEQAAAUiABAAAAAAABoAEAAAAAAAOAAAB3IAEAABAAAAVgUQAAAAAABGAhAAAQAAABAAAAciABAAAAAAAEYDEAAGAAAARgMQAAYAAABEAAAFIgAQAAAAAAAaABAAAAAAADgAAAeyABAABgAAAFYFEAAAAAAARgwQAAYAAAAQAAAHIgAQAAAAAABGAhAABwAAAEYCEAAIAAAAAAAACEIAEAAAAAAAGgAQgMEAAAAAAAAAAUAAAAAAgD9LAAAFQgAQAAAAAAAqABAAAAAAADIAAAqCABAAAQAAABoAEICBAAAAAAAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAEAAAA6ABAAAQAAABoAEICBAAAAAAAAAAFAAACENFm%MgAACoIAEAABAAAAOgAQAAEAAAAaABCAgQAAAAAAAAABQAAApA3JPzgAAAeCABAABAAAACoAEAAAAAAAOgAQAAEAAAAyAAAJggAQAAQAAAA6ABAABAAAAAFAAAAAAADAAUAAANsPSUAxAAAIIgAQAAAAAAAaABAAAAAAABoAEIBBAAAAAAAAAAEAAAciABAAAAAAABoAEAAAAAAAOgAQAAQAAAAyAAAJIgAQAAAAAAA6ABAAAQAAACoAEAAAAAAAGgAQAAAAAAAxAAAHQgAQAAAAAAABQAAAbxKDOhoAEAAAAAAATQAABoIAEAABAAAAANAAABoAEAAAAAAADgAAByIAEAAAAAAAGgAQAAAAAAA6ABAAAQAAADcAAAkiABAAAAAAACoAEAAAAAAAGgAQAAAAAAABQAAAAACAPzgAAAdCABAAAAAAABoAEAAHAAAACgAQAAgAAAAyAAAKQgAQAAAAAAAKABAABwAAABoAEAAIAAAAKgAQgEEAAAAAAAAAEAAAB4IAEAABAAAARgIQAAgAAABGAhAACQAAAAAAAAiCABAABAAAADoAEIDBAAAAAQAAAAFAAAAAAIA:SwAABYIAEAAEAAAAOgAQAAQAAAAyAAAKggAQAAUAAAA6ABCAgQAAAAEAAAABQAAAMG6ZvAFAAAAnFpg9MgAACoIAEAAFAAAAOgAQAAUAAAA6ABCAgQAAAAEAAAABQAAAhDRZvjIAAAqCABAABQAAADoAEAAFAAAAOgAQgIEAAAABAAAAAUAAAKQNyT84AAAHggAQAAcAAAA6ABAABAAAADoAEAAFAAAAMgAACYIAEAAHAAAAOgAQAAcAAAABQAAAAAAAwAFAAADbD0lAMQAACIIAEAABAAAAOgAQAAEAAAA6ABCAQQAAAAEAAAABAAAHggAQAAEAAAA6ABAAAQAAADoAEAAHAAAAMgAACYIAEAABAAAAOgAQAAUAAAA6ABAABAAAADoAEAABAAAAMQAAB4IAEAAEAAAAAUAAAG8Sgzo6ABAAAQAAAE0AAAaCABAABQAAAADQAAA6ABAAAQAAAA4AAAeCABAAAQAAADoAEAABAAAAOgAQAAUAAAA3AAAJggAQAAEAAAA6ABAABAAAADoAEAABAAAAAUAAAAAAgD84AAAHggAQAAQAAAAaABAACAAAAAoAEAAJAAAAMgAACoIAEAAEAAAACgAQAAgAAAAaABAACQAAADoAEIBBAAAABAAAADgAAAeCABAAAQAAADoAEAABAAAAOgAQAAQAAAAyAAAJIgAQAAAAAAAqABAAAAAAABoAEAAAAAAAOgAQAAEAAAAQAAAHQgAQAAAAAABGAhAACQAAAEYCEAABAAAAAAAACIIAEAABAAAAKgAQgMEAAAAAAAAAAUAAAAAAgD9LAAAFggAQAAEAAAA6ABAAAQAAADIAAAqCABAABAAAACoAEICBAAAAAAAAAAFAAAAwbpm8AUAAACcWmD0yAAAKggAQAAQAAAA6ABAABAAAACoAEICBAAAAAAAAAAFAAACENFm%MgAACoIAEAAEAAAAOgAQAAQAAAAqABCAgQAAAAAAAAABQAAApA3JPzgAAAeCABAABQAAADoAEAABAAAAOgAQAAQAAAAyAAAJggAQAAUAAAA6ABAABQAAAAFAAAAAAADAAUAAANsPSUAxAAAIQgAQAAAAAAAqABAAAAAAACoAEIBBAAAAAAAAAAEAAAdCABAAAAAAACoAEAAAAAAAOgAQAAUAAAAyAAAJQgAQAAAAAAA6ABAABAAAADoAEAABAAAAKgAQAAAAAAAxAAAHggAQAAEAAAABQAAAbxKDOioAEAAAAAAATQAABoIAEAAEAAAAANAAACoAEAAAAAAADgAAB0IAEAAAAAAAKgAQAAAAAAA6ABAABAAAADcAAAlCABAAAAAAADoAEAABAAAAKgAQAAAAAAABQAAAAACAPzgAAAeCABAAAQAAAAoAEAABAAAAGgAQAAkAAAAyAAAKggAQAAEAAAAKABAACQAAABoAEAABAAAAOgAQgEEAAAABAAAAMgAACSIAEAAAAAAAOgAQAAEAAAAqABAAAAAAABoAEAAAAAAAIQAAB0IAEAAAAAAAOgAQAAgAAAABQAAABAAAAB8ABAMqABAAAAAAABAAAAdCABAAAAAAAEYCEAABAAAARgMQAAYAAAAAAAAIQgAQAAEAAAAqABCAwQAAAAAAAAABQAAAAACAP0sAAAVCABAAAQAAACoAEAABAAAAMgAACoIAEAABAAAAKgAQgIEAAAAAAAAAAUAAADBumbwBQAAAJxaYPTIAAAqCABAAAQAAADoAEAABAAAAKgAQgIEAAAAAAAAAAUAAAIQ0Wb4yAAAKggAQAAEAAAA6ABAAAQAAACoAEICBAAAAAAAAAAFAAACkDck:OAAAB4IAEAAEAAAAKgAQAAEAAAA6ABAAAQAAADIAAAmCABAABAAAADoAEAAEAAAAAUAAAAAAAMABQAAA2w9JQDEAAAhCABAAAAAAACoAEAAAAAAAKgAQgEEAAAAAAAAAAQAAB0IAEAAAAAAAKgAQAAAAAAA6ABAABAAAADIAAAlCABAAAAAAADoAEAABAAAAKgAQAAEAAAAqABAAAAAAADEAAAdCABAAAQAAAAFAAABvEoM6KgAQAAAAAABNAAAGggAQAAEAAAAA0AAAKgAQAAAAAAAOAAAHQgAQAAAAAAAqABAAAAAAADoAEAABAAAANwAACUIAEAAAAAAAKgAQAAEAAAAqABAAAAAAAAFAAAAAAIA:OAAAByIAEAABAAAAGgAQAAEAAAAKABAABgAAADIAAAoSABAAAQAAAAoAEAABAAAAGgAQAAYAAAAaABCAQQAAAAEAAAAyAAAJIgAQAAAAAAAKABAAAQAAACoAEAAAAAAAGgAQAAAAAAAVAAABHwAEAyoAEAAGAAAAEAAAB0IAEAAAAAAARgMQAAYAAABGAhAABwAAAAAAAAgSABAAAQAAACoAEIDBAAAAAAAAAAFAAAAAAIA:SwAABRIAEAABAAAACgAQAAEAAAAyAAAKIgAQAAEAAAAqABCAgQAAAAAAAAABQAAAMG6ZvAFAAAAnFpg9MgAACiIAEAABAAAAGgAQAAEAAAAqABCAgQAAAAAAAAABQAAAhDRZvjIAAAoiABAAAQAAABoAEAABAAAAKgAQgIEAAAAAAAAAAUAAAKQNyT84AAAHQgAQAAEAAAAKABAAAQAAABoAEAABAAAAMgAACUIAEAABAAAAKgAQAAEAAAABQAAAAAAAwAFAAADbD0lAMQAACEIAEAAAAAAAKgAQAAAAAAAqABCAQQAAAAAAAAABAAAHQgAQAAAAAAAqABAAAAAAACoAEAABAAAAMgAACUIAEAAAAAAAGgAQAAEAAAAKABAAAQAAACoAEAAAAAAAMQAABxIAEAABAAAAAUAAAG8SgzoqABAAAAAAAE0AAAYiABAAAQAAAADQAAAqABAAAAAAAA4AAAdCABAAAAAAACoAEAAAAAAAGgAQAAEAAAA3AAAJQgAQAAAAAAAKABAAAQAAACoAEAAAAAAAAUAAAAAAgD84AAAHEgAQAAEAAAAKABAABwAAABoAEAAGAAAAMgAAChIAEAABAAAACgAQAAYAAAAaABAABwAAAAoAEIBBAAAAAQAAADIAAAkiABAAAAAAAAoAEAABAAAAKgAQAAAAAAAaABAAAAAAABUAAAE0AAAIIgAQAAAAAAAaABCAQQAAAAAAAAABQAAAAAAAABIAAAE2AAAFIgAQAAAAAAABQAAAAAAAABUAAAE4AAAHEgAQAAAAAAA6ABAAAgAAAAoAEAAAAAAAOAAABxIAEAAAAAAACgAQAAAAAAABQAAAzcxMPTIAAAlyABAAAAAAAJYHEAADAAAAVgUQAAAAAAAGABAAAAAAAAAAAAlyABAAAQAAAEYCEAAFAAAARoIggEEAAAAAAAAADwAAABAAAAcSABAAAQAAAEYCEAABAAAARgIQAAEAAAAOAAAKEgAQAAEAAAACQAAAAACAPwAAgD8AAIA:AACAPwoAEAABAAAAOAAAB3IAEAAAAAAARgIQAAAAAAAGABAAAQAAADgAAAhyABAAAAAAAEYCEAAAAAAARoIgAAAAAAAQAAAADwAABxIAEAABAAAABgAQAAMAAAAGABAAAwAAAAAAAAeCABAAAAAAADoAEAAAAAAACgAQAAEAAAAAAAAHggAQAAAAAAA6ABAAAAAAAAFAAAAAAIC:OAAAB3IAEAAAAAAA9g8QAAAAAABGAhAAAAAAADgAAAeCABAAAAAAACoAEAALAAAACgAQAAsAAAA2AAAFEgAQAAEAAAABQAAAAAAAADYAAAUiABAAAQAAAAoAEAALAAAANgAABUIAEAABAAAAOgAQAAAAAAAwAAABMQAACjIAEAADAAAARgAQAAEAAAACQAAAAACAPwAAoEAAAAAAAAAAAAEAAAeCABAAAQAAABoAEAADAAAACgAQAAMAAAADAAADOgAQAAEAAAAyAAAJcgAQAAMAAABGAhAABAAAAFYFEAABAAAARgIQAAUAAAA4AAAKMgAQAAYAAACmChAAAQAAAAJAAAAAAIBDAAAAPwAAAAAAAAAALwAABYIAEAABAAAACgAQAAYAAAA0AAAHggAQAAEAAAA6ABAAAQAAAAFAAAAAAAAAMgAAD3IAEAADAAAARgIQAAMAAAACQAAAAAAAPwAAAD8AAAA:AAAAAAJAAAAAAAA:AAAAPwAAAD8AAAAASAAAC:IAEAADAAAARgIQAAMAAABGfhAABwAAAABgEAAHAAAAOgAQAAEAAAAAAAAIggAQAAEAAAAKABCAQQAAAAEAAAABQAAAAACAPzIAAAkSABAAAQAAADoAEAABAAAACgAQAAMAAAAKABAAAQAAADQAAAeCABAAAQAAABoAEAAGAAAAAUAAAAAAADwAAAAHIgAQAAEAAAA6ABAAAQAAABoAEAABAAAAOAAAB0IAEAABAAAAKgAQAAsAAAAaABAAAQAAABYAAAEAAAAIggAQAAAAAAAKABCAQQAAAAEAAAABQAAAAACAPzIAAAlyIBAAAAAAAEYCEAAAAAAA9g8QAAAAAABGAhAAAgAAADYAAAWCIBAAAAAAAAFAAAAAAIA:PgAAAVNUQVR0AAAAbQMAAB0AAAAAAAAAAwAAAD4CAAAgAAAAGAAAABkAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAAAAAAAAAAAEUAAAA%AAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.deferred_light_voxel_vertData0 = "s1451:AXBvcwAAASRHbG9iYWxzAAACaW52VlAAAAAAAEAAAAAEBGV5ZQBAAAAADAAAAAMBRFhCQyALzKAdoNHY3C7yLLXUJAgBAAAAEAQAAAUAAAA0AAAALAEAAGABAADQAQAAlAMAAFJERUbwAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAvAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAIAAABgAAAAUAAAAAAAAAAAAAAAkAAAAAAAAABAAAAAAgAAAJgAAAAAAAAAqAAAAEAAAAAMAAAAAgAAAKwAAAAAAAAAaW52VlAAq6sDAAMABAAEAAAAAAAAAAAAZXllAAEAAwABAAMAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR05oAAAAAwAAAAgAAABQAAAAAAAAAAAAAAADAAAAAAAAAAMMAABQAAAAAQAAAAAAAAADAAAAAQAAAAcIAABZAAAAAAAAAAEAAAADAAAAAgAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSvAEAAEAAAQBvAAAAWQAABEaOIAAAAAAABQAAAF8AAAMyEBAAAAAAAGUAAAMyIBAAAAAAAGUAAANyIBAAAQAAAGcAAATyIBAAAgAAAAEAAABoAAACAgAAADIAAA8yIBAAAAAAAEYQEAAAAAAAAkAAAAAAAD8AAAC:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAADYAAAUyABAAAAAAAEYQEAAAAAAANgAACMIAEAAAAAAAAkAAAAAAAAAAAAAAAACAPwAAgD8RAAAIEgAQAAEAAABGDxAAAAAAAEaOIAAAAAAAAAAAABEAAAgiABAAAQAAAEYPEAAAAAAARo4gAAAAAAABAAAAEQAACEIAEAABAAAARg8QAAAAAABGjiAAAAAAAAIAAAARAAAIEgAQAAAAAABGDhAAAAAAAEaOIAAAAAAAAwAAAA4AAAdyABAAAAAAAEYCEAABAAAABgAQAAAAAAAAAAAJciAQAAEAAABGAhAAAAAAAEaCIIBBAAAAAAAAAAQAAAA2AAAFMiAQAAIAAABGEBAAAAAAADYAAAjCIBAAAgAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAADAAAAAIAAAAAAAAABAAAAAcAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.dilate_pass_fragData0 = "s9332:AANfdGV4X3NhbXBsZXIAAHRleAAAJEdsb2JhbHMAAAFkaWxhdGVSYWRpdXMAAAAAAAQAAAABAURYQkPsag88rBAr7REkPw0WoZP:AQAAACAbAAAFAAAANAAAAFgBAACMAQAAwAEAAKQaAABSREVGHAEAAAEAAACYAAAAAwAAABwAAAAABP::AAEAAOgAAAB8AAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAIkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAjQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfdGV4X3NhbXBsZXIAdGV4ACRHbG9iYWxzAKurjQAAAAEAAACwAAAAEAAAAAAAAAAAAAAAyAAAAAAAAAAEAAAAAgAAANgAAAAAAAAAZGlsYXRlUmFkaXVzAKurqwAAAwABAAEAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8AAABTVl9UYXJnZXQAq6tTSERS3BgAAEAAAAA3BgAAWQAABEaOIAAAAAAAAQAAAFoAAAMAYBAAAAAAAFgYAAQAcBAAAAAAAFVVAABiEAADMhAQAAAAAABlAAAD8iAQAAAAAABoAAACCQAAAEgAAAvyABAAAAAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAGAAACnIAEAABAAAARgIQAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAEAAAeCABAAAAAAABoAEAABAAAACgAQAAEAAAABAAAHggAQAAAAAAAqABAAAQAAADoAEAAAAAAAHwAEAzoAEAAAAAAAPRAAB:IAEAABAAAAAUAAAAAAAABGfhAAAAAAACsAAAWCABAAAAAAAAoAEAABAAAADgAACoIAEAAAAAAAAkAAAAAAgD8AAIA:AACAPwAAgD86ABAAAAAAADgAAAryABAAAQAAAPYPEAAAAAAAAkAAAAAAAAAAAIA:AAAAAAAAgL84AAAKMgAQAAIAAAD2DxAAAAAAAAJAAAAAAIA:AACAvwAAAAAAAAAANgAACKIAEAADAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA2AAAFcgAQAAQAAABGAhAAAAAAADYAAAjCABAAAgAAAAJAAAAAAAAAAAAAAICWGEsAAAAAMAAAASsAAAWCABAABAAAADoAEAACAAAAHQAACIIAEAAEAAAAOgAQAAQAAAAKgCAAAAAAAAAAAAADAAQDOgAQAAQAAAAeAAAHggAQAAIAAAA6ABAAAgAAAAFAAAABAAAAKwAABRIAEAAFAAAAOgAQAAIAAAA4AAAHYgAQAAUAAABWBxAAAQAAAAYAEAAFAAAAMgAACfIAEAAGAAAAtgEQAAEAAAAGABAABQAAAEYUEAAAAAAASAAAC:IAEAAHAAAARgAQAAYAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAYAAAHggAQAAQAAAAKABAABwAAAAFAAAAAAAAAOQAACjIAEAAIAAAAlgUQAAcAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAmCABAABAAAADoAEAAEAAAACgAQAAgAAAABQAAA:::::zwAAAeCABAABAAAABoAEAAIAAAAOgAQAAQAAAAfAAQDOgAQAAQAAAAAAAAIMgAQAAgAAABGABCAQQAAAAYAAABGEBAAAAAAAA8AAAeCABAABAAAAEYAEAAIAAAARgAQAAgAAABLAAAFggAQAAQAAAA6ABAABAAAADEAAAeCABAABQAAADoAEAAEAAAAKgAQAAIAAAAfAAQDOgAQAAUAAAA4AAAHEgAQAAMAAAAqABAABQAAAAFAAAAAAIA%AAAABzIAEAAGAAAARgAQAAMAAABGABAABgAAAEgAAAvyABAACAAAAEYAEAAGAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAGAAABxIAEAADAAAACgAQAAgAAAABQAAAAAAAADkAAAoyABAABgAAAJYFEAAIAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAJEgAQAAMAAAAKABAAAwAAAAoAEAAGAAAAAUAAAP::::88AAAHEgAQAAMAAAAaABAABgAAAAoAEAADAAAAAAAACHIAEAAIAAAARgIQAAcAAABGAhCAQQAAAAgAAAAyAAAMcgAQAAgAAABGAhAACAAAAAJAAAAAAIBAAACAQAAAgEAAAAAARgIQAAcAAAA3AAAJcgAQAAQAAAAGABAAAwAAAEYCEAAIAAAARgIQAAcAAAA2AAAFQgAQAAIAAAA6ABAABAAAABUAAAEVAAABSAAAC:IAEAAHAAAA5goQAAYAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAYAAAHEgAQAAMAAAAKABAABwAAAAFAAAAAAAAAOQAACjIAEAAGAAAAlgUQAAcAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAkSABAAAwAAAAoAEAADAAAACgAQAAYAAAABQAAA:::::zwAAAcSABAAAwAAABoAEAAGAAAACgAQAAMAAAAfAAQDCgAQAAMAAAAAAAAIMgAQAAYAAADmChCAQQAAAAYAAABGEBAAAAAAAA8AAAcSABAAAwAAAEYAEAAGAAAARgAQAAYAAABLAAAFEgAQAAMAAAAKABAAAwAAADEAAAeCABAABAAAAAoAEAADAAAAKgAQAAIAAAAfAAQDOgAQAAQAAAA4AAAHQgAQAAMAAAAaABAABQAAAAFAAAAAAIA%AAAABzIAEAAGAAAA5goQAAMAAADmChAABgAAAEgAAAvyABAABgAAAEYAEAAGAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAGAAAB0IAEAADAAAACgAQAAYAAAABQAAAAAAAADkAAAoyABAACAAAAJYFEAAGAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAJQgAQAAMAAAAqABAAAwAAAAoAEAAIAAAAAUAAAP::::88AAAHQgAQAAMAAAAaABAACAAAACoAEAADAAAAAAAACHIAEAAGAAAARgIQgEEAAAAGAAAARgIQAAcAAAAyAAAMcgAQAAYAAABGAhAABgAAAAJAAAAAAIBAAACAQAAAgEAAAAAARgIQAAcAAAA3AAAJcgAQAAQAAACmChAAAwAAAEYCEAAGAAAARgIQAAcAAAA2AAAFQgAQAAIAAAAKABAAAwAAABUAAAEVAAABMgAACfIAEAAGAAAARg4QAAEAAAAGABAABQAAAEYUEAAAAAAASAAAC:IAEAAHAAAARgAQAAYAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAYAAAHEgAQAAMAAAAKABAABwAAAAFAAAAAAAAAOQAACjIAEAAIAAAAlgUQAAcAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAkSABAAAwAAAAoAEAADAAAACgAQAAgAAAABQAAA:::::zwAAAcSABAAAwAAABoAEAAIAAAACgAQAAMAAAAfAAQDCgAQAAMAAAAAAAAIUgAQAAMAAAAGARCAQQAAAAYAAAAGERAAAAAAAA8AAAcSABAAAwAAAIYAEAADAAAAhgAQAAMAAABLAAAFEgAQAAMAAAAKABAAAwAAADEAAAdCABAAAwAAAAoAEAADAAAAKgAQAAIAAAAfAAQDKgAQAAMAAAAyAAAMogAQAAUAAAAGBBAABQAAAAJAAAAAAAAAAAAAAAAAAAAAAIA%BgQQAAYAAABIAAAL8gAQAAgAAADWBRAABQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAABgAAAdCABAAAwAAAAoAEAAIAAAAAUAAAAAAAAA5AAAKogAQAAUAAABWCRAACAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAACUIAEAADAAAAKgAQAAMAAAAaABAABQAAAAFAAAD:::::PAAAB0IAEAADAAAAOgAQAAUAAAAqABAAAwAAAAAAAAhyABAACAAAAEYCEAAHAAAARgIQgEEAAAAIAAAAMgAADHIAEAAIAAAARgIQAAgAAAACQAAAAACAQAAAgEAAAIBAAAAAAEYCEAAHAAAANwAACXIAEAAEAAAApgoQAAMAAABGAhAACAAAAEYCEAAHAAAANgAABUIAEAACAAAACgAQAAMAAAAVAAABFQAAAUgAAAvyABAABwAAAOYKEAAGAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAGAAABxIAEAADAAAACgAQAAcAAAABQAAAAAAAADkAAAqiABAABQAAAFYJEAAHAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAJEgAQAAMAAAAKABAAAwAAABoAEAAFAAAAAUAAAP::::88AAAHEgAQAAMAAAA6ABAABQAAAAoAEAADAAAAHwAEAwoAEAADAAAAAAAACFIAEAADAAAApgsQgEEAAAAGAAAABhEQAAAAAAAPAAAHEgAQAAMAAACGABAAAwAAAIYAEAADAAAASwAABRIAEAADAAAACgAQAAMAAAAxAAAHQgAQAAMAAAAKABAAAwAAACoAEAACAAAAHwAEAyoAEAADAAAAMgAADGIAEAAFAAAABgIQAAUAAAACQAAAAAAAAAAAAAAAAIA%AAAAAKYLEAAGAAAASAAAC:IAEAAGAAAAlgUQAAUAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAYAAAHQgAQAAMAAAAKABAABgAAAAFAAAAAAAAAOQAACmIAEAAFAAAAVgYQAAYAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAlCABAAAwAAACoAEAADAAAAGgAQAAUAAAABQAAA:::::zwAAAdCABAAAwAAACoAEAAFAAAAKgAQAAMAAAAAAAAI4gAQAAUAAAAGCRCAQQAAAAYAAAAGCRAABwAAADIAAAziABAABQAAAFYOEAAFAAAAAkAAAAAAAAAAAIBAAACAQAAAgEAGCRAABwAAADcAAAlyABAABAAAAKYKEAADAAAAlgcQAAUAAABGAhAABwAAADYAAAVCABAAAgAAAAoAEAADAAAAFQAAARUAAAE4AAAHUgAQAAMAAAAGARAAAgAAAAYAEAAFAAAAMgAACfIAEAAGAAAAFgQQAAIAAAAGABAABQAAAEYUEAAAAAAASAAAC:IAEAAHAAAARgAQAAYAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAYAAAHggAQAAQAAAAKABAABwAAAAFAAAAAAAAAOQAACmIAEAAFAAAAVgYQAAcAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAmCABAABAAAADoAEAAEAAAAGgAQAAUAAAABQAAA:::::zwAAAeCABAABAAAACoAEAAFAAAAOgAQAAQAAAAfAAQDOgAQAAQAAAAAAAAIYgAQAAUAAAAGARCAQQAAAAYAAAAGERAAAAAAAA8AAAeCABAABAAAAJYFEAAFAAAAlgUQAAUAAABLAAAFggAQAAQAAAA6ABAABAAAADEAAAciABAABQAAADoAEAAEAAAAKgAQAAIAAAAfAAQDGgAQAAUAAAAyAAAMYgAQAAUAAACmCBAAAwAAAAJAAAAAAAAAAACAPgAAgD4AAAAABgEQAAYAAABIAAAL8gAQAAgAAACWBRAABQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAABgAAAciABAABQAAAAoAEAAIAAAAAUAAAAAAAAA5AAAKwgAQAAUAAABWCRAACAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAACSIAEAAFAAAAGgAQAAUAAAAqABAABQAAAAFAAAD:::::PAAAByIAEAAFAAAAOgAQAAUAAAAaABAABQAAAAAAAAhyABAACAAAAEYCEAAHAAAARgIQgEEAAAAIAAAAMgAADHIAEAAIAAAARgIQAAgAAAACQAAAAACAQAAAgEAAAIBAAAAAAEYCEAAHAAAANwAACXIAEAAEAAAAVgUQAAUAAABGAhAACAAAAEYCEAAHAAAANgAABUIAEAACAAAAOgAQAAQAAAAVAAABFQAAATgAAAeCABAABAAAADoAEAAAAAAACgAQAAUAAAAyAAAJYgAQAAUAAAD2DxAAAAAAAAYAEAAFAAAABhEQAAAAAABIAAAL8gAQAAcAAACWBRAABQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAABgAAAeCABAABQAAAAoAEAAHAAAAAUAAAAAAAAA5AAAKMgAQAAYAAACWBRAABwAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAACYIAEAAFAAAAOgAQAAUAAAAKABAABgAAAAFAAAD:::::PAAAB4IAEAAFAAAAGgAQAAYAAAA6ABAABQAAAB8ABAM6ABAABQAAAAAAAAgyABAABgAAAJYFEIBBAAAABQAAAEYQEAAAAAAADwAAB4IAEAAFAAAARgAQAAYAAABGABAABgAAAEsAAAWCABAABQAAADoAEAAFAAAAMQAABxIAEAAGAAAAOgAQAAUAAAAqABAAAgAAAB8ABAMKABAABgAAADIAAAxiABAABQAAAPYPEAAEAAAAAkAAAAAAAAAAAIA%AACAPgAAAABWBhAABQAAAEgAAAvyABAACAAAAJYFEAAFAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAGAAAB4IAEAAEAAAACgAQAAgAAAABQAAAAAAAADkAAApiABAABQAAAFYGEAAIAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAJggAQAAQAAAA6ABAABAAAABoAEAAFAAAAAUAAAP::::88AAAHggAQAAQAAAAqABAABQAAADoAEAAEAAAAAAAACHIAEAAIAAAARgIQAAcAAABGAhCAQQAAAAgAAAAyAAAMcgAQAAgAAABGAhAACAAAAAJAAAAAAIBAAACAQAAAgEAAAAAARgIQAAcAAAA3AAAJcgAQAAQAAAD2DxAABAAAAEYCEAAIAAAARgIQAAcAAAA2AAAFQgAQAAIAAAA6ABAABQAAABUAAAEVAAABSAAAC:IAEAAHAAAA5goQAAYAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAYAAAHggAQAAQAAAAKABAABwAAAAFAAAAAAAAAOQAACmIAEAAFAAAAVgYQAAcAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAmCABAABAAAADoAEAAEAAAAGgAQAAUAAAABQAAA:::::zwAAAeCABAABAAAACoAEAAFAAAAOgAQAAQAAAAfAAQDOgAQAAQAAAAAAAAIYgAQAAUAAACmCxCAQQAAAAYAAAAGERAAAAAAAA8AAAeCABAABAAAAJYFEAAFAAAAlgUQAAUAAABLAAAFggAQAAQAAAA6ABAABAAAADEAAAciABAABQAAADoAEAAEAAAAKgAQAAIAAAAfAAQDGgAQAAUAAAAyAAAMYgAQAAUAAAAGAhAAAwAAAAJAAAAAAAAAAACAPgAAgD4AAAAApgsQAAYAAABIAAAL8gAQAAYAAACWBRAABQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAABgAAAcSABAAAwAAAAoAEAAGAAAAAUAAAAAAAAA5AAAKYgAQAAUAAABWBhAABgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAACRIAEAADAAAACgAQAAMAAAAaABAABQAAAAFAAAD:::::PAAABxIAEAADAAAAKgAQAAUAAAAKABAAAwAAAAAAAAjiABAABQAAAAYJEIBBAAAABgAAAAYJEAAHAAAAMgAADOIAEAAFAAAAVg4QAAUAAAACQAAAAAAAAAAAgEAAAIBAAACAQAYJEAAHAAAANwAACXIAEAAEAAAABgAQAAMAAACWBxAABQAAAEYCEAAHAAAANgAABUIAEAACAAAAOgAQAAQAAAAVAAABFQAAATIAAAkyABAABQAAAFYFEAACAAAABgAQAAUAAABGEBAAAAAAAEgAAAvyABAABgAAAEYAEAAFAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAGAAABxIAEAADAAAACgAQAAYAAAABQAAAAAAAADkAAArCABAABQAAAFYJEAAGAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAJEgAQAAMAAAAKABAAAwAAACoAEAAFAAAAAUAAAP::::88AAAHEgAQAAMAAAA6ABAABQAAAAoAEAADAAAAHwAEAwoAEAADAAAAAAAACMIAEAAFAAAABgQQgEEAAAAFAAAABhQQAAAAAAAPAAAHEgAQAAMAAADmChAABQAAAOYKEAAFAAAASwAABRIAEAADAAAACgAQAAMAAAAxAAAHggAQAAQAAAAKABAAAwAAACoAEAACAAAAHwAEAzoAEAAEAAAAMgAADDIAEAAFAAAApgoQAAMAAAACQAAAAACAPgAAgD4AAAAAAAAAAEYAEAAFAAAASAAAC:IAEAAFAAAARgAQAAUAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAYAAAHQgAQAAMAAAAKABAABQAAAAFAAAAAAAAAOQAACjIAEAAHAAAAlgUQAAUAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAAlCABAAAwAAACoAEAADAAAACgAQAAcAAAABQAAA:::::zwAAAdCABAAAwAAABoAEAAHAAAAKgAQAAMAAAAAAAAIcgAQAAUAAABGAhCAQQAAAAUAAABGAhAABgAAADIAAAxyABAABQAAAEYCEAAFAAAAAkAAAAAAgEAAAIBAAACAQAAAAABGAhAABgAAADcAAAlyABAABAAAAKYKEAADAAAARgIQAAUAAABGAhAABgAAADYAAAVCABAAAgAAAAoAEAADAAAAFQAAARUAAAEWAAABNgAABXIAEAAAAAAARgIQAAQAAAAVAAABNgAABXIgEAAAAAAARgIQAAAAAAA2AAAFgiAQAAAAAAABQAAAAACAPz4AAAFTVEFUdAAAANsAAAAJAAAAAAAAAAIAAABnAAAAAQAAABIAAAABAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAOAAAAGAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.histogram_pass_fragData0 = "s1320:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkMQ9wP:AEj:ep1QMDkCiCDsAQAAAMgDAAAFAAAANAAAANwAAAAQAQAARAEAAEwDAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAAAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFIAAgAAQAAAAIAAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAZQAAA:IgEAAAAAAAaAAAAgIAAABIAAAO8gAQAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAEgAAA7yABAAAQAAAAJAAADNzEw%zcxMPgAAAAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAAAAAB3IAEAAAAAAARgIQAAAAAABGAhAAAQAAAEgAAA7yABAAAQAAAAJAAADNzEw:zcxMPgAAAAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAAAAAB3IAEAAAAAAARgIQAAAAAABGAhAAAQAAAEgAAA7yABAAAQAAAAJAAADNzEw%zcxMPwAAAAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAAAAAB3IAEAAAAAAARgIQAAAAAABGAhAAAQAAAEgAAA7yABAAAQAAAAJAAADNzEw:zcxMPwAAAAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAAAAAB3IAEAAAAAAARgIQAAAAAABGAhAAAQAAADgAAApyIBAAAAAAAEYCEAAAAAAAAkAAAM3MTD7NzEw%zcxMPgAAAAA2AAAFgiAQAAAAAAABQAAACtcjPD4AAAFTVEFUdAAAAAwAAAACAAAAAAAAAAEAAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.layer_copy_fragData0 = "s968:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkNT0JCy2UNNND19CP:XkHZQAQAAAMACAAAFAAAANAAAAPQAAABAAQAAdAEAACQCAABSREVGuAAAAAAAAAAAAAAAAgAAADwAAAAABf::AAEAAI0AAABSRDExPAAAABgAAAAgAAAAKAAAACQAAAAMAAAAAAAAAHwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAiQAAAAIAAAAFAAAABAAAAP::::8AAAAAAQAAAAwAAABfdGV4X3NhbXBsZXIAdGV4AE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgMTAuMQCrq6tJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRVioAAAAUAAAACoAAABqCAABWgAAAwBgEAAAAAAAWBgABABwEAAAAAAAVVUAAGIQAAPyEBAAAAAAAGIQAAMyEBAAAQAAAGUAAAPyIBAAAAAAAGgAAAIBAAAASAAAjcIAAIBDVRUA8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADgAAAfyIBAAAAAAAEYOEAAAAAAARh4QAAAAAAA%AAABU1RBVJQAAAADAAAAAQAAAAAAAAADAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.layer_merge_fragData0 = "s13372:AAlfdGV4MF9zYW1wbGVyAABfdGV4MV9zYW1wbGVyAAFfdGV4bWFza19zYW1wbGVyAAJfdGV4YV9zYW1wbGVyAAN0ZXgwAAB0ZXgxAAF0ZXhtYXNrAAJ0ZXhhAAMkR2xvYmFscwAAAm9wYWMAAAAAAAQAAAABAWJsZW5kaW5nAAQAAAAEAAAAAQFEWEJD7ukD:LR5Ga7WnxJrMGlhCwEAAACkJgAABQAAADQAAADoAgAAHAMAAFADAAAIJgAAUkRFRqwCAAABAAAAuAEAAAkAAAA8AAAAAAX::wABAACEAgAAUkQxMTwAAAAYAAAAIAAAACgAAAAkAAAADAAAAAAAAABcAQAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGoBAAADAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAAAAAAeAEAAAMAAAAAAAAAAAAAAAAAAAACAAAAAQAAAAAAAACJAQAAAwAAAAAAAAAAAAAAAAAAAAMAAAABAAAAAAAAAJcBAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAnAEAAAIAAAAFAAAABAAAAP::::8BAAAAAQAAAAwAAAChAQAAAgAAAAUAAAAEAAAA:::::wIAAAABAAAADAAAAKkBAAACAAAABQAAAAQAAAD:::::AwAAAAEAAAAMAAAArgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfdGV4MF9zYW1wbGVyAF90ZXgxX3NhbXBsZXIAX3RleG1hc2tfc2FtcGxlcgBfdGV4YV9zYW1wbGVyAHRleDAAdGV4MQB0ZXhtYXNrAHRleGEAJEdsb2JhbHMAq64BAAACAAAA0AEAABAAAAAAAAAAAAAAACACAAAAAAAABAAAAAIAAAAsAgAAAAAAAP::::8AAAAA:::::wAAAABQAgAABAAAAAQAAAACAAAAYAIAAAAAAAD:::::AAAAAP::::8AAAAAb3BhYwBmbG9hdACrAAADAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlAgAAYmxlbmRpbmcAaW50AKurqwAAAgABAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWQIAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgMTAuMQBJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRViwIgAAUAAAAKwIAABqCAABWQAABEaOIAAAAAAAAQAAAFoAAAMAYBAAAAAAAFoAAAMAYBAAAQAAAFoAAAMAYBAAAgAAAFoAAAMAYBAAAwAAAFgYAAQAcBAAAAAAAFVVAABYGAAEAHAQAAEAAABVVQAAWBgABABwEAACAAAAVVUAAFgYAAQAcBAAAwAAAFVVAABiEAADMhAQAAAAAABlAAAD8iAQAAAAAABoAAACBwAAAEgAAI3CAACAQ1UVAPIAEAAAAAAARhAQAAAAAACWfBAAAAAAAABgEAAAAAAAAUAAAAAAAABIAACNwgAAgENVFQDyABAAAQAAAEYQEAAAAAAARn4QAAMAAAAAYBAAAwAAAAFAAAAAAAAAOAAACBIAEAACAAAAOgAQAAAAAAAKgCAAAAAAAAAAAABIAACNwgAAgENVFQAiABAAAgAAAEYQEAAAAAAAFn4QAAIAAAAAYBAAAgAAAAFAAAAAAAAAOAAAB0IAEAACAAAAGgAQAAIAAAAKABAAAgAAACAAAAiCABAAAgAAABqAIAAAAAAAAAAAAAFAAAD:::::HwAEAzoAEAACAAAASAAAjcIAAIBDVRUA8gAQAAMAAABGEBAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAAAAAAjyABAAAwAAAEYOEIBBAAAAAQAAAEYOEAADAAAAMgAACfIgEAAAAAAApgoQAAIAAABGDhAAAwAAAEYOEAABAAAAEgAAAR8AAAQagCAAAAAAAAAAAAAAAAAIcgAQAAMAAAAmCRAAAAAAAEYCEIBBAAAAAQAAADIAAAlyIBAAAAAAAKYKEAACAAAARgIQAAMAAABGAhAAAQAAADQAAAeCIBAAAAAAADoAEAAAAAAAOgAQAAEAAAASAAABIAAACIIAEAACAAAAGoAgAAAAAAAAAAAAAUAAAAEAAAAfAAQDOgAQAAIAAAAzAAAHcgAQAAMAAAAmCRAAAAAAAEYCEAABAAAAAAAACHIAEAADAAAARgIQgEEAAAABAAAARgIQAAMAAAAyAAAJciAQAAAAAACmChAAAgAAAEYCEAADAAAARgIQAAEAAAA0AAAHgiAQAAAAAAA6ABAAAAAAADoAEAABAAAAEgAAASAAAAiCABAAAgAAABqAIAAAAAAAAAAAAAFAAAACAAAAHwAEAzoAEAACAAAAMgAACnIAEAADAAAARgIQAAEAAAAmCRAAAAAAAEYCEIBBAAAAAQAAADIAAAlyIBAAAAAAAKYKEAACAAAARgIQAAMAAABGAhAAAQAAADQAAAeCIBAAAAAAADoAEAAAAAAAOgAQAAEAAAASAAABIAAACIIAEAACAAAAGoAgAAAAAAAAAAAAAUAAAAMAAAAfAAQDOgAQAAIAAAAAAAALcgAQAAMAAABGAhCAQQAAAAEAAAACQAAAAACAPwAAgD8AAIA:AAAAAA4AAAdyABAAAwAAAEYCEAADAAAAJgkQAAAAAAAAAAAJcgAQAAMAAABGAhCAQQAAAAEAAABGAhCAQQAAAAMAAAAAAAAKcgAQAAMAAABGAhAAAwAAAAJAAAAAAIA:AACAPwAAgD8AAAAAMgAACXIgEAAAAAAApgoQAAIAAABGAhAAAwAAAEYCEAABAAAANAAAB4IgEAAAAAAAOgAQAAAAAAA6ABAAAQAAABIAAAEgAAAIggAQAAIAAAAagCAAAAAAAAAAAAABQAAABAAAAB8ABAM6ABAAAgAAADgAAAdyABAAAwAAACYJEAAAAAAApgoQAAIAAAA0AAAHciAQAAAAAABGAhAAAQAAAEYCEAADAAAANAAAB4IgEAAAAAAAOgAQAAAAAAA6ABAAAQAAABIAAAEgAAAIggAQAAIAAAAagCAAAAAAAAAAAAABQAAABQAAAB8ABAM6ABAAAgAAADIAAAqCABAAAgAAAAoAEIBBAAAAAgAAABoAEAACAAAAAUAAAAAAgD8AAAALcgAQAAMAAAAmCRCAQQAAAAAAAAACQAAAAACAPwAAgD8AAIA:AAAAADIAAAlyABAAAwAAAKYKEAACAAAARgIQAAMAAAD2DxAAAgAAAAAAAAtyABAABAAAAEYCEIBBAAAAAQAAAAJAAAAAAIA:AACAPwAAgD8AAAAAMgAADXIgEAAAAAAARgIQgEEAAAADAAAARgIQAAQAAAACQAAAAACAPwAAgD8AAIA:AAAAADQAAAeCIBAAAAAAADoAEAAAAAAAOgAQAAEAAAASAAABIAAACIIAEAACAAAAGoAgAAAAAAAAAAAAAUAAAAYAAAAfAAQDOgAQAAIAAAAAAAALcgAQAAMAAAAmCRCAQQAAAAAAAAACQAAAAACAPwAAgD8AAIA:AAAAAA4AAAdyABAAAwAAAEYCEAABAAAARgIQAAMAAAAAAAAIcgAQAAMAAABGAhCAQQAAAAEAAABGAhAAAwAAADIAAAlyIBAAAAAAAKYKEAACAAAARgIQAAMAAABGAhAAAQAAADQAAAeCIBAAAAAAADoAEAAAAAAAOgAQAAEAAAASAAABIAAACIIAEAACAAAAGoAgAAAAAAAAAAAAAUAAAAcAAAAfAAQDOgAQAAIAAAAyAAAJciAQAAAAAACmChAAAgAAACYJEAAAAAAARgIQAAEAAAA0AAAHgiAQAAAAAAA6ABAAAAAAADoAEAABAAAAEgAAASAAAAiCABAAAgAAABqAIAAAAAAAAAAAAAFAAAAIAAAAHwAEAzoAEAACAAAAMQAACnIAEAADAAAARgIQAAEAAAACQAAAAAAAPwAAAD8AAAA:AAAAADgAAAdyABAABAAAACYJEAAAAAAARgIQAAEAAAAAAAAHcgAQAAQAAABGAhAABAAAAEYCEAAEAAAAAAAAC3IAEAAFAAAAJgkQgEEAAAAAAAAAAkAAAAAAgD8AAIA:AACAPwAAAAAAAAAHcgAQAAUAAABGAhAABQAAAEYCEAAFAAAAAAAAC3IAEAAGAAAARgIQgEEAAAABAAAAAkAAAAAAgD8AAIA:AACAPwAAAAAyAAANcgAQAAUAAABGAhCAQQAAAAUAAABGAhAABgAAAAJAAAAAAIA:AACAPwAAgD8AAAAANwAACXIAEAADAAAARgIQAAMAAABGAhAABAAAAEYCEAAFAAAAAAAACHIAEAADAAAARgIQgEEAAAABAAAARgIQAAMAAAAyAAAJciAQAAAAAACmChAAAgAAAEYCEAADAAAARgIQAAEAAAA0AAAHgiAQAAAAAAA6ABAAAAAAADoAEAABAAAAEgAAASAAAAiCABAAAgAAABqAIAAAAAAAAAAAAAFAAAAJAAAAHwAEAzoAEAACAAAAMgAACoIAEAACAAAACgAQgEEAAAACAAAAGgAQAAIAAAABQAAAAACAPwAAAAtyABAAAwAAAEYCEIBBAAAAAQAAAAJAAAAAAIA:AACAPwAAgD8AAAAAOAAAB3IAEAAEAAAAJgkQAAAAAABGAhAAAwAAAAAAAAtyABAABQAAACYJEIBBAAAAAAAAAAJAAAAAAIA:AACAPwAAgD8AAAAAMgAADXIAEAADAAAARgIQgEEAAAAFAAAARgIQAAMAAAACQAAAAACAPwAAgD8AAIA:AAAAADgAAAdyABAAAwAAAEYCEAABAAAARgIQAAMAAAAyAAAJcgAQAAMAAABGAhAABAAAAEYCEAABAAAARgIQAAMAAAA4AAAHcgAQAAMAAACmChAAAgAAAEYCEAADAAAAMgAACXIgEAAAAAAA9g8QAAIAAABGAhAAAQAAAEYCEAADAAAANAAAB4IgEAAAAAAAOgAQAAAAAAA6ABAAAQAAABIAAAEgAAAIggAQAAIAAAAagCAAAAAAAAAAAAABQAAACgAAAB8ABAM6ABAAAgAAAAAAAApyABAAAwAAACYJEAAAAAAAAkAAAAAAAL8AAAC:AAAAvwAAAAA4AAAHcgAQAAMAAACmChAAAgAAAEYCEAADAAAAMgAADHIgEAAAAAAARgIQAAMAAAACQAAAAAAAQAAAAEAAAABAAAAAAEYCEAABAAAANAAAB4IgEAAAAAAAOgAQAAAAAAA6ABAAAQAAABIAAAEgAAAIggAQAAIAAAAagCAAAAAAAAAAAAABQAAACwAAAB8ABAM6ABAAAgAAAAAAAAhyABAAAwAAACYJEIBBAAAAAAAAAEYCEAABAAAAAAAACXIAEAADAAAARgIQgEEAAAABAAAARgIQgIEAAAADAAAAMgAACXIgEAAAAAAApgoQAAIAAABGAhAAAwAAAEYCEAABAAAANAAAB4IgEAAAAAAAOgAQAAAAAAA6ABAAAQAAABIAAAEgAAAIggAQAAIAAAAagCAAAAAAAAAAAAABQAAADAAAAB8ABAM6ABAAAgAAADIAAApyIBAAAAAAAKYKEAACAAAAJgkQgEEAAAAAAAAARgIQAAEAAAA0AAAHgiAQAAAAAAA6ABAAAAAAADoAEAABAAAAEgAAASAAAAiCABAAAgAAABqAIAAAAAAAAAAAAAFAAAANAAAAHwAEAzoAEAACAAAAMgAAChIAEAACAAAACgAQgEEAAAACAAAAGgAQAAIAAAABQAAAAACAPzgAAAdyABAAAwAAAEYCEAABAAAApgoQAAIAAAAOAAAHcgAQAAMAAABGAhAAAwAAACYJEAAAAAAAMgAACXIgEAAAAAAABgAQAAIAAABGAhAAAQAAAEYCEAADAAAANAAAB4IgEAAAAAAAOgAQAAAAAAA6ABAAAQAAABIAAAEgAAAIEgAQAAIAAAAagCAAAAAAAAAAAAABQAAADgAAAB8ABAMKABAAAgAAAB0AAAcSABAAAgAAAAoAEAAAAAAAGgAQAAAAAAABAAAHEgAQAAIAAAAKABAAAgAAAAFAAAAAAIA:NgAABTIAEAADAAAAFgUQAAAAAAA2AAAIwgAQAAMAAAACQAAAAAAAAAAAAAAAAIC:q6oqPwAAAAgyABAABAAAAEYAEAAAAAAARgAQgEEAAAADAAAANgAACMIAEAAEAAAAAkAAAAAAAAAAAAAAAACAPwAAgL8yAAAJ8gAQAAMAAAAGABAAAgAAAEYOEAAEAAAARg4QAAMAAAAdAAAHEgAQAAIAAAAqABAAAAAAAAoAEAADAAAAAQAABxIAEAACAAAACgAQAAIAAAABQAAAAACAPzYAAAVyABAABAAAAEYDEAADAAAANgAABYIAEAAEAAAAKgAQAAAAAAA2AAAFsgAQAAMAAAB2AxAABAAAAAAAAAjyABAAAwAAAEYOEIBBAAAABAAAAEYOEAADAAAAMgAACfIAEAADAAAABgAQAAIAAABGDhAAAwAAAEYOEAAEAAAAMwAABxIAEAACAAAAGgAQAAMAAAA6ABAAAwAAAAAAAAgSABAAAgAAAAoAEIBBAAAAAgAAAAoAEAADAAAAAAAACCIAEAACAAAAGgAQgEEAAAADAAAAOgAQAAMAAAAyAAAJEgAQAAIAAAAKABAAAgAAAAFAAAAAAMBAAUAAAP:m2y4OAAAHEgAQAAIAAAAaABAAAgAAAAoAEAACAAAAAAAABxIAEAACAAAACgAQAAIAAAAqABAAAwAAAB0AAAciABAAAgAAABoAEAABAAAAKgAQAAEAAAABAAAHIgAQAAIAAAAaABAAAgAAAAFAAAAAAIA:AAAACDIAEAADAAAAZgoQgEEAAAABAAAAlgUQAAEAAAAyAAAJMgAQAAMAAABWBRAAAgAAAEYAEAADAAAAZgoQAAEAAAAdAAAHIgAQAAIAAAAKABAAAQAAAAoAEAADAAAAAQAAByIAEAACAAAAGgAQAAIAAAABQAAAAACAPzYAAAVCABAAAwAAAAoAEAABAAAAAAAACHIAEAAEAAAARgIQgEEAAAADAAAAZggQAAMAAAAyAAAJcgAQAAMAAABWBRAAAgAAAEYCEAAEAAAARgIQAAMAAAAzAAAHIgAQAAIAAAAaABAAAwAAACoAEAADAAAAAAAACCIAEAACAAAAGgAQgEEAAAACAAAACgAQAAMAAAAAAAAHggAQAAIAAAAKABAAAwAAAAFAAAD:5tsuDgAAByIAEAACAAAAGgAQAAIAAAA6ABAAAgAAAAAAAAviABAAAwAAAAYAEICBAAAAAgAAAAJAAAAAAAAAAACAP6uqKj%rqqo%GgAABeIAEAADAAAAVg4QAAMAAAAyAAAP4gAQAAMAAABWDhAAAwAAAAJAAAAAAAAAAADAQAAAwEAAAMBAAkAAAAAAAAAAAEDAAABAwAAAQMAAIAAL4gAQAAMAAABWDhCAgQAAAAMAAAACQAAAAAAAAAAAgL8AAIC:AACAvwAAAAriABAAAwAAAFYOEAADAAAAAkAAAAAAAAAAAIC:AACAvwAAgL8yAAAMsgAQAAIAAABWBRAAAgAAAJYNEAADAAAAAkAAAAAAgD8AAIA:AAAAAAAAgD8yAAAKsgAQAAIAAAAGABAAAwAAAEYMEAACAAAARggQgEEAAAABAAAAMgAACXIgEAAAAAAApgoQAAIAAABGAxAAAgAAAEYCEAABAAAANAAAB4IgEAAAAAAAOgAQAAAAAAA6ABAAAQAAABIAAAEgAAAIEgAQAAIAAAAagCAAAAAAAAAAAAABQAAADwAAAB8ABAMKABAAAgAAAB0AAAcSABAAAgAAABoAEAABAAAAKgAQAAEAAAABAAAHEgAQAAIAAAAKABAAAgAAAAFAAAAAAIA:NgAABTIAEAADAAAAZgoQAAEAAAA2AAAIwgAQAAMAAAACQAAAAAAAAAAAAAAAAIC:q6oqPwAAAAgyABAABAAAAJYFEAABAAAARgAQgEEAAAADAAAANgAACMIAEAAEAAAAAkAAAAAAAAAAAAAAAACAPwAAgL8yAAAJ8gAQAAMAAAAGABAAAgAAAEYOEAAEAAAARg4QAAMAAAAdAAAHEgAQAAIAAAAKABAAAQAAAAoAEAADAAAAAQAABxIAEAACAAAACgAQAAIAAAABQAAAAACAPzYAAAVyABAABAAAAEYDEAADAAAANgAABYIAEAAEAAAACgAQAAEAAAA2AAAFsgAQAAMAAAB2AxAABAAAAAAAAAjyABAAAwAAAEYOEIBBAAAABAAAAEYOEAADAAAAMgAACfIAEAADAAAABgAQAAIAAABGDhAAAwAAAEYOEAAEAAAAMwAABxIAEAACAAAAGgAQAAMAAAA6ABAAAwAAAAAAAAgSABAAAgAAAAoAEIBBAAAAAgAAAAoAEAADAAAAAAAACCIAEAACAAAAGgAQgEEAAAADAAAAOgAQAAMAAAAyAAAJEgAQAAIAAAAKABAAAgAAAAFAAAAAAMBAAUAAAP:m2y4OAAAHEgAQAAIAAAAaABAAAgAAAAoAEAACAAAAAAAABxIAEAACAAAACgAQAAIAAAAqABAAAwAAAB0AAAciABAAAgAAAAoAEAAAAAAAGgAQAAAAAAABAAAHIgAQAAIAAAAaABAAAgAAAAFAAAAAAIA:AAAACGIAEAADAAAAVgQQgEEAAAAAAAAABgEQAAAAAAAyAAAJMgAQAAAAAABWBRAAAgAAAJYFEAADAAAAFgUQAAAAAAAdAAAHIgAQAAIAAAAqABAAAAAAAAoAEAAAAAAAAQAAByIAEAACAAAAGgAQAAIAAAABQAAAAACAPwAAAAjiABAAAwAAAAYJEIBBAAAAAAAAAKYBEAAAAAAAMgAACeIAEAADAAAAVgUQAAIAAABWDhAAAwAAAAYJEAAAAAAAMwAAByIAEAACAAAAKgAQAAMAAAA6ABAAAwAAAAAAAAgiABAAAgAAABoAEIBBAAAAAgAAABoAEAADAAAAAAAAB4IAEAACAAAAGgAQAAMAAAABQAAA:%bbLg4AAAciABAAAgAAABoAEAACAAAAOgAQAAIAAAAAAAAL4gAQAAMAAAAGABCAgQAAAAIAAAACQAAAAAAAAAAAgD%rqio:q6qqPhoAAAXiABAAAwAAAFYOEAADAAAAMgAAD%IAEAADAAAAVg4QAAMAAAACQAAAAAAAAAAAwEAAAMBAAADAQAJAAAAAAAAAAABAwAAAQMAAAEDAACAAC%IAEAADAAAAVg4QgIEAAAADAAAAAkAAAAAAAAAAAIC:AACAvwAAgL8AAAAK4gAQAAMAAABWDhAAAwAAAAJAAAAAAAAAAACAvwAAgL8AAIC:MgAADLIAEAACAAAAVgUQAAIAAACWDRAAAwAAAAJAAAAAAIA:AACAPwAAAAAAAIA:MgAACrIAEAACAAAABgAQAAMAAABGDBAAAgAAAEYIEIBBAAAAAQAAADIAAAlyIBAAAAAAAKYKEAACAAAARgMQAAIAAABGAhAAAQAAADQAAAeCIBAAAAAAADoAEAAAAAAAOgAQAAEAAAASAAABIAAACBIAEAACAAAAGoAgAAAAAAAAAAAAAUAAABAAAAAfAAQDCgAQAAIAAAAdAAAHEgAQAAIAAAAKABAAAAAAABoAEAAAAAAAAQAABxIAEAACAAAACgAQAAIAAAABQAAAAACAPzYAAAUyABAAAwAAABYFEAAAAAAANgAACMIAEAADAAAAAkAAAAAAAAAAAAAAAACAv6uqKj8AAAAIMgAQAAQAAABGABAAAAAAAEYAEIBBAAAAAwAAADYAAAjCABAABAAAAAJAAAAAAAAAAAAAAAAAgD8AAIC:MgAACfIAEAADAAAABgAQAAIAAABGDhAABAAAAEYOEAADAAAAHQAABxIAEAACAAAAKgAQAAAAAAAKABAAAwAAAAEAAAcSABAAAgAAAAoAEAACAAAAAUAAAAAAgD82AAAFcgAQAAQAAABGAxAAAwAAADYAAAWCABAABAAAACoAEAAAAAAANgAABbIAEAADAAAAdgMQAAQAAAAAAAAI8gAQAAMAAABGDhCAQQAAAAQAAABGDhAAAwAAADIAAAnyABAAAwAAAAYAEAACAAAARg4QAAMAAABGDhAABAAAADMAAAcSABAAAgAAABoAEAADAAAAOgAQAAMAAAAAAAAIEgAQAAIAAAAKABCAQQAAAAIAAAAKABAAAwAAAAAAAAgiABAAAgAAABoAEIBBAAAAAwAAADoAEAADAAAAMgAACYIAEAACAAAACgAQAAIAAAABQAAAAADAQAFAAAD:5tsuDgAAByIAEAACAAAAGgAQAAIAAAA6ABAAAgAAAAAAAAciABAAAgAAABoAEAACAAAAKgAQAAMAAAAAAAAHggAQAAIAAAAKABAAAwAAAAFAAAD:5tsuDgAABxIAEAACAAAACgAQAAIAAAA6ABAAAgAAAB0AAAeCABAAAgAAABoAEAABAAAAKgAQAAEAAAABAAAHggAQAAIAAAA6ABAAAgAAAAFAAAAAAIA:AAAACBIAEAADAAAAKgAQgEEAAAABAAAAGgAQAAEAAAAyAAAJggAQAAIAAAA6ABAAAgAAAAoAEAADAAAAKgAQAAEAAAAdAAAHEgAQAAMAAAAKABAAAQAAADoAEAACAAAAAQAABxIAEAADAAAACgAQAAMAAAABQAAAAACAPwAAAAgiABAAAwAAAAoAEAABAAAAOgAQgEEAAAACAAAAMgAACYIAEAACAAAACgAQAAMAAAAaABAAAwAAADoAEAACAAAAAAAAC3IAEAADAAAAVgUQgIEAAAACAAAAAkAAAAAAgD%rqio:q6qqPgAAAAAaAAAFcgAQAAMAAABGAhAAAwAAADIAAA9yABAAAwAAAEYCEAADAAAAAkAAAAAAwEAAAMBAAADAQAAAAAACQAAAAABAwAAAQMAAAEDAAAAAAAAgAAtyABAAAwAAAEYCEICBAAAAAwAAAAJAAAAAAIC:AACAvwAAgL8AAAAAAAAACnIAEAADAAAARgIQAAMAAAACQAAAAACAvwAAgL8AAIC:AAAAADIAAAxyABAAAwAAAAYAEAACAAAARgIQAAMAAAACQAAAAACAPwAAgD8AAIA:AAAAADIAAAqyABAAAgAAAPYPEAACAAAARggQAAMAAABGCBCAQQAAAAEAAAAyAAAJciAQAAAAAACmChAAAgAAAEYDEAACAAAARgIQAAEAAAA0AAAHgiAQAAAAAAA6ABAAAAAAADoAEAABAAAAEgAAAR0AAAcSABAAAgAAABoAEAABAAAAKgAQAAEAAAABAAAHEgAQAAIAAAAKABAAAgAAAAFAAAAAAIA:NgAABTIAEAADAAAAZgoQAAEAAAA2AAAIwgAQAAMAAAACQAAAAAAAAAAAAAAAAIC:q6oqPwAAAAgyABAABAAAAJYFEAABAAAARgAQgEEAAAADAAAANgAACMIAEAAEAAAAAkAAAAAAAAAAAAAAAACAPwAAgL8yAAAJ8gAQAAMAAAAGABAAAgAAAEYOEAAEAAAARg4QAAMAAAAdAAAHEgAQAAIAAAAKABAAAQAAAAoAEAADAAAAAQAABxIAEAACAAAACgAQAAIAAAABQAAAAACAPzYAAAVyABAABAAAAEYDEAADAAAANgAABYIAEAAEAAAACgAQAAEAAAA2AAAFsgAQAAMAAAB2AxAABAAAAAAAAAjyABAAAwAAAEYOEIBBAAAABAAAAEYOEAADAAAAMgAACfIAEAADAAAABgAQAAIAAABGDhAAAwAAAEYOEAAEAAAAMwAABxIAEAACAAAAGgAQAAMAAAA6ABAAAwAAAAAAAAgSABAAAgAAAAoAEIBBAAAAAgAAAAoAEAADAAAAAAAACCIAEAACAAAAGgAQgEEAAAADAAAAOgAQAAMAAAAyAAAJggAQAAIAAAAKABAAAgAAAAFAAAAAAMBAAUAAAP:m2y4OAAAHIgAQAAIAAAAaABAAAgAAADoAEAACAAAAAAAAByIAEAACAAAAGgAQAAIAAAAqABAAAwAAAAAAAAeCABAAAgAAAAoAEAADAAAAAUAAAP:m2y4OAAAHEgAQAAIAAAAKABAAAgAAADoAEAACAAAAHQAAB4IAEAACAAAACgAQAAAAAAAaABAAAAAAAAEAAAeCABAAAgAAADoAEAACAAAAAUAAAAAAgD8AAAAIEgAQAAAAAAAaABCAQQAAAAAAAAAKABAAAAAAADIAAAkSABAAAAAAADoAEAACAAAACgAQAAAAAAAaABAAAAAAAB0AAAciABAAAAAAACoAEAAAAAAACgAQAAAAAAABAAAHIgAQAAAAAAAaABAAAAAAAAFAAAAAAIA:AAAACEIAEAAAAAAACgAQgEEAAAAAAAAAKgAQAAAAAAAyAAAJEgAQAAAAAAAaABAAAAAAACoAEAAAAAAACgAQAAAAAAAAAAALcgAQAAMAAABWBRCAgQAAAAIAAAACQAAAAACAP6uqKj%rqqo%AAAAABoAAAVyABAAAwAAAEYCEAADAAAAMgAAD3IAEAADAAAARgIQAAMAAAACQAAAAADAQAAAwEAAAMBAAAAAAAJAAAAAAEDAAABAwAAAQMAAAAAAACAAC3IAEAADAAAARgIQgIEAAAADAAAAAkAAAAAAgL8AAIC:AACAvwAAAAAAAAAKcgAQAAMAAABGAhAAAwAAAAJAAAAAAIC:AACAvwAAgL8AAAAAMgAADLIAEAACAAAABgAQAAIAAABGCBAAAwAAAAJAAAAAAIA:AACAPwAAAAAAAIA:MgAACnIAEAAAAAAABgAQAAAAAABGAxAAAgAAAEYCEIBBAAAAAQAAADIAAAlyIBAAAAAAAKYKEAACAAAARgIQAAAAAABGAhAAAQAAADQAAAeCIBAAAAAAADoAEAAAAAAAOgAQAAEAAAAVAAABFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAEVAAABFQAAARUAAAE%AAABU1RBVJQAAAA1AQAABwAAAAAAAAACAAAAvwAAABEAAAAQAAAAFAAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAGQAAAAEAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.layer_merge_vertData0 = "s854:AXBvcwAAAABEWEJDxuVMqz2CzRAnIkSZ1NlhyAEAAAB4AgAABQAAADQAAACgAAAA1AAAACwBAADcAQAAUkRFRmQAAAAAAAAAAAAAAAAAAAA8AAAAAAX%:wABAAA8AAAAUkQxMTwAAAAYAAAAIAAAACgAAAAkAAAADAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDEwLjEASVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR05QAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAAMMAABBAAAAAAAAAAEAAAADAAAAAQAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSEVYqAAAAFAAAQAqAAAAaggAAV8AAAMyEBAAAAAAAGUAAAMyIBAAAAAAAGcAAATyIBAAAQAAAAEAAAAyAAAPMiAQAAAAAABGEBAAAAAAAAJAAAAAAAA:AAAAvwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAjCIBAAAQAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVSUAAAABAAAAAAAAAAAAAAAAwAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.layer_view_fragData0 = "s2179:AANfdGV4X3NhbXBsZXIAAHRleAAAJEdsb2JhbHMAAAFjaGFubmVsAAAAAAAEAAAAAQFEWEJDcrk9m%TuXDe7bXWo:G:EoQEAAAAwBgAABQAAADQAAACMAQAA2AEAAAwCAACUBQAAUkRFRlABAAABAAAAuAAAAAMAAAA8AAAAAAX::wABAAAoAQAAUkQxMTwAAAAYAAAAIAAAACgAAAAkAAAADAAAAAAAAACcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAKkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAArQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfdGV4X3NhbXBsZXIAdGV4ACRHbG9iYWxzAKurrQAAAAEAAADQAAAAEAAAAAAAAAAAAAAA%AAAAAAAAAAEAAAAAgAAAAQBAAAAAAAA:::::wAAAAD:::::AAAAAGNoYW5uZWwAaW50AAAAAgABAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgMTAuMQBJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRViAAwAAUAAAAOAAAABqCAABWQAABEaOIAAAAAAAAQAAAFoAAAMAYBAAAAAAAFgYAAQAcBAAAAAAAFVVAABiEAAD8hAQAAAAAABiEAADMhAQAAEAAABlAAAD8iAQAAAAAABoAAACAQAAACAAAAgSABAAAAAAAAqAIAAAAAAAAAAAAAFAAAABAAAAHwAEAwoAEAAAAAAASAAAjcIAAIBDVRUAMgAQAAAAAABGEBAAAQAAAMZ5EAAAAAAAAGAQAAAAAAABQAAAAAAAADgAAAfyIBAAAAAAAAYEEAAAAAAARh4QAAAAAAA%AAABEgAAASAAAAgSABAAAAAAAAqAIAAAAAAAAAAAAAFAAAACAAAAHwAEAwoAEAAAAAAASAAAjcIAAIBDVRUAMgAQAAAAAABGEBAAAQAAANZ4EAAAAAAAAGAQAAAAAAABQAAAAAAAADgAAAfyIBAAAAAAAAYEEAAAAAAARh4QAAAAAAA%AAABEgAAASAAAAgSABAAAAAAAAqAIAAAAAAAAAAAAAFAAAADAAAAHwAEAwoAEAAAAAAASAAAjcIAAIBDVRUAMgAQAAAAAABGEBAAAQAAAOZ0EAAAAAAAAGAQAAAAAAABQAAAAAAAADgAAAfyIBAAAAAAAAYEEAAAAAAARh4QAAAAAAA%AAABEgAAASAAAAgSABAAAAAAAAqAIAAAAAAAAAAAAAFAAAAEAAAAHwAEAwoAEAAAAAAASAAAjcIAAIBDVRUAEgAQAAAAAABGEBAAAQAAADZ5EAAAAAAAAGAQAAAAAAABQAAAAAAAADgAAAfyIBAAAAAAAAYAEAAAAAAARh4QAAAAAAA%AAABEgAAASAAAAgSABAAAAAAAAqAIAAAAAAAAAAAAAFAAAAFAAAAHwAEAwoAEAAAAAAASAAAjcIAAIBDVRUA8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADgAAAfyIBAAAAAAAEYOEAAAAAAARh4QAAAAAAA%AAABEgAAAUgAAI3CAACAQ1UVAPIAEAAAAAAARhAQAAEAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA4AAAHcgAQAAAAAAD2DxAAAAAAAEYCEAAAAAAAOAAAB:IgEAAAAAAARg4QAAAAAABGHhAAAAAAAD4AAAEVAAABFQAAARUAAAEVAAABFQAAAT4AAAFTVEFUlAAAACgAAAABAAAAAAAAAAMAAAAHAAAABQAAAAAAAAALAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.layer_view_vertData0 = "s1551:A2NvbAAAcG9zAAF0ZXgAAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkObBGFA7IO9y2jL1UVcUCu%AQAAAFQEAAAFAAAANAAAAEwBAACwAQAAIAIAALgDAABSREVGEAEAAAEAAABoAAAAAQAAADwAAAAABf7:AAEAAOgAAABSRDExPAAAABgAAAAgAAAAKAAAACQAAAAMAAAAAAAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urXAAAAAEAAACAAAAAQAAAAAAAAAAAAAAAqAAAAAAAAABAAAAAAgAAAMQAAAAAAAAA:::::wAAAAD:::::AAAAAHByb2plY3Rpb25NYXRyaXgAZmxvYXQ0eDQAq6sDAAMABAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALkAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDEwLjEASVNHTlwAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADw8AAFAAAAABAAAAAAAAAAMAAAABAAAABwcAAFAAAAACAAAAAAAAAAMAAAACAAAAAwMAAFRFWENPT1JEAKurq09TR05oAAAAAwAAAAgAAABQAAAAAAAAAAAAAAADAAAAAAAAAA8AAABQAAAAAQAAAAAAAAADAAAAAQAAAAMMAABZAAAAAAAAAAEAAAADAAAAAgAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSEVYkAEAAFAAAQBkAAAAaggAAVkAAARGjiAAAAAAAAQAAABfAAAD8hAQAAAAAABfAAADchAQAAEAAABfAAADMhAQAAIAAABlAAAD8iAQAAAAAABlAAADMiAQAAEAAABnAAAE8iAQAAIAAAABAAAAaAAAAgIAAAA2AAAF8iAQAAAAAABGHhAAAAAAADYAAAUyIBAAAQAAAEYQEAACAAAANgAABXIAEAAAAAAARhIQAAEAAAA2AAAFggAQAAAAAAABQAAAAACAPxEAAAgSABAAAQAAAEYOEAAAAAAARo4gAAAAAAACAAAAEQAACCIAEAABAAAARg4QAAAAAABGjiAAAAAAAAMAAAAAAAAHEgAQAAEAAAAaABAAAQAAAAoAEAABAAAANgAABYIgEAACAAAAGgAQAAEAAAA4AAAHQiAQAAIAAAAKABAAAQAAAAFAAAAAAAA:EQAACBIgEAACAAAARg4QAAAAAABGjiAAAAAAAAAAAAARAAAIIiAQAAIAAABGDhAAAAAAAEaOIAAAAAAAAQAAAD4AAAFTVEFUlAAAAAwAAAACAAAAAAAAAAYAAAAGAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.mask_merge_fragData0 = "s1196:AARfdGV4MF9zYW1wbGVyAABfdGV4YV9zYW1wbGVyAAF0ZXgwAAB0ZXhhAAEARFhCQ51jJH17aHoAXtk7:dhCUxgBAAAAVAMAAAUAAAA0AAAASAEAAHwBAACwAQAAuAIAAFJERUYMAQAAAAAAAAAAAAAEAAAAPAAAAAAF::8AAQAA4gAAAFJEMTE8AAAAGAAAACAAAAAoAAAAJAAAAAwAAAAAAAAAvAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAADKAAAAAwAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAANgAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAA3QAAAAIAAAAFAAAABAAAAP::::8BAAAAAQAAAAwAAABfdGV4MF9zYW1wbGVyAF90ZXhhX3NhbXBsZXIAdGV4MAB0ZXhhAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgMTAuMQCrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAU1ZfVGFyZ2V0AKurU0hFWAABAABQAAAAQAAAAGoIAAFaAAADAGAQAAAAAABaAAADAGAQAAEAAABYGAAEAHAQAAAAAABVVQAAWBgABABwEAABAAAAVVUAAGIQAAMyEBAAAAAAAGUAAAPyIBAAAAAAAGgAAAICAAAASAAAjcIAAIBDVRUAEgAQAAAAAABGEBAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAEgAAI3CAACAQ1UVAPIAEAABAAAARhAQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA4AAAHgiAQAAAAAAAKABAAAAAAADoAEAABAAAANgAABXIgEAAAAAAARgIQAAEAAAA%AAABU1RBVJQAAAAFAAAAAgAAAAAAAAACAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_colored_fragData0 = "s580:AAAARFhCQwKRAhCE2jyY1lWcLP2kpYQBAAAAsAEAAAUAAAA0AAAAjAAAAMAAAAD0AAAANAEAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFI4AAAAQAAAAA4AAABiEAAD8hAQAAAAAABlAAAD8iAQAAAAAAA2AAAF8iAQAAAAAABGHhAAAAAAAD4AAAFTVEFUdAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_colored_vertData0 = "s1314:AnZlcnRleENvbG9yAAB2ZXJ0ZXhQb3NpdGlvbgABASRHbG9iYWxzAAABcHJvamVjdGlvbk1hdHJpeAAAAAAAQAAAAAQERFhCQ5A:MgyGPthJiwcRz4ddIcQBAAAAlAMAAAUAAAA0AAAADAEAAFgBAACwAQAAGAMAAFJERUbQAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAnAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAQAAAAAAAAAAAAAAAeAAAAAAAAABAAAAAAgAAAIwAAAAAAAAAcHJvamVjdGlvbk1hdHJpeACrq6sDAAMABAAEAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR05EAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAA8PAAA4AAAAAQAAAAAAAAADAAAAAQAAAAcHAABURVhDT09SRACrq6tPU0dOUAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAQQAAAAAAAAABAAAAAwAAAAEAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUmABAABAAAEAWAAAAFkAAARGjiAAAAAAAAQAAABfAAAD8hAQAAAAAABfAAADchAQAAEAAABlAAAD8iAQAAAAAABnAAAE8iAQAAEAAAABAAAAaAAAAgIAAAA2AAAF8iAQAAAAAABGHhAAAAAAADYAAAVyABAAAAAAAEYSEAABAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAQAAABoAEAABAAAAOAAAB0IgEAABAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAQAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAABAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAALAAAAAgAAAAAAAAAEAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_image_fragData0 = "s968:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkPIVWQDjmaOT1DS1%g2g0qrAQAAAMACAAAFAAAANAAAANwAAAAoAQAAXAEAAEQCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLgAAAAQAAAADgAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAH8gAQAAAAAABGDhAAAAAAAEYeEAAAAAAAOAAAB3IAEAAAAAAA9g8QAAAAAABGAhAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAOAAAB3IgEAAAAAAARgIQAAAAAAD2HxAAAAAAAD4AAAFTVEFUdAAAAAYAAAABAAAAAAAAAAMAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_image_vertData0 = "s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_text_fragData0 = "s894:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkN4eKkSkOMyc:NS8ppPD1BYAQAAAIgCAAAFAAAANAAAANwAAAAoAQAAXAEAAAwCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFKoAAAAQAAAACoAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAHgiAQAAAAAAAKABAAAAAAADoQEAAAAAAANgAABXIgEAAAAAAARhIQAAAAAAA%AAABU1RBVHQAAAAEAAAAAQAAAAAAAAADAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_text_vertData0 = "s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_video_fragData0 = "s931:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkMLuHx52DaqoPgbxVgoLcgLAQAAAKQCAAAFAAAANAAAANwAAAAoAQAAXAEAACgCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLEAAAAQAAAADEAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAH8gAQAAAAAABGDhAAAAAAAEYeEAAAAAAAOAAAB3IgEAAAAAAARgIQAAAAAAD2HxAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAPgAAAVNUQVR0AAAABQAAAAEAAAAAAAAAAwAAAAIAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_video_vertData0 = "s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.pass_copy_fragData0 = "s782:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkPeWqjgDI47O35LZ19%iGiaAQAAADQCAAAFAAAANAAAANwAAAAQAQAARAEAALgBAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFJsAAAAQAAAABsAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAAzIQEAAAAAAAZQAAA:IgEAAAAAAASAAAC:IgEAAAAAAARhAQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA%AAABU1RBVHQAAAACAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.pass_vertData0 = "s779:AXBvcwAAAABEWEJD7F0vBgrwXt7WrnoVcnvrCQEAAABAAgAABQAAADQAAACMAAAAwAAAABgBAADEAQAAUkRFRlAAAAAAAAAAAAAAAAAAAAAcAAAAAAT%:wABAAAcAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOUAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAADDAAAQQAAAAAAAAABAAAAAwAAAAEAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUqQAAABAAAEAKQAAAF8AAAMyEBAAAAAAAGUAAAMyIBAAAAAAAGcAAATyIBAAAQAAAAEAAAAyAAAPMiAQAAAAAABGEBAAAAAAAAJAAAAAAAA:AAAAvwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAjCIBAAAQAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAABAAAAAAAAAAAAAAAAwAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.pass_viewray2_vertData0 = "s1308:AXBvcwAAASRHbG9iYWxzAAABaW52UAAAAAAAQAAAAAQERFhCQ2XrIzt91wDz6gwCZ:UliLcBAAAAtAMAAAUAAAA0AAAAAAEAADQBAACkAQAAOAMAAFJERUbEAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAkAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAQAAAAAAAAAAAAAAAeAAAAAAAAABAAAAAAgAAAIAAAAAAAAAAaW52UACrq6sDAAMABAAEAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOaAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADDAAAUAAAAAEAAAAAAAAAAwAAAAEAAAAHCAAAWQAAAAAAAAABAAAAAwAAAAIAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUowBAABAAAEAYwAAAFkAAARGjiAAAAAAAAMAAABfAAADMhAQAAAAAABlAAADMiAQAAAAAABlAAADciAQAAEAAABnAAAE8iAQAAIAAAABAAAAaAAAAgIAAAAyAAAPMiAQAAAAAABGEBAAAAAAAAJAAAAAAAA:AAAAvwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAA2AAAFMgAQAAAAAABGEBAAAAAAADYAAAjCABAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:EQAACBIAEAABAAAARg8QAAAAAABGjiAAAAAAAAAAAAARAAAIIgAQAAEAAABGDxAAAAAAAEaOIAAAAAAAAQAAABEAAAgSABAAAAAAAEYOEAAAAAAARo4gAAAAAAACAAAADgAABzIgEAABAAAARgAQAAEAAAAGABAAAAAAADYAAAVCIBAAAQAAAAFAAAAAAIA:NgAABTIgEAACAAAARhAQAAAAAAA2AAAIwiAQAAIAAAACQAAAAAAAAAAAAAAAAAA:AACAPz4AAAFTVEFUdAAAAAsAAAACAAAAAAAAAAQAAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.pass_viewray_vertData0 = "s1451:AXBvcwAAASRHbG9iYWxzAAACaW52VlAAAAAAAEAAAAAEBGV5ZQBAAAAADAAAAAMBRFhCQyALzKAdoNHY3C7yLLXUJAgBAAAAEAQAAAUAAAA0AAAALAEAAGABAADQAQAAlAMAAFJERUbwAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAvAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAIAAABgAAAAUAAAAAAAAAAAAAAAkAAAAAAAAABAAAAAAgAAAJgAAAAAAAAAqAAAAEAAAAAMAAAAAgAAAKwAAAAAAAAAaW52VlAAq6sDAAMABAAEAAAAAAAAAAAAZXllAAEAAwABAAMAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR05oAAAAAwAAAAgAAABQAAAAAAAAAAAAAAADAAAAAAAAAAMMAABQAAAAAQAAAAAAAAADAAAAAQAAAAcIAABZAAAAAAAAAAEAAAADAAAAAgAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSvAEAAEAAAQBvAAAAWQAABEaOIAAAAAAABQAAAF8AAAMyEBAAAAAAAGUAAAMyIBAAAAAAAGUAAANyIBAAAQAAAGcAAATyIBAAAgAAAAEAAABoAAACAgAAADIAAA8yIBAAAAAAAEYQEAAAAAAAAkAAAAAAAD8AAAC:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAADYAAAUyABAAAAAAAEYQEAAAAAAANgAACMIAEAAAAAAAAkAAAAAAAAAAAAAAAACAPwAAgD8RAAAIEgAQAAEAAABGDxAAAAAAAEaOIAAAAAAAAAAAABEAAAgiABAAAQAAAEYPEAAAAAAARo4gAAAAAAABAAAAEQAACEIAEAABAAAARg8QAAAAAABGjiAAAAAAAAIAAAARAAAIEgAQAAAAAABGDhAAAAAAAEaOIAAAAAAAAwAAAA4AAAdyABAAAAAAAEYCEAABAAAABgAQAAAAAAAAAAAJciAQAAEAAABGAhAAAAAAAEaCIIBBAAAAAAAAAAQAAAA2AAAFMiAQAAIAAABGEBAAAAAAADYAAAjCIBAAAgAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAADAAAAAIAAAAAAAAABAAAAAcAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_blend_weight_fragData0 = "s14940:AAdfZWRnZXNUZXhfc2FtcGxlcgAAX2FyZWFUZXhfc2FtcGxlcgABX3NlYXJjaFRleF9zYW1wbGVyAAJlZGdlc1RleAAAYXJlYVRleAABc2VhcmNoVGV4AAIkR2xvYmFscwAAAnNjcmVlblNpemVJbnYAAAAAAAgAAAACAXNjcmVlblNpemUACAAAAAgAAAACAURYQkNVZWcGNERXnM%Mn8QzCezoAQAAADQrAAAFAAAANAAAADwCAADQAgAABAMAALgqAABSREVGAAIAAAEAAABYAQAABwAAABwAAAAABP::AAEAAMsBAAD8AAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAA4BAAADAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAAAAAAHwEAAAMAAAAAAAAAAAAAAAAAAAACAAAAAQAAAAAAAAAyAQAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAADsBAAACAAAABQAAAAQAAAD:::::AQAAAAEAAAAMAAAAQwEAAAIAAAAFAAAABAAAAP::::8CAAAAAQAAAAwAAABNAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAF9lZGdlc1RleF9zYW1wbGVyAF9hcmVhVGV4X3NhbXBsZXIAX3NlYXJjaFRleF9zYW1wbGVyAGVkZ2VzVGV4AGFyZWFUZXgAc2VhcmNoVGV4ACRHbG9iYWxzAKurTQEAAAIAAABwAQAAEAAAAAAAAAAAAAAAoAEAAAAAAAAIAAAAAgAAALABAAAAAAAAwAEAAAgAAAAIAAAAAgAAALABAAAAAAAAc2NyZWVuU2l6ZUludgCrqwEAAwABAAIAAAAAAAAAAABzY3JlZW5TaXplAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6urSVNHTowAAAAFAAAACAAAAIAAAAAAAAAAAAAAAAMAAAAAAAAADw8AAIAAAAABAAAAAAAAAAMAAAABAAAADw8AAIAAAAACAAAAAAAAAAMAAAACAAAADw8AAIAAAAADAAAAAAAAAAMAAAADAAAAAwMAAIAAAAAEAAAAAAAAAAMAAAADAAAADAwAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8AAABTVl9UYXJnZXQAq6tTSERSrCcAAEAAAADrCQAAWQAABEaOIAAAAAAAAQAAAFoAAAMAYBAAAAAAAFoAAAMAYBAAAQAAAFoAAAMAYBAAAgAAAFgYAAQAcBAAAAAAAFVVAABYGAAEAHAQAAEAAABVVQAAWBgABABwEAACAAAAVVUAAGIQAAPyEBAAAAAAAGIQAAPyEBAAAQAAAGIQAAPyEBAAAgAAAGIQAAMyEBAAAwAAAGIQAAPCEBAAAwAAAGUAAAPyIBAAAAAAAGgAAAIHAAAAMgAADzIAEAAAAAAA5hoQAAMAAAACQAAAAACAPwAAgL8AAAAAAAAAAAJAAAAAAAAAAACAPwAAAAAAAAAASAAAC:IAEAAAAAAARgAQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAxAAAHIgAQAAAAAAABQAAAAAAAABoAEAAAAAAAHwAEAxoAEAAAAAAAMQAAByIAEAAAAAAAAUAAAAAAAAAKABAAAAAAAB8ABAMaABAAAAAAADgAAAsyABAAAQAAAEaAIAAAAAAAAAAAAAJAAAAAAIC:AACAPwAAAAAAAAAANgAABUIAEAABAAAAAUAAAAAAgD82AAAFMgAQAAIAAADmGhAAAwAAADYAAAUSABAAAwAAAAFAAAAAAAAANgAABUIAEAACAAAAAUAAAAAAgL82AAAFIgAQAAAAAAABQAAAAACAPzAAAAExAAAHQgAQAAAAAAAqABAAAgAAAAFAAAAAAOBAMQAAB4IAEAAAAAAAAUAAAGZmZj8aABAAAAAAAAEAAAdCABAAAAAAADoAEAAAAAAAKgAQAAAAAAADAAADKgAQAAAAAAAAAAAHcgAQAAIAAABGAhAAAQAAAEYCEAACAAAAAAAACIIAEAACAAAAGgAQgEEAAAACAAAAAUAAAAAAgD9IAAAL8gAQAAMAAADGABAAAgAAABZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAA8AAAoiABAAAAAAABYFEAADAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAWAAABMQAAB0IAEAAAAAAAAUAAAGZmZj8KABAAAwAAAAEAAAdCABAAAAAAACoAEAAAAAAAAUAAAAAAgD8AAAAHEgAQAAEAAAAqABAAAAAAACoAEAACAAAAEgAAATYAAAUSABAAAQAAAAFAAAAAAAAANgAABSIAEAAAAAAAAUAAAAAAAAA2AAAFEgAQAAMAAAABQAAAAAAAABUAAAE4AAALYgAQAAIAAAAGgSAAAAAAAAAAAAACQAAAAAAAAAAAgD8AAIC:AAAAADYAAAWCABAAAgAAAAFAAAAAAIA:NgAABTIAEAAEAAAA5hoQAAMAAAA2AAAFEgAQAAUAAAAKABAAAwAAADYAAAVCABAABAAAAAFAAAAAAIC:NgAABUIAEAAAAAAAAUAAAAAAgD8wAAABMQAAB4IAEAAAAAAAKgAQAAQAAAABQAAAAADgQDEAAAcSABAAAgAAAAFAAABmZmY:KgAQAAAAAAABAAAHggAQAAAAAAA6ABAAAAAAAAoAEAACAAAAAwAAAzoAEAAAAAAAAAAAB3IAEAAEAAAAlgcQAAIAAABGAhAABAAAAAAAAAiCABAABAAAABoAEIBBAAAABAAAAAFAAAAAAIA:SAAAC:IAEAAFAAAAxgAQAAQAAAAWfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAPAAAKQgAQAAAAAAAWBRAABQAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAFgAAAQAAAAeCABAAAAAAAAoAEAABAAAAKgAQAAQAAAAxAAAHggAQAAAAAAABQAAAAAAAQDoAEAAAAAAAHwAEAzoAEAAAAAAAAAAACCIAEAABAAAACgAQgEEAAAABAAAAAUAAAAAAgD4yAAAPwgAQAAEAAACmChAABAAAAAJAAAAAAAAAAAAAAAAAgD8AAIC:AkAAAAAAAAAAAAAAAAAAAAAAgL4yAAAK8gAQAAIAAAAWDhAAAQAAAEaEIAAAAAAAAAAAAOYeEAADAAAAMgAADfIAEAACAAAARoQgAAAAAAAAAAAAAkAAAAAAgL8AAAAAAACAPwAAAABGDhAAAgAAADIAAA:yABAAAgAAAEYOEAACAAAAAkAAAAAAgD8AAIC:AACAPwAAgL8CQAAAAAAAAAAAgD8AAAAAAACAP0gAAAvyABAAAwAAAEYAEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAACAAAA5goQAAIAAACGdxAAAAAAAABgEAAAAAAAAUAAAAAAAAA2AAAFQgAQAAMAAAAKABAAAgAAADIAAA%iABAAAQAAAAYIEAADAAAAAkAAAAAAAAAAAKBAAAAAAAAAoEACQAAAAAAAAAAAcMAAAAAAAABwwDgAAAhSABAAAgAAAFYHEICBAAAAAQAAAAYCEAADAAAANgAABSIAEAACAAAAGgAQAAMAAAAAAAAK8gAQAAIAAABGDhAAAgAAAAJAAAAAAAA:AAAAPwAAAD8AAAA:QQAABfIAEAACAAAARg4QAAIAAAAyAAAMogAQAAEAAABWDRAAAgAAAAJAAAAAAAAAAAAAQAAAAAAAAABABggQAAIAAAAdAAAKYgAQAAAAAABWBhAAAAAAAAJAAAAAAAAAZmZmP2ZmZj8AAAAANwAADDIAEAACAAAAlgUQAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAANYFEAABAAAAMgAADGIAEAAAAAAABgEQAAIAAAACQAAAAAAAAAAAoEEAAKBBAAAAAAYCEAABAAAAMgAAD2IAEAAAAAAAVgYQAAAAAAACQAAAAAAAAM3MzDuhDuo6AAAAAAJAAAAAAAAAzcwAP6EOajoAAAAASAAAC:IAEAABAAAAlgUQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAASAAABNgAACDIAEAABAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAVAAABMgAACiIAEAAAAAAACoAgAAAAAAAAAAAAAUAAAAAAgD4qEBAAAwAAADYAAAcyABAAAgAAAEaAIIBBAAAAAAAAAAAAAAA2AAAFQgAQAAIAAAABQAAAAACAPzYAAAUSABAAAwAAABoAEAAAAAAANgAABSIAEAADAAAAOhAQAAMAAAA2AAAFQgAQAAAAAAAKABAABQAAADYAAAVCABAAAwAAAAFAAAAAAIC:NgAABUIAEAABAAAAAUAAAAAAgD8wAAABMQAAB4IAEAABAAAAKgAQAAMAAAABQAAAAADgQDEAAAeCABAAAgAAAAFAAABmZmY:KgAQAAEAAAABAAAHggAQAAEAAAA6ABAAAQAAADoAEAACAAAAAwAAAzoAEAABAAAAAAAAB3IAEAADAAAARgIQAAIAAABGAhAAAwAAAAAAAAiCABAAAwAAABoAEIBBAAAAAwAAAAFAAAAAAIA:SAAAC:IAEAAEAAAAxgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAJggAQAAEAAAAKABAABAAAAAFAAAAAAKBAAUAAAAAAcMA4AAAIEgAQAAQAAAA6ABCAgQAAAAEAAAAKABAABAAAAAAAAAoyABAABAAAAEYAEAAEAAAAAkAAAAAAAD8AAAA:AAAAAAAAAABBAAAFwgAQAAAAAABWARAABAAAAA8AAApCABAAAQAAALYPEAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAWAAABMgAADTIAEAACAAAARoAgAAAAAAAAAAAAAkAAAAAAgD8AAAAAAAAAAAAAAADmGhAAAwAAAAAAAAhCABAAAgAAABoAEIBBAAAAAgAAAAFAAAAAAIA:SAAAC:IAEAACAAAAhgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAxAAAHggAQAAAAAAABQAAAAAAAAAoAEAACAAAAHwAEAzoAEAAAAAAANgAABjIAEAACAAAARoAgAAAAAAAAAAAANgAABUIAEAACAAAAAUAAAAAAgD82AAAFEgAQAAQAAAAaABAAAAAAADYAAAUiABAABAAAADoQEAADAAAANgAABRIAEAAFAAAAKgAQAAAAAAA2AAAFQgAQAAQAAAABQAAAAACAvzYAAAWCABAAAAAAAAFAAAAAAIA:MAAAATEAAAeCABAAAQAAACoAEAAEAAAAAUAAAAAA4EAxAAAHggAQAAIAAAABQAAAZmZmPzoAEAAAAAAAAQAAB4IAEAABAAAAOgAQAAEAAAA6ABAAAgAAAAMAAAM6ABAAAQAAAAAAAAdyABAABAAAAEYCEAACAAAARgIQAAQAAAAAAAAIggAQAAQAAAAaABCAQQAAAAQAAAABQAAAAACAP0gAAAvyABAABgAAAMYAEAAEAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACYIAEAABAAAACgAQAAYAAAABQAAAAACgQAFAAAAAAHDAOAAACBIAEAAGAAAAOgAQgIEAAAABAAAACgAQAAYAAAAAAAAKwgAQAAUAAAAGBBAABgAAAAJAAAAAAAAAAAAAAAAAAD8AAAA:QQAABTIAEAAFAAAAtg8QAAUAAAAPAAAKggAQAAAAAAAWBRAABQAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAFgAAATEAAAciABAAAAAAAAFAAABmZmY:CgAQAAUAAAABAAAHIgAQAAAAAAAaABAAAAAAAAFAAAAAAIA:AAAAByIAEAADAAAAGgAQAAAAAAAqABAABAAAABIAAAE2AAAFIgAQAAMAAAABQAAAAAAAADYAAAWCABAAAAAAAAFAAAAAAAAAFQAAAQAAAAciABAAAAAAABoAEAADAAAAKgAQAAMAAAAxAAAHIgAQAAAAAAABQAAAAAAAQBoAEAAAAAAAHwAEAxoAEAAAAAAANgAABhIAEAADAAAAKgAQgEEAAAADAAAAMgAACvIAEAACAAAABgUQAAMAAABGhCAAAAAAAAAAAADmHhAAAwAAADIAAA3yABAABAAAAEaEIAAAAAAAAAAAAAJAAAAAAIC:AAAAAAAAAAAAAIC:RgQQAAIAAAAyAAAP8gAQAAQAAABGDhAABAAAAAJAAAAAAIA:AACAvwAAgD8AAIC:AkAAAAAAAAAAAIA:AAAAAAAAgD9IAAAL8gAQAAUAAABGABAABAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAEgAAAvyABAABAAAAOYKEAAEAAAAlnwQAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAADTIAEAACAAAARoAgAAAAAAAAAAAAAkAAAAAAgD8AAAAAAAAAAAAAAADmChAAAgAAAAAAAAhCABAAAgAAABoAEIBBAAAAAgAAAAFAAAAAAIA:SAAAC:IAEAACAAAAhgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA2AAAFEgAQAAQAAAAaABAABQAAADYAAAWiABAABAAAAFYBEAACAAAAMgAADGIAEAAAAAAABgEQAAQAAAACQAAAAAAAAAAAAEAAAABAAAAAAKYLEAAEAAAAHQAAB0IAEAABAAAAKgAQAAEAAAABQAAAZmZmPx0AAAeCABAAAAAAADoAEAAAAAAAAUAAAGZmZj83AAAJEgAQAAIAAAAqABAAAQAAAAFAAAAAAAAAGgAQAAAAAAA3AAAJIgAQAAIAAAA6ABAAAAAAAAFAAAAAAAAAKgAQAAAAAAAyAAAMYgAQAAAAAAAGARAAAgAAAAJAAAAAAAAAAACgQQAAoEEAAAAApgkQAAMAAAAyAAAPYgAQAAAAAABWBhAAAAAAAAJAAAAAAAAAzczMO6EO6joAAAAAAkAAAAAAAADNzAA:oQ5qOgAAAABIAAAL8gAQAAIAAACWBRAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAAAAAAcyABAAAQAAAEYAEAABAAAAFgUQAAIAAAAVAAABGAAACCIAEAAAAAAAGgAQgEEAAAABAAAACgAQAAEAAAAfAAQDGgAQAAAAAAA2AAAFogAQAAAAAAAGFBAAAAAAADYAAAVCABAAAAAAAAFAAAAAAIA:NgAABRIAEAACAAAAAUAAAAAAAAAwAAABMQAAB0IAEAABAAAAChAQAAIAAAAaABAAAAAAADEAAAeCABAAAQAAAAFAAABd:lM:KgAQAAAAAAABAAAHQgAQAAEAAAA6ABAAAQAAACoAEAABAAAAGAAAB4IAEAABAAAACgAQAAIAAAABQAAAAAAAAAEAAAdCABAAAQAAADoAEAABAAAAKgAQAAEAAAAfAAQDKgAQAAEAAAAyAAAPwgAQAAEAAABWDRAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIC:AkAAAAAAAAAAAAAAAAAAAAAAgD9IAAAL8gAQAAIAAADmChAAAQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAA0yABAAAwAAAEaAIAAAAAAAAAAAAAJAAAAAAADAAAAAgAAAAAAAAAAA1gUQAAAAAAA2AAAFQgAQAAMAAAAaABAAAgAAADYAAAXiABAAAAAAAAYGEAADAAAABwAAARIAAAECAAABFQAAARYAAAE2AAAFwgAQAAAAAACmBhAAAAAAADYAAAUiABAAAAAAAAoAEAACAAAAMgAAD2IAEAAAAAAAVgYQAAAAAAACQAAAAAAAAAAAAD8AAADAAAAAAAJAAAAAAAAAAAAAPAAAAkAAAAAASAAAC:IAEAACAAAAlgUQAAAAAABGfhAAAgAAAABgEAACAAAAAUAAAAAAAAAyAAAJIgAQAAAAAAAKABAAAgAAAAFAAAACgQDAAUAAAAAAUEAyAAAKEgAQAAIAAAAKgCAAAAAAAAAAAAAaABAAAAAAADoAEAAAAAAAAAAACCIAEAACAAAAGhAQgEEAAAABAAAAAUAAAAAAgD9IAAAL8gAQAAMAAABGABAAAgAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADYAAAWiABAAAAAAAKYeEAAAAAAANgAABUIAEAAAAAAAAUAAAAAAgD82AAAFEgAQAAQAAAABQAAAAAAAADAAAAExAAAHQgAQAAEAAAAaABAAAAAAABoQEAACAAAAMQAAB4IAEAABAAAAAUAAAF3%Uz8qABAAAAAAAAEAAAdCABAAAQAAADoAEAABAAAAKgAQAAEAAAAYAAAHggAQAAEAAAAKABAABAAAAAFAAAAAAAAAAQAAB0IAEAABAAAAOgAQAAEAAAAqABAAAQAAAB8ABAMqABAAAQAAADIAAA:CABAAAQAAAFYNEAAAAAAAAkAAAAAAAAAAAAAAAACAPwAAgL8CQAAAAAAAAAAAAAAAAAAAAACAP0gAAAvyABAABAAAAOYKEAABAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAADTIAEAAFAAAARoAgAAAAAAAAAAAAAkAAAAAAAEAAAAAAAAAAAAAAAADWBRAAAAAAADYAAAVCABAABQAAABoAEAAEAAAANgAABeIAEAAAAAAABgYQAAUAAAAHAAABEgAAAQIAAAEVAAABFgAAATYAAAXCABAAAAAAAKYGEAAAAAAANgAABSIAEAAAAAAACgAQAAQAAAAyAAAPYgAQAAAAAABWBhAAAAAAAAJAAAAAAAAAAAAAPwAAAMAAAAAAAkAAAAAAAAAAAAY:AAACQAAAAABIAAAL8gAQAAQAAACWBRAAAAAAAEZ%EAACAAAAAGAQAAIAAAABQAAAAAAAADIAAAkiABAAAAAAAAoAEAAEAAAAAUAAAAKBAMABQAAAAABQQDIAAAtCABAAAgAAAAqAIIBBAAAAAAAAAAAAAAAaABAAAAAAADoAEAAAAAAAMgAAC:IAEAAEAAAApoogAAAAAAAAAAAAJgIQAAIAAAAGEBCAQQAAAAMAAAAAAAAK8gAQAAQAAABGDhAABAAAAAJAAAAAAAA:AAAAPwAAAD8AAAA:QQAABfIAEAAEAAAARg4QAAQAAABLAAAGYgAQAAAAAAD2DhCAgQAAAAQAAAA2AAAFggAQAAIAAAAaEBAAAQAAADIAAA0yABAABQAAAEaAIAAAAAAAAAAAAAJAAAAAAIA:AAAAAAAAAAAAAAAA5goQAAIAAAAAAAAIQgAQAAUAAAAaABCAQQAAAAUAAAABQAAAAACAP0gAAAvyABAABQAAAIYAEAAFAAAAFn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAANgAABRIAEAAFAAAACgAQAAMAAAAyAAAPwgAQAAEAAAAGBBAABQAAAAJAAAAAAAAAAAAAAAAAgEAAAIBAAkAAAAAAAAAAAAAAAAAAPwAAAD9BAAAFwgAQAAEAAACmDhAAAQAAADIAAAxiABAAAAAAAKYLEAABAAAAAkAAAAAAAAAAAIBBAACAQQAAAABWBhAAAAAAADIAAA9iABAAAAAAAFYGEAAAAAAAAkAAAAAAAADNzMw7oQ7qOgAAAAACQAAAAAAAAM3MTDuhDmo6AAAAAEgAAAvyABAAAwAAAJYFEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAHQAACfIAEAAEAAAARg4QgIEAAAAEAAAAtgsQgIEAAAAEAAAAAQAACvIAEAAEAAAARg4QAAQAAAACQAAAAACAPwAAgD8AAEA:AABAPwAAAAciABAAAAAAABoAEAAEAAAACgAQAAQAAAAOAAAHYgAQAAAAAACmCxAABAAAAFYFEAAAAAAANgAABaIAEAACAAAA9h8QAAMAAAAyAAANMgAQAAQAAABGgCAAAAAAAAAAAAACQAAAAAAAAAAAgD8AAAAAAAAAAEYAEAACAAAAAAAACEIAEAAEAAAAGgAQgEEAAAAEAAAAAUAAAAAAgD9IAAAL8gAQAAQAAACGABAABAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAqCABAAAAAAABoAEIBBAAAAAAAAAAoAEAAEAAAAAUAAAAAAgD8AAAAIMgAQAAQAAADmChAAAgAAAEaAIAAAAAAAAAAAAAAAAAhCABAABAAAABoAEIBBAAAABAAAAAFAAAAAAIA:SAAAC:IAEAAEAAAAhgAQAAQAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyIAAKEgAQAAQAAAAqABCAQQAAAAAAAAAKABAABAAAADoAEAAAAAAAMgAADTIAEAAFAAAARoAgAAAAAAAAAAAAAkAAAAAAAAAAAADAAAAAAAAAAABGABAAAgAAAAAAAAhCABAABQAAABoAEIBBAAAABQAAAAFAAAAAAIA:SAAAC:IAEAAFAAAAhgAQAAUAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAKIgAQAAAAAAAaABCAQQAAAAAAAAAKABAABQAAAAFAAAAAAIA:MgAADTIAEAACAAAARoAgAAAAAAAAAAAAAkAAAAAAgD8AAADAAAAAAAAAAADmChAAAgAAAAAAAAhCABAAAgAAABoAEIBBAAAAAgAAAAFAAAAAAIA:SAAAC:IAEAACAAAAhgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyIAAKIgAQAAQAAAAqABCAQQAAAAAAAAAKABAAAgAAABoAEAAAAAAAOAAABzIgEAAAAAAARgAQAAMAAABGABAABAAAABIAAAE2AAAFMiAQAAAAAABGABAAAQAAADYAAAUSABAAAAAAAAFAAAAAAAAAFQAAARIAAAE2AAAIMiAQAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAABUAAAExAAAHEgAQAAAAAAABQAAAAAAAAAoAEAAAAAAAHwAEAwoAEAAAAAAANgAABTIAEAAAAAAAFhUQAAEAAAA2AAAFQgAQAAAAAAABQAAAAACAPzYAAAUSABAAAQAAAAFAAAAAAAAAMAAAATEAAAeCABAAAAAAACoQEAACAAAACgAQAAAAAAAxAAAHEgAQAAIAAAABQAAAXf5TPyoAEAAAAAAAAQAAB4IAEAAAAAAAOgAQAAAAAAAKABAAAgAAABgAAAcSABAAAgAAAAoAEAABAAAAAUAAAAAAAAABAAAHggAQAAAAAAA6ABAAAAAAAAoAEAACAAAAHwAEAzoAEAAAAAAAMgAADzIAEAACAAAAFgUQAAAAAAACQAAAAACAPwAAgL8AAAAAAAAAAAJAAAAAAAAAAACAPwAAAAAAAAAASAAAC:IAEAABAAAARgAQAAIAAAAWfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAANMgAQAAIAAABGgCAAAAAAAAAAAAACQAAAAAAAgAAAAMAAAAAAAAAAABYFEAAAAAAANgAABUIAEAACAAAAGgAQAAEAAAA2AAAFcgAQAAAAAAAWBhAAAgAAAAcAAAESAAABAgAAARUAAAEWAAABNgAABSIAEAABAAAAKgAQAAAAAAAyAAAPYgAQAAAAAAAGARAAAQAAAAJAAAAAAAAAAAAAPwAAAMAAAAAAAkAAAAAAAAAAAAA8AAACQAAAAABIAAAL8gAQAAEAAACWBRAAAAAAAEZ%EAACAAAAAGAQAAIAAAABQAAAAAAAADIAAAkiABAAAAAAAAoAEAABAAAAAUAAAAKBAMABQAAAAABQQDIAAAoSABAAAAAAABqAIAAAAAAAAAAAABoAEAAAAAAACgAQAAAAAAAAAAAIIgAQAAEAAAAKABCAQQAAAAAAAAABQAAAAACAPzYAAAUSABAAAQAAAAoQEAAAAAAASAAAC:IAEAABAAAARgAQAAEAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA2AAAFUgAQAAEAAAD2HhAAAQAAADYAAAWCABAAAQAAAAFAAAAAAIA:NgAABRIAEAACAAAAAUAAAAAAAAAwAAABMQAABxIAEAADAAAACgAQAAEAAAA6EBAAAgAAADEAAAciABAAAwAAAAFAAABd:lM:OgAQAAEAAAABAAAHEgAQAAMAAAAaABAAAwAAAAoAEAADAAAAGAAAByIAEAADAAAACgAQAAIAAAABQAAAAAAAAAEAAAcSABAAAwAAABoAEAADAAAACgAQAAMAAAAfAAQDCgAQAAMAAAAyAAAPMgAQAAMAAAAmChAAAQAAAAJAAAAAAIA:AACAvwAAAAAAAAAAAkAAAAAAAAAAAIA:AAAAAAAAAABIAAAL8gAQAAIAAABGABAAAwAAABZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAA0yABAAAwAAAEaAIAAAAAAAAAAAAAJAAAAAAAAAAAAAQAAAAAAAAAAAJgoQAAEAAAA2AAAFQgAQAAMAAAAaABAAAgAAADYAAAXSABAAAQAAAFYIEAADAAAABwAAARIAAAECAAABFQAAARYAAAE2AAAFIgAQAAIAAAA6ABAAAQAAADIAAA:CABAAAQAAAAYEEAACAAAAAkAAAAAAAAAAAAAAAAAAPwAAAMACQAAAAAAAAAAAAAAAAAY:AAACQEgAAAvyABAAAgAAAOYKEAABAAAARn4QAAIAAAAAYBAAAgAAAAFAAAAAAAAAMgAACUIAEAABAAAACgAQAAIAAAABQAAAAoEAwAFAAAAAAFBAMgAACyIAEAAAAAAAGoAggEEAAAAAAAAAAAAAACoAEAABAAAACgAQAAEAAAAyAAAL8gAQAAIAAAD2jyAAAAAAAAAAAAAWARAAAAAAAFYVEIBBAAAAAwAAAAAAAAryABAAAgAAAEYOEAACAAAAAkAAAAAAAD8AAAA:AAAAPwAAAD9BAAAF8gAQAAIAAABGDhAAAgAAAEsAAAZSABAAAQAAAPYOEICBAAAAAgAAADYAAAVCABAAAAAAAAoQEAAAAAAAMgAADTIAEAADAAAARoAgAAAAAAAAAAAAAkAAAAAAAAAAAIA:AAAAAAAAAABmChAAAAAAAAAAAAhCABAAAwAAABoAEIBBAAAAAwAAAAFAAAAAAIA:SAAAC:IAEAADAAAAhgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA2AAAFEgAQAAMAAAAaABAAAQAAADIAAA%iABAAAQAAAAYEEAADAAAAAkAAAAAAAAAAAIBAAAAAAAAAgEACQAAAAAAAAAAAAD8AAAAAAAAAP0EAAAWiABAAAQAAAFYNEAABAAAAMgAADDIAEAABAAAA1gUQAAEAAAACQAAAAACAQQAAgEEAAAAAAAAAAIYAEAABAAAAMgAADzIAEAABAAAARgAQAAEAAAACQAAAzczMO6EO6joAAAAAAAAAAAJAAADNzEw7oQ5qOgAAAAAAAAAASAAAC:IAEAABAAAARgAQAAEAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAJ8gAQAAIAAABGDhCAgQAAAAIAAAC2CxCAgQAAAAIAAAABAAAK8gAQAAIAAABGDhAAAgAAAAJAAAAAAIA:AACAPwAAQD8AAEA:AAAAB0IAEAAAAAAAGgAQAAIAAAAKABAAAgAAAA4AAAfCABAAAQAAAKYOEAACAAAApgoQAAAAAAA2AAAFggAQAAAAAAAqEBAAAwAAADIAAA0yABAAAgAAAEaAIAAAAAAAAAAAAAJAAAAAAIA:AAAAAAAAAAAAAAAANg8QAAAAAAAAAAAIQgAQAAIAAAAaABCAQQAAAAIAAAABQAAAAACAP0gAAAvyABAAAgAAAIYAEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACkIAEAAAAAAAKgAQgEEAAAABAAAAGgAQAAIAAAABQAAAAACAPwAAAAgyABAAAgAAAHYPEAAAAAAARoAgAAAAAAAAAAAAAAAACEIAEAACAAAAGgAQgEEAAAACAAAAAUAAAAAAgD9IAAAL8gAQAAIAAACGABAAAgAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIgAApCABAAAgAAADoAEIBBAAAAAQAAABoAEAACAAAAKgAQAAAAAAAyAAANMgAQAAMAAABGgCAAAAAAAAAAAAACQAAAAAAAwAAAAAAAAAAAAAAAADYPEAAAAAAAAAAACEIAEAADAAAAGgAQgEEAAAADAAAAAUAAAAAAgD9IAAAL8gAQAAMAAACGABAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAoSABAAAAAAACoAEIBBAAAAAQAAABoAEAADAAAAAUAAAAAAgD8yAAANMgAQAAMAAABGgCAAAAAAAAAAAAACQAAAAAAAwAAAgD8AAAAAAAAAAHYPEAAAAAAAAAAACEIAEAADAAAAGgAQgEEAAAADAAAAAUAAAAAAgD9IAAAL8gAQAAMAAACGABAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIgAAqCABAAAgAAADoAEIBBAAAAAQAAABoAEAADAAAACgAQAAAAAAA4AAAHwiAQAAAAAAAGBBAAAQAAAKYOEAACAAAAEgAAATYAAAjCIBAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAT4AAAFTVEFUdAAAAFgBAAAHAAAAAAAAAAYAAACfAAAAAAAAABAAAAATAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMAAAAAAAAAAAAAAAAAAABGAAAAAwAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_blend_weight_vertData0 = "s1695:AXBvcwAAASRHbG9iYWxzAAACc2NyZWVuU2l6ZQAAAAAACAAAAAIBc2NyZWVuU2l6ZUludgAIAAAACAAAAAIBRFhCQ:WG%10kJ4mY3jmYbUKqyvEBAAAAuAQAAAUAAAA0AAAAKAEAAFwBAAAUAgAAPAQAAFJERUbsAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAugAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAIAAABgAAAAEAAAAAAAAAAAAAAAkAAAAAAAAAAIAAAAAgAAAJwAAAAAAAAArAAAAAgAAAAIAAAAAgAAAJwAAAAAAAAAc2NyZWVuU2l6ZQCrAQADAAEAAgAAAAAAAAAAAHNjcmVlblNpemVJbnYATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NABJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTrAAAAAGAAAACAAAAJgAAAAAAAAAAAAAAAMAAAAAAAAADwAAAJgAAAABAAAAAAAAAAMAAAABAAAADwAAAJgAAAACAAAAAAAAAAMAAAACAAAADwAAAJgAAAADAAAAAAAAAAMAAAADAAAAAwwAAJgAAAAEAAAAAAAAAAMAAAADAAAADAMAAKEAAAAAAAAAAQAAAAMAAAAEAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFIgAgAAQAABAIgAAABZAAAERo4gAAAAAAABAAAAXwAAAzIQEAAAAAAAZQAAA:IgEAAAAAAAZQAAA:IgEAABAAAAZQAAA:IgEAACAAAAZQAAAzIgEAADAAAAZQAAA8IgEAADAAAAZwAABPIgEAAEAAAAAQAAAGgAAAIDAAAAMgAAD:IAEAAAAAAARhQQAAAAAAACQAAAAAAAPwAAAD8AAAA:AAAAPwJAAAAAAAA:AAAAPwAAAD8AAAA:MgAADfIAEAABAAAApo8gAAAAAAAAAAAAAkAAAAAAgL4AAKA:AAAAvgAAAL6GDRAAAAAAADYAAAXyIBAAAAAAAIYNEAABAAAAMgAADfIAEAACAAAA5o4gAAAAAAAAAAAAAkAAAAAAAL4AAIC%AAAAvgAAoD9GDhAAAAAAADgAAAgyIBAAAwAAAOYKEAAAAAAARoAgAAAAAAAAAAAANgAABfIgEAABAAAARg4QAAIAAAA2AAAFwgAQAAEAAABWDRAAAgAAADIAAA3yIBAAAgAAAKaPIAAAAAAAAAAAAAJAAAAAAADCAAAAQgAAAMIAAABCRg4QAAEAAAAyAAAPwiAQAAMAAAAGFBAAAAAAAAJAAAAAAAAAAAAAAAAAAD8AAAA:AkAAAAAAAAAAAAAAAAAAPwAAAD82AAAFMiAQAAQAAABGEBAAAAAAADYAAAjCIBAABAAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAADAAAAAMAAAAAAAAABwAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_edge_detect_fragData0 = "s2651:AAJfY29sb3JUZXhfc2FtcGxlcgAAY29sb3JUZXgAAABEWEJDwZiLHLhnlk5Qiq6:ZBwu:gEAAACkBwAABQAAADQAAADoAAAAZAEAAJgBAAAoBwAAUkRFRqwAAAAAAAAAAAAAAAIAAAAcAAAAAAT::wABAAB3AAAAXAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABuAAAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAAF9jb2xvclRleF9zYW1wbGVyAGNvbG9yVGV4AE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6urSVNHTnQAAAAEAAAACAAAAGgAAAAAAAAAAAAAAAMAAAAAAAAADw8AAGgAAAABAAAAAAAAAAMAAAABAAAADw8AAGgAAAACAAAAAAAAAAMAAAACAAAADw8AAGgAAAADAAAAAAAAAAMAAAADAAAAAwMAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8AAABTVl9UYXJnZXQAq6tTSERSiAUAAEAAAABiAQAAWgAAAwBgEAAAAAAAWBgABABwEAAAAAAAVVUAAGIQAAPyEBAAAAAAAGIQAAPyEBAAAQAAAGIQAAPyEBAAAgAAAGIQAAMyEBAAAwAAAGUAAAPyIBAAAAAAAGgAAAIFAAAASAAAC:IAEAAAAAAARhAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAEAAABGEBAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAAAAAAhyABAAAQAAAEYCEAAAAAAARgIQgEEAAAABAAAANAAACYIAEAAAAAAAGgAQgIEAAAABAAAACgAQgIEAAAABAAAANAAACBIAEAABAAAAKgAQgIEAAAABAAAAOgAQAAAAAABIAAAL8gAQAAIAAADmGhAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAAAAAAhyABAAAgAAAEYCEAAAAAAARgIQgEEAAAACAAAANAAACYIAEAAAAAAAGgAQgIEAAAACAAAACgAQgIEAAAACAAAANAAACCIAEAABAAAAKgAQgIEAAAACAAAAOgAQAAAAAAAdAAAKwgAQAAEAAAAGBBAAAQAAAAJAAAAAAAAAAAAAAM3MzD3NzMw9AQAACsIAEAABAAAApg4QAAEAAAACQAAAAAAAAAAAAAAAAIA:AACAPw8AAAqCABAAAAAAAOYKEAABAAAAAkAAAAAAgD8AAIA:AAAAAAAAAAAYAAAHggAQAAAAAAA6ABAAAAAAAAFAAAAAAAAADQAEAzoAEAAAAAAASAAAC:IAEAACAAAARhAQAAEAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAAAAAIcgAQAAIAAABGAhAAAAAAAEYCEIBBAAAAAgAAADQAAAmCABAAAAAAABoAEICBAAAAAgAAAAoAEICBAAAAAgAAADQAAAgSABAAAgAAACoAEICBAAAAAgAAADoAEAAAAAAASAAAC:IAEAADAAAA5hoQAAEAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAAAAAIcgAQAAMAAABGAhAAAAAAAEYCEIBBAAAAAwAAADQAAAmCABAAAAAAABoAEICBAAAAAwAAAAoAEICBAAAAAwAAADQAAAgiABAAAgAAACoAEICBAAAAAwAAADoAEAAAAAAANAAABzIAEAACAAAARgAQAAEAAABGABAAAgAAAEgAAAvyABAAAwAAAEYQEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAAAAACHIAEAADAAAARgIQAAAAAABGAhCAQQAAAAMAAAA0AAAJggAQAAAAAAAaABCAgQAAAAMAAAAKABCAgQAAAAMAAAA0AAAIEgAQAAMAAAAqABCAgQAAAAMAAAA6ABAAAAAAAEgAAAvyABAABAAAAOYaEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAAAAACHIAEAAAAAAARgIQAAAAAABGAhCAQQAAAAQAAAA0AAAJEgAQAAAAAAAaABCAgQAAAAAAAAAKABCAgQAAAAAAAAA0AAAIIgAQAAMAAAAqABCAgQAAAAAAAAAKABAAAAAAADQAAAcyABAAAAAAAEYAEAACAAAARgAQAAMAAAA0AAAHEgAQAAAAAAAaABAAAAAAAAoAEAAAAAAAAAAAB2IAEAAAAAAABgEQAAEAAAAGARAAAQAAAB0AAAcyABAAAAAAAJYFEAAAAAAABgAQAAAAAAABAAAKMgAQAAAAAABGABAAAAAAAAJAAAAAAIA:AACAPwAAAAAAAAAAOAAABzIgEAAAAAAARgAQAAAAAADmChAAAQAAADYAAAjCIBAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAPgAAAVNUQVR0AAAAJwAAAAUAAAAAAAAABQAAABsAAAAAAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_edge_detect_vertData0 = "s1454:AXBvcwAAASRHbG9iYWxzAAABc2NyZWVuU2l6ZUludgAAAAAACAAAAAIBRFhCQ67IFns5KaoDQ1maiZPNW7cBAAAAGAQAAAUAAAA0AAAACAEAADwBAADcAQAAnAMAAFJERUbMAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAmAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAEAAAAAAAAAAAAAAAeAAAAAAAAAAIAAAAAgAAAIgAAAAAAAAAc2NyZWVuU2l6ZUludgCrqwEAAwABAAIAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR06YAAAABQAAAAgAAACAAAAAAAAAAAAAAAADAAAAAAAAAA8AAACAAAAAAQAAAAAAAAADAAAAAQAAAA8AAACAAAAAAgAAAAAAAAADAAAAAgAAAA8AAACAAAAAAwAAAAAAAAADAAAAAwAAAAMMAACJAAAAAAAAAAEAAAADAAAABAAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSuAEAAEAAAQBuAAAAWQAABEaOIAAAAAAAAQAAAF8AAAMyEBAAAAAAAGUAAAPyIBAAAAAAAGUAAAPyIBAAAQAAAGUAAAPyIBAAAgAAAGUAAAMyIBAAAwAAAGcAAATyIBAABAAAAAEAAABoAAACAQAAADIAAA:yABAAAAAAAEYUEAAAAAAAAkAAAAAAAD8AAAC:AAAAPwAAAL8CQAAAAAAAPwAAAD8AAAA:AAAAPzIAAA3yIBAAAAAAAEaEIAAAAAAAAAAAAAJAAAAAAIC:AAAAAAAAAAAAAIA:Rg4QAAAAAAAyAAAN8iAQAAEAAABGhCAAAAAAAAAAAAACQAAAAACAPwAAAAAAAAAAAACAv0YOEAAAAAAAMgAADfIgEAACAAAARoQgAAAAAAAAAAAAAkAAAAAAAMAAAAAAAAAAAAAAAEBGDhAAAAAAADIAAA8yIBAAAwAAAEYQEAAAAAAAAkAAAAAAAD8AAAC:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAADYAAAUyIBAABAAAAEYQEAAAAAAANgAACMIgEAAEAAAAAkAAAAAAAAAAAAAAAAAAPwAAgD8%AAABU1RBVHQAAAAIAAAAAQAAAAAAAAAGAAAABQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_neighborhood_blend_fragData0 = "s3238:AAdfYmxlbmRUZXhfc2FtcGxlcgAAX2NvbG9yVGV4X3NhbXBsZXIAAV9zdmVsb2Nfc2FtcGxlcgACYmxlbmRUZXgAAGNvbG9yVGV4AAFzdmVsb2MAAiRHbG9iYWxzAAABc2NyZWVuU2l6ZUludgAAAAAACAAAAAIBRFhCQ%hkC%5YS9dGxZA7rjd9tqABAAAABAkAAAUAAAA0AAAAFAIAAGACAACUAgAAiAgAAFJERUbYAQAAAQAAAFQBAAAHAAAAHAAAAAAE::8AAQAApAEAAPwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAADgEAAAMAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAgAQAAAwAAAAAAAAAAAAAAAAAAAAIAAAABAAAAAAAAADABAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAOQEAAAIAAAAFAAAABAAAAP::::8BAAAAAQAAAAwAAABCAQAAAgAAAAUAAAAEAAAA:::::wIAAAABAAAADAAAAEkBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAX2JsZW5kVGV4X3NhbXBsZXIAX2NvbG9yVGV4X3NhbXBsZXIAX3N2ZWxvY19zYW1wbGVyAGJsZW5kVGV4AGNvbG9yVGV4AHN2ZWxvYwAkR2xvYmFscwCrq0kBAAABAAAAbAEAABAAAAAAAAAAAAAAAIQBAAAAAAAACAAAAAIAAACUAQAAAAAAAHNjcmVlblNpemVJbnYAq6sBAAMAAQACAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR05EAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAA8PAAA4AAAAAQAAAAAAAAADAAAAAQAAAAMDAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUuwFAABAAAAAewEAAFkAAARGjiAAAAAAAAEAAABaAAADAGAQAAAAAABaAAADAGAQAAEAAABaAAADAGAQAAIAAABYGAAEAHAQAAAAAABVVQAAWBgABABwEAABAAAAVVUAAFgYAAQAcBAAAgAAAFVVAABiEAAD8hAQAAAAAABiEAADMhAQAAEAAABlAAAD8iAQAAAAAABoAAACBAAAAEgAAAvyABAAAAAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAABAAAA5hoQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAIAAABGEBAAAQAAANZyEAAAAAAAAGAQAAAAAAABQAAAAAAAADYAAAUSABAAAgAAADoAEAAAAAAANgAABSIAEAACAAAAGgAQAAEAAAARAAAKEgAQAAAAAABGDhAAAgAAAAJAAAAAAIA:AACAPwAAgD8AAIA:MQAABxIAEAAAAAAACgAQAAAAAAABQAAArMUnNx8ABAMKABAAAAAAAEgAAAvyABAAAQAAAEYQEAABAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAASAAAC:IAEAADAAAARhAQAAEAAABGfhAAAgAAAABgEAACAAAAAUAAAAAAAAAPAAAHEgAQAAAAAABGABAAAwAAAEYAEAADAAAASwAABRIAEAAAAAAACgAQAAAAAAA4AAAHEgAQAAAAAAAKABAAAAAAAAFAAAAAAKBASwAABYIgEAAAAAAACgAQAAAAAAA2AAAFciAQAAAAAABGAhAAAQAAABIAAAE0AAAHEgAQAAAAAAA6ABAAAAAAACoAEAACAAAANAAAByIAEAAAAAAAOgAQAAIAAAAaABAAAgAAADEAAAcSABAAAAAAABoAEAAAAAAACgAQAAAAAAA2AAAFUgAQAAEAAAAGAhAAAgAAADYAAAiiABAAAQAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANgAABRIAEAACAAAAAUAAAAAAAAA3AAAJ8gAQAAMAAAAGABAAAAAAAEYOEAABAAAARgwQAAIAAAA3AAAJMgAQAAAAAAAGABAAAAAAAIYAEAABAAAA1gUQAAIAAAAPAAAKQgAQAAAAAABGABAAAAAAAAJAAAAAAIA:AACAPwAAAAAAAAAADgAABzIAEAAAAAAARgAQAAAAAACmChAAAAAAADgAAAvyABAAAQAAAEaEIAAAAAAAAAAAAAJAAAAAAIA:AACAPwAAgL8AAIC:MgAAD:IAEAACAAAARhQQAAEAAAACQAAAAACAPwAAgL8AAIA:AACAvwJAAAAAAAAAAACAPwAAAAAAAIA:MgAACfIAEAABAAAARg4QAAMAAABGDhAAAQAAAEYOEAACAAAAMgAAD:IAEAABAAAARg4QAAEAAAACQAAAAACAPwAAgL8AAIA:AACAvwJAAAAAAAAAAACAPwAAAAAAAIA:SAAAC:IAEAACAAAARgAQAAEAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAQAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAADgAAAdyABAAAwAAAFYFEAAAAAAARgIQAAMAAAAyAAAJciAQAAAAAABGAhAAAgAAAAYAEAAAAAAARgIQAAMAAABIAAAL8gAQAAIAAABGABAAAQAAAEZ%EAACAAAAAGAQAAIAAAABQAAAAAAAAEgAAAvyABAAAQAAAOYKEAABAAAARn4QAAIAAAAAYBAAAgAAAAFAAAAAAAAAOAAAB2IAEAAAAAAAVgUQAAAAAAAGARAAAQAAADIAAAkyABAAAAAAAEYAEAACAAAABgAQAAAAAACWBRAAAAAAAA8AAAcSABAAAAAAAEYAEAAAAAAARgAQAAAAAABLAAAFEgAQAAAAAAAKABAAAAAAADgAAAcSABAAAAAAAAoAEAAAAAAAAUAAAAAAoEBLAAAFgiAQAAAAAAAKABAAAAAAABUAAAE%AAABU1RBVHQAAAAsAAAABAAAAAAAAAADAAAAFwAAAAAAAAAAAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAAAAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_neighborhood_blend_vertData0 = "s1219:AXBvcwAAASRHbG9iYWxzAAABc2NyZWVuU2l6ZUludgAAAAAACAAAAAIBRFhCQ:e9yHOFA3rO33i4dk0T1toBAAAAaAMAAAUAAAA0AAAACAEAADwBAACsAQAA7AIAAFJERUbMAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAmAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAEAAAAAAAAAAAAAAAeAAAAAAAAAAIAAAAAgAAAIgAAAAAAAAAc2NyZWVuU2l6ZUludgCrqwEAAwABAAIAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR05oAAAAAwAAAAgAAABQAAAAAAAAAAAAAAADAAAAAAAAAA8AAABQAAAAAQAAAAAAAAADAAAAAQAAAAMMAABZAAAAAAAAAAEAAAADAAAAAgAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSOAEAAEAAAQBOAAAAWQAABEaOIAAAAAAAAQAAAF8AAAMyEBAAAAAAAGUAAAPyIBAAAAAAAGUAAAMyIBAAAQAAAGcAAATyIBAAAgAAAAEAAABoAAACAQAAADIAAA:yABAAAAAAAEYUEAAAAAAAAkAAAAAAAD8AAAC:AAAAPwAAAL8CQAAAAAAAPwAAAD8AAAA:AAAAPzIAAA3yIBAAAAAAAEaEIAAAAAAAAAAAAAJAAAAAAIA:AAAAAAAAAAAAAIC:Rg4QAAAAAAAyAAAPMiAQAAEAAABGEBAAAAAAAAJAAAAAAAA:AAAAvwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAA2AAAFMiAQAAIAAABGEBAAAAAAADYAAAjCIBAAAgAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAABgAAAAEAAAAAAAAABAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.ssgi_pass_fragData0 = "s9254:AAVfZ2J1ZmZlckRfc2FtcGxlcgAAX2didWZmZXIwX3NhbXBsZXIAAWdidWZmZXJEAABnYnVmZmVyMAABJEdsb2JhbHMAAARQAAAAAABAAAAABARjYW1lcmFQcm9qAEAAAAAIAAAAAgFWMwBQAAAALAAAAAMDXzIwOACAAAAADAAAAAMBRFhCQxfxTaLvVXVs22CHt%3TDE0BAAAAmBoAAAUAAAA0AAAAQAIAAIwCAADAAgAAHBoAAFJERUYEAgAAAQAAAPwAAAAFAAAAHAAAAAAE::8AAQAA0AEAALwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAzgAAAAMAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAADgAAAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAAOkAAAACAAAABQAAAAQAAAD:::::AQAAAAEAAAAMAAAA8gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfZ2J1ZmZlckRfc2FtcGxlcgBfZ2J1ZmZlcjBfc2FtcGxlcgBnYnVmZmVyRABnYnVmZmVyMAAkR2xvYmFscwCr8gAAAAQAAAAUAQAAkAAAAAAAAAAAAAAAdAEAAAAAAABAAAAAAgAAAHgBAAAAAAAAiAEAAEAAAAAIAAAAAgAAAJQBAAAAAAAApAEAAFAAAAAsAAAAAgAAAKgBAAAAAAAAuAEAAIAAAAAMAAAAAAAAAMABAAAAAAAAUACrqwMAAwAEAAQAAAAAAAAAAABjYW1lcmFQcm9qAKsBAAMAAQACAAAAAAAAAAAAVjMAqwMAAwADAAMAAAAAAAAAAABfMjA4AKurqwEAAwABAAMAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTkQAAAACAAAACAAAADgAAAAAAAAAAAAAAAMAAAAAAAAAAwMAADgAAAABAAAAAAAAAAMAAAABAAAABwcAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAEOAABTVl9UYXJnZXQAq6tTSERSVBcAAEAAAADVBQAAWQAABEaOIAAAAAAACAAAAFoAAAMAYBAAAAAAAFoAAAMAYBAAAQAAAFgYAAQAcBAAAAAAAFVVAABYGAAEAHAQAAEAAABVVQAAYhAAAzIQEAAAAAAAYhAAA3IQEAABAAAAZQAAAxIgEAAAAAAAaAAAAgoAAABIAAAL8gAQAAAAAABGEBAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAEgAAAvyABAAAQAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACUIAEAAAAAAACgAQAAEAAAABQAAAAAAAQAFAAAAAAIC:AAAAC3IAEAABAAAARgAQgMEAAAAAAAAAAkAAAAAAgD8AAIA:AACAPwAAAAAAAAAIQgAQAAIAAAAaABCAwQAAAAAAAAAKABAAAQAAAB0AAAeCABAAAAAAACoAEAACAAAAAUAAAAAAAAAdAAAKkgAQAAEAAAAGBBAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD5IAEAABAAAABgwQAAEAAAACQAAAAACAPwAAAAAAAAAAAACAPwJAAAAAAIC:AAAAAAAAAAAAAIC:OAAABzIAEAABAAAAxgAQAAEAAACWBRAAAQAAADcAAAkyABAAAgAAAPYPEAAAAAAARgAQAAAAAABGABAAAQAAABAAAAgSABAAAQAAAEYCEAACAAAARoIgAAAAAAAFAAAAEAAACCIAEAABAAAARgIQAAIAAABGgiAAAAAAAAYAAAAQAAAIQgAQAAEAAABGAhAAAgAAAEaCIAAAAAAABwAAABAAAAcSABAAAAAAAEYCEAABAAAARgIQAAEAAABEAAAFEgAQAAAAAAAKABAAAAAAADgAAAdyABAAAgAAAAYAEAAAAAAARgIQAAEAAAAAAAAJIgAQAAAAAAAqABCAQQAAAAAAAAAKgCAAAAAAAAQAAAAOAAAIIgAQAAAAAAAagCAAAAAAAAQAAAAaABAAAAAAADgAAAdyABAAAwAAAFYFEAAAAAAARhIQAAEAAAA2AAAFggAQAAQAAAABQAAAAACAPzYAAAVyABAABAAAAEYCEAADAAAANgAACMIAEAAAAAAAAkAAAAAAAAAAAAAAmpkZPgAAAAAwAAABIQAAB4IAEAABAAAAOgAQAAAAAAABQAAACAAAAAMABAM6ABAAAQAAADIAAAxyABAABAAAAEYCEAACAAAAAkAAAArXozwK16M8CtejPAAAAABGAhAABAAAABEAAAgSABAABQAAAEYOEAAEAAAARo4gAAAAAAAAAAAAEQAACCIAEAAFAAAARg4QAAQAAABGjiAAAAAAAAEAAAARAAAIggAQAAEAAABGDhAABAAAAEaOIAAAAAAAAwAAAA4AAAcyABAABQAAAEYAEAAFAAAA9g8QAAEAAAAyAAAPMgAQAAUAAABGABAABQAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAAAAAIQgAQAAUAAAAaABCAQQAAAAUAAAABQAAAAACAP0gAAAvyABAABQAAAIYAEAAFAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACYIAEAABAAAACgAQAAUAAAABQAAAAAAAQAFAAAAAAIC:AAAACYIAEAABAAAAOgAQgEEAAAABAAAACoAgAAAAAAAEAAAADgAACIIAEAABAAAAGoAgAAAAAAAEAAAAOgAQAAEAAAAyAAAKggAQAAEAAAAqEBAAAQAAADoAEAABAAAAKgAQgEEAAAAEAAAAMQAAB4IAEAACAAAAAUAAAAAAAAA6ABAAAQAAADEAAAeCABAAAQAAADoAEAABAAAAAUAAAM3MTD4BAAAHggAQAAEAAAA6ABAAAQAAADoAEAACAAAAHwAEAzoAEAABAAAAMgAACnIAEAAFAAAARhIQAAEAAABWBRAAAAAAAEYCEIBBAAAABAAAABAAAAeCABAAAQAAAEYCEAAFAAAARgIQAAUAAABLAAAFQgAQAAAAAAA6ABAAAQAAAAIAAAEVAAABHgAAB4IAEAAAAAAAOgAQAAAAAAABQAAAAQAAADYAAAVCABAAAAAAAAFAAACamRk%FgAAATgAAApyABAABAAAAJYEEAACAAAAAkAAAAAAAAAAAAAAAACAPwAAAAAyAAANcgAQAAUAAACWBBAAAgAAAAJAAAAAAIA:AAAAAAAAAAAAAAAAlgQQgEEAAAAEAAAAMgAADXIAEAAEAAAAJgkQgEEAAAACAAAAAkAAAAAAgD8AAAAAAAAAAAAAAABGAhAABAAAAA8AAAeCABAAAAAAAEYAEAAFAAAARgAQAAUAAABLAAAFggAQAAEAAAA6ABAAAAAAAA8AAAeCABAAAgAAAIYAEAAEAAAAhgAQAAQAAABLAAAFggAQAAMAAAA6ABAAAgAAADEAAAeCABAAAQAAADoAEAADAAAAOgAQAAEAAABEAAAFggAQAAAAAAA6ABAAAAAAADgAAAdyABAABQAAAPYPEAAAAAAARgIQAAUAAABEAAAFggAQAAAAAAA6ABAAAgAAADgAAAdyABAABAAAAPYPEAAAAAAARgIQAAQAAAA3AAAJcgAQAAQAAAD2DxAAAQAAAEYCEAAFAAAARgIQAAQAAAAQAAAHggAQAAAAAABGAhAABAAAAEYCEAAEAAAARAAABYIAEAAAAAAAOgAQAAAAAAA4AAAHcgAQAAUAAAD2DxAAAAAAAEYCEAAEAAAAOAAAB3IAEAAGAAAAlgQQAAIAAAAmCRAABQAAADIAAApyABAABQAAAJYEEAAFAAAAJgkQAAIAAABGAhCAQQAAAAYAAAAyAAAJcgAQAAYAAABGAhAABAAAAPYPEAAAAAAARgIQAAUAAAAyAAAKcgAQAAcAAABGAhAABAAAAPYPEAAAAAAARgIQgEEAAAAFAAAAMgAACnIAEAAEAAAARgIQAAQAAAD2DxAAAAAAAEYCEIBBAAAAAgAAADIAAAxyABAABAAAAEYCEAAEAAAAAkAAAAAAAD8AAAA:AAAAPwAAAABGAhAAAgAAADYAAAWCABAACAAAAAFAAAAAAIA:NgAABXIAEAAIAAAARgIQAAMAAAA2AAAFggAQAAAAAAABQAAAmpkZPjYAAAWCABAAAQAAAAFAAAAAAAAAMAAAASEAAAeCABAAAgAAADoAEAABAAAAAUAAAAgAAAADAAQDOgAQAAIAAAAyAAAMcgAQAAgAAABGAhAABAAAAAJAAAAK16M8CtejPArXozwAAAAARgIQAAgAAAARAAAIEgAQAAkAAABGDhAACAAAAEaOIAAAAAAAAAAAABEAAAgiABAACQAAAEYOEAAIAAAARo4gAAAAAAABAAAAEQAACIIAEAACAAAARg4QAAgAAABGjiAAAAAAAAMAAAAOAAAHMgAQAAkAAABGABAACQAAAPYPEAACAAAAMgAADzIAEAAJAAAARgAQAAkAAAACQAAAAAAAPwAAAD8AAAAAAAAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAAAAACEIAEAAJAAAAGgAQgEEAAAAJAAAAAUAAAAAAgD9IAAAL8gAQAAkAAACGABAACQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAmCABAAAgAAAAoAEAAJAAAAAUAAAAAAAEABQAAAAACAvwAAAAmCABAAAgAAADoAEIBBAAAAAgAAAAqAIAAAAAAABAAAAA4AAAiCABAAAgAAABqAIAAAAAAABAAAADoAEAACAAAAMgAACoIAEAACAAAAKhAQAAEAAAA6ABAAAgAAACoAEIBBAAAACAAAADEAAAeCABAAAwAAAAFAAAAAAAAAOgAQAAIAAAAxAAAHggAQAAIAAAA6ABAAAgAAAAFAAADNzEw%AQAAB4IAEAACAAAAOgAQAAIAAAA6ABAAAwAAAB8ABAM6ABAAAgAAADIAAApyABAACQAAAEYSEAABAAAAVgUQAAAAAABGAhCAQQAAAAgAAAAQAAAHggAQAAIAAABGAhAACQAAAEYCEAAJAAAASwAABYIAEAAAAAAAOgAQAAIAAAACAAABFQAAAR4AAAeCABAAAQAAADoAEAABAAAAAUAAAAEAAAA2AAAFggAQAAAAAAABQAAAmpkZPhYAAAEAAAAHQgAQAAAAAAA6ABAAAAAAACoAEAAAAAAAMgAACnIAEAABAAAARgIQgEEAAAABAAAABgAQAAAAAABGAhAABQAAADIAAAxyABAAAQAAAEYCEAABAAAAAkAAAAAAAD8AAAA:AAAAPwAAAABGAhAAAgAAADYAAAWCABAABAAAAAFAAAAAAIA:NgAABXIAEAAEAAAARgIQAAMAAAA2AAAIkgAQAAAAAAACQAAAmpkZPgAAAAAAAAAAAAAAADAAAAEhAAAHggAQAAEAAAA6ABAAAAAAAAFAAAAIAAAAAwAEAzoAEAABAAAAMgAADHIAEAAEAAAARgIQAAEAAAACQAAACtejPArXozwK16M8AAAAAEYCEAAEAAAAEQAACBIAEAAFAAAARg4QAAQAAABGjiAAAAAAAAAAAAARAAAIIgAQAAUAAABGDhAABAAAAEaOIAAAAAAAAQAAABEAAAiCABAAAQAAAEYOEAAEAAAARo4gAAAAAAADAAAADgAABzIAEAAFAAAARgAQAAUAAAD2DxAAAQAAADIAAA8yABAABQAAAEYAEAAFAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAAAAAAAhCABAABQAAABoAEIBBAAAABQAAAAFAAAAAAIA:SAAAC:IAEAAFAAAAhgAQAAUAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAJggAQAAEAAAAKABAABQAAAAFAAAAAAABAAUAAAAAAgL8AAAAJggAQAAEAAAA6ABCAQQAAAAEAAAAKgCAAAAAAAAQAAAAOAAAIggAQAAEAAAAagCAAAAAAAAQAAAA6ABAAAQAAADIAAAqCABAAAQAAACoQEAABAAAAOgAQAAEAAAAqABCAQQAAAAQAAAAxAAAHggAQAAIAAAABQAAAAAAAADoAEAABAAAAMQAAB4IAEAABAAAAOgAQAAEAAAABQAAAzcxMPgEAAAeCABAAAQAAADoAEAABAAAAOgAQAAIAAAAfAAQDOgAQAAEAAAAyAAAKcgAQAAUAAABGEhAAAQAAAFYFEAAAAAAARgIQgEEAAAAEAAAAEAAAB4IAEAABAAAARgIQAAUAAABGAhAABQAAAEsAAAUSABAAAAAAADoAEAABAAAAAgAAARUAAAEeAAAHggAQAAAAAAA6ABAAAAAAAAFAAAABAAAANgAABRIAEAAAAAAAAUAAAJqZGT4WAAABAAAABxIAEAAAAAAACgAQAAAAAAAqABAAAAAAADIAAA5yABAAAQAAAEYCEIBBAAAABgAAAAJAAAAAAAA:AAAAPwAAAD8AAAAARgIQgEEAAAACAAAAMgAADHIAEAABAAAARgIQAAEAAAACQAAAAAAAPwAAAD8AAAA:AAAAAEYCEAACAAAANgAABYIAEAAEAAAAAUAAAAAAgD82AAAFcgAQAAQAAABGAhAAAwAAADYAAAjCABAAAAAAAAJAAAAAAAAAAAAAAJqZGT4AAAAAMAAAASEAAAeCABAAAQAAADoAEAAAAAAAAUAAAAgAAAADAAQDOgAQAAEAAAAyAAAMcgAQAAQAAABGAhAAAQAAAAJAAAAK16M8CtejPArXozwAAAAARgIQAAQAAAARAAAIEgAQAAUAAABGDhAABAAAAEaOIAAAAAAAAAAAABEAAAgiABAABQAAAEYOEAAEAAAARo4gAAAAAAABAAAAEQAACIIAEAABAAAARg4QAAQAAABGjiAAAAAAAAMAAAAOAAAHMgAQAAUAAABGABAABQAAAPYPEAABAAAAMgAADzIAEAAFAAAARgAQAAUAAAACQAAAAAAAPwAAAD8AAAAAAAAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAAAAACEIAEAAFAAAAGgAQgEEAAAAFAAAAAUAAAAAAgD9IAAAL8gAQAAUAAACGABAABQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAmCABAAAQAAAAoAEAAFAAAAAUAAAAAAAEABQAAAAACAvwAAAAmCABAAAQAAADoAEIBBAAAAAQAAAAqAIAAAAAAABAAAAA4AAAiCABAAAQAAABqAIAAAAAAABAAAADoAEAABAAAAMgAACoIAEAABAAAAKhAQAAEAAAA6ABAAAQAAACoAEIBBAAAABAAAADEAAAeCABAAAgAAAAFAAAAAAAAAOgAQAAEAAAAxAAAHggAQAAEAAAA6ABAAAQAAAAFAAADNzEw%AQAAB4IAEAABAAAAOgAQAAEAAAA6ABAAAgAAAB8ABAM6ABAAAQAAADIAAApyABAABQAAAEYSEAABAAAAVgUQAAAAAABGAhCAQQAAAAQAAAAQAAAHggAQAAEAAABGAhAABQAAAEYCEAAFAAAASwAABUIAEAAAAAAAOgAQAAEAAAACAAABFQAAAR4AAAeCABAAAAAAADoAEAAAAAAAAUAAAAEAAAA2AAAFQgAQAAAAAAABQAAAmpkZPhYAAAEAAAAHEgAQAAAAAAAqABAAAAAAAAoAEAAAAAAAMgAADnIAEAABAAAARgIQgEEAAAAHAAAAAkAAAAAAAD8AAAA:AAAAPwAAAABGAhCAQQAAAAIAAAAyAAAMcgAQAAEAAABGAhAAAQAAAAJAAAAAAAA:AAAAPwAAAD8AAAAARgIQAAIAAAA2AAAFggAQAAIAAAABQAAAAACAPzYAAAVyABAAAgAAAEYCEAADAAAANgAACMIAEAAAAAAAAkAAAAAAAAAAAAAAmpkZPgAAAAAwAAABIQAAB4IAEAABAAAAOgAQAAAAAAABQAAACAAAAAMABAM6ABAAAQAAADIAAAxyABAAAgAAAEYCEAABAAAAAkAAAArXozwK16M8CtejPAAAAABGAhAAAgAAABEAAAgSABAABAAAAEYOEAACAAAARo4gAAAAAAAAAAAAEQAACCIAEAAEAAAARg4QAAIAAABGjiAAAAAAAAEAAAARAAAIggAQAAEAAABGDhAAAgAAAEaOIAAAAAAAAwAAAA4AAAcyABAABAAAAEYAEAAEAAAA9g8QAAEAAAAyAAAPMgAQAAQAAABGABAABAAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAAAAAIQgAQAAQAAAAaABCAQQAAAAQAAAABQAAAAACAP0gAAAvyABAABAAAAIYAEAAEAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACYIAEAABAAAACgAQAAQAAAABQAAAAAAAQAFAAAAAAIC:AAAACYIAEAABAAAAOgAQgEEAAAABAAAACoAgAAAAAAAEAAAADgAACIIAEAABAAAAGoAgAAAAAAAEAAAAOgAQAAEAAAAyAAAKggAQAAEAAAAqEBAAAQAAADoAEAABAAAAKgAQgEEAAAACAAAAMQAAB4IAEAADAAAAAUAAAAAAAAA6ABAAAQAAADEAAAeCABAAAQAAADoAEAABAAAAAUAAAM3MTD4BAAAHggAQAAEAAAA6ABAAAQAAADoAEAADAAAAHwAEAzoAEAABAAAAMgAACnIAEAAEAAAARhIQAAEAAABWBRAAAAAAAEYCEIBBAAAAAgAAABAAAAeCABAAAQAAAEYCEAAEAAAARgIQAAQAAABLAAAFQgAQAAAAAAA6ABAAAQAAAAIAAAEVAAABHgAAB4IAEAAAAAAAOgAQAAAAAAABQAAAAQAAADYAAAVCABAAAAAAAAFAAACamRk%FgAAAQAAAAcSIBAAAAAAACoAEAAAAAAACgAQAAAAAAA%AAABU1RBVHQAAADLAAAACgAAAAAAAAADAAAAfgAAAAoAAAAFAAAABgAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAAFQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.ssr_pass_fragData0 = "s7074:AAlfZ2J1ZmZlckRfc2FtcGxlcgAAX2didWZmZXIwX3NhbXBsZXIAAV9nYnVmZmVyMV9zYW1wbGVyAAJfdGV4X3NhbXBsZXIAA2didWZmZXJEAABnYnVmZmVyMAABZ2J1ZmZlcjEAAnRleAADJEdsb2JhbHMAAANQAAAAAABAAAAABARjYW1lcmFQcm9qAEAAAAAIAAAAAgFWMwBQAAAALAAAAAMDRFhCQ1StsFbeLWyiaHBhDNzEBc0BAAAAFBQAAAUAAAA0AAAAvAIAAAgDAAA8AwAAmBMAAFJERUaAAgAAAQAAAKgBAAAJAAAAHAAAAAAE::8AAQAATAIAADwBAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAATgEAAAMAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAABgAQAAAwAAAAAAAAAAAAAAAAAAAAIAAAABAAAAAAAAAHIBAAADAAAAAAAAAAAAAAAAAAAAAwAAAAEAAAAAAAAAfwEAAAIAAAAFAAAABAAAAP::::8AAAAAAQAAAAwAAACIAQAAAgAAAAUAAAAEAAAA:::::wEAAAABAAAADAAAAJEBAAACAAAABQAAAAQAAAD:::::AgAAAAEAAAAMAAAAmgEAAAIAAAAFAAAABAAAAP::::8DAAAAAQAAAAwAAACeAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAF9nYnVmZmVyRF9zYW1wbGVyAF9nYnVmZmVyMF9zYW1wbGVyAF9nYnVmZmVyMV9zYW1wbGVyAF90ZXhfc2FtcGxlcgBnYnVmZmVyRABnYnVmZmVyMABnYnVmZmVyMQB0ZXgAJEdsb2JhbHMAq54BAAADAAAAwAEAAIAAAAAAAAAAAAAAAAgCAAAAAAAAQAAAAAIAAAAMAgAAAAAAABwCAABAAAAACAAAAAIAAAAoAgAAAAAAADgCAABQAAAALAAAAAIAAAA8AgAAAAAAAFAAq6sDAAMABAAEAAAAAAAAAAAAY2FtZXJhUHJvagCrAQADAAEAAgAAAAAAAAAAAFYzAKsDAAMAAwADAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR05EAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAAMDAAA4AAAAAQAAAAAAAAADAAAAAQAAAAcHAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUlQQAABAAAAAFQQAAFkAAARGjiAAAAAAAAgAAABaAAADAGAQAAAAAABaAAADAGAQAAEAAABaAAADAGAQAAIAAABaAAADAGAQAAMAAABYGAAEAHAQAAAAAABVVQAAWBgABABwEAABAAAAVVUAAFgYAAQAcBAAAgAAAFVVAABYGAAEAHAQAAMAAABVVQAAYhAAAzIQEAAAAAAAYhAAA3IQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgwAAABIAAAL8gAQAAAAAABGEBAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAADkAAAeCABAAAAAAACoAEAAAAAAAAUAAAAAAgD8fAAQDOgAQAAAAAABIAAAL8gAQAAEAAABGEBAAAAAAAEZ%EAACAAAAAGAQAAIAAAABQAAAAAAAABoAAAWCABAAAAAAADoAEAABAAAAOQAAB4IAEAAAAAAAOgAQAAAAAAABQAAAAAAAAB8ABAM6ABAAAAAAAEgAAAvyABAAAQAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACYIAEAAAAAAACgAQAAEAAAABQAAAAAAAQAFAAAAAAIC:OQAABxIAEAABAAAAOgAQAAAAAAABQAAAAACAPx8ABAMKABAAAQAAAAAAAAtyABAAAQAAAEYAEIDBAAAAAAAAAAJAAAAAAIA:AACAPwAAgD8AAAAAAAAACEIAEAACAAAAGgAQgMEAAAAAAAAACgAQAAEAAAAdAAAHEgAQAAEAAAAqABAAAgAAAAFAAAAAAAAAHQAACjIAEAADAAAARgAQAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAA8yABAAAwAAAEYAEAADAAAAAkAAAAAAgD8AAIA:AAAAAAAAAAACQAAAAACAvwAAgL8AAAAAAAAAADgAAAdiABAAAQAAAFYGEAABAAAABgEQAAMAAAA3AAAJMgAQAAIAAAAGABAAAQAAAEYAEAAAAAAAlgUQAAEAAAAQAAAHEgAQAAAAAABGAhAAAgAAAEYCEAACAAAARAAABRIAEAAAAAAACgAQAAAAAAA4AAAHcgAQAAEAAAAGABAAAAAAAEYCEAACAAAAEAAACBIAEAACAAAARgIQAAEAAABGgiAAAAAAAAUAAAAQAAAIIgAQAAIAAABGAhAAAQAAAEaCIAAAAAAABgAAABAAAAhCABAAAgAAAEYCEAABAAAARoIgAAAAAAAHAAAAAAAACRIAEAAAAAAAOgAQgEEAAAAAAAAACoAgAAAAAAAEAAAADgAACBIAEAAAAAAAGoAgAAAAAAAEAAAACgAQAAAAAAA4AAAHcgAQAAEAAAAGABAAAAAAAEYSEAABAAAAEAAAByIAEAAAAAAARgIQAAEAAABGAhAAAgAAAAAAAAciABAAAAAAABoAEAAAAAAAGgAQAAAAAAAyAAAKcgAQAAIAAABGAhAAAgAAAFYFEIBBAAAAAAAAAEYCEAABAAAAEAAAByIAEAAAAAAARgIQAAIAAABGAhAAAgAAAEQAAAUiABAAAAAAABoAEAAAAAAAOAAAB3IAEAACAAAAVgUQAAAAAAAmCRAAAgAAAA8AAAoiABAAAAAAAEYQEAAAAAAAAkAAADnWT0FMd5xCAAAAAAAAAABNAAAGIgAQAAAAAAAA0AAAGgAQAAAAAAA4AAAHIgAQAAAAAAAaABAAAAAAAAFAAACM7ipHGgAABSIAEAAAAAAAGgAQAAAAAAA4AAAHIgAQAAAAAAAqABAAAAAAABoAEAAAAAAAMgAACiIAEAAAAAAAGgAQgEEAAAAAAAAAAUAAAJqZGT8BQAAAAACAPzgAAAfiABAAAgAAAFYFEAAAAAAAVgIQAAIAAAA4AAAKcgAQAAMAAACWBxAAAgAAAAJAAAAK16M9CtejPQrXoz0AAAAANgAABYIAEAAEAAAAAUAAAAAAgD82AAAFggAQAAUAAAABQAAAAACAPzYAAAWCABAABgAAAAFAAAAAAIA:NgAABYIAEAAHAAAAAUAAAAAAgD82AAAFcgAQAAUAAABGAhAAAQAAADYAAAhyABAACAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANgAACKIAEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAwAAABIQAAB4IAEAABAAAAGgAQAAAAAAABQAAAEgAAADYAAAWCABAAAAAAAAFAAAAAAAAAAwAEAzoAEAABAAAAMgAADHIAEAAEAAAAlgcQAAIAAAACQAAACtejPQrXoz0K16M9AAAAAEYCEAAFAAAAEQAACBIAEAAJAAAARg4QAAQAAABGjiAAAAAAAAAAAAARAAAIIgAQAAkAAABGDhAABAAAAEaOIAAAAAAAAQAAABEAAAiCABAAAQAAAEYOEAAEAAAARo4gAAAAAAADAAAADgAABzIAEAAJAAAARgAQAAkAAAD2DxAAAQAAADIAAA8yABAACQAAAEYAEAAJAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAAAAAAAhCABAACQAAABoAEIBBAAAACQAAAAFAAAAAAIA:SAAAC:IAEAAJAAAAhgAQAAkAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAJggAQAAEAAAAKABAACQAAAAFAAAAAAABAAUAAAAAAgL8AAAAJggAQAAEAAAA6ABCAQQAAAAEAAAAKgCAAAAAAAAQAAAAOAAAIggAQAAEAAAAagCAAAAAAAAQAAAA6ABAAAQAAADIAAAqCABAAAQAAACoQEAABAAAAOgAQAAEAAAAqABCAQQAAAAQAAAAxAAAHggAQAAEAAAABQAAAAAAAADoAEAABAAAAHwAEAzoAEAABAAAANgAABXIAEAAFAAAARgIQAAQAAAA2AAAFcgAQAAkAAABGAhAAAwAAADYAAAWCABAAAwAAAAFAAAAAAAAANgAABYIAEAAIAAAAAUAAAAAAAAAwAAABIQAAB4IAEAAJAAAAOgAQAAgAAAABQAAABwAAAAMABAM6ABAACQAAADgAAApyABAACgAAAEYCEAAJAAAAAkAAAAAAAD8AAAA:AAAAPwAAAAAyAAANcgAQAAcAAABGAhCAQQAAAAkAAAACQAAAAAAAPwAAAD8AAAA:AAAAAEYCEAAFAAAAEQAACBIAEAALAAAARg4QAAcAAABGjiAAAAAAAAAAAAARAAAIIgAQAAsAAABGDhAABwAAAEaOIAAAAAAAAQAAABEAAAiCABAACQAAAEYOEAAHAAAARo4gAAAAAAADAAAADgAABzIAEAALAAAARgAQAAsAAAD2DxAACQAAADIAAA8yABAACwAAAEYAEAALAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAAAAAAAhCABAACwAAABoAEIBBAAAACwAAAAFAAAAAAIA:SAAAC:IAEAALAAAAhgAQAAsAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAJggAQAAkAAAAKABAACwAAAAFAAAAAAABAAUAAAAAAgL8AAAAJggAQAAkAAAA6ABCAQQAAAAkAAAAKgCAAAAAAAAQAAAAOAAAIggAQAAkAAAAagCAAAAAAAAQAAAA6ABAACQAAADIAAAqCABAAAwAAACoQEAABAAAAOgAQAAkAAAAqABCAQQAAAAcAAAAxAAAHggAQAAkAAAA6ABAAAwAAAAFAAAAAAAAANwAACXIAEAAFAAAA9g8QAAkAAABGAhAABQAAAEYCEAAHAAAAHgAAB4IAEAAIAAAAOgAQAAgAAAABQAAAAQAAADYAAAVyABAACQAAAEYCEAAKAAAAFgAAAR0AAAgSABAABwAAAAFAAAAK1yM8OgAQgIEAAAADAAAAEQAACBIAEAAJAAAARg4QAAUAAABGjiAAAAAAAAAAAAARAAAIIgAQAAkAAABGDhAABQAAAEaOIAAAAAAAAQAAABEAAAgiABAABwAAAEYOEAAFAAAARo4gAAAAAAADAAAADgAAB2IAEAAHAAAABgEQAAkAAABWBRAABwAAADIAAA8yABAABgAAAJYFEAAHAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAAAAAAAhCABAABgAAABoAEIBBAAAABgAAAAFAAAAAAIA:AQAAB3IAEAAIAAAAhgMQAAYAAAAGABAABwAAADYAAAWCABAAAAAAAAFAAAD:::::AgAAARUAAAEeAAAHIgAQAAAAAAAaABAAAAAAAAFAAAABAAAANgAABXIAEAAFAAAARgIQAAQAAAA2AAAFggAQAAAAAAA6ABAAAQAAADYAAAhyABAACAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAQEAAAdyABAAAQAAAEYCEAAIAAAA9g8QAAAAAAAAAAALogAQAAAAAAAGBBCAQQAAAAEAAAACQAAAAAAAAAAAAD8AAAAAAAAAPwAAAAkiABAAAAAAADoAEICBAAAAAAAAABoAEICBAAAAAAAAAAAAAAtiABAAAAAAAFYGEIBBAAAAAAAAAAJAAAAAAAAAAACAPwAAgD8AAAAANAAAByIAEAAAAAAAGgAQAAAAAAABQAAAAAAAADgAAAeCABAAAAAAACoAEAAAAAAAKgAQAAAAAAA4AAAHggAQAAAAAAA6ABAAAAAAADoAEAAAAAAAOAAAB0IAEAAAAAAAOgAQAAAAAAAqABAAAAAAADgAAAciABAAAAAAABoAEAAAAAAAKgAQAAAAAAA2IAAGEgAQAAIAAAAKABCAQQAAAAIAAAA4AAAHIgAQAAAAAAAaABAAAAAAAAoAEAACAAAAMgAACtIAEAAAAAAABhkQAAEAAAAGABAAAAAAAAYJEIBBAAAABQAAABAAAAcSABAAAAAAAIYDEAAAAAAAhgMQAAAAAABLAAAFEgAQAAAAAAAKABAAAAAAAAAAAAgSABAAAAAAAAoAEIBBAAAAAAAAAAFAAAAAAKBAOAAABxIAEAAAAAAACgAQAAAAAAABQAAAzcxMPjQAAAcSABAAAAAAAAoAEAAAAAAAAUAAAAAAAAA4AAAHEgAQAAAAAAAKABAAAAAAABoAEAAAAAAAOCAABxIAEAAAAAAAKgAQAAEAAAAKABAAAAAAAEgAAAvyABAAAQAAAEYAEAABAAAARn4QAAMAAAAAYBAAAwAAAAFAAAAAAAAANiAABXIAEAABAAAARgIQAAEAAAA4AAAHcgAQAAAAAAAGABAAAAAAAEYCEAABAAAAOAAACnIAEAAAAAAARgIQAAAAAAACQAAAAAAAPwAAAD8AAAA:AAAAABIAAAE2AAAIcgAQAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAABUAAAESAAABNgAACHIAEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAVAAABEgAAATYAAAhyABAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAFQAAATYAAAVyIBAAAAAAAEYCEAAAAAAANgAABYIgEAAAAAAAAUAAAAAAAAA%AAABU1RBVHQAAACOAAAADAAAAAAAAAADAAAAVAAAAAQAAAACAAAABQAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAGAAAAAMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.supersample_resolve_fragData0 = "s2027:AANfdGV4X3NhbXBsZXIAAHRleAAAJEdsb2JhbHMAAAFzY3JlZW5TaXplSW52AAAAAAAIAAAAAgFEWEJDnwBjPXr1:si6:yYW8SYSWAEAAAC4BQAABQAAADQAAABYAQAAjAEAAMABAAA8BQAAUkRFRhwBAAABAAAAmAAAAAMAAAAcAAAAAAT::wABAADoAAAAfAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAACJAAAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAAI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAX3RleF9zYW1wbGVyAHRleAAkR2xvYmFscwCrq40AAAABAAAAsAAAABAAAAAAAAAAAAAAAMgAAAAAAAAACAAAAAIAAADYAAAAAAAAAHNjcmVlblNpemVJbnYAq6sBAAMAAQACAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUnQDAABAAAAA3QAAAFkAAARGjiAAAAAAAAEAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAAzIQEAAAAAAAZQAAA:IgEAAAAAAAaAAAAgMAAABFAAAJ8gAQAAAAAABGEBAAAAAAAEZ%EAAAAAAAAGAQAAAAAAAyAAAN8gAQAAEAAABGhCAAAAAAAAAAAAACQAAAAADAPgAAAAAAAMC%AAAAAEYUEAAAAAAARQAACfIAEAACAAAARgAQAAEAAABGfhAAAAAAAABgEAAAAAAARQAACfIAEAABAAAA5goQAAEAAABGfhAAAAAAAABgEAAAAAAAAAAAB:IAEAAAAAAARg4QAAAAAABGDhAAAgAAAAAAAAfyABAAAAAAAEYOEAABAAAARg4QAAAAAAAyAAAN8gAQAAEAAABGhCAAAAAAAAAAAAACQAAAAAAAAAAAwD4AAAAAAADAvkYUEAAAAAAARQAACfIAEAACAAAARgAQAAEAAABGfhAAAAAAAABgEAAAAAAARQAACfIAEAABAAAA5goQAAEAAABGfhAAAAAAAABgEAAAAAAAAAAAB:IAEAAAAAAARg4QAAAAAABGDhAAAgAAAAAAAAfyABAAAAAAAEYOEAABAAAARg4QAAAAAAAyAAAN8gAQAAEAAABGhCAAAAAAAAAAAAACQAAAAADAPgAAwD4AAMC%AADAvkYUEAAAAAAARQAACfIAEAACAAAARgAQAAEAAABGfhAAAAAAAABgEAAAAAAARQAACfIAEAABAAAA5goQAAEAAABGfhAAAAAAAABgEAAAAAAAAAAAB:IAEAAAAAAARg4QAAAAAABGDhAAAgAAAAAAAAfyABAAAAAAAEYOEAABAAAARg4QAAAAAAAyAAAN8gAQAAEAAABGhCAAAAAAAAAAAAACQAAAAADAPgAAwL4AAMC%AADAPkYUEAAAAAAARQAACfIAEAACAAAARgAQAAEAAABGfhAAAAAAAABgEAAAAAAARQAACfIAEAABAAAA5goQAAEAAABGfhAAAAAAAABgEAAAAAAAAAAAB:IAEAAAAAAARg4QAAAAAABGDhAAAgAAAAAAAAfyABAAAAAAAEYOEAABAAAARg4QAAAAAAA4AAAK8iAQAAAAAABGDhAAAAAAAAJAAAA5juM9OY7jPTmO4z05juM9PgAAAVNUQVR0AAAAFwAAAAMAAAAAAAAAAgAAAA0AAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.taa_pass_fragData0 = "s1744:AAZfdGV4X3NhbXBsZXIAAF9zdmVsb2Nfc2FtcGxlcgABX3RleDJfc2FtcGxlcgACdGV4AABzdmVsb2MAAXRleDIAAgBEWEJDKeNkT984jGchKO:hFr:YmgEAAADYBAAABQAAADQAAACIAQAAvAEAAPABAABcBAAAUkRFRkwBAAAAAAAAAAAAAAYAAAAcAAAAAAT::wABAAAXAQAA3AAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAADpAAAAAwAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAPkAAAADAAAAAAAAAAAAAAAAAAAAAgAAAAEAAAAAAAAABwEAAAIAAAAFAAAABAAAAP::::8AAAAAAQAAAAwAAAALAQAAAgAAAAUAAAAEAAAA:::::wEAAAABAAAADAAAABIBAAACAAAABQAAAAQAAAD:::::AgAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAF9zdmVsb2Nfc2FtcGxlcgBfdGV4Ml9zYW1wbGVyAHRleABzdmVsb2MAdGV4MgBNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUmQCAABAAAAAmQAAAFoAAAMAYBAAAAAAAFoAAAMAYBAAAQAAAFoAAAMAYBAAAgAAAFgYAAQAcBAAAAAAAFVVAABYGAAEAHAQAAEAAABVVQAAWBgABABwEAACAAAAVVUAAGIQAAMyEBAAAAAAAGUAAAPyIBAAAAAAAGgAAAICAAAASAAAC:IAEAAAAAAARhAQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAyAAAMMgAQAAAAAABGABAAAAAAAAJAAAAAAIC:AACAPwAAAAAAAAAARhAQAAAAAABIAAAL8gAQAAAAAABGABAAAAAAAEZ%EAACAAAAAGAQAAIAAAABQAAAAAAAADgAAAeCABAAAAAAADoAEAAAAAAAOgAQAAAAAABIAAAL8gAQAAEAAABGEBAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAqCABAAAAAAADoAEAABAAAAOgAQAAEAAAA6ABCAQQAAAAAAAAA4AAAIggAQAAAAAAA6ABCAgQAAAAAAAAABQAAAzcxMPksAAAWCABAAAAAAADoAEAAAAAAAMgAACoIAEAAAAAAAOgAQgEEAAAAAAAAAAUAAAAAA8EEBQAAAAACAPzQAAAeCABAAAAAAADoAEAAAAAAAAUAAAAAAAAA4AAAHggAQAAAAAAA6ABAAAAAAAAFAAAAAAAA:AAAACHIAEAAAAAAARgIQAAAAAABGAhCAQQAAAAEAAAAyAAAJciAQAAAAAAD2DxAAAAAAAEYCEAAAAAAARgIQAAEAAAA2AAAFgiAQAAAAAAABQAAAAACAPz4AAAFTVEFUdAAAAA8AAAACAAAAAAAAAAIAAAAKAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.world_pass_fragData0 = "s2724:AANfZW52bWFwX3NhbXBsZXIAAGVudm1hcAAAJEdsb2JhbHMAAAFlbnZtYXBTdHJlbmd0aAAAAAAABAAAAAEBRFhCQ3V7gqASVDziYaZvB66DjrMBAAAAvAcAAAUAAAA0AAAAXAEAAJABAADEAQAAQAcAAFJERUYgAQAAAQAAAJwAAAADAAAAHAAAAAAE::8AAQAA7AAAAHwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAjAAAAAIAAAAFAAAABAAAAP::::8AAAAAAQAAAAwAAACTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAF9lbnZtYXBfc2FtcGxlcgBlbnZtYXAAJEdsb2JhbHMAkwAAAAEAAAC0AAAAEAAAAAAAAAAAAAAAzAAAAAAAAAAEAAAAAgAAANwAAAAAAAAAZW52bWFwU3RyZW5ndGgAqwAAAwABAAEAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAABwcAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8AAABTVl9UYXJnZXQAq6tTSERSdAUAAEAAAABdAQAAWQAABEaOIAAAAAAAAQAAAFoAAAMAYBAAAAAAAFgYAAQAcBAAAAAAAFVVAABiEAADchAQAAAAAABlAAAD8iAQAAAAAABoAAACAwAAABAAAAcSABAAAAAAAEYSEAAAAAAARhIQAAAAAABEAAAFEgAQAAAAAAAKABAAAAAAADgAAAdyABAAAAAAAAYAEAAAAAAAZhgQAAAAAAA0AAAJggAQAAAAAAAqABCAgQAAAAAAAAAaABCAgQAAAAAAAAAOAAAKggAQAAAAAAACQAAAAACAPwAAgD8AAIA:AACAPzoAEAAAAAAAMwAACRIAEAABAAAAKgAQgIEAAAAAAAAAGgAQgIEAAAAAAAAAOAAAB4IAEAAAAAAAOgAQAAAAAAAKABAAAQAAADgAAAcSABAAAQAAADoAEAAAAAAAOgAQAAAAAAAyAAAJIgAQAAEAAAAKABAAAQAAAAFAAABfrqo8AUAAADZarr0yAAAJIgAQAAEAAAAKABAAAQAAABoAEAABAAAAAUAAAOJ2OD4yAAAJIgAQAAEAAAAKABAAAQAAABoAEAABAAAAAUAAAAQdqb4yAAAJEgAQAAEAAAAKABAAAQAAABoAEAABAAAAAUAAADj3fz84AAAHIgAQAAEAAAA6ABAAAAAAAAoAEAABAAAAMgAACSIAEAABAAAAGgAQAAEAAAABQAAAAAAAwAFAAADbD8k:MQAACUIAEAABAAAAKgAQgIEAAAAAAAAAGgAQgIEAAAAAAAAAAQAAByIAEAABAAAAKgAQAAEAAAAaABAAAQAAADIAAAmCABAAAAAAADoAEAAAAAAACgAQAAEAAAAaABAAAQAAADEAAAgyABAAAQAAAIYAEAAAAAAAhgAQgEEAAAAAAAAAAQAAByIAEAABAAAAGgAQAAEAAAABQAAA2w9JwAAAAAeCABAAAAAAADoAEAAAAAAAGgAQAAEAAAAzAAAIIgAQAAEAAAAqABAAAAAAABoAEIBBAAAAAAAAADEAAAgiABAAAQAAABoAEAABAAAAGgAQgEEAAAABAAAANAAACCIAEAAAAAAAKgAQAAAAAAAaABCAQQAAAAAAAAAdAAAIIgAQAAAAAAAaABAAAAAAABoAEIBBAAAAAAAAAAEAAAciABAAAAAAABoAEAAAAAAAGgAQAAEAAAA3AAAKIgAQAAAAAAAaABAAAAAAADoAEIBBAAAAAAAAADoAEAAAAAAAAAAAByIAEAAAAAAAGgAQAAAAAAABQAAA2w9JQDgAAAcSABAAAgAAABoAEAAAAAAAAUAAAIP5Ij4yAAAKIgAQAAAAAAAKABCAgQAAAAAAAAABQAAAMG6ZvAFAAAAnFpg9MgAACiIAEAAAAAAAGgAQAAAAAAAKABCAgQAAAAAAAAABQAAAhDRZvjIAAAoiABAAAAAAABoAEAAAAAAACgAQgIEAAAAAAAAAAUAAAKQNyT8AAAAIEgAQAAAAAAAKABCAwQAAAAAAAAABQAAAAACAP0sAAAUSABAAAAAAAAoAEAAAAAAAOAAAB0IAEAAAAAAACgAQAAAAAAAaABAAAAAAADIAAAlCABAAAAAAACoAEAAAAAAAAUAAAAAAAMABQAAA2w9JQAEAAAdCABAAAAAAAAoAEAABAAAAKgAQAAAAAAAyAAAJEgAQAAAAAAAaABAAAAAAAAoAEAAAAAAAKgAQAAAAAAA4AAAHIgAQAAIAAAAKABAAAAAAAAFAAACD%aI%RQAACfIAEAAAAAAARgAQAAIAAABGfhAAAAAAAABgEAAAAAAAOAAACHIgEAAAAAAARgIQAAAAAAAGgCAAAAAAAAAAAAA2AAAFgiAQAAAAAAABQAAAAAAAAD4AAAFTVEFUdAAAACoAAAADAAAAAAAAAAIAAAAiAAAAAAAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.world_pass_vertData0 = "s1256:Am5vcgAAcG9zAAEBJEdsb2JhbHMAAAFTTVZQAAAAAABAAAAABAREWEJD0l76Hh%emb2Zs%cG1Vv3nwEAAACIAwAABQAAADQAAAAAAQAATAEAAKQBAAAMAwAAUkRFRsQAAAABAAAASAAAAAEAAAAcAAAAAAT%:wABAACQAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAkR2xvYmFscwCrq6s8AAAAAQAAAGAAAABAAAAAAAAAAAAAAAB4AAAAAAAAAEAAAAACAAAAgAAAAAAAAABTTVZQAKurqwMAAwAEAAQAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTkQAAAACAAAACAAAADgAAAAAAAAAAAAAAAMAAAAAAAAABwcAADgAAAABAAAAAAAAAAMAAAABAAAABwcAAFRFWENPT1JEAKurq09TR05QAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAAcIAABBAAAAAAAAAAEAAAADAAAAAQAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSYAEAAEAAAQBYAAAAWQAABEaOIAAAAAAABAAAAF8AAANyEBAAAAAAAF8AAANyEBAAAQAAAGUAAANyIBAAAAAAAGcAAATyIBAAAQAAAAEAAABoAAACAgAAADYAAAVyIBAAAAAAAEYSEAAAAAAANgAABXIAEAAAAAAARhIQAAEAAAA2AAAFggAQAAAAAAABQAAAAACAPxEAAAgSABAAAQAAAEYOEAAAAAAARo4gAAAAAAACAAAAEQAACCIAEAABAAAARg4QAAAAAABGjiAAAAAAAAMAAAAAAAAHEgAQAAEAAAAaABAAAQAAAAoAEAABAAAANgAABYIgEAABAAAAGgAQAAEAAAA4AAAHQiAQAAEAAAAKABAAAQAAAAFAAAAAAAA:EQAACBIgEAABAAAARg4QAAAAAABGjiAAAAAAAAAAAAARAAAIIiAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAQAAAD4AAAFTVEFUdAAAAAsAAAACAAAAAAAAAAQAAAAGAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.mouseLockListeners = [];
kha_Window.windows = [];
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) {
			var i = _g1++;
			_g.push(i);
		}
	}
	$r = _g;
	return $r;
}(this));
kha_graphics4_Graphics2.thrown = false;
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_krom_Graphics.mat = (function($this) {
	var $r;
	var this1 = new Float32Array(16);
	$r = this1;
	return $r;
}(this));
zui_Nodes.elementsBaked = false;
zui_Nodes.clipboard = "";
zui_Nodes.boxSelect = false;
zui_Nodes.boxSelectX = 0;
zui_Nodes.boxSelectY = 0;
zui_Nodes.excludeRemove = [];
zui_Themes.dark = { NAME : "Default Dark", FONT_SIZE : 13, ELEMENT_W : 100, ELEMENT_H : 24, ELEMENT_OFFSET : 4, ARROW_SIZE : 5, BUTTON_H : 22, CHECK_SIZE : 15, CHECK_SELECT_SIZE : 8, SCROLL_W : 6, TEXT_OFFSET : 8, TAB_W : 6, FILL_WINDOW_BG : false, FILL_BUTTON_BG : true, FILL_ACCENT_BG : false, WINDOW_BG_COL : -13421773, WINDOW_TINT_COL : -1, ACCENT_COL : -12303292, ACCENT_HOVER_COL : -11974327, ACCENT_SELECT_COL : -10461088, BUTTON_COL : -12171706, BUTTON_TEXT_COL : -1513499, BUTTON_HOVER_COL : -11974327, BUTTON_PRESSED_COL : -15000805, TEXT_COL : -1513499, LABEL_COL : -3618616, SEPARATOR_COL : -14211289, HIGHLIGHT_COL : -14656100, CONTEXT_COL : -14540254, PANEL_BG_COL : -12895429};
zui_Zui.alwaysRedrawWindow = true;
zui_Zui.keyRepeat = true;
zui_Zui.touchControls = false;
zui_Zui.keyRepeatTime = 0.0;
zui_Zui.textToPaste = "";
zui_Zui.textToCopy = "";
zui_Zui.isCut = false;
zui_Zui.isCopy = false;
zui_Zui.isPaste = false;
zui_Zui.copyFrame = 0;
zui_Zui.comboFirst = true;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
